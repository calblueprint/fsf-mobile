var __DEV__=false,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV="production";
(function (global) {
  "use strict";

  global.__r = metroRequire;
  global.__d = define;
  global.__c = clear;
  var modules = clear();
  var EMPTY = {};
  var _ref = {},
      hasOwnProperty = _ref.hasOwnProperty;

  function clear() {
    modules = typeof __NUM_MODULES__ === "number" ? Array(__NUM_MODULES__ | 0) : Object.create(null);
    return modules;
  }

  function define(factory, moduleId, dependencyMap) {
    if (modules[moduleId] != null) {
      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      factory: factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {}
      }
    };
  }

  function metroRequire(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  function metroImportDefault(moduleId) {
    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedDefault !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedDefault;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault = exports && exports.__esModule ? exports.default : exports;
    return modules[moduleIdReallyIsNumber].importedDefault = importedDefault;
  }

  function metroImportAll(moduleId) {
    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedAll !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedAll;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll = undefined;

    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};

      if (exports) {
        for (var _key in exports) {
          if (hasOwnProperty.call(exports, _key)) {
            importedAll[_key] = exports[_key];
          }
        }
      }

      importedAll.default = exports;
    }

    return modules[moduleIdReallyIsNumber].importedAll = importedAll;
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = undefined;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = 65535;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  metroRequire.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }

  metroRequire.packModuleId = packModuleId;
  var hooks = [];

  function registerHook(cb) {
    var hook = {
      cb: cb
    };
    hooks.push(hook);
    return {
      release: function release() {
        for (var i = 0; i < hooks.length; ++i) {
          if (hooks[i] === hook) {
            hooks.splice(i, 1);
            break;
          }
        }
      }
    };
  }

  metroRequire.registerHook = registerHook;

  function loadModuleImplementation(moduleId, module) {
    if (!module && global.__defineModule) {
      global.__defineModule(moduleId);

      module = modules[moduleId];
    }

    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId),
          _segmentId = _unpackModuleId.segmentId,
          _localId = _unpackModuleId.localId;

      nativeRequire(_localId, _segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    module.isInitialized = true;
    var _module = module,
        factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      var _moduleObject = module.publicModule;
      _moduleObject.id = moduleId;

      if (hooks.length > 0) {
        for (var i = 0; i < hooks.length; ++i) {
          hooks[i].cb(moduleId, _moduleObject);
        }
      }

      factory(global, metroRequire, metroImportDefault, metroImportAll, _moduleObject, _moduleObject.exports, dependencyMap);
      {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      return _moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {}
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  Object.assign = function (target, sources) {
    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];

      if (nextSource == null) {
        continue;
      }

      for (var key in nextSource) {
        target[key] = nextSource[key];
      }
    }

    return target;
  };
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isUndefined(arg) {
      return arg === undefined;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = 1;

  function getNativeLogFunction(level) {
    return function () {
      var str;

      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, {
            depth: 10
          });
        }).join(', ');
      }

      var logLevel = level;

      if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        logLevel = LOG_LEVELS.warn;
      }

      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }

      if (groupStack.length) {
        str = groupFormat('', str);
      }

      global.nativeLoggingHook(str, logLevel);
    };
  }

  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  }

  function consoleTablePolyfill(rows) {
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];

      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }

    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }

    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];
    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;

      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    }

    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];

    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }

  var GROUP_PAD = "\u2502";
  var GROUP_OPEN = "\u2510";
  var GROUP_CLOSE = "\u2518";
  var groupStack = [];

  function groupFormat(prefix, msg) {
    return groupStack.join('') + prefix + ' ' + (msg || '');
  }

  function consoleGroupPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }

  function consoleGroupEndPolyfill() {
    groupStack.pop();
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
  }

  if (global.nativeLoggingHook) {
    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill,
      group: consoleGroupPolyfill,
      groupEnd: consoleGroupEndPolyfill
    };
  } else if (!global.console) {
    var log = global.print || function consoleLoggingStub() {};

    global.console = {
      error: log,
      info: log,
      log: log,
      warn: log,
      trace: log,
      debug: log,
      table: log
    };
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return _inGuard;
    },
    guard: function guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      name = name || fun.name || '<generated guard>';

      function guarded() {
        return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  if (Number.EPSILON === undefined) {
    Object.defineProperty(Number, 'EPSILON', {
      value: Math.pow(2, -52)
    });
  }

  if (Number.MAX_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
      value: Math.pow(2, 53) - 1
    });
  }

  if (Number.MIN_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
      value: -(Math.pow(2, 53) - 1)
    });
  }

  if (!Number.isNaN) {
    var globalIsNaN = global.isNaN;
    Object.defineProperty(Number, 'isNaN', {
      configurable: true,
      enumerable: false,
      value: function isNaN(value) {
        return typeof value === 'number' && globalIsNaN(value);
      },
      writable: true
    });
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
      var start = Math.min(Math.max(pos, 0), string.length);
      return string.indexOf(String(search), pos) === start;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var stringLength = string.length;
      var searchString = String(search);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
      var end = Math.min(Math.max(pos, 0), stringLength);
      var start = end - searchString.length;

      if (start < 0) {
        return false;
      }

      return string.lastIndexOf(searchString, start) === start;
    };
  }

  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      count = Number(count) || 0;

      if (count < 0 || count === Infinity) {
        throw RangeError();
      }

      if (count === 1) {
        return string;
      }

      var result = '';

      while (count) {
        if (count & 1) {
          result += string;
        }

        if (count >>= 1) {
          string += string;
        }
      }

      return result;
    };
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.codePointAt) {
    String.prototype.codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length;
      var index = position ? Number(position) : 0;

      if (Number.isNaN(index)) {
        index = 0;
      }

      if (index < 0 || index >= size) {
        return undefined;
      }

      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xdc00 && second <= 0xdfff) {
            return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
          }
        }

      return first;
    };
  }

  if (!String.prototype.padEnd) {
    String.prototype.padEnd = function padEnd(targetLength, padString) {
      targetLength = targetLength >> 0;
      padString = String(typeof padString !== 'undefined' ? padString : ' ');

      if (this.length > targetLength) {
        return String(this);
      } else {
        targetLength = targetLength - this.length;

        if (targetLength > padString.length) {
          padString += padString.repeat(targetLength / padString.length);
        }

        return String(this) + padString.slice(0, targetLength);
      }
    };
  }

  if (!String.prototype.padStart) {
    String.prototype.padStart = function padStart(targetLength, padString) {
      targetLength = targetLength >> 0;
      padString = String(typeof padString !== 'undefined' ? padString : ' ');

      if (this.length > targetLength) {
        return String(this);
      } else {
        targetLength = targetLength - this.length;

        if (targetLength > padString.length) {
          padString += padString.repeat(targetLength / padString.length);
        }

        return padString.slice(0, targetLength) + String(this);
      }
    };
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  function findIndex(predicate, context) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }

    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    var list = Object(this);
    var length = list.length >>> 0;

    for (var i = 0; i < length; i++) {
      if (predicate.call(context, list[i], i, list)) {
        return i;
      }
    }

    return -1;
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: findIndex
    });
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(predicate, context) {
        if (this == null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }

        var index = findIndex.call(this, predicate, context);
        return index === -1 ? undefined : this[index];
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;

        if (len === 0) {
          return false;
        }

        var n = parseInt(arguments[1]) || 0;
        var k;

        if (n >= 0) {
          k = n;
        } else {
          k = len + n;

          if (k < 0) {
            k = 0;
          }
        }

        var currentElement;

        while (k < len) {
          currentElement = O[k];

          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }

          k++;
        }

        return false;
      }
    });
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  if (!Array.from) {
    Array.from = function (arrayLike) {
      if (arrayLike == null) {
        throw new TypeError('Object is null or undefined');
      }

      var mapFn = arguments[1];
      var thisArg = arguments[2];
      var C = this;
      var items = Object(arrayLike);
      var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';
      var mapping = typeof mapFn === 'function';
      var usingIterator = typeof items[symbolIterator] === 'function';
      var key = 0;
      var ret;
      var value;

      if (usingIterator) {
        ret = typeof C === 'function' ? new C() : [];
        var it = items[symbolIterator]();
        var next;

        while (!(next = it.next()).done) {
          value = next.value;

          if (mapping) {
            value = mapFn.call(thisArg, value, key);
          }

          ret[key] = value;
          key += 1;
        }

        ret.length = key;
        return ret;
      }

      var len = items.length;

      if (isNaN(len) || len < 0) {
        len = 0;
      }

      ret = typeof C === 'function' ? new C(len) : new Array(len);

      while (key < len) {
        value = items[key];

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    };
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _App = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _app = _$$_REQUIRE(_dependencyMap[3]);

  var _widgetTask = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  _reactNative.AppRegistry.registerComponent(_app.name, function () {
    return _App.default;
  });

  _reactNative.AppRegistry.registerHeadlessTask('WidgetTask', function () {
    return _widgetTask.default;
  });
},0,[1,2,328,926,927]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  module.exports = _interopRequireDefault;
},1,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var showedListViewDeprecation = false;
  var showedSwipeableListViewDeprecation = false;
  var ReactNative = {
    get AccessibilityInfo() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },

    get ActivityIndicator() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },

    get ART() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },

    get Button() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },

    get CheckBox() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },

    get DatePickerIOS() {
      return _$$_REQUIRE(_dependencyMap[6]);
    },

    get DrawerLayoutAndroid() {
      return _$$_REQUIRE(_dependencyMap[7]);
    },

    get FlatList() {
      return _$$_REQUIRE(_dependencyMap[8]);
    },

    get Image() {
      return _$$_REQUIRE(_dependencyMap[9]);
    },

    get ImageBackground() {
      return _$$_REQUIRE(_dependencyMap[10]);
    },

    get ImageEditor() {
      return _$$_REQUIRE(_dependencyMap[11]);
    },

    get ImageStore() {
      return _$$_REQUIRE(_dependencyMap[12]);
    },

    get InputAccessoryView() {
      return _$$_REQUIRE(_dependencyMap[13]);
    },

    get KeyboardAvoidingView() {
      return _$$_REQUIRE(_dependencyMap[14]);
    },

    get ListView() {
      if (!showedListViewDeprecation) {
        console.warn("ListView is deprecated and will be removed in a future release. See https://fb.me/nolistview for more information");
        showedListViewDeprecation = true;
      }

      return _$$_REQUIRE(_dependencyMap[15]);
    },

    get MaskedViewIOS() {
      return _$$_REQUIRE(_dependencyMap[16]);
    },

    get Modal() {
      return _$$_REQUIRE(_dependencyMap[17]);
    },

    get NavigatorIOS() {
      return _$$_REQUIRE(_dependencyMap[18]);
    },

    get Picker() {
      return _$$_REQUIRE(_dependencyMap[19]);
    },

    get PickerIOS() {
      return _$$_REQUIRE(_dependencyMap[20]);
    },

    get ProgressBarAndroid() {
      return _$$_REQUIRE(_dependencyMap[21]);
    },

    get ProgressViewIOS() {
      return _$$_REQUIRE(_dependencyMap[22]);
    },

    get SafeAreaView() {
      return _$$_REQUIRE(_dependencyMap[23]);
    },

    get ScrollView() {
      return _$$_REQUIRE(_dependencyMap[24]);
    },

    get SectionList() {
      return _$$_REQUIRE(_dependencyMap[25]);
    },

    get SegmentedControlIOS() {
      return _$$_REQUIRE(_dependencyMap[26]);
    },

    get Slider() {
      return _$$_REQUIRE(_dependencyMap[27]);
    },

    get SnapshotViewIOS() {
      return _$$_REQUIRE(_dependencyMap[28]);
    },

    get Switch() {
      return _$$_REQUIRE(_dependencyMap[29]);
    },

    get RefreshControl() {
      return _$$_REQUIRE(_dependencyMap[30]);
    },

    get StatusBar() {
      return _$$_REQUIRE(_dependencyMap[31]);
    },

    get SwipeableFlatList() {
      return _$$_REQUIRE(_dependencyMap[32]);
    },

    get SwipeableListView() {
      if (!showedSwipeableListViewDeprecation) {
        console.warn("ListView and SwipeableListView are deprecated and will be removed in a future release. See https://fb.me/nolistview for more information");
        showedSwipeableListViewDeprecation = true;
      }

      return _$$_REQUIRE(_dependencyMap[33]);
    },

    get TabBarIOS() {
      return _$$_REQUIRE(_dependencyMap[34]);
    },

    get Text() {
      return _$$_REQUIRE(_dependencyMap[35]);
    },

    get TextInput() {
      return _$$_REQUIRE(_dependencyMap[36]);
    },

    get ToastAndroid() {
      return _$$_REQUIRE(_dependencyMap[37]);
    },

    get ToolbarAndroid() {
      return _$$_REQUIRE(_dependencyMap[38]);
    },

    get Touchable() {
      return _$$_REQUIRE(_dependencyMap[39]);
    },

    get TouchableHighlight() {
      return _$$_REQUIRE(_dependencyMap[40]);
    },

    get TouchableNativeFeedback() {
      return _$$_REQUIRE(_dependencyMap[41]);
    },

    get TouchableOpacity() {
      return _$$_REQUIRE(_dependencyMap[42]);
    },

    get TouchableWithoutFeedback() {
      return _$$_REQUIRE(_dependencyMap[43]);
    },

    get View() {
      return _$$_REQUIRE(_dependencyMap[44]);
    },

    get ViewPagerAndroid() {
      return _$$_REQUIRE(_dependencyMap[45]);
    },

    get VirtualizedList() {
      return _$$_REQUIRE(_dependencyMap[46]);
    },

    get WebView() {
      return _$$_REQUIRE(_dependencyMap[47]);
    },

    get ActionSheetIOS() {
      return _$$_REQUIRE(_dependencyMap[48]);
    },

    get Alert() {
      return _$$_REQUIRE(_dependencyMap[49]);
    },

    get AlertIOS() {
      return _$$_REQUIRE(_dependencyMap[50]);
    },

    get Animated() {
      return _$$_REQUIRE(_dependencyMap[51]);
    },

    get AppRegistry() {
      return _$$_REQUIRE(_dependencyMap[52]);
    },

    get AppState() {
      return _$$_REQUIRE(_dependencyMap[53]);
    },

    get AsyncStorage() {
      return _$$_REQUIRE(_dependencyMap[54]);
    },

    get BackAndroid() {
      return _$$_REQUIRE(_dependencyMap[55]);
    },

    get BackHandler() {
      return _$$_REQUIRE(_dependencyMap[56]);
    },

    get CameraRoll() {
      return _$$_REQUIRE(_dependencyMap[57]);
    },

    get Clipboard() {
      return _$$_REQUIRE(_dependencyMap[58]);
    },

    get DatePickerAndroid() {
      return _$$_REQUIRE(_dependencyMap[59]);
    },

    get DeviceInfo() {
      return _$$_REQUIRE(_dependencyMap[60]);
    },

    get Dimensions() {
      return _$$_REQUIRE(_dependencyMap[61]);
    },

    get Easing() {
      return _$$_REQUIRE(_dependencyMap[62]);
    },

    get findNodeHandle() {
      return _$$_REQUIRE(_dependencyMap[63]).findNodeHandle;
    },

    get I18nManager() {
      return _$$_REQUIRE(_dependencyMap[64]);
    },

    get ImagePickerIOS() {
      return _$$_REQUIRE(_dependencyMap[65]);
    },

    get InteractionManager() {
      return _$$_REQUIRE(_dependencyMap[66]);
    },

    get Keyboard() {
      return _$$_REQUIRE(_dependencyMap[67]);
    },

    get LayoutAnimation() {
      return _$$_REQUIRE(_dependencyMap[68]);
    },

    get Linking() {
      return _$$_REQUIRE(_dependencyMap[69]);
    },

    get NativeEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[70]);
    },

    get NetInfo() {
      return _$$_REQUIRE(_dependencyMap[71]);
    },

    get PanResponder() {
      return _$$_REQUIRE(_dependencyMap[72]);
    },

    get PermissionsAndroid() {
      return _$$_REQUIRE(_dependencyMap[73]);
    },

    get PixelRatio() {
      return _$$_REQUIRE(_dependencyMap[74]);
    },

    get PushNotificationIOS() {
      return _$$_REQUIRE(_dependencyMap[75]);
    },

    get Settings() {
      return _$$_REQUIRE(_dependencyMap[76]);
    },

    get Share() {
      return _$$_REQUIRE(_dependencyMap[77]);
    },

    get StatusBarIOS() {
      return _$$_REQUIRE(_dependencyMap[78]);
    },

    get StyleSheet() {
      return _$$_REQUIRE(_dependencyMap[79]);
    },

    get Systrace() {
      return _$$_REQUIRE(_dependencyMap[80]);
    },

    get TimePickerAndroid() {
      return _$$_REQUIRE(_dependencyMap[81]);
    },

    get TVEventHandler() {
      return _$$_REQUIRE(_dependencyMap[82]);
    },

    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[83]);
    },

    get unstable_batchedUpdates() {
      return _$$_REQUIRE(_dependencyMap[63]).unstable_batchedUpdates;
    },

    get Vibration() {
      return _$$_REQUIRE(_dependencyMap[84]);
    },

    get VibrationIOS() {
      return _$$_REQUIRE(_dependencyMap[85]);
    },

    get YellowBox() {
      return _$$_REQUIRE(_dependencyMap[86]);
    },

    get DeviceEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[87]);
    },

    get NativeAppEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[88]);
    },

    get NativeModules() {
      return _$$_REQUIRE(_dependencyMap[89]);
    },

    get Platform() {
      return _$$_REQUIRE(_dependencyMap[90]);
    },

    get processColor() {
      return _$$_REQUIRE(_dependencyMap[91]);
    },

    get requireNativeComponent() {
      return _$$_REQUIRE(_dependencyMap[92]);
    },

    get takeSnapshot() {
      return _$$_REQUIRE(_dependencyMap[93]);
    },

    get ColorPropType() {
      return _$$_REQUIRE(_dependencyMap[94]);
    },

    get EdgeInsetsPropType() {
      return _$$_REQUIRE(_dependencyMap[95]);
    },

    get PointPropType() {
      return _$$_REQUIRE(_dependencyMap[96]);
    },

    get ViewPropTypes() {
      return _$$_REQUIRE(_dependencyMap[97]);
    },

    get Navigator() {
      invariant(false, "Navigator is deprecated and has been removed from this package. It can now be installed and imported from `react-native-deprecated-custom-components` instead of `react-native`. Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html");
    }

  };
  module.exports = ReactNative;
},2,[3,4,42,158,168,251,252,253,220,244,255,257,258,259,260,222,261,263,266,267,268,157,270,271,226,248,272,273,274,275,238,254,277,281,283,169,285,291,292,174,293,181,190,182,74,294,239,295,298,126,127,191,299,309,310,311,305,312,313,314,52,51,217,77,265,315,199,229,230,316,111,317,279,133,50,318,319,320,321,49,22,322,178,40,323,324,325,26,137,5,41,68,147,326,55,171,327,245]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant(...): Second argument must be a string.');
    }
  };

  function invariant(condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return String(args[argIndex++]);
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},3,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _$$_REQUIRE(_dependencyMap[0]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var UIManager = _$$_REQUIRE(_dependencyMap[2]);

  var RCTAccessibilityInfo = NativeModules.AccessibilityInfo;
  var TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    fetch: function fetch() {
      return new Promise(function (resolve, reject) {
        RCTAccessibilityInfo.isTouchExplorationEnabled(function (resp) {
          resolve(resp);
        });
      });
    },
    addEventListener: function addEventListener(eventName, handler) {
      var listener = RCTDeviceEventEmitter.addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {
        handler(enabled);
      });

      _subscriptions.set(handler, listener);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    setAccessibilityFocus: function setAccessibilityFocus(reactTag) {
      UIManager.sendAccessibilityEvent(reactTag, UIManager.AccessibilityEventTypes.typeViewFocused);
    }
  };
  module.exports = AccessibilityInfo;
},4,[5,26,40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[2]);

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = _slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side but wasn't for " + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });

    _extends(module, constants);

    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, "Can't lazily create module without nativeRequireModuleConfig");
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function fn() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(createErrorFromErrorData(errorData));
          });
        });
      };
    } else if (type === 'sync') {
      fn = function fn() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return global.nativeCallSyncHook(moduleID, methodID, args);
      };
    } else {
      fn = function fn() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function createErrorFromErrorData(errorData) {
    var _ref = errorData || {},
        message = _ref.message,
        extraErrorInfo = _objectWithoutProperties(_ref, ["message"]);

    var error = new Error(message);
    error.framesToPop = 1;
    return _extends(error, extraErrorInfo);
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else if (!global.nativeExtensions) {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[5]);

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            }
          });
        }
    });
  }

  module.exports = NativeModules;
},5,[6,8,9,13,3,25]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectWithoutPropertiesLoose = _$$_REQUIRE(_dependencyMap[0]);

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  module.exports = _objectWithoutProperties;
},6,[7]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  module.exports = _objectWithoutPropertiesLoose;
},7,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
},8,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArrayLimit = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableRest = _$$_REQUIRE(_dependencyMap[2]);

  function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
  }

  module.exports = _slicedToArray;
},9,[10,11,12]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  module.exports = _arrayWithHoles;
},10,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  module.exports = _iterableToArrayLimit;
},11,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  module.exports = _nonIterableRest;
},12,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = _$$_REQUIRE(_dependencyMap[0]);

  var BatchedBridge = new MessageQueue();
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},13,[14]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var ErrorUtils = _$$_REQUIRE(_dependencyMap[3]);

  var Systrace = _$$_REQUIRE(_dependencyMap[4]);

  var deepFreezeAndThrowOnMutationInDev = _$$_REQUIRE(_dependencyMap[5]);

  var invariant = _$$_REQUIRE(_dependencyMap[6]);

  var stringifySafe = _$$_REQUIRE(_dependencyMap[7]);

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 131072;
  var DEBUG_INFO_LIMIT = 32;

  var MessageQueue = function () {
    function MessageQueue() {
      _classCallCheck(this, MessageQueue);

      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = {};
      this._failureCallbacks = {};
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = Date.now();
      this._immediatesCallback = null;
      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    _createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
        var _this2 = this;

        var result;

        this.__guard(function () {
          result = _this2.__callFunction(module, method, args);
        });

        return [result, this.flushedQueue()];
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this3 = this;

        this.__guard(function () {
          _this3.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this4 = this;

        this.__guard(function () {
          _this4.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return Date.now() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks[this._callID] = onSucc;
          this._failureCallbacks[this._callID] = onFail;
        }

        this._callID++;

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        this._queue[PARAMS].push(params);

        var now = Date.now();

        if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {}
    }, {
      key: "setImmediatesCallback",
      value: function setImmediatesCallback(fn) {
        this._immediatesCallback = fn;
      }
    }, {
      key: "__guard",
      value: function __guard(fn) {
        if (this.__shouldPauseOnThrow()) {
          fn();
        } else {
          try {
            fn();
          } catch (error) {
            ErrorUtils.reportFatalError(error);
          }
        }
      }
    }, {
      key: "__shouldPauseOnThrow",
      value: function __shouldPauseOnThrow() {
        return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        Systrace.beginEvent('JSTimers.callImmediates()');

        if (this._immediatesCallback != null) {
          this._immediatesCallback();
        }

        Systrace.endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;

        if (this.__spy) {
          Systrace.beginEvent(module + "." + method + "(" + stringifySafe(args) + ")");
        } else {
          Systrace.beginEvent(module + "." + method + "(...)");
        }

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);
        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
        var result = moduleMethods[method].apply(moduleMethods, args);
        Systrace.endEvent();
        return result;
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

        if (!callback) {
          return;
        }

        delete this._successCallbacks[callID];
        delete this._failureCallbacks[callID];
        callback.apply(undefined, _toConsumableArray(args));
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);

    return MessageQueue;
  }();

  module.exports = MessageQueue;
},14,[15,19,20,21,22,23,3,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithoutHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableSpread = _$$_REQUIRE(_dependencyMap[2]);

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }

  module.exports = _toConsumableArray;
},15,[16,17,18]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  module.exports = _arrayWithoutHoles;
},16,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArray(iter) {
    if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  module.exports = _iterableToArray;
},17,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  module.exports = _nonIterableSpread;
},18,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  module.exports = _classCallCheck;
},19,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  module.exports = _createClass;
},20,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},21,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var TRACE_TAG_REACT_APPS = 131072;
  var TRACE_TAG_JS_VM_CALLS = 134217728;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = null;
  var Systrace = {
    installReactHook: function installReactHook() {
      if (_enabled) {}

      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    }
  };
  module.exports = Systrace;
},22,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    return object;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},23,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function stringifySafe(arg) {
    var ret;
    var type = typeof arg;

    if (arg === undefined) {
      ret = 'undefined';
    } else if (arg === null) {
      ret = 'null';
    } else if (type === 'string') {
      ret = '"' + arg + '"';
    } else if (type === 'function') {
      try {
        ret = arg.toString();
      } catch (e) {
        ret = '[function unknown]';
      }
    } else {
      try {
        ret = JSON.stringify(arg);
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            ret = arg.toString();
          } catch (E) {}
        }
      }
    }

    return ret || '["' + type + '" failed to stringify]';
  }

  module.exports = stringifySafe;
},24,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},25,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[6]);

  var EventSubscriptionVendor = _$$_REQUIRE(_dependencyMap[7]);

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    _inherits(RCTDeviceEventEmitter, _EventEmitter);

    function RCTDeviceEventEmitter() {
      var _this;

      _classCallCheck(this, RCTDeviceEventEmitter);

      var sharedSubscriber = new EventSubscriptionVendor();
      _this = _possibleConstructorReturn(this, _getPrototypeOf(RCTDeviceEventEmitter).call(this, sharedSubscriber));
      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    _createClass(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);

    return RCTDeviceEventEmitter;
  }(EventEmitter);

  module.exports = new RCTDeviceEventEmitter();
},26,[19,20,27,30,31,33,35,38]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  var assertThisInitialized = _$$_REQUIRE(_dependencyMap[1]);

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }

    return assertThisInitialized(self);
  }

  module.exports = _possibleConstructorReturn;
},27,[28,29]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof2(obj) {
    if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol") {
      _typeof2 = function _typeof2(obj) {
        return typeof obj;
      };
    } else {
      _typeof2 = function _typeof2(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
      };
    }

    return _typeof2(obj);
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol") {
      module.exports = _typeof = function _typeof(obj) {
        return _typeof2(obj);
      };
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : _typeof2(obj);
      };
    }

    return _typeof(obj);
  }

  module.exports = _typeof;
},28,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  module.exports = _assertThisInitialized;
},29,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  module.exports = _getPrototypeOf;
},30,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  var superPropBase = _$$_REQUIRE(_dependencyMap[1]);

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      module.exports = _get = Reflect.get;
    } else {
      module.exports = _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  module.exports = _get;
},31,[30,32]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  module.exports = _superPropBase;
},32,[30]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }

  module.exports = _inherits;
},33,[34]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  module.exports = _setPrototypeOf;
},34,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var EmitterSubscription = _$$_REQUIRE(_dependencyMap[2]);

  var EventSubscriptionVendor = _$$_REQUIRE(_dependencyMap[3]);

  var emptyFunction = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      _classCallCheck(this, EventEmitter);

      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    _createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          _this.removeCurrentListener();

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);

    return EventEmitter;
  }();

  module.exports = EventEmitter;
},35,[19,20,36,38,39,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var EventSubscription = _$$_REQUIRE(_dependencyMap[5]);

  var EmitterSubscription = function (_EventSubscription) {
    _inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      var _this;

      _classCallCheck(this, EmitterSubscription);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(EmitterSubscription).call(this, subscriber));
      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    _createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);

    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},36,[19,20,27,30,33,37]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      _classCallCheck(this, EventSubscription);

      this.subscriber = subscriber;
    }

    _createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);

    return EventSubscription;
  }();

  module.exports = EventSubscription;
},37,[19,20]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      _classCallCheck(this, EventSubscriptionVendor);

      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    _createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);

    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},38,[19,20,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},39,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _$$_REQUIRE(_dependencyMap[0]);

  var Platform = _$$_REQUIRE(_dependencyMap[1]);

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var UIManager = NativeModules.UIManager;
  invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');
  UIManager.__takeSnapshot = UIManager.takeSnapshot;

  UIManager.takeSnapshot = function () {
    invariant(false, "UIManager.takeSnapshot should not be called directly. Use ReactNative.takeSnapshot instead.");
  };

  if (UIManager.ViewManagerNames) {
    var residual = global.__residual ? global.__residual : function (_, f) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      return f.apply(undefined, args);
    };
    residual('void', function (UIManager, defineLazyObjectProperty) {
      UIManager.ViewManagerNames.forEach(function (viewManagerName) {
        defineLazyObjectProperty(UIManager, viewManagerName, {
          get: function get() {
            return UIManager.getConstantsForViewManager(viewManagerName);
          }
        });
      });
    }, UIManager, defineLazyObjectProperty);
    if (global.__makePartial) global.__makePartial(UIManager);
  }

  module.exports = UIManager;
},40,[5,41,25,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _$$_REQUIRE(_dependencyMap[0]);

  var Platform = {
    OS: 'android',

    get Version() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.Version;
    },

    get isTesting() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.isTesting;
    },

    get isTV() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.uiMode === 'tv';
    },

    select: function select(obj) {
      return 'android' in obj ? obj.android : obj.default;
    }
  };
  module.exports = Platform;
},41,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[4]);

  var View = _$$_REQUIRE(_dependencyMap[5]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[6]);

  var RCTActivityIndicator = _$$_REQUIRE(_dependencyMap[7]);

  var GRAY = '#999999';

  var ActivityIndicator = function ActivityIndicator(props, forwardedRef) {
    var onLayout = props.onLayout,
        style = props.style,
        restProps = _objectWithoutProperties(props, ["onLayout", "style"]);

    var sizeStyle;

    switch (props.size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        break;

      case 'large':
        sizeStyle = styles.sizeLarge;
        break;

      default:
        sizeStyle = {
          height: props.size,
          width: props.size
        };
        break;
    }

    var nativeProps = _objectSpread({}, restProps, {
      ref: forwardedRef,
      style: sizeStyle,
      styleAttr: 'Normal',
      indeterminate: true
    });

    return React.createElement(View, {
      onLayout: onLayout,
      style: StyleSheet.compose(styles.container, style)
    }, React.createElement(RCTActivityIndicator, nativeProps));
  };

  var ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
  ActivityIndicatorWithRef.defaultProps = {
    animating: true,
    color: null,
    hidesWhenStopped: true,
    size: 'small'
  };
  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });
  module.exports = ActivityIndicatorWithRef;
},42,[43,6,41,45,49,74,147,157]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  module.exports = _objectSpread;
},43,[44]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  module.exports = _defineProperty;
},44,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},45,[46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},46,[47]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.6.1
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var k = _$$_REQUIRE(_dependencyMap[0]),
      n = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      p = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      q = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      r = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      t = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      u = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      v = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      w = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      x = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      y = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      z = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      A = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      B = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116,
      C = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function aa(a, b, e, c, d, g, h, f) {
    if (!a) {
      a = undefined;
      if (undefined === b) a = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
        var l = [e, c, d, g, h, f],
            m = 0;
        a = Error(b.replace(/%s/g, function () {
          return l[m++];
        }));
        a.name = "Invariant Violation";
      }
      a.framesToPop = 1;
      throw a;
    }
  }

  function D(a) {
    for (var b = arguments.length - 1, e = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 0; c < b; c++) {
      e += "&args[]=" + encodeURIComponent(arguments[c + 1]);
    }

    aa(false, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", e);
  }

  var E = {
    isMounted: function isMounted() {
      return false;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  },
      F = {};

  function G(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = F;
    this.updater = e || E;
  }

  G.prototype.isReactComponent = {};

  G.prototype.setState = function (a, b) {
    "object" !== typeof a && "function" !== typeof a && null != a ? D("85") : undefined;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  G.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function H() {}

  H.prototype = G.prototype;

  function I(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = F;
    this.updater = e || E;
  }

  var J = I.prototype = new H();
  J.constructor = I;
  k(J, G.prototype);
  J.isPureReactComponent = true;
  var K = {
    current: null,
    currentDispatcher: null
  },
      L = Object.prototype.hasOwnProperty,
      M = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };

  function N(a, b, e) {
    var c = undefined,
        d = {},
        g = null,
        h = null;
    if (null != b) for (c in undefined !== b.ref && (h = b.ref), undefined !== b.key && (g = "" + b.key), b) {
      L.call(b, c) && !M.hasOwnProperty(c) && (d[c] = b[c]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      for (var l = Array(f), m = 0; m < f; m++) {
        l[m] = arguments[m + 2];
      }

      d.children = l;
    }
    if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
      undefined === d[c] && (d[c] = f[c]);
    }
    return {
      $$typeof: p,
      type: a,
      key: g,
      ref: h,
      props: d,
      _owner: K.current
    };
  }

  function ba(a, b) {
    return {
      $$typeof: p,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    };
  }

  function O(a) {
    return "object" === typeof a && null !== a && a.$$typeof === p;
  }

  function escape(a) {
    var b = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var P = /\/+/g,
      Q = [];

  function R(a, b, e, c) {
    if (Q.length) {
      var d = Q.pop();
      d.result = a;
      d.keyPrefix = b;
      d.func = e;
      d.context = c;
      d.count = 0;
      return d;
    }

    return {
      result: a,
      keyPrefix: b,
      func: e,
      context: c,
      count: 0
    };
  }

  function S(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > Q.length && Q.push(a);
  }

  function T(a, b, e, c) {
    var d = typeof a;
    if ("undefined" === d || "boolean" === d) a = null;
    var g = false;
    if (null === a) g = true;else switch (d) {
      case "string":
      case "number":
        g = true;
        break;

      case "object":
        switch (a.$$typeof) {
          case p:
          case q:
            g = true;
        }

    }
    if (g) return e(c, a, "" === b ? "." + U(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
      d = a[h];
      var f = b + U(d, h);
      g += T(d, f, e, c);
    } else if (null === a || "object" !== typeof a ? f = null : (f = C && a[C] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(d = a.next()).done;) {
      d = d.value, f = b + U(d, h++), g += T(d, f, e, c);
    } else "object" === d && (e = "" + a, D("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
    return g;
  }

  function V(a, b, e) {
    return null == a ? 0 : T(a, "", b, e);
  }

  function U(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
  }

  function ca(a, b) {
    a.func.call(a.context, b, a.count++);
  }

  function da(a, b, e) {
    var c = a.result,
        d = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? W(a, c, e, function (a) {
      return a;
    }) : null != a && (O(a) && (a = ba(a, d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(P, "$&/") + "/") + e)), c.push(a));
  }

  function W(a, b, e, c, d) {
    var g = "";
    null != e && (g = ("" + e).replace(P, "$&/") + "/");
    b = R(b, g, c, d);
    V(a, da, b);
    S(b);
  }

  var X = {
    Children: {
      map: function map(a, b, e) {
        if (null == a) return a;
        var c = [];
        W(a, c, null, b, e);
        return c;
      },
      forEach: function forEach(a, b, e) {
        if (null == a) return a;
        b = R(null, null, b, e);
        V(a, ca, b);
        S(b);
      },
      count: function count(a) {
        return V(a, function () {
          return null;
        }, null);
      },
      toArray: function toArray(a) {
        var b = [];
        W(a, b, null, function (a) {
          return a;
        });
        return b;
      },
      only: function only(a) {
        O(a) ? undefined : D("143");
        return a;
      }
    },
    createRef: function createRef() {
      return {
        current: null
      };
    },
    Component: G,
    PureComponent: I,
    createContext: function createContext(a, b) {
      undefined === b && (b = null);
      a = {
        $$typeof: w,
        _calculateChangedBits: b,
        _currentValue: a,
        _currentValue2: a,
        Provider: null,
        Consumer: null
      };
      a.Provider = {
        $$typeof: v,
        _context: a
      };
      return a.Consumer = a;
    },
    forwardRef: function forwardRef(a) {
      return {
        $$typeof: y,
        render: a
      };
    },
    lazy: function lazy(a) {
      return {
        $$typeof: B,
        _ctor: a,
        _status: -1,
        _result: null
      };
    },
    memo: function memo(a, b) {
      return {
        $$typeof: A,
        type: a,
        compare: undefined === b ? null : b
      };
    },
    Fragment: r,
    StrictMode: t,
    Suspense: z,
    createElement: N,
    cloneElement: function cloneElement(a, b, e) {
      null === a || undefined === a ? D("267", a) : undefined;
      var c = undefined,
          d = k({}, a.props),
          g = a.key,
          h = a.ref,
          f = a._owner;

      if (null != b) {
        undefined !== b.ref && (h = b.ref, f = K.current);
        undefined !== b.key && (g = "" + b.key);
        var l = undefined;
        a.type && a.type.defaultProps && (l = a.type.defaultProps);

        for (c in b) {
          L.call(b, c) && !M.hasOwnProperty(c) && (d[c] = undefined === b[c] && undefined !== l ? l[c] : b[c]);
        }
      }

      c = arguments.length - 2;
      if (1 === c) d.children = e;else if (1 < c) {
        l = Array(c);

        for (var m = 0; m < c; m++) {
          l[m] = arguments[m + 2];
        }

        d.children = l;
      }
      return {
        $$typeof: p,
        type: a.type,
        key: g,
        ref: h,
        props: d,
        _owner: f
      };
    },
    createFactory: function createFactory(a) {
      var b = N.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: O,
    version: "16.6.1",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: K,
      assign: k
    }
  };
  X.unstable_ConcurrentMode = x;
  X.unstable_Profiler = u;
  var Y = {
    default: X
  },
      Z = Y && X || Y;
  module.exports = Z.default || Z;
},47,[48]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }

      var test1 = new String('abc');
      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }

      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      }

      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(_extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      return false;
    }
  }

  module.exports = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };
},48,[8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var PixelRatio = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var StyleSheetValidation = _$$_REQUIRE(_dependencyMap[3]);

  var flatten = _$$_REQUIRE(_dependencyMap[4]);

  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }

  var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFill,
    compose: function compose(style1, style2) {
      if (style1 != null && style2 != null) {
        return [style1, style2];
      } else {
        return style1 != null ? style1 : style2;
      }
    },
    flatten: flatten,
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value;

      if (typeof ReactNativeStyleAttributes[property] === 'string') {
        value = {};
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = ReactNativeStyleAttributes[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      ReactNativeStyleAttributes[property] = _objectSpread({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      return obj;
    }
  };
},49,[43,50,53,72,73]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var Dimensions = _$$_REQUIRE(_dependencyMap[2]);

  var PixelRatio = function () {
    function PixelRatio() {
      _classCallCheck(this, PixelRatio);
    }

    _createClass(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);

    return PixelRatio;
  }();

  module.exports = PixelRatio;
},50,[19,20,51]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[5]);

  var invariant = _$$_REQUIRE(_dependencyMap[6]);

  var eventEmitter = new EventEmitter();
  var dimensionsInitialized = false;
  var dimensions = {};

  var Dimensions = function () {
    function Dimensions() {
      _classCallCheck(this, Dimensions);
    }

    _createClass(Dimensions, null, [{
      key: "set",
      value: function set(dims) {
        if (dims && dims.windowPhysicalPixels) {
          dims = JSON.parse(JSON.stringify(dims));
          var windowPhysicalPixels = dims.windowPhysicalPixels;
          dims.window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };
          {
            var screenPhysicalPixels = dims.screenPhysicalPixels;
            dims.screen = {
              width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
              height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
              scale: screenPhysicalPixels.scale,
              fontScale: screenPhysicalPixels.fontScale
            };
            delete dims.screenPhysicalPixels;
          }
          delete dims.windowPhysicalPixels;
        }

        _extends(dimensions, dims);

        if (dimensionsInitialized) {
          eventEmitter.emit('change', {
            window: dimensions.window,
            screen: dimensions.screen
          });
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "get",
      value: function get(dim) {
        invariant(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);

    return Dimensions;
  }();

  var dims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
  var nativeExtensionsEnabled = true;

  if (!dims) {
    var DeviceInfo = _$$_REQUIRE(_dependencyMap[7]);

    dims = DeviceInfo.Dimensions;
    nativeExtensionsEnabled = false;
  }

  invariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');
  Dimensions.set(dims);

  if (!nativeExtensionsEnabled) {
    RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
      Dimensions.set(update);
    });
  }

  module.exports = Dimensions;
},51,[8,19,20,35,41,26,3,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = _$$_REQUIRE(_dependencyMap[0]).DeviceInfo;

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');
  module.exports = DeviceInfo;
},52,[5,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ImageStylePropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var TextStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var processColor = _$$_REQUIRE(_dependencyMap[4]);

  var processTransform = _$$_REQUIRE(_dependencyMap[5]);

  var sizesDiffer = _$$_REQUIRE(_dependencyMap[6]);

  var ReactNativeStyleAttributes = {};

  var _arr = Object.keys(_objectSpread({}, ViewStylePropTypes, TextStylePropTypes, ImageStylePropTypes));

  for (var _i = 0; _i < _arr.length; _i++) {
    var attributeName = _arr[_i];
    ReactNativeStyleAttributes[attributeName] = true;
  }

  ReactNativeStyleAttributes.transform = {
    process: processTransform
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: sizesDiffer
  };
  var colorAttributes = {
    process: processColor
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},53,[43,54,66,67,68,69,71]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var ImageResizeMode = _$$_REQUIRE(_dependencyMap[2]);

  var LayoutPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[5]);

  var TransformPropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var ImageStylePropTypes = _objectSpread({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: ColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });

  module.exports = ImageStylePropTypes;
},54,[43,55,57,59,60,63,64]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _$$_REQUIRE(_dependencyMap[0]);

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},55,[56]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var matchers = getMatchers();
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }

    if (t < 0.5) {
      return q;
    }

    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";

  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var cachedMatchers;

  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }

    return cachedMatchers;
  }

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},56,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = _$$_REQUIRE(_dependencyMap[0]);

  var ImageResizeMode = keyMirror({
    contain: null,
    cover: null,
    stretch: null,
    center: null,
    repeat: null
  });
  module.exports = ImageResizeMode;
},57,[58]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? invariant(false) : undefined;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},58,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap', 'wrap-reverse']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},59,[60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  {
    module.exports = _$$_REQUIRE(_dependencyMap[0])();
  }
},60,[61]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = _$$_REQUIRE(_dependencyMap[0]);

  function emptyFunction() {}

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},61,[62]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},62,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var ShadowPropTypesIOS = {
    shadowColor: ColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = ShadowPropTypesIOS;
},63,[55,60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[1]);

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The transformMatrix style property is deprecated. Use `transform: [{ matrix: ... }]` instead.");
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The decomposedMatrix style property is deprecated. Use `transform: [...]` instead.");
    }
  };

  var TransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = TransformPropTypes;
},64,[60,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = _$$_REQUIRE(_dependencyMap[0]);

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!UIManager[componentName] && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(undefined, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},65,[40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var TextStylePropTypes = _objectSpread({}, ViewStylePropTypes, {
    color: ColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: ColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: ColorPropType,
    textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });

  module.exports = TextStylePropTypes;
},66,[43,55,60,67]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var LayoutPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var ShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[4]);

  var TransformPropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var ViewStylePropTypes = _objectSpread({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderTopColor: ColorPropType,
    borderRightColor: ColorPropType,
    borderBottomColor: ColorPropType,
    borderLeftColor: ColorPropType,
    borderStartColor: ColorPropType,
    borderEndColor: ColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });

  module.exports = ViewStylePropTypes;
},67,[43,55,59,60,63,64]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var normalizeColor = _$$_REQUIRE(_dependencyMap[1]);

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var int32Color = normalizeColor(color);

    if (int32Color === null || int32Color === undefined) {
      return undefined;
    }

    int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;
    {
      int32Color = int32Color | 0x0;
    }
    return int32Color;
  }

  module.exports = processColor;
},68,[41,56]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = _$$_REQUIRE(_dependencyMap[0]);

  var Platform = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var stringifySafe = _$$_REQUIRE(_dependencyMap[3]);

  function processTransform(transform) {
    {
      return transform;
    }
    var result = MatrixMath.createIdentityMatrix();
    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          MatrixMath.multiplyInto(result, result, value);
          break;

        case 'perspective':
          _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = MatrixMath.createIdentityMatrix();
    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);
    MatrixMath.multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  module.exports = processTransform;
},69,[70,41,3,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = _slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = _slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = _slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = _slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);
      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var i = 0; i < 3; i++) {
        translation[i] = matrix[3][i];
      }

      var row = [];

      for (i = 0; i < 3; i++) {
        row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (i = 0; i < 3; i++) {
          scale[i] *= -1;
          row[i][0] *= -1;
          row[i][1] *= -1;
          row[i][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},70,[9,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},71,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var ImageStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var TextStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      _classCallCheck(this, StyleSheetValidation);
    }

    _createClass(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        {
          return;
        }

        for (var prop in styles[name]) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);

    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};
  StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
  module.exports = StyleSheetValidation;
},72,[19,20,54,66,67,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }

    if (!Array.isArray(style)) {
      return style;
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},73,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var TextAncestor = _$$_REQUIRE(_dependencyMap[2]);

  var ViewNativeComponent = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var ViewToExport = ViewNativeComponent;
  module.exports = ViewToExport;
},74,[8,45,75,76,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = React.createContext(false);
},75,[45]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = _$$_REQUIRE(_dependencyMap[0]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[1]);

  var NativeViewComponent = requireNativeComponent('RCTView');
  module.exports = NativeViewComponent;
},76,[77,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative;
  {
    ReactNative = _$$_REQUIRE(_dependencyMap[0]);
  }
  module.exports = ReactNative;
},77,[78]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewConfigRegistry = _$$_REQUIRE(_dependencyMap[2]),
      UIManager = _$$_REQUIRE(_dependencyMap[3]),
      RCTEventEmitter = _$$_REQUIRE(_dependencyMap[4]),
      React = _$$_REQUIRE(_dependencyMap[5]),
      deepDiffer = _$$_REQUIRE(_dependencyMap[6]),
      flattenStyle = _$$_REQUIRE(_dependencyMap[7]),
      TextInputState = _$$_REQUIRE(_dependencyMap[8]);

  var scheduler = _$$_REQUIRE(_dependencyMap[9]),
      ExceptionsManager = _$$_REQUIRE(_dependencyMap[10]);

  function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      condition = undefined;
      if (undefined === format) condition = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
        var args = [a, b, c, d, e, f],
            argIndex = 0;
        condition = Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        condition.name = "Invariant Violation";
      }
      condition.framesToPop = 1;
      throw condition;
    }
  }

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else invariant(false, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."), error = undefined;

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = true);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes$1 = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes$1,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes$1.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes$1.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes$1.selectionChangeShouldSetResponder : eventTypes$1.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes$1.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes$1.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes$1.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes$1.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes$1.responderStart : targetInst ? eventTypes$1.responderMove : depthA ? eventTypes$1.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes$1.responderTerminate : topLevelType ? eventTypes$1.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes$1 = ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes$1 = ReactNativeViewConfigRegistry.customDirectEventTypes,
      ReactNativeBridgeEventPlugin = {
    eventTypes: ReactNativeViewConfigRegistry.eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (null == targetInst) return null;
      var bubbleDispatchConfig = customBubblingEventTypes$1[topLevelType],
          directDispatchConfig = customDirectEventTypes$1[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    }
  };
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });
  var instanceCache = {},
      instanceProps = {};

  function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(false, "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null(target.stateNode, target.type, props);
    }
  }

  function _batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function _flushInteractiveUpdatesImpl() {}

  var isBatching = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) return fn(bookkeeping);
    isBatching = true;

    try {
      return _batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isBatching = false, null !== restoreTarget || null !== restoreQueue) if (_flushInteractiveUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;
      if (events && (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), hasRethrowError)) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
    });
  }

  RCTEventEmitter.register({
    getListener: getListener,
    registrationNames: registrationNameModules,
    _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || undefined === target || 1 > target || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
  };

  getInstanceFromNode = getInstanceFromTag;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    var tag = inst.stateNode._nativeTag;
    undefined === tag && (tag = inst.stateNode.canonical._nativeTag);
    invariant(tag, "All native instances should have a tag.");
    return tag;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
      hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_CONCURRENT_MODE_TYPE:
        return "ConcurrentMode";

      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return "Context.Consumer";

      case REACT_PROVIDER_TYPE:
        return "Context.Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return,
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(false, "Unable to find node on an unmounted component.");
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        child = false;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(3 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }(),
      now$1 = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0;

  function setTimeoutCallback() {
    frameDeadline = now$1() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback();
  }

  function shim$1() {
    invariant(false, "The current renderer does not support hyration. This error is likely caused by a bug in React. Please file an issue.");
  }

  var UPDATE_SIGNAL = {},
      nextReactTag = 3;

  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }

  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) delete instanceCache[node], delete instanceProps[node];else {
      var tag = node._nativeTag;
      delete instanceCache[tag];
      delete instanceProps[tag];

      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }

  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return false;

    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });

    UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return false;
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout,
      BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 2:
        case 16:
        case 0:
        case 1:
        case 5:
        case 8:
        case 13:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          var JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
          break a;

        default:
          JSCompiler_inline_result = "";
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(contextStackCursor.current === emptyContextObject, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      invariant(contextKey in fiber, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || "Unknown", contextKey);
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.firstContextDependency = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.firstContextDependency = current.firstContextDependency;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        return createFiberFromMode(pendingProps, mode | 3, expirationTime, key);

      case REACT_STRICT_MODE_TYPE:
        return createFiberFromMode(pendingProps, mode | 2, expirationTime, key);

      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 4), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.type = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        invariant(false, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = createFiber(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromMode(pendingProps, mode, expirationTime, key) {
    pendingProps = createFiber(8, pendingProps, key, mode);
    mode = 0 === (mode & 1) ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
    pendingProps.elementType = mode;
    pendingProps.type = mode;
    pendingProps.expirationTime = expirationTime;
    return pendingProps;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = createFiber(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function markPendingPriorityLevel(root, expirationTime) {
    root.didError = false;
    var earliestPendingTime = root.earliestPendingTime;
    0 === earliestPendingTime ? root.earliestPendingTime = root.latestPendingTime = expirationTime : earliestPendingTime < expirationTime ? root.earliestPendingTime = expirationTime : root.latestPendingTime > expirationTime && (root.latestPendingTime = expirationTime);
    findNextExpirationTimeToWorkOn(expirationTime, root);
  }

  function markSuspendedPriorityLevel(root, suspendedTime) {
    root.didError = false;
    var latestPingedTime = root.latestPingedTime;
    0 !== latestPingedTime && latestPingedTime >= suspendedTime && (root.latestPingedTime = 0);
    latestPingedTime = root.earliestPendingTime;
    var latestPendingTime = root.latestPendingTime;
    latestPingedTime === suspendedTime ? root.earliestPendingTime = latestPendingTime === suspendedTime ? root.latestPendingTime = 0 : latestPendingTime : latestPendingTime === suspendedTime && (root.latestPendingTime = latestPingedTime);
    latestPingedTime = root.earliestSuspendedTime;
    latestPendingTime = root.latestSuspendedTime;
    0 === latestPingedTime ? root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime : latestPingedTime < suspendedTime ? root.earliestSuspendedTime = suspendedTime : latestPendingTime > suspendedTime && (root.latestSuspendedTime = suspendedTime);
    findNextExpirationTimeToWorkOn(suspendedTime, root);
  }

  function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
    var earliestPendingTime = root.earliestPendingTime;
    root = root.earliestSuspendedTime;
    earliestPendingTime > renderExpirationTime && (renderExpirationTime = earliestPendingTime);
    root > renderExpirationTime && (renderExpirationTime = root);
    return renderExpirationTime;
  }

  function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
    var earliestSuspendedTime = root.earliestSuspendedTime,
        latestSuspendedTime = root.latestSuspendedTime,
        earliestPendingTime = root.earliestPendingTime,
        latestPingedTime = root.latestPingedTime;
    earliestPendingTime = 0 !== earliestPendingTime ? earliestPendingTime : latestPingedTime;
    0 === earliestPendingTime && (0 === completedExpirationTime || latestSuspendedTime < completedExpirationTime) && (earliestPendingTime = latestSuspendedTime);
    completedExpirationTime = earliestPendingTime;
    0 !== completedExpirationTime && earliestSuspendedTime > completedExpirationTime && (completedExpirationTime = earliestSuspendedTime);
    root.nextExpirationTimeToWorkOn = earliestPendingTime;
    root.expirationTime = completedExpirationTime;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime) {
    return {
      expirationTime: expirationTime,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -2049 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;
      updateExpirationTime < renderExpirationTime ? (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), newExpirationTime < updateExpirationTime && (newExpirationTime = updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update)));
      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;
      _updateExpirationTime < renderExpirationTime ? (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), newExpirationTime < _updateExpirationTime && (newExpirationTime = _updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update)));
      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        invariant("function" === typeof _callback3, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback3);

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue = currentValue;
  }

  function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress.firstContextDependency = null;
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };
      null === lastContextDependency ? (invariant(null !== currentlyRenderingFiber, "Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps."), currentlyRenderingFiber.firstContextDependency = lastContextDependency = observedBits) : lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue;
  }

  var NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    return x === y ? 0 !== x || 0 !== y || 1 / x === 1 / y : x !== x && y !== y;
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function readLazyComponentType(lazyComponent) {
    var result = lazyComponent._result;

    switch (lazyComponent._status) {
      case 1:
        return result;

      case 2:
        throw result;

      case 0:
        throw result;

      default:
        throw lazyComponent._status = 0, result = lazyComponent._ctor, result = result(), result.then(function (moduleObject) {
          0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
        }, function (error) {
          0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
        }), lazyComponent._result = result, result;
    }
  }

  var ReactCurrentOwner$4 = ReactSharedInternals.ReactCurrentOwner,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      flushPassiveEffects();
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      flushPassiveEffects();
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      flushPassiveEffects();
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = ReactCurrentOwner$4.currentDispatcher.readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = ReactCurrentOwner$4.currentDispatcher.readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    contextType = workInProgress.updateQueue;
    null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), contextType = workInProgress.updateQueue, null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;
        element && (invariant(1 === element.tag, "Function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", returnFiber);
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      invariant("string" === typeof returnFiber, "Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.", returnFiber);
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(false, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.elementType === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 4 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 7 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber;
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (7 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.elementType === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                  break;
                }
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);
              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          expirationTime = returnFiber.type, invariant(false, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 5:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 6:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = createFiber(5, null, null, 0);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = Component(nextProps, ref);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current$$1) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current$$1 = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current$$1.ref = workInProgress.ref;
      current$$1.return = workInProgress;
      return workInProgress.child = current$$1;
    }

    type = current$$1.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current$$1.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current$$1 = createWorkInProgress(type, nextProps, renderExpirationTime);
    current$$1.ref = workInProgress.ref;
    current$$1.return = workInProgress;
    return workInProgress.child = current$$1;
  }

  function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current$$1 && updateExpirationTime < renderExpirationTime && shallowEqual(current$$1.memoizedProps, nextProps) && current$$1.ref === workInProgress.ref ? bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var unmaskedContext = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = Component(nextProps, unmaskedContext);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = true;else if (null === current$$1) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = ReactCurrentOwner$4.currentDispatcher.readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      oldContext = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldContext = workInProgress.memoizedState);
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
    } else instance = workInProgress.stateNode, oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = ReactCurrentOwner$4.currentDispatcher.readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = instance.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState), oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        nextState = workInProgress.memoizedState;

    if (0 === (workInProgress.effectTag & 64)) {
      nextState = null;
      var nextDidTimeout = false;
    } else nextState = {
      timedOutAt: null !== nextState ? nextState.timedOutAt : 0
    }, nextDidTimeout = true, workInProgress.effectTag &= -65;

    null === current$$1 ? nextDidTimeout ? (nextDidTimeout = nextProps.fallback, nextProps = createFiberFromFragment(null, mode, 0, null), 0 === (workInProgress.mode & 1) && (nextProps.child = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child), mode = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null), nextProps.sibling = mode, renderExpirationTime = nextProps, renderExpirationTime.return = mode.return = workInProgress) : renderExpirationTime = mode = mountChildFibers(workInProgress, null, nextProps.children, renderExpirationTime) : null !== current$$1.memoizedState ? (mode = current$$1.child, current$$1 = mode.sibling, nextDidTimeout ? (renderExpirationTime = nextProps.fallback, nextProps = createWorkInProgress(mode, mode.pendingProps, 0), nextProps.effectTag |= 2, 0 === (workInProgress.mode & 1) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== mode.child && (nextProps.child = nextDidTimeout)), mode = nextProps.sibling = createWorkInProgress(current$$1, renderExpirationTime, current$$1.expirationTime), mode.effectTag |= 2, renderExpirationTime = nextProps, nextProps.childExpirationTime = 0, renderExpirationTime.return = mode.return = workInProgress) : renderExpirationTime = mode = reconcileChildFibers(workInProgress, mode.child, nextProps.children, renderExpirationTime)) : (current$$1 = current$$1.child, nextDidTimeout ? (nextDidTimeout = nextProps.fallback, nextProps = createFiberFromFragment(null, mode, 0, null), nextProps.effectTag |= 2, nextProps.child = current$$1, current$$1.return = nextProps, 0 === (workInProgress.mode & 1) && (nextProps.child = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child), mode = nextProps.sibling = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null), mode.effectTag |= 2, renderExpirationTime = nextProps, nextProps.childExpirationTime = 0, renderExpirationTime.return = mode.return = workInProgress) : mode = renderExpirationTime = reconcileChildFibers(workInProgress, current$$1, nextProps.children, renderExpirationTime));
    workInProgress.memoizedState = nextState;
    workInProgress.child = renderExpirationTime;
    return mode;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.firstContextDependency = current$$1.firstContextDependency);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    invariant(null === current$$1 || workInProgress.child === current$$1.child, "Resuming work not yet implemented.");

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  function beginWork(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;

    if (null !== current$$1 && current$$1.memoizedProps === workInProgress.pendingProps && !didPerformWorkStackCursor.current && updateExpirationTime < renderExpirationTime) {
      switch (workInProgress.tag) {
        case 3:
          pushHostRootContext(workInProgress);
          break;

        case 5:
          pushHostContext(workInProgress);
          break;

        case 1:
          isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
          break;

        case 4:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case 10:
          pushProvider(workInProgress, workInProgress.memoizedProps.value);
          break;

        case 13:
          if (null !== workInProgress.memoizedState) {
            updateExpirationTime = workInProgress.child.childExpirationTime;
            if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
            workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
            return null !== workInProgress ? workInProgress.sibling : null;
          }

      }

      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }

    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        var context = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        context = updateExpirationTime(current$$1, context);
        workInProgress.effectTag |= 1;

        if ("object" === typeof context && null !== context && "function" === typeof context.render && undefined === context.$$typeof) {
          workInProgress.tag = 1;

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;

          workInProgress.memoizedState = null !== context.state && undefined !== context.state ? context.state : null;
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current$$1);
          context.updater = classComponentUpdater;
          workInProgress.stateNode = context;
          context._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current$$1, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, true, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, context, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        context = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        hasContext = workInProgress.pendingProps;
        current$$1 = readLazyComponentType(context);
        workInProgress.type = current$$1;
        context = workInProgress.tag = resolveLazyComponentTag(current$$1);
        hasContext = resolveDefaultProps(current$$1, hasContext);
        getDerivedStateFromProps = undefined;

        switch (context) {
          case 0:
            getDerivedStateFromProps = updateFunctionComponent(null, workInProgress, current$$1, hasContext, renderExpirationTime);
            break;

          case 1:
            getDerivedStateFromProps = updateClassComponent(null, workInProgress, current$$1, hasContext, renderExpirationTime);
            break;

          case 11:
            getDerivedStateFromProps = updateForwardRef(null, workInProgress, current$$1, hasContext, renderExpirationTime);
            break;

          case 14:
            getDerivedStateFromProps = updateMemoComponent(null, workInProgress, current$$1, resolveDefaultProps(current$$1.type, hasContext), updateExpirationTime, renderExpirationTime);
            break;

          default:
            invariant(false, "Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.", current$$1);
        }

        return getDerivedStateFromProps;

      case 0:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateFunctionComponent(current$$1, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateClassComponent(current$$1, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 3:
        return pushHostRootContext(workInProgress), updateExpirationTime = workInProgress.updateQueue, invariant(null !== updateExpirationTime, "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."), context = workInProgress.memoizedState, context = null !== context ? context.element : null, processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime), updateExpirationTime = workInProgress.memoizedState.element, updateExpirationTime === context ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child), workInProgress;

      case 5:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child, workInProgress;

      case 6:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), null;

      case 13:
        return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateForwardRef(current$$1, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 7:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          context = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = context.value;
          pushProvider(workInProgress, hasContext);

          if (null !== getDerivedStateFromProps) {
            var oldValue = getDerivedStateFromProps.value;
            hasContext = oldValue === hasContext && (0 !== oldValue || 1 / oldValue === 1 / hasContext) || oldValue !== oldValue && hasContext !== hasContext ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, hasContext) : 1073741823) | 0;

            if (0 === hasContext) {
              if (getDerivedStateFromProps.children === context.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (getDerivedStateFromProps = workInProgress.child, null !== getDerivedStateFromProps && (getDerivedStateFromProps.return = workInProgress); null !== getDerivedStateFromProps;) {
              oldValue = getDerivedStateFromProps.firstContextDependency;

              if (null !== oldValue) {
                do {
                  if (oldValue.context === updateExpirationTime && 0 !== (oldValue.observedBits & hasContext)) {
                    if (1 === getDerivedStateFromProps.tag) {
                      var nextFiber = createUpdate(renderExpirationTime);
                      nextFiber.tag = 2;
                      enqueueUpdate(getDerivedStateFromProps, nextFiber);
                    }

                    getDerivedStateFromProps.expirationTime < renderExpirationTime && (getDerivedStateFromProps.expirationTime = renderExpirationTime);
                    nextFiber = getDerivedStateFromProps.alternate;
                    null !== nextFiber && nextFiber.expirationTime < renderExpirationTime && (nextFiber.expirationTime = renderExpirationTime);

                    for (var node = getDerivedStateFromProps.return; null !== node;) {
                      nextFiber = node.alternate;
                      if (node.childExpirationTime < renderExpirationTime) node.childExpirationTime = renderExpirationTime, null !== nextFiber && nextFiber.childExpirationTime < renderExpirationTime && (nextFiber.childExpirationTime = renderExpirationTime);else if (null !== nextFiber && nextFiber.childExpirationTime < renderExpirationTime) nextFiber.childExpirationTime = renderExpirationTime;else break;
                      node = node.return;
                    }
                  }

                  nextFiber = getDerivedStateFromProps.child;
                  oldValue = oldValue.next;
                } while (null !== oldValue);
              } else nextFiber = 10 === getDerivedStateFromProps.tag ? getDerivedStateFromProps.type === workInProgress.type ? null : getDerivedStateFromProps.child : getDerivedStateFromProps.child;

              if (null !== nextFiber) nextFiber.return = getDerivedStateFromProps;else for (nextFiber = getDerivedStateFromProps; null !== nextFiber;) {
                if (nextFiber === workInProgress) {
                  nextFiber = null;
                  break;
                }

                getDerivedStateFromProps = nextFiber.sibling;

                if (null !== getDerivedStateFromProps) {
                  getDerivedStateFromProps.return = nextFiber.return;
                  nextFiber = getDerivedStateFromProps;
                  break;
                }

                nextFiber = nextFiber.return;
              }
              getDerivedStateFromProps = nextFiber;
            }
          }

          reconcileChildren(current$$1, workInProgress, context.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return context = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), context = readContext(context, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(context), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return context = workInProgress.type, hasContext = resolveDefaultProps(context.type, workInProgress.pendingProps), updateMemoComponent(current$$1, workInProgress, context, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current$$1 = true, pushContextProvider(workInProgress)) : current$$1 = false, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, context, renderExpirationTime), mountClassInstance(workInProgress, updateExpirationTime, context, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, true, current$$1, renderExpirationTime);

      default:
        invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  var appendAllChildren = undefined,
      updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  appendAllChildren = function appendAllChildren(parent, workInProgress) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag || 6 === node.tag) parent._children.push(node.stateNode);else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function updateHostContainer() {};

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    current.memoizedProps !== newProps && (requiredContext(contextStackCursor$1.current), workInProgress.updateQueue = UPDATE_SIGNAL) && (workInProgress.effectTag |= 4);
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (workInProgress.effectTag |= 4);
  };

  function logCapturedError(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;

    if (error instanceof Error) {
      capturedError = error.message;
      var name = error.name;

      try {
        error.message = (capturedError ? name + ": " + capturedError : name) + "\n\nThis error is located at:" + componentStack;
      } catch (e) {}
    } else error = "string" === typeof error ? Error(error + "\n\nThis error is located at:" + componentStack) : Error("Unspecified error at:" + componentStack);

    ExceptionsManager.handleException(error, false);
  }

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitUnmount(current$$1$jscomp$0) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$$1$jscomp$0);

    switch (current$$1$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = current$$1$jscomp$0.updateQueue;

        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var effect = updateQueue = updateQueue.next;

          do {
            var destroy = effect.destroy;

            if (null !== destroy) {
              var current$$1 = current$$1$jscomp$0;

              try {
                destroy();
              } catch (error) {
                captureCommitPhaseError(current$$1, error);
              }
            }

            effect = effect.next;
          } while (effect !== updateQueue);
        }

        break;

      case 1:
        safelyDetachRef(current$$1$jscomp$0);
        updateQueue = current$$1$jscomp$0.stateNode;
        if ("function" === typeof updateQueue.componentWillUnmount) try {
          updateQueue.props = current$$1$jscomp$0.memoizedProps, updateQueue.state = current$$1$jscomp$0.memoizedState, updateQueue.componentWillUnmount();
        } catch (unmountError) {
          captureCommitPhaseError(current$$1$jscomp$0, unmountError);
        }
        break;

      case 5:
        safelyDetachRef(current$$1$jscomp$0);
        break;

      case 4:
        unmountHostComponents(current$$1$jscomp$0);
    }
  }

  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
  }

  function commitPlacement(finishedWork) {
    a: {
      for (var parent = finishedWork.return; null !== parent;) {
        if (isHostParent(parent)) {
          var parentFiber = parent;
          break a;
        }

        parent = parent.return;
      }

      invariant(false, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      parentFiber = undefined;
    }

    var isContainer = parent = undefined;

    switch (parentFiber.tag) {
      case 5:
        parent = parentFiber.stateNode;
        isContainer = false;
        break;

      case 3:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;

      case 4:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;

      default:
        invariant(false, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
    }

    parentFiber.effectTag & 16 && (parentFiber.effectTag &= -17);

    a: b: for (parentFiber = finishedWork;;) {
      for (; null === parentFiber.sibling;) {
        if (null === parentFiber.return || isHostParent(parentFiber.return)) {
          parentFiber = null;
          break a;
        }

        parentFiber = parentFiber.return;
      }

      parentFiber.sibling.return = parentFiber.return;

      for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag;) {
        if (parentFiber.effectTag & 2) continue b;
        if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child.return = parentFiber, parentFiber = parentFiber.child;
      }

      if (!(parentFiber.effectTag & 2)) {
        parentFiber = parentFiber.stateNode;
        break a;
      }
    }

    for (var node = finishedWork;;) {
      if (5 === node.tag || 6 === node.tag) {
        if (parentFiber) {
          if (isContainer) invariant("number" !== typeof parent, "Container does not support insertBefore operation");else {
            var parentInstance = parent,
                child = node.stateNode,
                beforeChild = parentFiber,
                children = parentInstance._children,
                index = children.indexOf(child);
            0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [], [], ["number" === typeof child ? child : child._nativeTag], [index], []));
          }
        } else isContainer ? (parentInstance = node.stateNode, UIManager.setChildren(parent, ["number" === typeof parentInstance ? parentInstance : parentInstance._nativeTag])) : (parentInstance = parent, child = node.stateNode, children = "number" === typeof child ? child : child._nativeTag, index = parentInstance._children, beforeChild = index.indexOf(child), 0 <= beforeChild ? (index.splice(beforeChild, 1), index.push(child), UIManager.manageChildren(parentInstance._nativeTag, [beforeChild], [index.length - 1], [], [], [])) : (index.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [children], [index.length - 1], [])));
      } else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === finishedWork) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === finishedWork) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function unmountHostComponents(current$$1) {
    for (var node = current$$1, currentParentIsValid = false, currentParent = undefined, currentParentIsContainer = undefined;;) {
      if (!currentParentIsValid) {
        currentParentIsValid = node.return;

        a: for (;;) {
          invariant(null !== currentParentIsValid, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");

          switch (currentParentIsValid.tag) {
            case 5:
              currentParent = currentParentIsValid.stateNode;
              currentParentIsContainer = false;
              break a;

            case 3:
              currentParent = currentParentIsValid.stateNode.containerInfo;
              currentParentIsContainer = true;
              break a;

            case 4:
              currentParent = currentParentIsValid.stateNode.containerInfo;
              currentParentIsContainer = true;
              break a;
          }

          currentParentIsValid = currentParentIsValid.return;
        }

        currentParentIsValid = true;
      }

      if (5 === node.tag || 6 === node.tag) {
        a: for (var root = node, node$jscomp$0 = root;;) {
          if (commitUnmount(node$jscomp$0), null !== node$jscomp$0.child && 4 !== node$jscomp$0.tag) node$jscomp$0.child.return = node$jscomp$0, node$jscomp$0 = node$jscomp$0.child;else {
            if (node$jscomp$0 === root) break;

            for (; null === node$jscomp$0.sibling;) {
              if (null === node$jscomp$0.return || node$jscomp$0.return === root) break a;
              node$jscomp$0 = node$jscomp$0.return;
            }

            node$jscomp$0.sibling.return = node$jscomp$0.return;
            node$jscomp$0 = node$jscomp$0.sibling;
          }
        }

        if (currentParentIsContainer) root = currentParent, recursivelyUncacheFiberNode(node.stateNode), UIManager.manageChildren(root, [], [], [], [], [0]);else {
          root = currentParent;
          var child = node.stateNode;
          recursivelyUncacheFiberNode(child);
          node$jscomp$0 = root._children;
          child = node$jscomp$0.indexOf(child);
          node$jscomp$0.splice(child, 1);
          UIManager.manageChildren(root._nativeTag, [], [], [], [], [child]);
        }
      } else if (4 === node.tag ? (currentParent = node.stateNode.containerInfo, currentParentIsContainer = true) : commitUnmount(node), null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === current$$1) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === current$$1) return;
        node = node.return;
        4 === node.tag && (currentParentIsValid = false);
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        break;

      case 1:
        break;

      case 5:
        var instance = finishedWork.stateNode;

        if (null != instance) {
          var newProps = finishedWork.memoizedProps;
          current$$1 = null !== current$$1 ? current$$1.memoizedProps : newProps;
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          null !== updatePayload && (finishedWork = instance.viewConfig, instanceProps[instance._nativeTag] = newProps, newProps = diffProperties(null, current$$1, newProps, finishedWork.validAttributes), null != newProps && UIManager.updateView(instance._nativeTag, finishedWork.uiViewClassName, newProps));
        }

        break;

      case 6:
        invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
        UIManager.updateView(finishedWork.stateNode, "RCTRawText", {
          text: finishedWork.memoizedProps
        });
        break;

      case 3:
        break;

      case 12:
        break;

      case 13:
        newProps = finishedWork.memoizedState;
        current$$1 = finishedWork;
        null === newProps ? instance = false : (instance = true, current$$1 = finishedWork.child, 0 === newProps.timedOutAt && (newProps.timedOutAt = requestCurrentTime()));
        if (null !== current$$1) a: for (newProps = finishedWork = current$$1;;) {
          if (5 === newProps.tag) {
            if (current$$1 = newProps.stateNode, instance) {
              updatePayload = current$$1.viewConfig;
              var updatePayload$jscomp$0 = diffProperties(null, emptyObject, {
                style: {
                  display: "none"
                }
              }, updatePayload.validAttributes);
              UIManager.updateView(current$$1._nativeTag, updatePayload.uiViewClassName, updatePayload$jscomp$0);
            } else {
              current$$1 = newProps.stateNode;
              updatePayload$jscomp$0 = newProps.memoizedProps;
              updatePayload = current$$1.viewConfig;

              var prevProps = _extends({}, updatePayload$jscomp$0, {
                style: [updatePayload$jscomp$0.style, {
                  display: "none"
                }]
              });

              updatePayload$jscomp$0 = diffProperties(null, prevProps, updatePayload$jscomp$0, updatePayload.validAttributes);
              UIManager.updateView(current$$1._nativeTag, updatePayload.uiViewClassName, updatePayload$jscomp$0);
            }
          } else {
            if (6 === newProps.tag) throw Error("Not yet implemented.");

            if (null !== newProps.child) {
              newProps.child.return = newProps;
              newProps = newProps.child;
              continue;
            }
          }
          if (newProps === finishedWork) break a;

          for (; null === newProps.sibling;) {
            if (null === newProps.return || newProps.return === finishedWork) break a;
            newProps = newProps.return;
          }

          newProps.sibling.return = newProps.return;
          newProps = newProps.sibling;
        }
        break;

      case 17:
        break;

      default:
        invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      onUncaughtError(error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error$jscomp$0 = errorInfo.value;

      expirationTime.payload = function () {
        return getDerivedStateFromError(error$jscomp$0);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var error = errorInfo.value,
          stack = errorInfo.stack;
      logError(fiber, errorInfo);
      this.componentDidCatch(error, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 3:
        return popHostContainer(workInProgress), popTopLevelContextObject(workInProgress), effectTag = workInProgress.effectTag, invariant(0 === (effectTag & 64), "The root failed to unmount after an error. This is likely a bug in React. Please file an issue."), workInProgress.effectTag = effectTag & -2049 | 64, workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return effectTag = workInProgress.effectTag, effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 4:
        return popHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  var DispatcherWithoutHooks = {
    readContext: readContext
  },
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      isWorking = false,
      nextUnitOfWork = null,
      nextRoot = null,
      nextRenderExpirationTime = 0,
      nextLatestAbsoluteTimeoutMs = -1,
      nextRenderDidError = false,
      nextEffect = null,
      isCommitting$1 = false,
      passiveEffectCallbackHandle = null,
      passiveEffectCallback = null,
      legacyErrorBoundariesThatAlreadyFailed = null;

  function resetStack() {
    if (null !== nextUnitOfWork) for (var interruptedWork = nextUnitOfWork.return; null !== interruptedWork;) {
      var interruptedWork$jscomp$0 = interruptedWork;

      switch (interruptedWork$jscomp$0.tag) {
        case 1:
          var childContextTypes = interruptedWork$jscomp$0.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork$jscomp$0);
          break;

        case 3:
          popHostContainer(interruptedWork$jscomp$0);
          popTopLevelContextObject(interruptedWork$jscomp$0);
          break;

        case 5:
          popHostContext(interruptedWork$jscomp$0);
          break;

        case 4:
          popHostContainer(interruptedWork$jscomp$0);
          break;

        case 10:
          popProvider(interruptedWork$jscomp$0);
      }

      interruptedWork = interruptedWork.return;
    }
    nextRoot = null;
    nextRenderExpirationTime = 0;
    nextLatestAbsoluteTimeoutMs = -1;
    nextRenderDidError = false;
    nextUnitOfWork = null;
  }

  function flushPassiveEffects() {
    false;
  }

  function completeUnitOfWork(workInProgress) {
    for (;;) {
      var current$$1 = workInProgress.alternate,
          returnFiber = workInProgress.return,
          siblingFiber = workInProgress.sibling;

      if (0 === (workInProgress.effectTag & 1024)) {
        nextUnitOfWork = workInProgress;

        a: {
          var current = current$$1;
          current$$1 = workInProgress;
          var renderExpirationTime = nextRenderExpirationTime,
              newProps = current$$1.pendingProps;

          switch (current$$1.tag) {
            case 2:
              break;

            case 16:
              break;

            case 15:
            case 0:
              break;

            case 1:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 3:
              popHostContainer(current$$1);
              popTopLevelContextObject(current$$1);
              newProps = current$$1.stateNode;
              newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
              if (null === current || null === current.child) current$$1.effectTag &= -3;
              updateHostContainer(current$$1);
              break;

            case 5:
              popHostContext(current$$1);
              renderExpirationTime = requiredContext(rootInstanceStackCursor.current);
              var type = current$$1.type;
              if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, newProps, renderExpirationTime), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (newProps) {
                current = requiredContext(contextStackCursor$1.current);
                var internalInstanceHandle = current$$1,
                    tag = allocateTag(),
                    viewConfig = ReactNativeViewConfigRegistry.get(type);
                invariant("RCTView" !== type || !current.isInAParentText, "Nesting of <View> within <Text> is not currently supported.");
                var updatePayload = diffProperties(null, emptyObject, newProps, viewConfig.validAttributes);
                UIManager.createView(tag, viewConfig.uiViewClassName, renderExpirationTime, updatePayload);
                viewConfig = new ReactNativeFiberHostComponent(tag, viewConfig);
                instanceCache[tag] = internalInstanceHandle;
                instanceProps[tag] = newProps;
                appendAllChildren(viewConfig, current$$1, false, false);
                finalizeInitialChildren(viewConfig, type, newProps, renderExpirationTime, current) && (current$$1.effectTag |= 4);
                current$$1.stateNode = viewConfig;
                null !== current$$1.ref && (current$$1.effectTag |= 128);
              } else invariant(null !== current$$1.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              break;

            case 6:
              current && null != current$$1.stateNode ? updateHostText$1(current, current$$1, current.memoizedProps, newProps) : ("string" !== typeof newProps && invariant(null !== current$$1.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), current = requiredContext(rootInstanceStackCursor.current), type = requiredContext(contextStackCursor$1.current), renderExpirationTime = current$$1, invariant(type.isInAParentText, "Text strings must be rendered within a <Text> component."), type = allocateTag(), UIManager.createView(type, "RCTRawText", current, {
                text: newProps
              }), instanceCache[type] = current$$1, renderExpirationTime.stateNode = type);
              break;

            case 11:
              break;

            case 13:
              newProps = current$$1.memoizedState;

              if (0 !== (current$$1.effectTag & 64)) {
                current$$1.expirationTime = renderExpirationTime;
                nextUnitOfWork = current$$1;
                break a;
              }

              newProps = null !== newProps;
              type = null !== current && null !== current.memoizedState;
              null !== current && !newProps && type && (current = current.child.sibling, null !== current && reconcileChildFibers(current$$1, current, null, renderExpirationTime));
              if (newProps !== type || 0 === (current$$1.effectTag & 1) && newProps) current$$1.effectTag |= 4;
              break;

            case 7:
              break;

            case 8:
              break;

            case 12:
              break;

            case 4:
              popHostContainer(current$$1);
              updateHostContainer(current$$1);
              break;

            case 10:
              popProvider(current$$1);
              break;

            case 9:
              break;

            case 14:
              break;

            case 17:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
          }

          nextUnitOfWork = null;
        }

        current$$1 = workInProgress;

        if (1 === nextRenderExpirationTime || 1 !== current$$1.childExpirationTime) {
          newProps = 0;

          for (renderExpirationTime = current$$1.child; null !== renderExpirationTime;) {
            type = renderExpirationTime.expirationTime, current = renderExpirationTime.childExpirationTime, type > newProps && (newProps = type), current > newProps && (newProps = current), renderExpirationTime = renderExpirationTime.sibling;
          }

          current$$1.childExpirationTime = newProps;
        }

        if (null !== nextUnitOfWork) return nextUnitOfWork;
        null !== returnFiber && 0 === (returnFiber.effectTag & 1024) && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress.firstEffect), returnFiber.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress : returnFiber.firstEffect = workInProgress, returnFiber.lastEffect = workInProgress));
      } else {
        workInProgress = unwindWork(workInProgress, nextRenderExpirationTime);
        if (null !== workInProgress) return workInProgress.effectTag &= 1023, workInProgress;
        null !== returnFiber && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.effectTag |= 1024);
      }

      if (null !== siblingFiber) return siblingFiber;
      if (null !== returnFiber) workInProgress = returnFiber;else break;
    }

    return null;
  }

  function performUnitOfWork(workInProgress) {
    var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
    workInProgress.memoizedProps = workInProgress.pendingProps;
    null === next && (next = completeUnitOfWork(workInProgress));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function renderRoot(root$jscomp$0, isYieldy) {
    invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
    flushPassiveEffects();
    isWorking = true;
    ReactCurrentOwner$2.currentDispatcher = DispatcherWithoutHooks;
    var expirationTime = root$jscomp$0.nextExpirationTimeToWorkOn;
    if (expirationTime !== nextRenderExpirationTime || root$jscomp$0 !== nextRoot || null === nextUnitOfWork) resetStack(), nextRoot = root$jscomp$0, nextRenderExpirationTime = expirationTime, nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime), root$jscomp$0.pendingCommitExpirationTime = 0;
    var didFatal = false;

    do {
      try {
        if (isYieldy) for (; null !== nextUnitOfWork && !shouldYieldToRenderer();) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        } else for (; null !== nextUnitOfWork;) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } catch (thrownValue) {
        if (lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null, null === nextUnitOfWork) didFatal = true, onUncaughtError(thrownValue);else {
          invariant(null !== nextUnitOfWork, "Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.");
          var sourceFiber = nextUnitOfWork,
              returnFiber = sourceFiber.return;
          if (null === returnFiber) didFatal = true, onUncaughtError(thrownValue);else {
            a: {
              var root = root$jscomp$0,
                  returnFiber$jscomp$0 = returnFiber,
                  sourceFiber$jscomp$0 = sourceFiber,
                  value = thrownValue;
              returnFiber = nextRenderExpirationTime;
              sourceFiber$jscomp$0.effectTag |= 1024;
              sourceFiber$jscomp$0.firstEffect = sourceFiber$jscomp$0.lastEffect = null;

              if (null !== value && "object" === typeof value && "function" === typeof value.then) {
                var thenable = value;
                value = returnFiber$jscomp$0;
                var earliestTimeoutMs = -1,
                    startTimeMs = -1;

                do {
                  if (13 === value.tag) {
                    var current$$1 = value.alternate;

                    if (null !== current$$1 && (current$$1 = current$$1.memoizedState, null !== current$$1)) {
                      startTimeMs = 10 * (1073741822 - current$$1.timedOutAt);
                      break;
                    }

                    current$$1 = value.pendingProps.maxDuration;
                    if ("number" === typeof current$$1) if (0 >= current$$1) earliestTimeoutMs = 0;else if (-1 === earliestTimeoutMs || current$$1 < earliestTimeoutMs) earliestTimeoutMs = current$$1;
                  }

                  value = value.return;
                } while (null !== value);

                value = returnFiber$jscomp$0;

                do {
                  if (current$$1 = 13 === value.tag) current$$1 = undefined === value.memoizedProps.fallback ? false : null === value.memoizedState;

                  if (current$$1) {
                    returnFiber$jscomp$0 = retrySuspendedRoot.bind(null, root, value, sourceFiber$jscomp$0, 0 === (value.mode & 1) ? 1073741823 : returnFiber);
                    thenable.then(returnFiber$jscomp$0, returnFiber$jscomp$0);

                    if (0 === (value.mode & 1)) {
                      value.effectTag |= 64;
                      reconcileChildren(sourceFiber$jscomp$0.alternate, sourceFiber$jscomp$0, null, returnFiber);
                      sourceFiber$jscomp$0.effectTag &= -1025;
                      sourceFiber$jscomp$0.effectTag &= -933;
                      1 === sourceFiber$jscomp$0.tag && null === sourceFiber$jscomp$0.alternate && (sourceFiber$jscomp$0.tag = 17);
                      sourceFiber$jscomp$0.expirationTime = returnFiber;
                      break a;
                    }

                    -1 === earliestTimeoutMs ? root = 1073741823 : (-1 === startTimeMs && (startTimeMs = 10 * (1073741822 - findEarliestOutstandingPriorityLevel(root, returnFiber)) - 5e3), root = startTimeMs + earliestTimeoutMs);
                    0 <= root && nextLatestAbsoluteTimeoutMs < root && (nextLatestAbsoluteTimeoutMs = root);
                    value.effectTag |= 2048;
                    value.expirationTime = returnFiber;
                    break a;
                  }

                  value = value.return;
                } while (null !== value);

                value = Error((getComponentName(sourceFiber$jscomp$0.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber$jscomp$0));
              }

              nextRenderDidError = true;
              value = createCapturedValue(value, sourceFiber$jscomp$0);
              root = returnFiber$jscomp$0;

              do {
                switch (root.tag) {
                  case 3:
                    sourceFiber$jscomp$0 = value;
                    root.effectTag |= 2048;
                    root.expirationTime = returnFiber;
                    returnFiber = createRootErrorUpdate(root, sourceFiber$jscomp$0, returnFiber);
                    enqueueCapturedUpdate(root, returnFiber);
                    break a;

                  case 1:
                    if (sourceFiber$jscomp$0 = value, returnFiber$jscomp$0 = root.type, thenable = root.stateNode, 0 === (root.effectTag & 64) && ("function" === typeof returnFiber$jscomp$0.getDerivedStateFromError || null !== thenable && "function" === typeof thenable.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(thenable)))) {
                      root.effectTag |= 2048;
                      root.expirationTime = returnFiber;
                      returnFiber = createClassErrorUpdate(root, sourceFiber$jscomp$0, returnFiber);
                      enqueueCapturedUpdate(root, returnFiber);
                      break a;
                    }

                }

                root = root.return;
              } while (null !== root);
            }

            nextUnitOfWork = completeUnitOfWork(sourceFiber);
            continue;
          }
        }
      }

      break;
    } while (1);

    isWorking = false;
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = ReactCurrentOwner$2.currentDispatcher = null;
    if (didFatal) nextRoot = null, root$jscomp$0.finishedWork = null;else if (null !== nextUnitOfWork) root$jscomp$0.finishedWork = null;else {
      didFatal = root$jscomp$0.current.alternate;
      invariant(null !== didFatal, "Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.");
      nextRoot = null;

      if (nextRenderDidError) {
        sourceFiber = root$jscomp$0.latestPendingTime;
        returnFiber = root$jscomp$0.latestSuspendedTime;
        root = root$jscomp$0.latestPingedTime;

        if (0 !== sourceFiber && sourceFiber < expirationTime || 0 !== returnFiber && returnFiber < expirationTime || 0 !== root && root < expirationTime) {
          markSuspendedPriorityLevel(root$jscomp$0, expirationTime);
          onSuspend(root$jscomp$0, didFatal, expirationTime, root$jscomp$0.expirationTime, -1);
          return;
        }

        if (!root$jscomp$0.didError && isYieldy) {
          root$jscomp$0.didError = true;
          expirationTime = root$jscomp$0.nextExpirationTimeToWorkOn = expirationTime;
          isYieldy = root$jscomp$0.expirationTime = 1073741823;
          onSuspend(root$jscomp$0, didFatal, expirationTime, isYieldy, -1);
          return;
        }
      }

      isYieldy && -1 !== nextLatestAbsoluteTimeoutMs ? (markSuspendedPriorityLevel(root$jscomp$0, expirationTime), isYieldy = 10 * (1073741822 - findEarliestOutstandingPriorityLevel(root$jscomp$0, expirationTime)), isYieldy < nextLatestAbsoluteTimeoutMs && (nextLatestAbsoluteTimeoutMs = isYieldy), isYieldy = 10 * (1073741822 - requestCurrentTime()), isYieldy = nextLatestAbsoluteTimeoutMs - isYieldy, onSuspend(root$jscomp$0, didFatal, expirationTime, root$jscomp$0.expirationTime, 0 > isYieldy ? 0 : isYieldy)) : (root$jscomp$0.pendingCommitExpirationTime = expirationTime, root$jscomp$0.finishedWork = didFatal);
    }
  }

  function captureCommitPhaseError(sourceFiber, value) {
    for (var fiber = sourceFiber.return; null !== fiber;) {
      switch (fiber.tag) {
        case 1:
          var instance = fiber.stateNode;

          if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
            sourceFiber = createCapturedValue(value, sourceFiber);
            sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
            enqueueUpdate(fiber, sourceFiber);
            scheduleWork(fiber, 1073741823);
            return;
          }

          break;

        case 3:
          sourceFiber = createCapturedValue(value, sourceFiber);
          sourceFiber = createRootErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          scheduleWork(fiber, 1073741823);
          return;
      }

      fiber = fiber.return;
    }

    3 === sourceFiber.tag && (fiber = createCapturedValue(value, sourceFiber), fiber = createRootErrorUpdate(sourceFiber, fiber, 1073741823), enqueueUpdate(sourceFiber, fiber), scheduleWork(sourceFiber, 1073741823));
  }

  function computeExpirationForFiber(currentTime, fiber) {
    isWorking ? currentTime = isCommitting$1 ? 1073741823 : nextRenderExpirationTime : fiber.mode & 1 ? (currentTime = isBatchingInteractiveUpdates ? 1073741822 - 10 * (((1073741822 - currentTime + 15) / 10 | 0) + 1) : 1073741822 - 25 * (((1073741822 - currentTime + 500) / 25 | 0) + 1), null !== nextRoot && currentTime === nextRenderExpirationTime && --currentTime) : currentTime = 1073741823;
    isBatchingInteractiveUpdates && (0 === lowestPriorityPendingInteractiveExpirationTime || currentTime < lowestPriorityPendingInteractiveExpirationTime) && (lowestPriorityPendingInteractiveExpirationTime = currentTime);
    return currentTime;
  }

  function retrySuspendedRoot(root, boundaryFiber, sourceFiber, suspendedTime) {
    var retryTime = root.earliestSuspendedTime;
    var latestSuspendedTime = root.latestSuspendedTime;

    if (0 !== retryTime && suspendedTime <= retryTime && suspendedTime >= latestSuspendedTime) {
      latestSuspendedTime = retryTime = suspendedTime;
      root.didError = false;
      var latestPingedTime = root.latestPingedTime;
      if (0 === latestPingedTime || latestPingedTime > latestSuspendedTime) root.latestPingedTime = latestSuspendedTime;
      findNextExpirationTimeToWorkOn(latestSuspendedTime, root);
    } else retryTime = requestCurrentTime(), retryTime = computeExpirationForFiber(retryTime, boundaryFiber), markPendingPriorityLevel(root, retryTime);

    0 !== (boundaryFiber.mode & 1) && root === nextRoot && nextRenderExpirationTime === suspendedTime && (nextRoot = null);
    scheduleWorkToRoot(boundaryFiber, retryTime);
    0 === (boundaryFiber.mode & 1) && (scheduleWorkToRoot(sourceFiber, retryTime), 1 === sourceFiber.tag && null !== sourceFiber.stateNode && (boundaryFiber = createUpdate(retryTime), boundaryFiber.tag = 2, enqueueUpdate(sourceFiber, boundaryFiber)));
    sourceFiber = root.expirationTime;
    0 !== sourceFiber && requestWork(root, sourceFiber);
  }

  function scheduleWorkToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    return null === root ? null : root;
  }

  function scheduleWork(fiber, expirationTime) {
    fiber = scheduleWorkToRoot(fiber, expirationTime);
    null !== fiber && (!isWorking && 0 !== nextRenderExpirationTime && expirationTime > nextRenderExpirationTime && resetStack(), markPendingPriorityLevel(fiber, expirationTime), isWorking && !isCommitting$1 && nextRoot === fiber || requestWork(fiber, fiber.expirationTime), nestedUpdateCount > NESTED_UPDATE_LIMIT && (nestedUpdateCount = 0, invariant(false, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.")));
  }

  var firstScheduledRoot = null,
      lastScheduledRoot = null,
      callbackExpirationTime = 0,
      callbackID = undefined,
      isRendering = false,
      nextFlushedRoot = null,
      nextFlushedExpirationTime = 0,
      lowestPriorityPendingInteractiveExpirationTime = 0,
      hasUnhandledError = false,
      unhandledError = null,
      isBatchingUpdates = false,
      isUnbatchingUpdates = false,
      isBatchingInteractiveUpdates = false,
      completedBatches = null,
      originalStartTimeMs = now$1(),
      currentRendererTime = 1073741822 - (originalStartTimeMs / 10 | 0),
      currentSchedulerTime = currentRendererTime,
      NESTED_UPDATE_LIMIT = 50,
      nestedUpdateCount = 0,
      lastCommittedRootDuringThisBatch = null;

  function recomputeCurrentRendererTime() {
    currentRendererTime = 1073741822 - ((now$1() - originalStartTimeMs) / 10 | 0);
  }

  function scheduleCallbackWithExpirationTime(root, expirationTime) {
    if (0 !== callbackExpirationTime) {
      if (expirationTime < callbackExpirationTime) return;
      null !== callbackID && (root = callbackID, scheduledCallback = null, clearTimeout(root));
    }

    callbackExpirationTime = expirationTime;
    now$1();
    scheduledCallback = performAsyncWork;
    callbackID = setTimeout(setTimeoutCallback, 1);
  }

  function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
    root.expirationTime = rootExpirationTime;
    0 !== msUntilTimeout || shouldYieldToRenderer() ? 0 < msUntilTimeout && (root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout)) : (root.pendingCommitExpirationTime = suspendedExpirationTime, root.finishedWork = finishedWork);
  }

  function onTimeout(root, finishedWork, suspendedExpirationTime) {
    root.pendingCommitExpirationTime = suspendedExpirationTime;
    root.finishedWork = finishedWork;
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;
    invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.");
    nextFlushedRoot = root;
    nextFlushedExpirationTime = suspendedExpirationTime;
    performWorkOnRoot(root, suspendedExpirationTime, false);
    performWork(1073741823, false);
  }

  function requestCurrentTime() {
    if (isRendering) return currentSchedulerTime;
    findHighestPriorityRoot();
    if (0 === nextFlushedExpirationTime || 1 === nextFlushedExpirationTime) recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime;
    return currentSchedulerTime;
  }

  function requestWork(root, expirationTime) {
    null === root.nextScheduledRoot ? (root.expirationTime = expirationTime, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = root, root.nextScheduledRoot = root) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot)) : expirationTime > root.expirationTime && (root.expirationTime = expirationTime);
    isRendering || (isBatchingUpdates ? isUnbatchingUpdates : 1073741823 === expirationTime ? performWork(1073741823, false) : scheduleCallbackWithExpirationTime(root, expirationTime));
  }

  function findHighestPriorityRoot() {
    var highestPriorityWork = 0,
        highestPriorityRoot = null;
    if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
      var remainingExpirationTime = root.expirationTime;

      if (0 === remainingExpirationTime) {
        invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

        if (root === root.nextScheduledRoot) {
          firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
          break;
        } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
          lastScheduledRoot = previousScheduledRoot;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          root.nextScheduledRoot = null;
          break;
        } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

        root = previousScheduledRoot.nextScheduledRoot;
      } else {
        remainingExpirationTime > highestPriorityWork && (highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root);
        if (root === lastScheduledRoot) break;
        if (1073741823 === highestPriorityWork) break;
        previousScheduledRoot = root;
        root = root.nextScheduledRoot;
      }
    }
    nextFlushedRoot = highestPriorityRoot;
    nextFlushedExpirationTime = highestPriorityWork;
  }

  var didYield = false;

  function shouldYieldToRenderer() {
    return didYield ? true : frameDeadline <= now$1() ? didYield = true : false;
  }

  function performAsyncWork() {
    try {
      if (!shouldYieldToRenderer() && null !== firstScheduledRoot) {
        recomputeCurrentRendererTime();
        var root = firstScheduledRoot;

        do {
          var expirationTime = root.expirationTime;
          0 !== expirationTime && currentRendererTime <= expirationTime && (root.nextExpirationTimeToWorkOn = currentRendererTime);
          root = root.nextScheduledRoot;
        } while (root !== firstScheduledRoot);
      }

      performWork(0, true);
    } finally {
      didYield = false;
    }
  }

  function performWork(minExpirationTime, isYieldy) {
    findHighestPriorityRoot();
    if (isYieldy) for (recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime);) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime), findHighestPriorityRoot(), recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime;
    } else for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && minExpirationTime <= nextFlushedExpirationTime;) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false), findHighestPriorityRoot();
    }
    isYieldy && (callbackExpirationTime = 0, callbackID = null);
    0 !== nextFlushedExpirationTime && scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
    nestedUpdateCount = 0;
    lastCommittedRootDuringThisBatch = null;
    if (null !== completedBatches) for (minExpirationTime = completedBatches, completedBatches = null, isYieldy = 0; isYieldy < minExpirationTime.length; isYieldy++) {
      var batch = minExpirationTime[isYieldy];

      try {
        batch._onComplete();
      } catch (error) {
        hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
      }
    }
    if (hasUnhandledError) throw minExpirationTime = unhandledError, unhandledError = null, hasUnhandledError = false, minExpirationTime;
  }

  function performWorkOnRoot(root, expirationTime, isYieldy) {
    invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
    isRendering = true;

    if (isYieldy) {
      var _finishedWork = root.finishedWork;
      null !== _finishedWork ? completeRoot(root, _finishedWork, expirationTime) : (root.finishedWork = null, _finishedWork = root.timeoutHandle, -1 !== _finishedWork && (root.timeoutHandle = -1, cancelTimeout(_finishedWork)), renderRoot(root, isYieldy), _finishedWork = root.finishedWork, null !== _finishedWork && (shouldYieldToRenderer() ? root.finishedWork = _finishedWork : completeRoot(root, _finishedWork, expirationTime)));
    } else _finishedWork = root.finishedWork, null !== _finishedWork ? completeRoot(root, _finishedWork, expirationTime) : (root.finishedWork = null, _finishedWork = root.timeoutHandle, -1 !== _finishedWork && (root.timeoutHandle = -1, cancelTimeout(_finishedWork)), renderRoot(root, isYieldy), _finishedWork = root.finishedWork, null !== _finishedWork && completeRoot(root, _finishedWork, expirationTime));

    isRendering = false;
  }

  function completeRoot(root, finishedWork$jscomp$0, expirationTime) {
    var firstBatch = root.firstBatch;

    if (null !== firstBatch && firstBatch._expirationTime >= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
      root.finishedWork = finishedWork$jscomp$0;
      root.expirationTime = 0;
      return;
    }

    root.finishedWork = null;
    root === lastCommittedRootDuringThisBatch ? nestedUpdateCount++ : (lastCommittedRootDuringThisBatch = root, nestedUpdateCount = 0);
    isCommitting$1 = isWorking = true;
    invariant(root.current !== finishedWork$jscomp$0, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
    expirationTime = root.pendingCommitExpirationTime;
    invariant(0 !== expirationTime, "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    root.pendingCommitExpirationTime = 0;
    firstBatch = finishedWork$jscomp$0.expirationTime;
    var childExpirationTimeBeforeCommit = finishedWork$jscomp$0.childExpirationTime;
    firstBatch = childExpirationTimeBeforeCommit > firstBatch ? childExpirationTimeBeforeCommit : firstBatch;
    root.didError = false;
    0 === firstBatch ? (root.earliestPendingTime = 0, root.latestPendingTime = 0, root.earliestSuspendedTime = 0, root.latestSuspendedTime = 0, root.latestPingedTime = 0) : (childExpirationTimeBeforeCommit = root.latestPendingTime, 0 !== childExpirationTimeBeforeCommit && (childExpirationTimeBeforeCommit > firstBatch ? root.earliestPendingTime = root.latestPendingTime = 0 : root.earliestPendingTime > firstBatch && (root.earliestPendingTime = root.latestPendingTime)), childExpirationTimeBeforeCommit = root.earliestSuspendedTime, 0 === childExpirationTimeBeforeCommit ? markPendingPriorityLevel(root, firstBatch) : firstBatch < root.latestSuspendedTime ? (root.earliestSuspendedTime = 0, root.latestSuspendedTime = 0, root.latestPingedTime = 0, markPendingPriorityLevel(root, firstBatch)) : firstBatch > childExpirationTimeBeforeCommit && markPendingPriorityLevel(root, firstBatch));
    findNextExpirationTimeToWorkOn(0, root);
    ReactCurrentOwner$2.current = null;
    1 < finishedWork$jscomp$0.effectTag ? null !== finishedWork$jscomp$0.lastEffect ? (finishedWork$jscomp$0.lastEffect.nextEffect = finishedWork$jscomp$0, firstBatch = finishedWork$jscomp$0.firstEffect) : firstBatch = finishedWork$jscomp$0 : firstBatch = finishedWork$jscomp$0.firstEffect;

    for (nextEffect = firstBatch; null !== nextEffect;) {
      childExpirationTimeBeforeCommit = false;
      var error = undefined;

      try {
        for (; null !== nextEffect;) {
          if (nextEffect.effectTag & 256) a: {
            var current$$1 = nextEffect.alternate,
                finishedWork = nextEffect;

            switch (finishedWork.tag) {
              case 0:
              case 11:
              case 15:
                break a;

              case 1:
                if (finishedWork.effectTag & 256 && null !== current$$1) {
                  var prevProps = current$$1.memoizedProps,
                      prevState = current$$1.memoizedState,
                      instance = finishedWork.stateNode,
                      snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }

                break a;

              case 3:
              case 5:
              case 6:
              case 4:
              case 17:
                break a;

              default:
                invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        childExpirationTimeBeforeCommit = true, error = e;
      }

      childExpirationTimeBeforeCommit && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    for (nextEffect = firstBatch; null !== nextEffect;) {
      current$$1 = false;
      prevProps = undefined;

      try {
        for (; null !== nextEffect;) {
          var effectTag = nextEffect.effectTag;

          if (effectTag & 128) {
            var current$$1$jscomp$0 = nextEffect.alternate;

            if (null !== current$$1$jscomp$0) {
              var currentRef = current$$1$jscomp$0.ref;
              null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
            }
          }

          switch (effectTag & 14) {
            case 2:
              commitPlacement(nextEffect);
              nextEffect.effectTag &= -3;
              break;

            case 6:
              commitPlacement(nextEffect);
              nextEffect.effectTag &= -3;
              commitWork(nextEffect.alternate, nextEffect);
              break;

            case 4:
              commitWork(nextEffect.alternate, nextEffect);
              break;

            case 8:
              prevState = nextEffect, unmountHostComponents(prevState), prevState.return = null, prevState.child = null, prevState.alternate && (prevState.alternate.child = null, prevState.alternate.return = null);
          }

          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        current$$1 = true, prevProps = e;
      }

      current$$1 && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, prevProps), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    root.current = finishedWork$jscomp$0;

    for (nextEffect = firstBatch; null !== nextEffect;) {
      effectTag = false;
      current$$1$jscomp$0 = undefined;

      try {
        for (currentRef = expirationTime; null !== nextEffect;) {
          var effectTag$jscomp$0 = nextEffect.effectTag;

          if (effectTag$jscomp$0 & 36) {
            var current$$1$jscomp$1 = nextEffect.alternate;
            current$$1 = nextEffect;
            prevProps = currentRef;

            switch (current$$1.tag) {
              case 0:
              case 11:
              case 15:
                break;

              case 1:
                var instance$jscomp$0 = current$$1.stateNode;
                if (current$$1.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$0.componentDidMount();else {
                  var prevProps$jscomp$0 = current$$1.elementType === current$$1.type ? current$$1$jscomp$1.memoizedProps : resolveDefaultProps(current$$1.type, current$$1$jscomp$1.memoizedProps);
                  instance$jscomp$0.componentDidUpdate(prevProps$jscomp$0, current$$1$jscomp$1.memoizedState, instance$jscomp$0.__reactInternalSnapshotBeforeUpdate);
                }
                var updateQueue = current$$1.updateQueue;
                null !== updateQueue && commitUpdateQueue(current$$1, updateQueue, instance$jscomp$0, prevProps);
                break;

              case 3:
                var _updateQueue = current$$1.updateQueue;

                if (null !== _updateQueue) {
                  prevState = null;
                  if (null !== current$$1.child) switch (current$$1.child.tag) {
                    case 5:
                      prevState = current$$1.child.stateNode;
                      break;

                    case 1:
                      prevState = current$$1.child.stateNode;
                  }
                  commitUpdateQueue(current$$1, _updateQueue, prevState, prevProps);
                }

                break;

              case 5:
                break;

              case 6:
                break;

              case 4:
                break;

              case 12:
                break;

              case 13:
                break;

              case 17:
                break;

              default:
                invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }

          if (effectTag$jscomp$0 & 128) {
            var ref = nextEffect.ref;

            if (null !== ref) {
              var instance$jscomp$1 = nextEffect.stateNode;

              switch (nextEffect.tag) {
                case 5:
                  var instanceToUse = instance$jscomp$1;
                  break;

                default:
                  instanceToUse = instance$jscomp$1;
              }

              "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
            }
          }

          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        effectTag = true, current$$1$jscomp$0 = e;
      }

      effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, current$$1$jscomp$0), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    isWorking = isCommitting$1 = false;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork$jscomp$0.stateNode);
    effectTag$jscomp$0 = finishedWork$jscomp$0.expirationTime;
    finishedWork$jscomp$0 = finishedWork$jscomp$0.childExpirationTime;
    finishedWork$jscomp$0 = finishedWork$jscomp$0 > effectTag$jscomp$0 ? finishedWork$jscomp$0 : effectTag$jscomp$0;
    0 === finishedWork$jscomp$0 && (legacyErrorBoundariesThatAlreadyFailed = null);
    root.expirationTime = finishedWork$jscomp$0;
    root.finishedWork = null;
  }

  function onUncaughtError(error) {
    invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
    nextFlushedRoot.expirationTime = 0;
    hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
  }

  function findHostInstance$1(component) {
    var fiber = component._reactInternalFiber;
    undefined === fiber && ("function" === typeof component.render ? invariant(false, "Unable to find node on an unmounted component.") : invariant(false, "Argument appears to not be a ReactComponent. Keys: %s", Object.keys(component)));
    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime();
    current$$1 = computeExpirationForFiber(currentTime, current$$1);
    currentTime = container.current;

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        invariant(2 === isFiberMountedImpl(parentComponent) && 1 === parentComponent.tag, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        invariant(false, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        parentContext = undefined;
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    callback = createUpdate(current$$1);
    callback.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (callback.callback = container);
    flushPassiveEffects();
    enqueueUpdate(currentTime, callback);
    scheduleWork(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(false, "getInspectorDataForViewTag() is not available in production");
  };

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance$1(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  _batchedUpdatesImpl = function _batchedUpdatesImpl(fn, a) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;

    try {
      return fn(a);
    } finally {
      (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1073741823, false);
    }
  };

  _flushInteractiveUpdatesImpl = function _flushInteractiveUpdatesImpl() {
    isRendering || 0 === lowestPriorityPendingInteractiveExpirationTime || (performWork(lowestPriorityPendingInteractiveExpirationTime, false), lowestPriorityPendingInteractiveExpirationTime = 0);
  };

  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance$1),
    findNodeHandle: findNodeHandle,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = createFiber(3, null, null, 0);
        var root$jscomp$0 = {
          current: root,
          containerInfo: containerTag,
          pendingChildren: null,
          earliestPendingTime: 0,
          latestPendingTime: 0,
          earliestSuspendedTime: 0,
          latestSuspendedTime: 0,
          latestPingedTime: 0,
          didError: false,
          pendingCommitExpirationTime: 0,
          finishedWork: null,
          timeoutHandle: -1,
          context: null,
          pendingContext: null,
          hydrate: false,
          nextExpirationTimeToWorkOn: 0,
          expirationTime: 0,
          firstBatch: null,
          nextScheduledRoot: null
        };
        root = root.stateNode = root$jscomp$0;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 5:
          element = element.child.stateNode;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          },
          measureInWindow: function measureInWindow(callback) {
            UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance) {
              var viewConfig = maybeInstance.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, viewConfig.validAttributes);
              null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance$1),
      computeComponentStackForErrorReporting: function computeComponentStackForErrorReporting(reactTag) {
        return (reactTag = getInstanceFromTag(reactTag)) ? getStackByFiberInDevAndProd(reactTag) : "";
      }
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      }
    }));
  })({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.6.1",
    rendererPackageName: "react-native-renderer"
  });

  var ReactNativeRenderer$2 = {
    default: ReactNativeRenderer
  },
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3.default || ReactNativeRenderer$3;
},78,[8,79,141,40,142,46,143,73,144,145,87]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillObjectProperty = _require.polyfillObjectProperty,
      polyfillGlobal = _require.polyfillGlobal;

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  var _shouldPolyfillCollection = _$$_REQUIRE(_dependencyMap[1]);

  if (_shouldPolyfillCollection('Map')) {
    polyfillGlobal('Map', function () {
      return _$$_REQUIRE(_dependencyMap[2]);
    });
  }

  if (_shouldPolyfillCollection('Set')) {
    polyfillGlobal('Set', function () {
      return _$$_REQUIRE(_dependencyMap[3]);
    });
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = 'production';
  }

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _$$_REQUIRE(_dependencyMap[4]);

    Systrace.installReactHook();
    Systrace.setEnabled(true);
  }

  var ExceptionsManager = _$$_REQUIRE(_dependencyMap[5]);

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _$$_REQUIRE(_dependencyMap[6]);

    ErrorUtils.setGlobalHandler(handleError);
  }

  var ReactNativeVersionCheck = _$$_REQUIRE(_dependencyMap[7]);

  ReactNativeVersionCheck.checkVersions();
  polyfillGlobal('Promise', function () {
    return _$$_REQUIRE(_dependencyMap[8]);
  });
  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;
    return _$$_REQUIRE(_dependencyMap[9]);
  });

  var defineLazyTimer = function defineLazyTimer(name) {
    polyfillGlobal(name, function () {
      return _$$_REQUIRE(_dependencyMap[10])[name];
    });
  };

  defineLazyTimer('setTimeout');
  defineLazyTimer('setInterval');
  defineLazyTimer('setImmediate');
  defineLazyTimer('clearTimeout');
  defineLazyTimer('clearInterval');
  defineLazyTimer('clearImmediate');
  defineLazyTimer('requestAnimationFrame');
  defineLazyTimer('cancelAnimationFrame');
  defineLazyTimer('requestIdleCallback');
  defineLazyTimer('cancelIdleCallback');
  polyfillGlobal('XMLHttpRequest', function () {
    return _$$_REQUIRE(_dependencyMap[11]);
  });
  polyfillGlobal('FormData', function () {
    return _$$_REQUIRE(_dependencyMap[12]);
  });
  polyfillGlobal('fetch', function () {
    return _$$_REQUIRE(_dependencyMap[13]).fetch;
  });
  polyfillGlobal('Headers', function () {
    return _$$_REQUIRE(_dependencyMap[13]).Headers;
  });
  polyfillGlobal('Request', function () {
    return _$$_REQUIRE(_dependencyMap[13]).Request;
  });
  polyfillGlobal('Response', function () {
    return _$$_REQUIRE(_dependencyMap[13]).Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _$$_REQUIRE(_dependencyMap[14]);
  });
  polyfillGlobal('Blob', function () {
    return _$$_REQUIRE(_dependencyMap[15]);
  });
  polyfillGlobal('File', function () {
    return _$$_REQUIRE(_dependencyMap[16]);
  });
  polyfillGlobal('FileReader', function () {
    return _$$_REQUIRE(_dependencyMap[17]);
  });
  polyfillGlobal('URL', function () {
    return _$$_REQUIRE(_dependencyMap[18]);
  });

  if (!global.alert) {
    global.alert = function (text) {
      _$$_REQUIRE(_dependencyMap[19]).alert('Alert', '' + text);
    };
  }

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  polyfillObjectProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
  polyfillObjectProperty(navigator, 'geolocation', function () {
    return _$$_REQUIRE(_dependencyMap[20]);
  });

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[21]);

  BatchedBridge.registerLazyCallableModule('Systrace', function () {
    return _$$_REQUIRE(_dependencyMap[4]);
  });
  BatchedBridge.registerLazyCallableModule('JSTimers', function () {
    return _$$_REQUIRE(_dependencyMap[10]);
  });
  BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
    return _$$_REQUIRE(_dependencyMap[22]);
  });
  BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
    return _$$_REQUIRE(_dependencyMap[23]);
  });
  BatchedBridge.registerLazyCallableModule('RCTLog', function () {
    return _$$_REQUIRE(_dependencyMap[24]);
  });
  BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
    return _$$_REQUIRE(_dependencyMap[25]);
  });
  BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
    return _$$_REQUIRE(_dependencyMap[26]);
  });
  BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
    return _$$_REQUIRE(_dependencyMap[27]);
  });
  BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
    return _$$_REQUIRE(_dependencyMap[28]);
  });

  global.__fetchSegment = function (segmentId, options, callback) {
    var _require2 = _$$_REQUIRE(_dependencyMap[29]),
        SegmentFetcher = _require2.SegmentFetcher;

    if (!SegmentFetcher) {
      throw new Error("SegmentFetcher is missing. Please ensure that it is included as a NativeModule.");
    }

    SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  };
},79,[80,81,82,86,22,87,21,91,93,98,99,104,118,119,121,115,123,124,125,126,128,13,134,135,136,26,137,138,140,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[1]);

  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }

  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},80,[43,25]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _shouldActuallyPolyfillES6Collection(collectionName) {
    var Collection = global[collectionName];

    if (Collection == null) {
      return true;
    }

    if (typeof global.Symbol !== 'function') {
      return true;
    }

    var proto = Collection.prototype;
    return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
  }

  var cache = {};

  function _shouldPolyfillES6Collection(collectionName) {
    var result = cache[collectionName];

    if (result !== undefined) {
      return result;
    }

    result = _shouldActuallyPolyfillES6Collection(collectionName);
    cache[collectionName] = result;
    return result;
  }

  module.exports = _shouldPolyfillES6Collection;
},81,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _shouldPolyfillES6Collection = _$$_REQUIRE(_dependencyMap[2]);

  var guid = _$$_REQUIRE(_dependencyMap[3]);

  var isNode = _$$_REQUIRE(_dependencyMap[4]);

  var toIterator = _$$_REQUIRE(_dependencyMap[5]);

  module.exports = function (global, undefined) {
    if (!_shouldPolyfillES6Collection('Map')) {
      return global.Map;
    }

    var KIND_KEY = 'key';
    var KIND_VALUE = 'value';
    var KIND_KEY_VALUE = 'key+value';
    var KEY_PREFIX = '$map_';
    var SECRET_SIZE_PROP;
    var OLD_IE_HASH_PREFIX = 'IE_HASH_';

    var Map = function () {
      function Map(iterable) {
        _classCallCheck(this, Map);

        if (!isObject(this)) {
          throw new TypeError('Wrong map object type.');
        }

        initMap(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            if (!isObject(next.value)) {
              throw new TypeError('Expected iterable items to be pair objects.');
            }

            this.set(next.value[0], next.value[1]);
          }
        }
      }

      _createClass(Map, [{
        key: "clear",
        value: function clear() {
          initMap(this);
        }
      }, {
        key: "has",
        value: function has(key) {
          var index = getIndex(this, key);
          return !!(index != null && this._mapData[index]);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            this._mapData[index][1] = value;
          } else {
            index = this._mapData.push([key, value]) - 1;
            setIndex(this, key, index);
            {
              this.size += 1;
            }
          }

          return this;
        }
      }, {
        key: "get",
        value: function get(key) {
          var index = getIndex(this, key);

          if (index == null) {
            return undefined;
          } else {
            return this._mapData[index][1];
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            setIndex(this, key, undefined);
            this._mapData[index] = undefined;
            {
              this.size -= 1;
            }
            return true;
          } else {
            return false;
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          return new MapIterator(this, KIND_KEY_VALUE);
        }
      }, {
        key: "keys",
        value: function keys() {
          return new MapIterator(this, KIND_KEY);
        }
      }, {
        key: "values",
        value: function values() {
          return new MapIterator(this, KIND_VALUE);
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback must be callable.');
          }

          var boundCallback = callback.bind(thisArg || undefined);
          var mapData = this._mapData;

          for (var i = 0; i < mapData.length; i++) {
            var entry = mapData[i];

            if (entry != null) {
              boundCallback(entry[1], entry[0], this);
            }
          }
        }
      }]);

      return Map;
    }();

    Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

    var MapIterator = function () {
      function MapIterator(map, kind) {
        _classCallCheck(this, MapIterator);

        if (!(isObject(map) && map._mapData)) {
          throw new TypeError('Object is not a map.');
        }

        if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
          throw new Error('Invalid iteration kind.');
        }

        this._map = map;
        this._nextIndex = 0;
        this._kind = kind;
      }

      _createClass(MapIterator, [{
        key: "next",
        value: function next() {
          if (!this instanceof Map) {
            throw new TypeError('Expected to be called on a MapIterator.');
          }

          var map = this._map;
          var index = this._nextIndex;
          var kind = this._kind;

          if (map == null) {
            return createIterResultObject(undefined, true);
          }

          var entries = map._mapData;

          while (index < entries.length) {
            var record = entries[index];
            index += 1;
            this._nextIndex = index;

            if (record) {
              if (kind === KIND_KEY) {
                return createIterResultObject(record[0], false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(record[1], false);
              } else if (kind) {
                return createIterResultObject(record, false);
              }
            }
          }

          this._map = undefined;
          return createIterResultObject(undefined, true);
        }
      }]);

      return MapIterator;
    }();

    MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
      return this;
    };

    function getIndex(map, key) {
      if (isObject(key)) {
        var hash = getHash(key);
        return map._objectIndex[hash];
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          return map._stringIndex[prefixedKey];
        } else {
          return map._otherIndex[prefixedKey];
        }
      }
    }

    function setIndex(map, key, index) {
      var shouldDelete = index == null;

      if (isObject(key)) {
        var hash = getHash(key);

        if (shouldDelete) {
          delete map._objectIndex[hash];
        } else {
          map._objectIndex[hash] = index;
        }
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          if (shouldDelete) {
            delete map._stringIndex[prefixedKey];
          } else {
            map._stringIndex[prefixedKey] = index;
          }
        } else {
          if (shouldDelete) {
            delete map._otherIndex[prefixedKey];
          } else {
            map._otherIndex[prefixedKey] = index;
          }
        }
      }
    }

    function initMap(map) {
      map._mapData = [];
      map._objectIndex = {};
      map._stringIndex = {};
      map._otherIndex = {};
      map.size = 0;
    }

    function isObject(o) {
      return o != null && (typeof o === 'object' || typeof o === 'function');
    }

    function createIterResultObject(value, done) {
      return {
        value: value,
        done: done
      };
    }

    var isES5 = function () {
      try {
        Object.defineProperty({}, 'x', {});
        return true;
      } catch (e) {
        return false;
      }
    }();

    function isExtensible(o) {
      if (!isES5) {
        return true;
      } else {
        return Object.isExtensible(o);
      }
    }

    function getIENodeHash(node) {
      var uniqueID;

      switch (node.nodeType) {
        case 1:
          uniqueID = node.uniqueID;
          break;

        case 9:
          uniqueID = node.documentElement.uniqueID;
          break;

        default:
          return null;
      }

      if (uniqueID) {
        return OLD_IE_HASH_PREFIX + uniqueID;
      } else {
        return null;
      }
    }

    var getHash = function () {
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      var hashProperty = guid();
      var hashCounter = 0;
      return function getHash(o) {
        if (o[hashProperty]) {
          return o[hashProperty];
        } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
          return o.propertyIsEnumerable[hashProperty];
        } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
          return getIENodeHash(o);
        } else if (!isES5 && o[hashProperty]) {
          return o[hashProperty];
        }

        if (isExtensible(o)) {
          hashCounter += 1;

          if (isES5) {
            Object.defineProperty(o, hashProperty, {
              enumerable: false,
              writable: false,
              configurable: false,
              value: hashCounter
            });
          } else if (o.propertyIsEnumerable) {
            o.propertyIsEnumerable = function () {
              return propIsEnumerable.apply(this, arguments);
            };

            o.propertyIsEnumerable[hashProperty] = hashCounter;
          } else if (isNode(o)) {
            o[hashProperty] = hashCounter;
          } else {
            throw new Error('Unable to set a non-enumerable property on object.');
          }

          return hashCounter;
        } else {
          throw new Error('Non-extensible objects are not allowed as keys.');
        }
      };
    }();

    return Map;
  }(Function('return this')());
},82,[19,20,81,83,84,85]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function guid() {
    return 'f' + (Math.random() * 1073741824).toString(16).replace('.', '');
  }

  module.exports = guid;
},83,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;
},84,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VAL = 'key+value';
  var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';

  var toIterator = function () {
    if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
      return function () {
        var ArrayIterator = function () {
          function ArrayIterator(array, kind) {
            _classCallCheck(this, ArrayIterator);

            if (!Array.isArray(array)) {
              throw new TypeError('Object is not an Array');
            }

            this._iteratedObject = array;
            this._kind = kind;
            this._nextIndex = 0;
          }

          _createClass(ArrayIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof ArrayIterator) {
                throw new TypeError('Object is not an ArrayIterator');
              }

              if (this._iteratedObject == null) {
                return createIterResultObject(undefined, true);
              }

              var array = this._iteratedObject;
              var len = this._iteratedObject.length;
              var index = this._nextIndex;
              var kind = this._kind;

              if (index >= len) {
                this._iteratedObject = undefined;
                return createIterResultObject(undefined, true);
              }

              this._nextIndex = index + 1;

              if (kind === KIND_KEY) {
                return createIterResultObject(index, false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(array[index], false);
              } else if (kind === KIND_KEY_VAL) {
                return createIterResultObject([index, array[index]], false);
              }
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);

          return ArrayIterator;
        }();

        var StringIterator = function () {
          function StringIterator(string) {
            _classCallCheck(this, StringIterator);

            if (typeof string !== 'string') {
              throw new TypeError('Object is not a string');
            }

            this._iteratedString = string;
            this._nextIndex = 0;
          }

          _createClass(StringIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof StringIterator) {
                throw new TypeError('Object is not a StringIterator');
              }

              if (this._iteratedString == null) {
                return createIterResultObject(undefined, true);
              }

              var index = this._nextIndex;
              var s = this._iteratedString;
              var len = s.length;

              if (index >= len) {
                this._iteratedString = undefined;
                return createIterResultObject(undefined, true);
              }

              var ret;
              var first = s.charCodeAt(index);

              if (first < 0xd800 || first > 0xdbff || index + 1 === len) {
                ret = s[index];
              } else {
                var second = s.charCodeAt(index + 1);

                if (second < 0xdc00 || second > 0xdfff) {
                  ret = s[index];
                } else {
                  ret = s[index] + s[index + 1];
                }
              }

              this._nextIndex = index + ret.length;
              return createIterResultObject(ret, false);
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);

          return StringIterator;
        }();

        function createIterResultObject(value, done) {
          return {
            value: value,
            done: done
          };
        }

        return function (object, kind) {
          if (typeof object === 'string') {
            return new StringIterator(object);
          } else if (Array.isArray(object)) {
            return new ArrayIterator(object, kind || KIND_VALUE);
          } else {
            return object[ITERATOR_SYMBOL]();
          }
        };
      }();
    } else {
      return function (object) {
        return object[ITERATOR_SYMBOL]();
      };
    }
  }();

  _extends(toIterator, {
    KIND_KEY: KIND_KEY,
    KIND_VALUE: KIND_VALUE,
    KIND_KEY_VAL: KIND_KEY_VAL,
    ITERATOR_SYMBOL: ITERATOR_SYMBOL
  });

  module.exports = toIterator;
},85,[8,19,20]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var Map = _$$_REQUIRE(_dependencyMap[2]);

  var _shouldPolyfillES6Collection = _$$_REQUIRE(_dependencyMap[3]);

  var toIterator = _$$_REQUIRE(_dependencyMap[4]);

  module.exports = function (global) {
    if (!_shouldPolyfillES6Collection('Set')) {
      return global.Set;
    }

    var Set = function () {
      function Set(iterable) {
        _classCallCheck(this, Set);

        if (this == null || typeof this !== 'object' && typeof this !== 'function') {
          throw new TypeError('Wrong set object type.');
        }

        initSet(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            this.add(next.value);
          }
        }
      }

      _createClass(Set, [{
        key: "add",
        value: function add(value) {
          this._map.set(value, value);

          this.size = this._map.size;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          initSet(this);
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var ret = this._map.delete(value);

          this.size = this._map.size;
          return ret;
        }
      }, {
        key: "entries",
        value: function entries() {
          return this._map.entries();
        }
      }, {
        key: "forEach",
        value: function forEach(callback) {
          var thisArg = arguments[1];

          var it = this._map.keys();

          var next;

          while (!(next = it.next()).done) {
            callback.call(thisArg, next.value, next.value, this);
          }
        }
      }, {
        key: "has",
        value: function has(value) {
          return this._map.has(value);
        }
      }, {
        key: "values",
        value: function values() {
          return this._map.values();
        }
      }]);

      return Set;
    }();

    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;
    Set.prototype.keys = Set.prototype.values;

    function initSet(set) {
      set._map = new Map();
      set.size = set._map.size;
    }

    return Set;
  }(Function('return this')());
},86,[19,20,82,81,85]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var exceptionID = 0;

  function reportException(e, isFatal) {
    var _require = _$$_REQUIRE(_dependencyMap[0]),
        ExceptionsManager = _require.ExceptionsManager;

    if (ExceptionsManager) {
      var parseErrorStack = _$$_REQUIRE(_dependencyMap[1]);

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;

      if (isFatal) {
        ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
      } else {
        ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
      }
    }
  }

  function handleException(e, isFatal) {
    if (!e.message) {
      e = new Error(e);
    }

    if (console._errorOriginal) {
      console._errorOriginal(e.message);
    } else {
      console.error(e.message);
    }

    reportException(e, isFatal);
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false);
    } else {
      var stringifySafe = _$$_REQUIRE(_dependencyMap[2]);

      var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');

      if (str.slice(0, 10) === '"Warning: ') {
        return;
      }

      var error = new Error('console.error: ' + str);
      error.framesToPop = 1;
      reportException(error, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter
  };
},87,[5,88,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = _$$_REQUIRE(_dependencyMap[0]);

    var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);
    var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;

    while (framesToPop--) {
      stack.shift();
    }

    return stack;
  }

  module.exports = parseErrorStack;
},88,[89]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},89,[90]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var UNKNOWN_FUNCTION = '<unknown>';
  var StackTraceParser = {
    parse: function parse(stackString) {
      var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
          gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
          node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
          lines = stackString.split('\n'),
          stack = [],
          parts,
          element;

      for (var i = 0, j = lines.length; i < j; ++i) {
        if (parts = gecko.exec(lines[i])) {
          element = {
            'file': parts[3],
            'methodName': parts[1] || UNKNOWN_FUNCTION,
            'lineNumber': +parts[4],
            'column': parts[5] ? +parts[5] : null
          };
        } else if (parts = chrome.exec(lines[i])) {
          element = {
            'file': parts[2],
            'methodName': parts[1] || UNKNOWN_FUNCTION,
            'lineNumber': +parts[3],
            'column': parts[4] ? +parts[4] : null
          };
        } else if (parts = node.exec(lines[i])) {
          element = {
            'file': parts[2],
            'methodName': parts[1] || UNKNOWN_FUNCTION,
            'lineNumber': +parts[3],
            'column': parts[4] ? +parts[4] : null
          };
        } else {
          continue;
        }

        stack.push(element);
      }

      return stack;
    }
  };
  module.exports = StackTraceParser;
},90,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      PlatformConstants = _require.PlatformConstants;

  var ReactNativeVersion = _$$_REQUIRE(_dependencyMap[1]);

  exports.checkVersions = function checkVersions() {
    if (!PlatformConstants) {
      return;
    }

    var nativeVersion = PlatformConstants.reactNativeVersion;

    if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(ReactNativeVersion.version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease !== null ? "-" + version.prerelease : '');
  }
},91,[5,92]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 57,
    patch: 5,
    prerelease: null
  };
},92,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;
},93,[94]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  Promise.prototype["finally"] = function (onSettled) {
    return this.then(onSettled, onSettled);
  };

  module.exports = Promise;
},94,[95,97]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._65 = 1;
    p._55 = value;
    return p;
  }

  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._65 === 3) {
              val = val._55;
            }

            if (val._65 === 1) return res(i, val._55);
            if (val._65 === 2) reject(val._55);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      values.forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},95,[96]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._40 = 0;
    this._65 = 0;
    this._55 = null;
    this._72 = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._37 = null;
  Promise._87 = null;
  Promise._61 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._65 === 3) {
      self = self._55;
    }

    if (Promise._37) {
      Promise._37(self);
    }

    if (self._65 === 0) {
      if (self._40 === 0) {
        self._40 = 1;
        self._72 = deferred;
        return;
      }

      if (self._40 === 1) {
        self._40 = 2;
        self._72 = [self._72, deferred];
        return;
      }

      self._72.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._65 === 1) {
          resolve(deferred.promise, self._55);
        } else {
          reject(deferred.promise, self._55);
        }

        return;
      }

      var ret = tryCallOne(cb, self._55);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._65 = 3;
        self._55 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._65 = 1;
    self._55 = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._65 = 2;
    self._55 = newValue;

    if (Promise._87) {
      Promise._87(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._40 === 1) {
      handle(self, self._72);
      self._72 = null;
    }

    if (self._40 === 2) {
      for (var i = 0; i < self._72.length; i++) {
        handle(self, self._72[i]);
      }

      self._72 = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},96,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;

  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},97,[96]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this;
  }() || Function("return this")());
},98,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var Systrace = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var _require = _$$_REQUIRE(_dependencyMap[3]),
      Timing = _require.Timing;

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[4]);

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = _$$_REQUIRE(_dependencyMap[5]);
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 16.666666666666668;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60000;
  var IS_ANDROID = true;
  var ANDROID_LONG_TIMER_MESSAGE = "Setting a timer for a long period of time, i.e. multiple minutes, is a performance and correctness issue on Android as it keeps the timer module awake, and timers can only be called when the app is in the foreground. See https://github.com/facebook/react-native/issues/12981 for more info.";
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var identifiers = [];
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    _$$_REQUIRE(_dependencyMap[6])(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }
  }

  function _callImmediatesPass() {
    if (immediates.length > 0) {
      var passImmediates = immediates.slice();
      immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        _callTimer(passImmediates[i], 0);
      }
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    identifiers[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      _clearIndex(index);

      var type = types[index];

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        Timing.deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      Timing.createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      Timing.createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      Timing.createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            Timing.setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks.slice();
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };
  var ExportedJSTimers;

  if (!Timing) {
    console.warn("Timing native module is not available, can't set timers.");
    ExportedJSTimers = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    ExportedJSTimers = JSTimers;
  }

  BatchedBridge.setImmediatesCallback(ExportedJSTimers.callImmediates.bind(ExportedJSTimers));
  module.exports = ExportedJSTimers;
},99,[41,22,3,5,13,100,103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var performance = _$$_REQUIRE(_dependencyMap[0]);

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},100,[101]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _$$_REQUIRE(_dependencyMap[0]);

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},101,[102]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},102,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _$$_REQUIRE(_dependencyMap[0]);

  var warning = emptyFunction;
  module.exports = warning;
},103,[39]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

  var _get = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var EventTarget = _$$_REQUIRE(_dependencyMap[7]);

  var RCTNetworking = _$$_REQUIRE(_dependencyMap[8]);

  var base64 = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var warning = _$$_REQUIRE(_dependencyMap[11]);

  var BlobManager = _$$_REQUIRE(_dependencyMap[12]);

  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    _inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      _classCallCheck(this, XMLHttpRequestEventTarget);

      return _possibleConstructorReturn(this, _getPrototypeOf(XMLHttpRequestEventTarget).apply(this, arguments));
    }

    return XMLHttpRequestEventTarget;
  }(EventTarget.apply(undefined, REQUEST_EVENTS));

  var XMLHttpRequest = function (_EventTarget2) {
    _inherits(XMLHttpRequest, _EventTarget2);

    _createClass(XMLHttpRequest, null, [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    function XMLHttpRequest() {
      var _this;

      _classCallCheck(this, XMLHttpRequest);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(XMLHttpRequest).call(this));
      _this.UNSENT = UNSENT;
      _this.OPENED = OPENED;
      _this.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this.readyState = UNSENT;
      _this.status = 0;
      _this.timeout = 0;
      _this.withCredentials = true;
      _this.upload = new XMLHttpRequestEventTarget();
      _this._aborted = false;
      _this._hasError = false;
      _this._method = null;
      _this._response = '';
      _this._url = null;
      _this._timedOut = false;
      _this._trackingName = 'unknown';
      _this._incrementalEvents = false;

      _this._reset();

      return _this;
    }

    _createClass(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this2 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
          return _this2.__didUploadProgress.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
          return _this2.__didReceiveResponse.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
          return _this2.__didReceiveData.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this2.__didReceiveIncrementalData.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this2.__didReceiveDataProgress.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
          return _this2.__didCompleteResponse.apply(_this2, _toConsumableArray(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }

        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }

        invariant(this._method, 'Request method needs to be defined.');
        invariant(this._url, 'Request URL needs to be defined.');
        RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        _get(_getPrototypeOf(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The response type cannot be set after the request has been sent.");
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          warning(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");
          return;
        }

        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");

        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }

        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;

          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else if (this._response === '') {
              this._cachedResponse = null;
            } else {
              throw new Error("Invalid response for blob: " + this._response);
            }

            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }]);

    return XMLHttpRequest;
  }(EventTarget.apply(undefined, _toConsumableArray(XHR_EVENTS)));

  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  module.exports = XMLHttpRequest;
},104,[15,31,20,19,27,30,33,105,109,114,3,103,116]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Commons = _$$_REQUIRE(_dependencyMap[0]);

  var CustomEventTarget = _$$_REQUIRE(_dependencyMap[1]);

  var EventWrapper = _$$_REQUIRE(_dependencyMap[2]);

  var LISTENERS = Commons.LISTENERS;
  var CAPTURE = Commons.CAPTURE;
  var BUBBLE = Commons.BUBBLE;
  var ATTRIBUTE = Commons.ATTRIBUTE;
  var newNode = Commons.newNode;
  var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
  var createEventWrapper = EventWrapper.createEventWrapper;
  var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;
  var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

  var EventTarget = module.exports = function EventTarget() {
    if (this instanceof EventTarget) {
      Object.defineProperty(this, LISTENERS, {
        value: Object.create(null)
      });
    } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(EventTarget, arguments[0]);
    } else if (arguments.length > 0) {
      var types = Array(arguments.length);

      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }

      return defineCustomEventTarget(EventTarget, types);
    } else {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
    constructor: {
      value: EventTarget,
      writable: true,
      configurable: true
    },
    addEventListener: {
      value: function addEventListener(type, listener, capture) {
        if (listener == null) {
          return false;
        }

        if (typeof listener !== "function" && typeof listener !== "object") {
          throw new TypeError("\"listener\" is not an object.");
        }

        var kind = capture ? CAPTURE : BUBBLE;
        var node = this[LISTENERS][type];

        if (node == null) {
          this[LISTENERS][type] = newNode(listener, kind);
          return true;
        }

        var prev = null;

        while (node != null) {
          if (node.listener === listener && node.kind === kind) {
            return false;
          }

          prev = node;
          node = node.next;
        }

        prev.next = newNode(listener, kind);
        return true;
      },
      configurable: true,
      writable: true
    },
    removeEventListener: {
      value: function removeEventListener(type, listener, capture) {
        if (listener == null) {
          return false;
        }

        var kind = capture ? CAPTURE : BUBBLE;
        var prev = null;
        var node = this[LISTENERS][type];

        while (node != null) {
          if (node.listener === listener && node.kind === kind) {
            if (prev == null) {
              this[LISTENERS][type] = node.next;
            } else {
              prev.next = node.next;
            }

            return true;
          }

          prev = node;
          node = node.next;
        }

        return false;
      },
      configurable: true,
      writable: true
    },
    dispatchEvent: {
      value: function dispatchEvent(event) {
        var node = this[LISTENERS][event.type];

        if (node == null) {
          return true;
        }

        var wrapped = createEventWrapper(event, this);

        while (node != null) {
          if (typeof node.listener === "function") {
            node.listener.call(this, wrapped);
          } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
            node.listener.handleEvent(wrapped);
          }

          if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
            break;
          }

          node = node.next;
        }

        return !wrapped.defaultPrevented;
      },
      configurable: true,
      writable: true
    }
  });
},105,[106,107,108]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
    return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
  };
  exports.LISTENERS = createUniqueKey("listeners");
  exports.CAPTURE = 1;
  exports.BUBBLE = 2;
  exports.ATTRIBUTE = 3;

  exports.newNode = function newNode(listener, kind) {
    return {
      listener: listener,
      kind: kind,
      next: null
    };
  };
},106,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Commons = _$$_REQUIRE(_dependencyMap[0]);

  var LISTENERS = Commons.LISTENERS;
  var ATTRIBUTE = Commons.ATTRIBUTE;
  var newNode = Commons.newNode;

  function getAttributeListener(eventTarget, type) {
    var node = eventTarget[LISTENERS][type];

    while (node != null) {
      if (node.kind === ATTRIBUTE) {
        return node.listener;
      }

      node = node.next;
    }

    return null;
  }

  function setAttributeListener(eventTarget, type, listener) {
    if (typeof listener !== "function" && typeof listener !== "object") {
      listener = null;
    }

    var prev = null;
    var node = eventTarget[LISTENERS][type];

    while (node != null) {
      if (node.kind === ATTRIBUTE) {
        if (prev == null) {
          eventTarget[LISTENERS][type] = node.next;
        } else {
          prev.next = node.next;
        }
      } else {
        prev = node;
      }

      node = node.next;
    }

    if (listener != null) {
      if (prev == null) {
        eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
      } else {
        prev.next = newNode(listener, ATTRIBUTE);
      }
    }
  }

  exports.defineCustomEventTarget = function (EventTargetBase, types) {
    function EventTarget() {
      EventTargetBase.call(this);
    }

    var descripter = {
      constructor: {
        value: EventTarget,
        configurable: true,
        writable: true
      }
    };
    types.forEach(function (type) {
      descripter["on" + type] = {
        get: function get() {
          return getAttributeListener(this, type);
        },
        set: function set(listener) {
          setAttributeListener(this, type, listener);
        },
        configurable: true,
        enumerable: true
      };
    });
    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);
    return EventTarget;
  };
},107,[106]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = _$$_REQUIRE(_dependencyMap[0]).createUniqueKey;

  var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");
  var CANCELED_FLAG = createUniqueKey("canceled_flag");
  var ORIGINAL_EVENT = createUniqueKey("original_event");
  var wrapperPrototypeDefinition = Object.freeze({
    stopPropagation: Object.freeze({
      value: function stopPropagation() {
        var e = this[ORIGINAL_EVENT];

        if (typeof e.stopPropagation === "function") {
          e.stopPropagation();
        }
      },
      writable: true,
      configurable: true
    }),
    stopImmediatePropagation: Object.freeze({
      value: function stopImmediatePropagation() {
        this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;
        var e = this[ORIGINAL_EVENT];

        if (typeof e.stopImmediatePropagation === "function") {
          e.stopImmediatePropagation();
        }
      },
      writable: true,
      configurable: true
    }),
    preventDefault: Object.freeze({
      value: function preventDefault() {
        if (this.cancelable === true) {
          this[CANCELED_FLAG] = true;
        }

        var e = this[ORIGINAL_EVENT];

        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
      },
      writable: true,
      configurable: true
    }),
    defaultPrevented: Object.freeze({
      get: function defaultPrevented() {
        return this[CANCELED_FLAG];
      },
      enumerable: true,
      configurable: true
    })
  });
  exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

  exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
    var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
    var propertyDefinition = {
      type: {
        value: event.type,
        enumerable: true
      },
      target: {
        value: eventTarget,
        enumerable: true
      },
      currentTarget: {
        value: eventTarget,
        enumerable: true
      },
      eventPhase: {
        value: 2,
        enumerable: true
      },
      bubbles: {
        value: Boolean(event.bubbles),
        enumerable: true
      },
      cancelable: {
        value: Boolean(event.cancelable),
        enumerable: true
      },
      timeStamp: {
        value: timeStamp,
        enumerable: true
      },
      isTrusted: {
        value: false,
        enumerable: true
      }
    };
    propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {
      value: false,
      writable: true
    };
    propertyDefinition[CANCELED_FLAG] = {
      value: false,
      writable: true
    };
    propertyDefinition[ORIGINAL_EVENT] = {
      value: event
    };

    if (typeof event.detail !== "undefined") {
      propertyDefinition.detail = {
        value: event.detail,
        enumerable: true
      };
    }

    return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
  };
},108,[106]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var MissingNativeEventEmitterShim = _$$_REQUIRE(_dependencyMap[6]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[7]);

  var RCTNetworkingNative = _$$_REQUIRE(_dependencyMap[8]).Networking;

  var convertRequestBody = _$$_REQUIRE(_dependencyMap[9]);

  function convertHeadersMapToArray(headers) {
    var headerArray = [];

    for (var name in headers) {
      headerArray.push([name, headers[name]]);
    }

    return headerArray;
  }

  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var RCTNetworking = function (_NativeEventEmitter) {
    _inherits(RCTNetworking, _NativeEventEmitter);

    function RCTNetworking() {
      var _this;

      _classCallCheck(this, RCTNetworking);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(RCTNetworking).call(this, RCTNetworkingNative));
      _this.isAvailable = true;
      return _this;
    }

    _createClass(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = convertRequestBody(data);

        if (body && body.formData) {
          body.formData = body.formData.map(function (part) {
            return _objectSpread({}, part, {
              headers: convertHeadersMapToArray(part.headers)
            });
          });
        }

        var requestId = generateRequestId();
        RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), _objectSpread({}, body, {
          trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        RCTNetworkingNative.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        RCTNetworkingNative.clearCookies(callback);
      }
    }]);

    return RCTNetworking;
  }(NativeEventEmitter);

  {
    RCTNetworking = new RCTNetworking();
  }
  module.exports = RCTNetworking;
},109,[43,19,20,27,30,33,110,111,5,112]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var EmitterSubscription = _$$_REQUIRE(_dependencyMap[5]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[6]);

  var invariant = _$$_REQUIRE(_dependencyMap[7]);

  var MissingNativeEventEmitterShim = function (_EventEmitter) {
    _inherits(MissingNativeEventEmitterShim, _EventEmitter);

    function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
      var _this;

      _classCallCheck(this, MissingNativeEventEmitterShim);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MissingNativeEventEmitterShim).call(this, null));
      _this.isAvailable = false;
      _this._nativeModuleName = nativeModuleName;
      _this._nativeEventEmitterName = nativeEventEmitterName;
      return _this;
    }

    _createClass(MissingNativeEventEmitterShim, [{
      key: "throwMissingNativeModule",
      value: function throwMissingNativeModule() {
        invariant(false, "Cannot use '" + this._nativeEventEmitterName + "' module when " + ("native '" + this._nativeModuleName + "' is not included in the build. ") + ("Either include it, or check '" + this._nativeEventEmitterName + "'.isAvailable ") + 'before calling any methods.');
      }
    }, {
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this.throwMissingNativeModule();
      }
    }]);

    return MissingNativeEventEmitterShim;
  }(EventEmitter);

  module.exports = MissingNativeEventEmitterShim;
},110,[19,20,27,30,33,36,35,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[6]);

  var Platform = _$$_REQUIRE(_dependencyMap[7]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[8]);

  var invariant = _$$_REQUIRE(_dependencyMap[9]);

  var NativeEventEmitter = function (_EventEmitter) {
    _inherits(NativeEventEmitter, _EventEmitter);

    function NativeEventEmitter(nativeModule) {
      var _this;

      _classCallCheck(this, NativeEventEmitter);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NativeEventEmitter).call(this, RCTDeviceEventEmitter.sharedSubscriber));
      return _this;
    }

    _createClass(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return _get(_getPrototypeOf(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        invariant(eventType, 'eventType argument is required.');
        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        _get(_getPrototypeOf(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        _get(_getPrototypeOf(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);

    return NativeEventEmitter;
  }(EventEmitter);

  module.exports = NativeEventEmitter;
},111,[19,20,27,30,31,33,35,41,26,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var binaryToBase64 = _$$_REQUIRE(_dependencyMap[0]);

  var Blob = _$$_REQUIRE(_dependencyMap[1]);

  var FormData = _$$_REQUIRE(_dependencyMap[2]);

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof Blob) {
      return {
        blob: body.data
      };
    }

    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},112,[113,115,118]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var base64 = _$$_REQUIRE(_dependencyMap[0]);

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},113,[114]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function getLens(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }

  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

    for (var i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }

    return parts.join('');
  }
},114,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var Blob = function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, Blob);

      var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

      this.data = BlobManager.createFromParts(parts, options).data;
    }

    _createClass(Blob, [{
      key: "slice",
      value: function slice(start, end) {
        var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

        var _this$data = this.data,
            offset = _this$data.offset,
            size = _this$data.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "data",
      set: function set(data) {
        this._data = data;
      },
      get: function get() {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }

        return this._data;
      }
    }, {
      key: "size",
      get: function get() {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function get() {
        return this.data.type || '';
      }
    }]);

    return Blob;
  }();

  module.exports = Blob;
},115,[19,20,116]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var Blob = _$$_REQUIRE(_dependencyMap[3]);

  var BlobRegistry = _$$_REQUIRE(_dependencyMap[4]);

  var _require = _$$_REQUIRE(_dependencyMap[5]),
      BlobModule = _require.BlobModule;

  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  var BlobManager = function () {
    function BlobManager() {
      _classCallCheck(this, BlobManager);
    }

    _createClass(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        var blobId = uuidv4();
        var items = parts.map(function (part) {
          if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {
            throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
          }

          if (part instanceof Blob) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce(function (acc, curr) {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        BlobModule.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId: blobId,
          offset: 0,
          size: size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        return _extends(Object.create(Blob.prototype), {
          data: options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        BlobRegistry.unregister(blobId);

        if (BlobRegistry.has(blobId)) {
          return;
        }

        BlobModule.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        BlobModule.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        BlobModule.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        BlobModule.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        BlobModule.sendOverSocket(blob.data, socketId);
      }
    }]);

    return BlobManager;
  }();

  BlobManager.isAvailable = !!BlobModule;
  module.exports = BlobManager;
},116,[8,19,20,115,117,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var registry = {};

  var register = function register(id) {
    if (registry[id]) {
      registry[id]++;
    } else {
      registry[id] = 1;
    }
  };

  var unregister = function unregister(id) {
    if (registry[id]) {
      registry[id]--;

      if (registry[id] <= 0) {
        delete registry[id];
      }
    }
  };

  var has = function has(id) {
    return registry[id] && registry[id] > 0;
  };

  module.exports = {
    register: register,
    unregister: unregister,
    has: has
  };
},117,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var FormData = function () {
    function FormData() {
      _classCallCheck(this, FormData);

      this._parts = [];
    }

    _createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if (typeof value === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return _objectSpread({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);

    return FormData;
  }();

  module.exports = FormData;
},118,[43,9,19,20]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var whatwg = _$$_REQUIRE(_dependencyMap[0]);

  if (whatwg && whatwg.fetch) {
    module.exports = whatwg;
  } else {
    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response
    };
  }
},119,[120]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (self) {
    'use strict';

    if (self.fetch) {
      return;
    }

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isDataView = function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      };

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ',' + value : value;
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type');
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'omit';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;

    self.fetch = function (input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    };

    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : this);
},120,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var Blob = _$$_REQUIRE(_dependencyMap[6]);

  var EventTarget = _$$_REQUIRE(_dependencyMap[7]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[8]);

  var BlobManager = _$$_REQUIRE(_dependencyMap[9]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[10]);

  var Platform = _$$_REQUIRE(_dependencyMap[11]);

  var WebSocketEvent = _$$_REQUIRE(_dependencyMap[12]);

  var base64 = _$$_REQUIRE(_dependencyMap[13]);

  var binaryToBase64 = _$$_REQUIRE(_dependencyMap[14]);

  var invariant = _$$_REQUIRE(_dependencyMap[15]);

  var WebSocketModule = NativeModules.WebSocketModule;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;

  var WebSocket = function (_EventTarget) {
    _inherits(WebSocket, _EventTarget);

    function WebSocket(url, protocols, options) {
      var _this;

      _classCallCheck(this, WebSocket);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocket).call(this));
      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref = options || {},
          _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          unrecognized = _objectWithoutProperties(_ref, ["headers"]);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      if (!WebSocket.isAvailable) {
        throw new Error("Cannot initialize WebSocket module. Native module WebSocketModule is missing.");
      }

      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      WebSocketModule.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }

    _createClass(WebSocket, [{
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof Blob) {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
          BlobManager.sendOverSocket(data, this._socketId);
          return;
        }

        if (typeof data === 'string') {
          WebSocketModule.send(data, this._socketId);
          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        WebSocketModule.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        {
          var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
          var closeReason = typeof reason === 'string' ? reason : '';
          WebSocketModule.close(statusCode, closeReason, this._socketId);
        }

        if (BlobManager.isAvailable && this._binaryType === 'blob') {
          BlobManager.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = base64.toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = BlobManager.createFromOptions(ev.data);
              break;
          }

          _this2.dispatchEvent(new WebSocketEvent('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;

          _this2.dispatchEvent(new WebSocketEvent('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new WebSocketEvent('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }, {
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');

          if (binaryType === 'blob') {
            BlobManager.addWebSocketHandler(this._socketId);
          } else {
            BlobManager.removeWebSocketHandler(this._socketId);
          }
        }

        this._binaryType = binaryType;
      }
    }]);

    return WebSocket;
  }(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  WebSocket.isAvailable = !!WebSocketModule;
  module.exports = WebSocket;
},121,[6,19,20,27,30,33,115,105,111,116,5,41,122,114,113,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    _classCallCheck(this, WebSocketEvent);

    this.type = type.toString();

    _extends(this, eventInitDict);
  };

  module.exports = WebSocketEvent;
},122,[8,19]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var Blob = _$$_REQUIRE(_dependencyMap[5]);

  var invariant = _$$_REQUIRE(_dependencyMap[6]);

  var File = function (_Blob) {
    _inherits(File, _Blob);

    function File(parts, name, options) {
      var _this;

      _classCallCheck(this, File);

      invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');
      _this = _possibleConstructorReturn(this, _getPrototypeOf(File).call(this, parts, options));
      _this.data.name = name;
      return _this;
    }

    _createClass(File, [{
      key: "name",
      get: function get() {
        invariant(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function get() {
        return this.data.lastModified || 0;
      }
    }]);

    return File;
  }(Blob);

  module.exports = File;
},123,[19,20,27,30,33,115,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var EventTarget = _$$_REQUIRE(_dependencyMap[5]);

  var Blob = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      FileReaderModule = _require.FileReaderModule;

  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;

  var FileReader = function (_EventTarget) {
    _inherits(FileReader, _EventTarget);

    function FileReader() {
      var _this;

      _classCallCheck(this, FileReader);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FileReader).call(this));
      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._subscriptions = [];

      _this._reset();

      return _this;
    }

    _createClass(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (sub) {
          return sub.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer() {
        throw new Error('FileReader.readAsArrayBuffer is not implemented');
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        var _this2 = this;

        this._aborted = false;
        FileReaderModule.readAsDataURL(blob.data).then(function (text) {
          if (_this2._aborted) {
            return;
          }

          _this2._result = text;

          _this2._setReadyState(DONE);
        }, function (error) {
          if (_this2._aborted) {
            return;
          }

          _this2._error = error;

          _this2._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var _this3 = this;

        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        FileReaderModule.readAsText(blob.data, encoding).then(function (text) {
          if (_this3._aborted) {
            return;
          }

          _this3._result = text;

          _this3._setReadyState(DONE);
        }, function (error) {
          if (_this3._aborted) {
            return;
          }

          _this3._error = error;

          _this3._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();

          this._setReadyState(DONE);
        }

        this._reset();
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function get() {
        return this._error;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);

    return FileReader;
  }(EventTarget.apply(undefined, READER_EVENTS));

  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  module.exports = FileReader;
},124,[19,20,27,30,33,105,115,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var Blob = _$$_REQUIRE(_dependencyMap[2]);

  var _require = _$$_REQUIRE(_dependencyMap[3]),
      BlobModule = _require.BlobModule;

  var BLOB_URL_PREFIX = null;

  if (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';

    if (typeof BlobModule.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + BlobModule.BLOB_URI_HOST + "/";
    }
  }

  var URL = function () {
    function URL() {
      _classCallCheck(this, URL);

      throw new Error('Creating URL objects is not supported yet.');
    }

    _createClass(URL, null, [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.data.blobId + "?offset=" + blob.data.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);

    return URL;
  }();

  module.exports = URL;
},125,[19,20,115,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var AlertIOS = _$$_REQUIRE(_dependencyMap[3]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[4]);

  var Platform = _$$_REQUIRE(_dependencyMap[5]);

  var Alert = function () {
    function Alert() {
      _classCallCheck(this, Alert);
    }

    _createClass(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options, type) {
        {
          AlertAndroid.alert(title, message, buttons, options);
        }
      }
    }]);

    return Alert;
  }();

  var AlertAndroid = function () {
    function AlertAndroid() {
      _classCallCheck(this, AlertAndroid);
    }

    _createClass(AlertAndroid, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        var config = {
          title: title || '',
          message: message || ''
        };

        if (options) {
          config = _objectSpread({}, config, {
            cancelable: options.cancelable
          });
        }

        var validButtons = buttons ? buttons.slice(0, 3) : [{
          text: 'OK'
        }];
        var buttonPositive = validButtons.pop();
        var buttonNegative = validButtons.pop();
        var buttonNeutral = validButtons.pop();

        if (buttonNeutral) {
          config = _objectSpread({}, config, {
            buttonNeutral: buttonNeutral.text || ''
          });
        }

        if (buttonNegative) {
          config = _objectSpread({}, config, {
            buttonNegative: buttonNegative.text || ''
          });
        }

        if (buttonPositive) {
          config = _objectSpread({}, config, {
            buttonPositive: buttonPositive.text || ''
          });
        }

        NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
          return console.warn(errorMessage);
        }, function (action, buttonKey) {
          if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
            if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
              buttonNeutral.onPress && buttonNeutral.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
              buttonNegative.onPress && buttonNegative.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
              buttonPositive.onPress && buttonPositive.onPress();
            }
          } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
            options && options.onDismiss && options.onDismiss();
          }
        });
      }
    }]);

    return AlertAndroid;
  }();

  module.exports = Alert;
},126,[43,19,20,127,5,41]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var RCTAlertManager = _$$_REQUIRE(_dependencyMap[2]).AlertManager;

  var AlertIOS = function () {
    function AlertIOS() {
      _classCallCheck(this, AlertIOS);
    }

    _createClass(AlertIOS, null, [{
      key: "alert",
      value: function alert(title, message, callbackOrButtons, type) {
        if (typeof type !== 'undefined') {
          console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          this.prompt(title, message, callbackOrButtons, type);
          return;
        }

        this.prompt(title, message, callbackOrButtons, 'default');
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments.length > 4 ? arguments[4] : undefined;
        var keyboardType = arguments.length > 5 ? arguments[5] : undefined;

        if (typeof type === 'function') {
          console.warn("You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, keyboardType) and the old syntax will be removed in a future version.");
          var callback = type;
          RCTAlertManager.alertWithArgs({
            title: title || '',
            type: 'plain-text',
            defaultValue: message
          }, function (id, value) {
            callback(value);
          });
          return;
        }

        var callbacks = [];
        var buttons = [];
        var cancelButtonKey;
        var destructiveButtonKey;

        if (typeof callbackOrButtons === 'function') {
          callbacks = [callbackOrButtons];
        } else if (callbackOrButtons instanceof Array) {
          callbackOrButtons.forEach(function (btn, index) {
            callbacks[index] = btn.onPress;

            if (btn.style === 'cancel') {
              cancelButtonKey = String(index);
            } else if (btn.style === 'destructive') {
              destructiveButtonKey = String(index);
            }

            if (btn.text || index < (callbackOrButtons || []).length - 1) {
              var btnDef = {};
              btnDef[index] = btn.text || '';
              buttons.push(btnDef);
            }
          });
        }

        RCTAlertManager.alertWithArgs({
          title: title || '',
          message: message || undefined,
          buttons: buttons,
          type: type || undefined,
          defaultValue: defaultValue,
          cancelButtonKey: cancelButtonKey,
          destructiveButtonKey: destructiveButtonKey,
          keyboardType: keyboardType
        }, function (id, value) {
          var cb = callbacks[id];
          cb && cb(value);
        });
      }
    }]);

    return AlertIOS;
  }();

  module.exports = AlertIOS;
},127,[19,20,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var RCTLocationObserver = _$$_REQUIRE(_dependencyMap[2]).LocationObserver;

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var logError = _$$_REQUIRE(_dependencyMap[4]);

  var warning = _$$_REQUIRE(_dependencyMap[5]);

  var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

  var Platform = _$$_REQUIRE(_dependencyMap[6]);

  var PermissionsAndroid = _$$_REQUIRE(_dependencyMap[7]);

  var subscriptions = [];
  var updatesEnabled = false;
  var Geolocation = {
    setRNConfiguration: function setRNConfiguration(config) {
      if (RCTLocationObserver.setConfiguration) {
        RCTLocationObserver.setConfiguration(config);
      }
    },
    requestAuthorization: function requestAuthorization() {
      RCTLocationObserver.requestAuthorization();
    },
    getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
      var hasPermission, status;
      return _regeneratorRuntime.async(function getCurrentPosition$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
              hasPermission = true;

              if (!(Platform.Version >= 23)) {
                _context.next = 11;
                break;
              }

              _context.next = 5;
              return _regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 5:
              hasPermission = _context.sent;

              if (hasPermission) {
                _context.next = 11;
                break;
              }

              _context.next = 9;
              return _regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 9:
              status = _context.sent;
              hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

            case 11:
              if (hasPermission) {
                RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
              }

            case 12:
            case "end":
              return _context.stop();
          }
        }
      });
    },
    watchPosition: function watchPosition(success, error, options) {
      if (!updatesEnabled) {
        RCTLocationObserver.startObserving(options || {});
        updatesEnabled = true;
      }

      var watchID = subscriptions.length;
      subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
      return watchID;
    },
    clearWatch: function clearWatch(watchID) {
      var sub = subscriptions[watchID];

      if (!sub) {
        return;
      }

      sub[0].remove();
      var sub1 = sub[1];
      sub1 && sub1.remove();
      subscriptions[watchID] = undefined;
      var noWatchers = true;

      for (var ii = 0; ii < subscriptions.length; ii++) {
        if (subscriptions[ii]) {
          noWatchers = false;
        }
      }

      if (noWatchers) {
        Geolocation.stopObserving();
      }
    },
    stopObserving: function stopObserving() {
      if (updatesEnabled) {
        RCTLocationObserver.stopObserving();
        updatesEnabled = false;

        for (var ii = 0; ii < subscriptions.length; ii++) {
          var sub = subscriptions[ii];

          if (sub) {
            warning(false, 'Called stopObserving with existing subscriptions.');
            sub[0].remove();
            var sub1 = sub[1];
            sub1 && sub1.remove();
          }
        }

        subscriptions = [];
      }
    }
  };
  module.exports = Geolocation;
},128,[129,111,5,3,132,103,41,133]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},129,[130]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var g = function () {
    return this || typeof self === "object" && self;
  }() || Function("return this")();

  var hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
  var oldRuntime = hadRuntime && g.regeneratorRuntime;
  g.regeneratorRuntime = undefined;
  module.exports = _$$_REQUIRE(_dependencyMap[0]);

  if (hadRuntime) {
    g.regeneratorRuntime = oldRuntime;
  } else {
    try {
      delete g.regeneratorRuntime;
    } catch (e) {
      g.regeneratorRuntime = undefined;
    }
  }
},130,[131]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this || typeof self === "object" && self;
  }() || Function("return this")());
},131,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},132,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[3]);

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      _classCallCheck(this, PermissionsAndroid);

      this.PERMISSIONS = {
        READ_CALENDAR: 'android.permission.READ_CALENDAR',
        WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
        GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
        CALL_PHONE: 'android.permission.CALL_PHONE',
        READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
        WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
        ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
        USE_SIP: 'android.permission.USE_SIP',
        PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
        BODY_SENSORS: 'android.permission.BODY_SENSORS',
        SEND_SMS: 'android.permission.SEND_SMS',
        RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
        READ_SMS: 'android.permission.READ_SMS',
        RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
        RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
        WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
      };
      this.RESULTS = {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again'
      };
    }

    _createClass(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function requestPermission(permission, rationale) {
        var response;
        return _regeneratorRuntime.async(function requestPermission$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                _context.next = 3;
                return _regeneratorRuntime.awrap(this.request(permission, rationale));

              case 3:
                response = _context.sent;
                return _context.abrupt("return", response === this.RESULTS.GRANTED);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "request",
      value: function request(permission, rationale) {
        var shouldShowRationale;
        return _regeneratorRuntime.async(function request$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!rationale) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return _regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

              case 3:
                shouldShowRationale = _context2.sent;

                if (!shouldShowRationale) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                    return reject(new Error('Error showing rationale'));
                  }, function () {
                    return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                  });
                }));

              case 6:
                return _context2.abrupt("return", NativeModules.PermissionsAndroid.requestPermission(permission));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        });
      }
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
      }
    }]);

    return PermissionsAndroid;
  }();

  PermissionsAndroid = new PermissionsAndroid();
  module.exports = PermissionsAndroid;
},133,[129,19,20,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      _$$_REQUIRE(_dependencyMap[0]).JSCHeapCapture.captureComplete(path, error);
    }
  };
  module.exports = HeapCapture;
},134,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var _require = _$$_REQUIRE(_dependencyMap[0]),
          JSCSamplingProfiler = _require.JSCSamplingProfiler;

      JSCSamplingProfiler.operationComplete(token, result, error);
    }
  };
  module.exports = SamplingProfiler;
},135,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(args));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, args);
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, args);
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},136,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[0]);

  var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
  module.exports = RCTNativeAppEventEmitter;
},137,[26]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _$$_REQUIRE(_dependencyMap[0]);

  var infoLog = _$$_REQUIRE(_dependencyMap[1]);

  var performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || _$$_REQUIRE(_dependencyMap[2]);

  var timespans = {};
  var extras = {};
  var cookies = {};
  var PRINT_TO_CONSOLE = false;
  var PerformanceLogger = {
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (timespans[key]) {
        return;
      }

      timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (timespans[key]) {
        return;
      }

      timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      cookies[key] = Systrace.beginAsyncEvent(key);
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = timespans[key];

      if (!timespan || !timespan.startTime) {
        return;
      }

      if (timespan.endTime) {
        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
      Systrace.endAsyncEvent(key, cookies[key]);
      delete cookies[key];
    },
    clear: function clear() {
      timespans = {};
      extras = {};
    },
    clearCompleted: function clearCompleted() {
      for (var _key in timespans) {
        if (timespans[_key].totalTime) {
          delete timespans[_key];
        }
      }

      extras = {};
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      timespans = Object.keys(timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = timespans[key];
        }

        return previous;
      }, {});
      extras = {};
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!timespans[key];
    },
    logTimespans: function logTimespans() {
      for (var _key2 in timespans) {
        if (timespans[_key2].totalTime) {
          infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (extras[key]) {
        return;
      }

      extras[key] = value;
    },
    getExtras: function getExtras() {
      return extras;
    },
    logExtras: function logExtras() {
      infoLog(extras);
    }
  };
  module.exports = PerformanceLogger;
},138,[22,139,100]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},139,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var JSDevSupport = _$$_REQUIRE(_dependencyMap[0]).JSDevSupport;

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var JSDevSupportModule = {
    getJSHierarchy: function getJSHierarchy(tag) {
      try {
        var computeComponentStackForErrorReporting = ReactNative.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.computeComponentStackForErrorReporting;
        var componentStack = computeComponentStackForErrorReporting(tag);

        if (!componentStack) {
          JSDevSupport.onFailure(JSDevSupport.ERROR_CODE_VIEW_NOT_FOUND, "Component stack doesn't exist for tag " + tag);
        } else {
          JSDevSupport.onSuccess(componentStack);
        }
      } catch (e) {
        JSDevSupport.onFailure(JSDevSupport.ERROR_CODE_EXCEPTION, e.message);
      }
    }
  };
  module.exports = JSDevSupportModule;
},140,[5,77]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var customBubblingEventTypes = {};
  var customDirectEventTypes = {};
  var eventTypes = {};
  exports.customBubblingEventTypes = customBubblingEventTypes;
  exports.customDirectEventTypes = customDirectEventTypes;
  exports.eventTypes = eventTypes;
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();

  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;

    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }

    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }

  exports.register = function (name, callback) {
    invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    viewConfigCallbacks.set(name, callback);
    return name;
  };

  exports.get = function (name) {
    var viewConfig;

    if (!viewConfigs.has(name)) {
      var callback = viewConfigCallbacks.get(name);

      if (typeof callback !== 'function') {
        invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }

      viewConfigCallbacks.set(name, null);
      viewConfig = callback();
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);
    } else {
      viewConfig = viewConfigs.get(name);
    }

    invariant(viewConfig, 'View config not found for name %s', name);
    return viewConfig;
  };
},141,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},142,[13]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deepDiffer = function deepDiffer(one, two) {
    var maxDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

    if (maxDepth === 0) {
      return true;
    }

    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      return false;
    }

    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }

    if (typeof two !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii], maxDepth - 1)) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key], maxDepth - 1)) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
},143,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var UIManager = _$$_REQUIRE(_dependencyMap[1]);

  var currentlyFocusedID = null;
  var inputs = new Set();

  function currentlyFocusedField() {
    return currentlyFocusedID;
  }

  function focusTextInput(textFieldID) {
    if (currentlyFocusedID !== textFieldID && textFieldID !== null) {
      currentlyFocusedID = textFieldID;
      {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
      }
    }
  }

  function blurTextInput(textFieldID) {
    if (currentlyFocusedID === textFieldID && textFieldID !== null) {
      currentlyFocusedID = null;
      {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
      }
    }
  }

  function registerInput(textFieldID) {
    inputs.add(textFieldID);
  }

  function unregisterInput(textFieldID) {
    inputs.delete(textFieldID);
  }

  function isTextInput(textFieldID) {
    return inputs.has(textFieldID);
  }

  module.exports = {
    currentlyFocusedField: currentlyFocusedField,
    focusTextInput: focusTextInput,
    blurTextInput: blurTextInput,
    registerInput: registerInput,
    unregisterInput: unregisterInput,
    isTextInput: isTextInput
  };
},144,[41,40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},145,[146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.11.3
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var d = null,
      f = false,
      h = 3,
      k = -1,
      l = -1,
      m = false,
      n = false;

  function p() {
    if (!m) {
      var a = d.expirationTime;
      n ? q() : n = true;

      _r(t, a);
    }
  }

  function u() {
    var a = d,
        b = d.next;
    if (d === b) d = null;else {
      var c = d.previous;
      d = c.next = b;
      b.previous = c;
    }
    a.next = a.previous = null;
    c = a.callback;
    b = a.expirationTime;
    a = a.priorityLevel;
    var e = h,
        Q = l;
    h = a;
    l = b;

    try {
      var g = c();
    } finally {
      h = e, l = Q;
    }

    if ("function" === typeof g) if (g = {
      callback: g,
      priorityLevel: a,
      expirationTime: b,
      next: null,
      previous: null
    }, null === d) d = g.next = g.previous = g;else {
      c = null;
      a = d;

      do {
        if (a.expirationTime >= b) {
          c = a;
          break;
        }

        a = a.next;
      } while (a !== d);

      null === c ? c = d : c === d && (d = g, p());
      b = c.previous;
      b.next = c.previous = g;
      g.next = c;
      g.previous = b;
    }
  }

  function v() {
    if (-1 === k && null !== d && 1 === d.priorityLevel) {
      m = true;

      try {
        do {
          u();
        } while (null !== d && 1 === d.priorityLevel);
      } finally {
        m = false, null !== d ? p() : n = false;
      }
    }
  }

  function t(a) {
    m = true;
    var b = f;
    f = a;

    try {
      if (a) for (; null !== d;) {
        var c = exports.unstable_now();

        if (d.expirationTime <= c) {
          do {
            u();
          } while (null !== d && d.expirationTime <= c);
        } else break;
      } else if (null !== d) {
        do {
          u();
        } while (null !== d && !w());
      }
    } finally {
      m = false, f = b, null !== d ? p() : n = false, v();
    }
  }

  var x = Date,
      y = "function" === typeof setTimeout ? setTimeout : undefined,
      z = "function" === typeof clearTimeout ? clearTimeout : undefined,
      A = "function" === typeof requestAnimationFrame ? requestAnimationFrame : undefined,
      B = "function" === typeof cancelAnimationFrame ? cancelAnimationFrame : undefined,
      C,
      D;

  function E(a) {
    C = A(function (b) {
      z(D);
      a(b);
    });
    D = y(function () {
      B(C);
      a(exports.unstable_now());
    }, 100);
  }

  if ("object" === typeof performance && "function" === typeof performance.now) {
    var F = performance;

    exports.unstable_now = function () {
      return F.now();
    };
  } else exports.unstable_now = function () {
    return x.now();
  };

  var _r,
      q,
      w,
      G = null;

  "undefined" !== typeof window ? G = window : "undefined" !== typeof global && (G = global);

  if (G && G._schedMock) {
    var H = G._schedMock;
    _r = H[0];
    q = H[1];
    w = H[2];
    exports.unstable_now = H[3];
  } else if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var I = null,
        J = function J(a) {
      if (null !== I) try {
        I(a);
      } finally {
        I = null;
      }
    };

    _r = function r(a) {
      null !== I ? setTimeout(_r, 0, a) : (I = a, setTimeout(J, 0, false));
    };

    q = function q() {
      I = null;
    };

    w = function w() {
      return false;
    };
  } else {
    "undefined" !== typeof console && ("function" !== typeof A && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"), "function" !== typeof B && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));
    var K = null,
        L = false,
        M = -1,
        N = false,
        O = false,
        P = 0,
        R = 33,
        S = 33;

    w = function w() {
      return P <= exports.unstable_now();
    };

    var T = new MessageChannel(),
        U = T.port2;

    T.port1.onmessage = function () {
      L = false;
      var a = K,
          b = M;
      K = null;
      M = -1;
      var c = exports.unstable_now(),
          e = false;
      if (0 >= P - c) if (-1 !== b && b <= c) e = true;else {
        N || (N = true, E(V));
        K = a;
        M = b;
        return;
      }

      if (null !== a) {
        O = true;

        try {
          a(e);
        } finally {
          O = false;
        }
      }
    };

    var V = function V(a) {
      if (null !== K) {
        E(V);
        var b = a - P + S;
        b < S && R < S ? (8 > b && (b = 8), S = b < R ? R : b) : R = b;
        P = a + S;
        L || (L = true, U.postMessage(undefined));
      } else N = false;
    };

    _r = function _r(a, b) {
      K = a;
      M = b;
      O || 0 > b ? U.postMessage(undefined) : N || (N = true, E(V));
    };

    q = function q() {
      K = null;
      L = false;
      M = -1;
    };
  }

  exports.unstable_ImmediatePriority = 1;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_NormalPriority = 3;
  exports.unstable_IdlePriority = 5;
  exports.unstable_LowPriority = 4;

  exports.unstable_runWithPriority = function (a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;

      default:
        a = 3;
    }

    var c = h,
        e = k;
    h = a;
    k = exports.unstable_now();

    try {
      return b();
    } finally {
      h = c, k = e, v();
    }
  };

  exports.unstable_scheduleCallback = function (a, b) {
    var c = -1 !== k ? k : exports.unstable_now();
    if ("object" === typeof b && null !== b && "number" === typeof b.timeout) b = c + b.timeout;else switch (h) {
      case 1:
        b = c + -1;
        break;

      case 2:
        b = c + 250;
        break;

      case 5:
        b = c + 1073741823;
        break;

      case 4:
        b = c + 1E4;
        break;

      default:
        b = c + 5E3;
    }
    a = {
      callback: a,
      priorityLevel: h,
      expirationTime: b,
      next: null,
      previous: null
    };
    if (null === d) d = a.next = a.previous = a, p();else {
      c = null;
      var e = d;

      do {
        if (e.expirationTime > b) {
          c = e;
          break;
        }

        e = e.next;
      } while (e !== d);

      null === c ? c = d : c === d && (d = a, p());
      b = c.previous;
      b.next = c.previous = a;
      a.next = c;
      a.previous = b;
    }
    return a;
  };

  exports.unstable_cancelCallback = function (a) {
    var b = a.next;

    if (null !== b) {
      if (b === a) d = null;else {
        a === d && (d = b);
        var c = a.previous;
        c.next = b;
        b.previous = c;
      }
      a.next = a.previous = null;
    }
  };

  exports.unstable_wrapCallback = function (a) {
    var b = h;
    return function () {
      var c = h,
          e = k;
      h = b;
      k = exports.unstable_now();

      try {
        return a.apply(this, arguments);
      } finally {
        h = c, k = e, v();
      }
    };
  };

  exports.unstable_getCurrentPriorityLevel = function () {
    return h;
  };

  exports.unstable_shouldYield = function () {
    return !f && (null !== d && d.expirationTime < l || w());
  };
},146,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createReactNativeComponentClass = _$$_REQUIRE(_dependencyMap[0]);

  var getNativeComponentAttributes = _$$_REQUIRE(_dependencyMap[1]);

  var requireNativeComponent = function requireNativeComponent(uiViewClassName) {
    return createReactNativeComponentClass(uiViewClassName, function () {
      return getNativeComponentAttributes(uiViewClassName);
    });
  };

  module.exports = requireNativeComponent;
},147,[148,149]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      register = _require.register;

  var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
    return register(name, callback);
  };

  module.exports = createReactNativeComponentClass;
},148,[141]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var UIManager = _$$_REQUIRE(_dependencyMap[3]);

  var insetsDiffer = _$$_REQUIRE(_dependencyMap[4]);

  var matricesDiffer = _$$_REQUIRE(_dependencyMap[5]);

  var pointsDiffer = _$$_REQUIRE(_dependencyMap[6]);

  var processColor = _$$_REQUIRE(_dependencyMap[7]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[8]);

  var sizesDiffer = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var warning = _$$_REQUIRE(_dependencyMap[11]);

  function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager[uiViewClassName];
    invariant(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: "%s" was not found in the UIManager.', uiViewClassName);
    var baseModuleName = viewConfig.baseModuleName,
        bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;

    while (baseModuleName) {
      var baseModule = UIManager[baseModuleName];

      if (!baseModule) {
        warning(false, 'Base module "%s" does not exist', baseModuleName);
        baseModuleName = null;
      } else {
        bubblingEventTypes = _objectSpread({}, baseModule.bubblingEventTypes, bubblingEventTypes);
        directEventTypes = _objectSpread({}, baseModule.directEventTypes, directEventTypes);
        nativeProps = _objectSpread({}, baseModule.NativeProps, nativeProps);
        baseModuleName = baseModule.baseModuleName;
      }
    }

    var validAttributes = {};

    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);
      validAttributes[key] = diff == null && process == null ? true : {
        diff: diff,
        process: process
      };
    }

    validAttributes.style = ReactNativeStyleAttributes;

    _extends(viewConfig, {
      uiViewClassName: uiViewClassName,
      validAttributes: validAttributes,
      bubblingEventTypes: bubblingEventTypes,
      directEventTypes: directEventTypes
    });

    if (!hasAttachedDefaultEventTypes) {
      attachDefaultEventTypes(viewConfig);
      hasAttachedDefaultEventTypes = true;
    }

    return viewConfig;
  }

  var hasAttachedDefaultEventTypes = false;

  function attachDefaultEventTypes(viewConfig) {
    if (UIManager.ViewManagerNames) {
      viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, UIManager.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, UIManager.genericDirectEventTypes);
    }
  }

  function merge(destination, source) {
    if (!source) {
      return destination;
    }

    if (!destination) {
      return source;
    }

    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }

      var sourceValue = source[key];

      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];

        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }

      destination[key] = sourceValue;
    }

    return destination;
  }

  function getDifferForType(typeName) {
    switch (typeName) {
      case 'CATransform3D':
        return matricesDiffer;

      case 'CGPoint':
        return pointsDiffer;

      case 'CGSize':
        return sizesDiffer;

      case 'UIEdgeInsets':
        return insetsDiffer;
    }

    return null;
  }

  function getProcessorForType(typeName) {
    switch (typeName) {
      case 'CGColor':
      case 'UIColor':
        return processColor;

      case 'CGColorArray':
      case 'UIColorArray':
        return processColorArray;

      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return resolveAssetSource;

      case 'Color':
        return processColor;

      case 'ColorArray':
        return processColorArray;
    }

    return null;
  }

  function processColorArray(colors) {
    return colors == null ? null : colors.map(processColor);
  }

  module.exports = getNativeComponentAttributes;
},149,[8,43,53,40,150,151,152,68,153,71,3,103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},150,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},151,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},152,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var AssetRegistry = _$$_REQUIRE(_dependencyMap[0]);

  var AssetSourceResolver = _$$_REQUIRE(_dependencyMap[1]);

  var _customSourceTransformer, _serverURL, _scriptURL;

  var _sourceCodeScriptURL;

  function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL) {
      return _sourceCodeScriptURL;
    }

    var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

    if (!sourceCode) {
      var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

      sourceCode = NativeModules && NativeModules.SourceCode;
    }

    _sourceCodeScriptURL = sourceCode.scriptURL;
    return _sourceCodeScriptURL;
  }

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var sourceCodeScriptURL = getSourceCodeScriptURL();
      var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }

    return _scriptURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }

    var asset = AssetRegistry.getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  module.exports = resolveAssetSource;
  module.exports.pickScale = AssetSourceResolver.pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},153,[154,155,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},154,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var PixelRatio = _$$_REQUIRE(_dependencyMap[2]);

  var Platform = _$$_REQUIRE(_dependencyMap[3]);

  var assetPathUtils = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = assetPathUtils.getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
    var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      _classCallCheck(this, AssetSourceResolver);

      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }

    _createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + "android" + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(true, 'resource identifiers work on Android');
        return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);

    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},155,[19,20,50,41,156,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function getAndroidAssetSuffix(scale) {
    switch (scale) {
      case 0.75:
        return 'ldpi';

      case 1:
        return 'mdpi';

      case 1.5:
        return 'hdpi';

      case 2:
        return 'xhdpi';

      case 3:
        return 'xxhdpi';

      case 4:
        return 'xxxhdpi';
    }

    throw new Error('no such scale');
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for asset: " + JSON.stringify(asset));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},156,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[2]);

  var AndroidProgressBar = requireNativeComponent('AndroidProgressBar');

  var ProgressBarAndroid = function ProgressBarAndroid(props, forwardedRef) {
    return React.createElement(AndroidProgressBar, _extends({}, props, {
      ref: forwardedRef
    }));
  };

  var ProgressBarAndroidToExport = React.forwardRef(ProgressBarAndroid);
  ProgressBarAndroidToExport.defaultProps = {
    styleAttr: 'Normal',
    indeterminate: true,
    animating: true
  };
  module.exports = ProgressBarAndroidToExport;
},157,[8,45,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var Color = _$$_REQUIRE(_dependencyMap[5]);

  var Path = _$$_REQUIRE(_dependencyMap[6]);

  var Transform = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[9]);

  var ReactNativeViewAttributes = _$$_REQUIRE(_dependencyMap[10]);

  var createReactNativeComponentClass = _$$_REQUIRE(_dependencyMap[11]);

  var merge = _$$_REQUIRE(_dependencyMap[12]);

  var invariant = _$$_REQUIRE(_dependencyMap[13]);

  function arrayDiffer(a, b) {
    if (a == null || b == null) {
      return true;
    }

    if (a.length !== b.length) {
      return true;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function fontAndLinesDiffer(a, b) {
    if (a === b) {
      return false;
    }

    if (a.font !== b.font) {
      if (a.font === null) {
        return true;
      }

      if (b.font === null) {
        return true;
      }

      if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
        return true;
      }
    }

    return arrayDiffer(a.lines, b.lines);
  }

  var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});
  var NodeAttributes = {
    transform: {
      diff: arrayDiffer
    },
    opacity: true
  };
  var GroupAttributes = merge(NodeAttributes, {
    clipping: {
      diff: arrayDiffer
    }
  });
  var RenderableAttributes = merge(NodeAttributes, {
    fill: {
      diff: arrayDiffer
    },
    stroke: {
      diff: arrayDiffer
    },
    strokeWidth: true,
    strokeCap: true,
    strokeJoin: true,
    strokeDash: {
      diff: arrayDiffer
    }
  });
  var ShapeAttributes = merge(RenderableAttributes, {
    d: {
      diff: arrayDiffer
    }
  });
  var TextAttributes = merge(RenderableAttributes, {
    alignment: true,
    frame: {
      diff: fontAndLinesDiffer
    },
    path: {
      diff: arrayDiffer
    }
  });
  var NativeSurfaceView = createReactNativeComponentClass('ARTSurfaceView', function () {
    return {
      validAttributes: SurfaceViewAttributes,
      uiViewClassName: 'ARTSurfaceView'
    };
  });
  var NativeGroup = createReactNativeComponentClass('ARTGroup', function () {
    return {
      validAttributes: GroupAttributes,
      uiViewClassName: 'ARTGroup'
    };
  });
  var NativeShape = createReactNativeComponentClass('ARTShape', function () {
    return {
      validAttributes: ShapeAttributes,
      uiViewClassName: 'ARTShape'
    };
  });
  var NativeText = createReactNativeComponentClass('ARTText', function () {
    return {
      validAttributes: TextAttributes,
      uiViewClassName: 'ARTText'
    };
  });

  function childrenAsString(children) {
    if (!children) {
      return '';
    }

    if (typeof children === 'string') {
      return children;
    }

    if (children.length) {
      return children.join('\n');
    }

    return '';
  }

  var Surface = function (_React$Component) {
    _inherits(Surface, _React$Component);

    function Surface() {
      _classCallCheck(this, Surface);

      return _possibleConstructorReturn(this, _getPrototypeOf(Surface).apply(this, arguments));
    }

    _createClass(Surface, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInSurface: true
        };
      }
    }, {
      key: "render",
      value: function render() {
        var height = extractNumber(this.props.height, 0);
        var width = extractNumber(this.props.width, 0);
        return React.createElement(NativeSurfaceView, {
          style: [this.props.style, {
            height: height,
            width: width
          }]
        }, this.props.children);
      }
    }]);

    return Surface;
  }(React.Component);

  Surface.childContextTypes = {
    isInSurface: PropTypes.bool
  };

  function extractNumber(value, defaultValue) {
    if (value == null) {
      return defaultValue;
    }

    return +value;
  }

  var pooledTransform = new Transform();

  function extractTransform(props) {
    var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
    pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);
    }

    return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
  }

  function extractOpacity(props) {
    if (props.visible === false) {
      return 0;
    }

    if (props.opacity == null) {
      return 1;
    }

    return +props.opacity;
  }

  var Group = function (_React$Component2) {
    _inherits(Group, _React$Component2);

    function Group() {
      _classCallCheck(this, Group);

      return _possibleConstructorReturn(this, _getPrototypeOf(Group).apply(this, arguments));
    }

    _createClass(Group, [{
      key: "render",
      value: function render() {
        var props = this.props;
        invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
        return React.createElement(NativeGroup, {
          opacity: extractOpacity(props),
          transform: extractTransform(props)
        }, this.props.children);
      }
    }]);

    return Group;
  }(React.Component);

  Group.contextTypes = {
    isInSurface: PropTypes.bool.isRequired
  };

  var ClippingRectangle = function (_React$Component3) {
    _inherits(ClippingRectangle, _React$Component3);

    function ClippingRectangle() {
      _classCallCheck(this, ClippingRectangle);

      return _possibleConstructorReturn(this, _getPrototypeOf(ClippingRectangle).apply(this, arguments));
    }

    _createClass(ClippingRectangle, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x = extractNumber(props.x, 0);
        var y = extractNumber(props.y, 0);
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        var clipping = [x, y, w, h];
        var propsExcludingXAndY = merge(props);
        delete propsExcludingXAndY.x;
        delete propsExcludingXAndY.y;
        return React.createElement(NativeGroup, {
          clipping: clipping,
          opacity: extractOpacity(props),
          transform: extractTransform(propsExcludingXAndY)
        }, this.props.children);
      }
    }]);

    return ClippingRectangle;
  }(React.Component);

  var SOLID_COLOR = 0;
  var LINEAR_GRADIENT = 1;
  var RADIAL_GRADIENT = 2;
  var PATTERN = 3;

  function insertColorIntoArray(color, targetArray, atIndex) {
    var c = new Color(color);
    targetArray[atIndex + 0] = c.red / 255;
    targetArray[atIndex + 1] = c.green / 255;
    targetArray[atIndex + 2] = c.blue / 255;
    targetArray[atIndex + 3] = c.alpha;
  }

  function insertColorsIntoArray(stops, targetArray, atIndex) {
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
        i++;
      }
    } else {
      for (var offset in stops) {
        insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
        i++;
      }
    }

    return atIndex + i * 4;
  }

  function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
    var offsetNumber;
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        offsetNumber = i / (stops.length - 1) * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    } else {
      for (var offsetString in stops) {
        offsetNumber = +offsetString * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    }

    return atIndex + i;
  }

  function insertColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
  }

  function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
    lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
  }

  function applyBoundingBoxToBrushData(brushData, props) {
    var type = brushData[0];
    var width = +props.width;
    var height = +props.height;

    if (type === LINEAR_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
    } else if (type === RADIAL_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
      brushData[5] *= width;
      brushData[6] *= height;
    } else if (type === PATTERN) {}
  }

  function extractBrush(colorOrBrush, props) {
    if (colorOrBrush == null) {
      return null;
    }

    if (colorOrBrush._brush) {
      if (colorOrBrush._bb) {
        applyBoundingBoxToBrushData(colorOrBrush._brush, props);
        colorOrBrush._bb = false;
      }

      return colorOrBrush._brush;
    }

    var c = new Color(colorOrBrush);
    return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractColor(color) {
    if (color == null) {
      return null;
    }

    var c = new Color(color);
    return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractStrokeCap(strokeCap) {
    switch (strokeCap) {
      case 'butt':
        return 0;

      case 'square':
        return 2;

      default:
        return 1;
    }
  }

  function extractStrokeJoin(strokeJoin) {
    switch (strokeJoin) {
      case 'miter':
        return 0;

      case 'bevel':
        return 2;

      default:
        return 1;
    }
  }

  var Shape = function (_React$Component4) {
    _inherits(Shape, _React$Component4);

    function Shape() {
      _classCallCheck(this, Shape);

      return _possibleConstructorReturn(this, _getPrototypeOf(Shape).apply(this, arguments));
    }

    _createClass(Shape, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.d || childrenAsString(props.children);
        var d = (path instanceof Path ? path : new Path(path)).toJSON();
        return React.createElement(NativeShape, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          d: d
        });
      }
    }]);

    return Shape;
  }(React.Component);

  var cachedFontObjectsFromString = {};
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
    var match = regexp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = +match[2] || 12;
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    cachedFontObjectsFromString[font] = {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: isBold ? 'bold' : 'normal',
      fontStyle: isItalic ? 'italic' : 'normal'
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(font) {
    if (font == null) {
      return null;
    }

    if (typeof font === 'string') {
      return parseFontString(font);
    }

    var fontFamily = extractSingleFontFamily(font.fontFamily);
    var fontSize = +font.fontSize || 12;
    var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
    return {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: font.fontStyle
    };
  }

  var newLine = /\n/g;

  function extractFontAndLines(font, text) {
    return {
      font: extractFont(font),
      lines: text.split(newLine)
    };
  }

  function extractAlignment(alignment) {
    switch (alignment) {
      case 'right':
        return 1;

      case 'center':
        return 2;

      default:
        return 0;
    }
  }

  var Text = function (_React$Component5) {
    _inherits(Text, _React$Component5);

    function Text() {
      _classCallCheck(this, Text);

      return _possibleConstructorReturn(this, _getPrototypeOf(Text).apply(this, arguments));
    }

    _createClass(Text, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.path;
        var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
        var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
        return React.createElement(NativeText, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          alignment: extractAlignment(props.alignment),
          frame: textFrame,
          path: textPath
        });
      }
    }]);

    return Text;
  }(React.Component);

  function LinearGradient(stops, x1, y1, x2, y2) {
    var type = LINEAR_GRADIENT;

    if (arguments.length < 5) {
      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;
      var x = Math.cos(angle);
      var y = -Math.sin(angle);
      var l = (Math.abs(x) + Math.abs(y)) / 2;
      x *= l;
      y *= l;
      x1 = 0.5 - x;
      x2 = 0.5 + x;
      y1 = 0.5 - y;
      y2 = 0.5 + y;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [type, +x1, +y1, +x2, +y2];
    insertColorStopsIntoArray(stops, brushData, 5);
    this._brush = brushData;
  }

  function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
    if (ry == null) {
      ry = rx;
    }

    if (cx == null) {
      cx = fx;
    }

    if (cy == null) {
      cy = fy;
    }

    if (fx == null) {
      fx = fy = rx = ry = cx = cy = 0.5;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
    insertDoubleColorStopsIntoArray(stops, brushData, 7);
    this._brush = brushData;
  }

  function Pattern(url, width, height, left, top) {
    this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
  }

  var ReactART = {
    LinearGradient: LinearGradient,
    RadialGradient: RadialGradient,
    Pattern: Pattern,
    Transform: Transform,
    Path: Path,
    Surface: Surface,
    Group: Group,
    ClippingRectangle: ClippingRectangle,
    Shape: Shape,
    Text: Text
  };
  module.exports = ReactART;
},158,[19,20,27,30,33,159,160,163,45,60,164,148,165,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var colors = {
    maroon: '#800000',
    red: '#ff0000',
    orange: '#ffA500',
    yellow: '#ffff00',
    olive: '#808000',
    purple: '#800080',
    fuchsia: "#ff00ff",
    white: '#ffffff',
    lime: '#00ff00',
    green: '#008000',
    navy: '#000080',
    blue: '#0000ff',
    aqua: '#00ffff',
    teal: '#008080',
    black: '#000000',
    silver: '#c0c0c0',
    gray: '#808080'
  };

  var map = function map(array, fn) {
    var results = [];

    for (var i = 0, l = array.length; i < l; i++) {
      results[i] = fn(array[i], i);
    }

    return results;
  };

  var Color = function Color(color, type) {
    if (color.isColor) {
      this.red = color.red;
      this.green = color.green;
      this.blue = color.blue;
      this.alpha = color.alpha;
    } else {
      var namedColor = colors[color];

      if (namedColor) {
        color = namedColor;
        type = 'hex';
      }

      switch (typeof color) {
        case 'string':
          if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';
          break;

        case 'object':
          type = type || 'rgb';
          color = color.toString();
          break;

        case 'number':
          type = 'hex';
          color = color.toString(16);
          break;
      }

      color = Color['parse' + type.toUpperCase()](color);
      this.red = color[0];
      this.green = color[1];
      this.blue = color[2];
      this.alpha = color[3];
    }

    this.isColor = true;
  };

  var limit = function limit(number, min, max) {
    return Math.min(max, Math.max(min, number));
  };

  var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
  var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

  Color.parseRGB = function (color) {
    return map(color.match(listMatch).slice(1), function (bit, i) {
      if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
      return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
    });
  };

  Color.parseHEX = function (color) {
    if (color.length == 1) color = color + color + color;
    return map(color.match(hexMatch).slice(1), function (bit, i) {
      if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
      return parseInt(bit.length == 1 ? bit + bit : bit, 16);
    });
  };

  Color.parseHSB = function (color) {
    var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
      if (bit) bit = parseFloat(bit);
      if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
    });
    var a = hsb[3];
    var br = Math.round(hsb[2] / 100 * 255);
    if (hsb[1] == 0) return [br, br, br, a];
    var hue = hsb[0];
    var f = hue % 60;
    var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
    var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
    var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

    switch (Math.floor(hue / 60)) {
      case 0:
        return [br, t, p, a];

      case 1:
        return [q, br, p, a];

      case 2:
        return [p, br, t, a];

      case 3:
        return [p, q, br, a];

      case 4:
        return [t, p, br, a];

      default:
        return [br, p, q, a];
    }
  };

  Color.parseHSL = function (color) {
    var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
      if (bit) bit = parseFloat(bit);
      if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
    });
    var h = hsb[0] / 60;
    var s = hsb[1] / 100;
    var l = hsb[2] / 100;
    var a = hsb[3];
    var c = (1 - Math.abs(2 * l - 1)) * s;
    var x = c * (1 - Math.abs(h % 2 - 1));
    var m = l - c / 2;
    var p = Math.round((c + m) * 255);
    var q = Math.round((x + m) * 255);
    var t = Math.round(m * 255);

    switch (Math.floor(h)) {
      case 0:
        return [p, q, t, a];

      case 1:
        return [q, p, t, a];

      case 2:
        return [t, p, q, a];

      case 3:
        return [t, q, p, a];

      case 4:
        return [q, t, p, a];

      default:
        return [p, t, q, a];
    }
  };

  var toString = function toString(type, array) {
    if (array[3] != 1) type += 'a';else array.pop();
    return type + '(' + array.join(', ') + ')';
  };

  Color.prototype = {
    toHSB: function toHSB(array) {
      var red = this.red,
          green = this.green,
          blue = this.blue,
          alpha = this.alpha;
      var max = Math.max(red, green, blue),
          min = Math.min(red, green, blue),
          delta = max - min;
      var hue = 0,
          saturation = delta != 0 ? delta / max : 0,
          brightness = max / 255;

      if (saturation) {
        var rr = (max - red) / delta,
            gr = (max - green) / delta,
            br = (max - blue) / delta;
        hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
        if ((hue /= 6) < 0) hue++;
      }

      var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];
      return array ? hsb : toString('hsb', hsb);
    },
    toHSL: function toHSL(array) {
      var red = this.red,
          green = this.green,
          blue = this.blue,
          alpha = this.alpha;
      var max = Math.max(red, green, blue),
          min = Math.min(red, green, blue),
          delta = max - min;
      var hue = 0,
          saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
          lightness = (max + min) / 512;

      if (saturation) {
        var rr = (max - red) / delta,
            gr = (max - green) / delta,
            br = (max - blue) / delta;
        hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
        if ((hue /= 6) < 0) hue++;
      }

      var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];
      return array ? hsl : toString('hsl', hsl);
    },
    toHEX: function toHEX(array) {
      var a = this.alpha;
      var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;
      var hex = map([this.red, this.green, this.blue], function (bit) {
        bit = bit.toString(16);
        return bit.length == 1 ? '0' + bit : bit;
      });
      return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
    },
    toRGB: function toRGB(array) {
      var rgb = [this.red, this.green, this.blue, this.alpha];
      return array ? rgb : toString('rgb', rgb);
    }
  };
  Color.prototype.toString = Color.prototype.toRGB;

  Color.hex = function (hex) {
    return new Color(hex, 'hex');
  };

  if (this.hex == null) this.hex = Color.hex;

  Color.hsb = function (h, s, b, a) {
    return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
  };

  if (this.hsb == null) this.hsb = Color.hsb;

  Color.hsl = function (h, s, l, a) {
    return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
  };

  if (this.hsl == null) this.hsl = Color.hsl;

  Color.rgb = function (r, g, b, a) {
    return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
  };

  if (this.rgb == null) this.rgb = Color.rgb;

  Color.detach = function (color) {
    color = new Color(color);
    return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
  };

  module.exports = Color;
},159,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Class = _$$_REQUIRE(_dependencyMap[0]);

  var Path = _$$_REQUIRE(_dependencyMap[1]);

  var MOVE_TO = 0;
  var CLOSE = 1;
  var LINE_TO = 2;
  var CURVE_TO = 3;
  var ARC = 4;
  var SerializablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof SerializablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        if (path.applyToPath) {
          path.applyToPath(this);
        } else {
          this.push(path);
        }
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE_TO, x, y);
    },
    onLine: function onLine(sx, sy, x, y) {
      this.path.push(LINE_TO, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
    },
    _arcToBezier: Path.prototype.onArc,
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      if (rx !== ry || rotation) {
        return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
      }

      this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
    },
    onClose: function onClose() {
      this.path.push(CLOSE);
    },
    toJSON: function toJSON() {
      return this.path;
    }
  });
  module.exports = SerializablePath;
},160,[161,162]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = function (mixins) {
    var proto = {};

    for (var i = 0, l = arguments.length; i < l; i++) {
      var mixin = arguments[i];
      if (typeof mixin == 'function') mixin = mixin.prototype;

      for (var key in mixin) {
        proto[key] = mixin[key];
      }
    }

    if (!proto.initialize) proto.initialize = function () {};

    proto.constructor = function (a, b, c, d, e, f, g, h) {
      return new proto.initialize(a, b, c, d, e, f, g, h);
    };

    proto.constructor.prototype = proto.initialize.prototype = proto;
    return proto.constructor;
  };
},161,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Class = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Class({
    initialize: function initialize(path) {
      this.reset().push(path);
    },
    push: function push() {
      var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
      if (!p) return this;
      var last,
          cmd = p[0],
          i = 1;

      while (cmd) {
        switch (cmd) {
          case 'm':
            this.move(p[i++], p[i++]);
            break;

          case 'l':
            this.line(p[i++], p[i++]);
            break;

          case 'c':
            this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
            break;

          case 's':
            this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);
            break;

          case 'q':
            this.curve(p[i++], p[i++], p[i++], p[i++]);
            break;

          case 't':
            this.curve(p[i++], p[i++]);
            break;

          case 'a':
            this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
            i += 7;
            break;

          case 'h':
            this.line(p[i++], 0);
            break;

          case 'v':
            this.line(0, p[i++]);
            break;

          case 'M':
            this.moveTo(p[i++], p[i++]);
            break;

          case 'L':
            this.lineTo(p[i++], p[i++]);
            break;

          case 'C':
            this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
            break;

          case 'S':
            this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);
            break;

          case 'Q':
            this.curveTo(p[i++], p[i++], p[i++], p[i++]);
            break;

          case 'T':
            this.curveTo(p[i++], p[i++]);
            break;

          case 'A':
            this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
            i += 7;
            break;

          case 'H':
            this.lineTo(p[i++], this.penY);
            break;

          case 'V':
            this.lineTo(this.penX, p[i++]);
            break;

          case 'Z':
          case 'z':
            this.close();
            break;

          default:
            cmd = last;
            i--;
            continue;
        }

        last = cmd;
        if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
        cmd = p[i++];
      }

      return this;
    },
    reset: function reset() {
      this.penX = this.penY = 0;
      this.penDownX = this.penDownY = null;
      this._pivotX = this._pivotY = 0;
      this.onReset();
      return this;
    },
    move: function move(x, y) {
      this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
      return this;
    },
    moveTo: function moveTo(x, y) {
      this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
      return this;
    },
    line: function line(x, y) {
      return this.lineTo(this.penX + +x, this.penY + +y);
    },
    lineTo: function lineTo(x, y) {
      if (this.penDownX == null) {
        this.penDownX = this.penX;
        this.penDownY = this.penY;
      }

      this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
      return this;
    },
    curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
      var x = this.penX,
          y = this.penY;
      return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
    },
    curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
      var x = this.penX,
          y = this.penY;

      if (c2x == null) {
        c2x = +c1x;
        c2y = +c1y;
        c1x = x * 2 - (this._pivotX || 0);
        c1y = y * 2 - (this._pivotY || 0);
      }

      if (ex == null) {
        this._pivotX = +c1x;
        this._pivotY = +c1y;
        ex = +c2x;
        ey = +c2y;
        c2x = (ex + +c1x * 2) / 3;
        c2y = (ey + +c1y * 2) / 3;
        c1x = (x + +c1x * 2) / 3;
        c1y = (y + +c1y * 2) / 3;
      } else {
        this._pivotX = +c2x;
        this._pivotY = +c2y;
      }

      if (this.penDownX == null) {
        this.penDownX = x;
        this.penDownY = y;
      }

      this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
      return this;
    },
    arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
      return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
    },
    arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
      ry = Math.abs(+ry || +rx || +y - this.penY);
      rx = Math.abs(+rx || +x - this.penX);
      if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);
      var tX = this.penX,
          tY = this.penY,
          clockwise = !+counterClockwise,
          large = !!+outer;
      var rad = rotation ? rotation * Math.PI / 180 : 0,
          cos = Math.cos(rad),
          sin = Math.sin(rad);
      x -= tX;
      y -= tY;
      var cx = cos * x / 2 + sin * y / 2,
          cy = -sin * x / 2 + cos * y / 2,
          rxry = rx * rx * ry * ry,
          rycx = ry * ry * cx * cx,
          rxcy = rx * rx * cy * cy,
          a = rxry - rxcy - rycx;

      if (a < 0) {
        a = Math.sqrt(1 - a / rxry);
        rx *= a;
        ry *= a;
        cx = x / 2;
        cy = y / 2;
      } else {
        a = Math.sqrt(a / (rxcy + rycx));
        if (large == clockwise) a = -a;
        var cxd = -a * cy * rx / ry,
            cyd = a * cx * ry / rx;
        cx = cos * cxd - sin * cyd + x / 2;
        cy = sin * cxd + cos * cyd + y / 2;
      }

      var xx = cos / rx,
          yx = sin / rx,
          xy = -sin / ry,
          yy = cos / ry;
      var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
          ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));
      cx += tX;
      cy += tY;
      x += tX;
      y += tY;

      if (this.penDownX == null) {
        this.penDownX = this.penX;
        this.penDownY = this.penY;
      }

      this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
      return this;
    },
    counterArc: function counterArc(x, y, rx, ry, outer) {
      return this.arc(x, y, rx, ry, outer, true);
    },
    counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
      return this.arcTo(x, y, rx, ry, outer, true);
    },
    close: function close() {
      if (this.penDownX != null) {
        this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
        this.penDownX = null;
      }

      return this;
    },
    onReset: function onReset() {},
    onMove: function onMove(sx, sy, ex, ey) {},
    onLine: function onLine(sx, sy, ex, ey) {
      this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
    },
    onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
      var gx = ex - sx,
          gy = ey - sy,
          g = gx * gx + gy * gy,
          v1,
          v2,
          cx,
          cy,
          u;
      cx = c1x - sx;
      cy = c1y - sy;
      u = cx * gx + cy * gy;

      if (u > g) {
        cx -= gx;
        cy -= gy;
      } else if (u > 0 && g != 0) {
        cx -= u / g * gx;
        cy -= u / g * gy;
      }

      v1 = cx * cx + cy * cy;
      cx = c2x - sx;
      cy = c2y - sy;
      u = cx * gx + cy * gy;

      if (u > g) {
        cx -= gx;
        cy -= gy;
      } else if (u > 0 && g != 0) {
        cx -= u / g * gx;
        cy -= u / g * gy;
      }

      v2 = cx * cx + cy * cy;

      if (v1 < 0.01 && v2 < 0.01) {
        this.onLine(sx, sy, ex, ey);
        return;
      }

      if (isNaN(v1) || isNaN(v2)) {
        throw new Error('Bad input');
      }

      var s1x = (c1x + c2x) * 0.5,
          s1y = (c1y + c2y) * 0.5,
          l1x = (c1x + sx) * 0.5,
          l1y = (c1y + sy) * 0.5,
          l2x = (l1x + s1x) * 0.5,
          l2y = (l1y + s1y) * 0.5,
          r2x = (ex + c2x) * 0.5,
          r2y = (ey + c2y) * 0.5,
          r1x = (r2x + s1x) * 0.5,
          r1y = (r2y + s1y) * 0.5,
          l2r1x = (l2x + r1x) * 0.5,
          l2r1y = (l2y + r1y) * 0.5;
      this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
      this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
    },
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      var rad = rotation ? rotation * Math.PI / 180 : 0,
          cos = Math.cos(rad),
          sin = Math.sin(rad),
          xx = cos * rx,
          yx = -sin * ry,
          xy = sin * rx,
          yy = cos * ry;
      var arc = ea - sa;
      if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;
      var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
          step = arc / n,
          k = 1.3333333333333333 * Math.tan(step / 4);
      var x = Math.cos(sa),
          y = Math.sin(sa);

      for (var i = 0; i < n; i++) {
        var cp1x = x - k * y,
            cp1y = y + k * x;
        sa += step;
        x = Math.cos(sa);
        y = Math.sin(sa);
        var cp2x = x + k * y,
            cp2y = y - k * x;
        this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
      }
    },
    onClose: function onClose(sx, sy, ex, ey) {
      this.onLine(sx, sy, ex, ey);
    }
  });
},162,[161]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Class = _$$_REQUIRE(_dependencyMap[0]);

  function Transform(xx, yx, xy, yy, x, y) {
    if (xx && typeof xx == 'object') {
      yx = xx.yx;
      yy = xx.yy;
      y = xx.y;
      xy = xx.xy;
      x = xx.x;
      xx = xx.xx;
    }

    this.xx = xx == null ? 1 : xx;
    this.yx = yx || 0;
    this.xy = xy || 0;
    this.yy = yy == null ? 1 : yy;
    this.x = (x == null ? this.x : x) || 0;
    this.y = (y == null ? this.y : y) || 0;

    this._transform();

    return this;
  }

  ;
  module.exports = Class({
    initialize: Transform,
    _transform: function _transform() {},
    xx: 1,
    yx: 0,
    x: 0,
    xy: 0,
    yy: 1,
    y: 0,
    transform: function transform(xx, yx, xy, yy, x, y) {
      var m = this;

      if (xx && typeof xx == 'object') {
        yx = xx.yx;
        yy = xx.yy;
        y = xx.y;
        xy = xx.xy;
        x = xx.x;
        xx = xx.xx;
      }

      if (!x) x = 0;
      if (!y) y = 0;
      return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
    },
    transformTo: Transform,
    translate: function translate(x, y) {
      return this.transform(1, 0, 0, 1, x, y);
    },
    move: function move(x, y) {
      this.x += x || 0;
      this.y += y || 0;

      this._transform();

      return this;
    },
    scale: function scale(x, y) {
      if (y == null) y = x;
      return this.transform(x, 0, 0, y, 0, 0);
    },
    rotate: function rotate(deg, x, y) {
      if (x == null || y == null) {
        x = (this.left || 0) + (this.width || 0) / 2;
        y = (this.top || 0) + (this.height || 0) / 2;
      }

      var rad = deg * Math.PI / 180,
          sin = Math.sin(rad),
          cos = Math.cos(rad);
      this.transform(1, 0, 0, 1, x, y);
      var m = this;
      return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
    },
    moveTo: function moveTo(x, y) {
      var m = this;
      return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
    },
    rotateTo: function rotateTo(deg, x, y) {
      var m = this;
      var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
      if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
      return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
    },
    scaleTo: function scaleTo(x, y) {
      var m = this;
      var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
      m.xx /= h;
      m.yx /= h;
      h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
      m.yy /= h;
      m.xy /= h;
      return this.scale(x, y);
    },
    resizeTo: function resizeTo(width, height) {
      var w = this.width,
          h = this.height;
      if (!w || !h) return this;
      return this.scaleTo(width / w, height / h);
    },
    inversePoint: function inversePoint(x, y) {
      var a = this.xx,
          b = this.yx,
          c = this.xy,
          d = this.yy,
          e = this.x,
          f = this.y;
      var det = b * c - a * d;
      if (det == 0) return null;
      return {
        x: (d * (e - x) + c * (y - f)) / det,
        y: (a * (f - y) + b * (x - e)) / det
      };
    },
    point: function point(x, y) {
      var m = this;
      return {
        x: m.xx * x + m.xy * y + m.x,
        y: m.yx * x + m.yy * y + m.y
      };
    }
  });
},163,[161]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewAttributes = {};
  ReactNativeViewAttributes.UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityComponentType: true,
    accessibilityLiveRegion: true,
    accessibilityRole: true,
    accessibilityStates: true,
    accessibilityTraits: true,
    accessibilityHint: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: ReactNativeStyleAttributes
  };
  ReactNativeViewAttributes.RCTView = _objectSpread({}, ReactNativeViewAttributes.UIView, {
    removeClippedSubviews: true
  });
  module.exports = ReactNativeViewAttributes;
},164,[43,53]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var mergeInto = _$$_REQUIRE(_dependencyMap[0]);

  var merge = function merge(one, two) {
    var result = {};
    mergeInto(result, one);
    mergeInto(result, two);
    return result;
  };

  module.exports = merge;
},165,[166]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var mergeHelpers = _$$_REQUIRE(_dependencyMap[0]);

  var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
  var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

  function mergeInto(one, two) {
    checkMergeIntoObjectArg(one);

    if (two != null) {
      checkMergeObjectArg(two);

      for (var key in two) {
        if (!two.hasOwnProperty(key)) {
          continue;
        }

        one[key] = two[key];
      }
    }
  }

  module.exports = mergeInto;
},166,[167]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var MAX_MERGE_DEPTH = 36;

  var isTerminal = function isTerminal(o) {
    return typeof o !== 'object' || o instanceof Date || o === null;
  };

  var mergeHelpers = {
    MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
    isTerminal: isTerminal,
    normalizeMergeArg: function normalizeMergeArg(arg) {
      return arg === undefined || arg === null ? {} : arg;
    },
    checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
      invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
    },
    checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
      mergeHelpers.checkMergeObjectArg(one);
      mergeHelpers.checkMergeObjectArg(two);
    },
    checkMergeObjectArg: function checkMergeObjectArg(arg) {
      invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
    },
    checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
      invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
    },
    checkMergeLevel: function checkMergeLevel(level) {
      invariant(level < MAX_MERGE_DEPTH, "Maximum deep merge depth exceeded. You may be attempting to merge circular structures in an unsupported way.");
    },
    checkArrayStrategy: function checkArrayStrategy(strategy) {
      invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, "You must provide an array strategy to deep merge functions to instruct the deep merge how to resolve merging two arrays.");
    },
    ArrayStrategies: {
      Clobber: 'Clobber',
      Concat: 'Concat',
      IndexByIndex: 'IndexByIndex'
    }
  };
  module.exports = mergeHelpers;
},167,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[5]);

  var Platform = _$$_REQUIRE(_dependencyMap[6]);

  var React = _$$_REQUIRE(_dependencyMap[7]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[8]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[9]);

  var Text = _$$_REQUIRE(_dependencyMap[10]);

  var TouchableNativeFeedback = _$$_REQUIRE(_dependencyMap[11]);

  var TouchableOpacity = _$$_REQUIRE(_dependencyMap[12]);

  var View = _$$_REQUIRE(_dependencyMap[13]);

  var invariant = _$$_REQUIRE(_dependencyMap[14]);

  var Button = function (_React$Component) {
    _inherits(Button, _React$Component);

    function Button() {
      _classCallCheck(this, Button);

      return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));
    }

    _createClass(Button, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            accessibilityLabel = _this$props.accessibilityLabel,
            color = _this$props.color,
            onPress = _this$props.onPress,
            title = _this$props.title,
            hasTVPreferredFocus = _this$props.hasTVPreferredFocus,
            disabled = _this$props.disabled,
            testID = _this$props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }

        var accessibilityStates = [];

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityStates.push('disabled');
        }

        invariant(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = title.toUpperCase();
        var Touchable = TouchableNativeFeedback;
        return React.createElement(Touchable, {
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: "button",
          accessibilityStates: accessibilityStates,
          hasTVPreferredFocus: hasTVPreferredFocus,
          testID: testID,
          disabled: disabled,
          onPress: onPress
        }, React.createElement(View, {
          style: buttonStyles
        }, React.createElement(Text, {
          style: textStyles,
          disabled: disabled
        }, formattedTitle)));
      }
    }]);

    return Button;
  }(React.Component);

  Button.propTypes = {
    title: PropTypes.string.isRequired,
    accessibilityLabel: PropTypes.string,
    color: ColorPropType,
    disabled: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    onPress: PropTypes.func.isRequired,
    testID: PropTypes.string
  };
  var styles = StyleSheet.create({
    button: {
      elevation: 4,
      backgroundColor: '#2196F3',
      borderRadius: 2
    },
    text: {
      color: 'white',
      textAlign: 'center',
      padding: 8,
      fontWeight: '500'
    },
    buttonDisabled: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    },
    textDisabled: {
      color: '#a1a1a1'
    }
  });
  module.exports = Button;
},168,[19,20,27,30,33,55,41,45,60,49,169,181,190,74,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var ReactNativeViewAttributes = _$$_REQUIRE(_dependencyMap[9]);

  var TextAncestor = _$$_REQUIRE(_dependencyMap[10]);

  var TextPropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var Touchable = _$$_REQUIRE(_dependencyMap[12]);

  var UIManager = _$$_REQUIRE(_dependencyMap[13]);

  var createReactNativeComponentClass = _$$_REQUIRE(_dependencyMap[14]);

  var nullthrows = _$$_REQUIRE(_dependencyMap[15]);

  var processColor = _$$_REQUIRE(_dependencyMap[16]);

  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var viewConfig = {
    validAttributes: _objectSpread({}, ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true
    }),
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };

  var TouchableText = function (_React$Component) {
    _inherits(TouchableText, _React$Component);

    function TouchableText() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, TouchableText);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TouchableText)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = _objectSpread({}, Touchable.Mixin.touchableGetInitialState(), {
        isHighlighted: false,
        createResponderHandlers: _this._createResponseHandlers.bind(_assertThisInitialized(_this)),
        responseHandlers: null
      });
      return _this;
    }

    _createClass(TouchableText, [{
      key: "render",
      value: function render() {
        var props = this.props;

        if (isTouchable(props)) {
          props = _objectSpread({}, props, this.state.responseHandlers, {
            isHighlighted: this.state.isHighlighted
          });
        }

        if (props.selectionColor != null) {
          props = _objectSpread({}, props, {
            selectionColor: processColor(props.selectionColor)
          });
        }

        return React.createElement(TextAncestor.Consumer, null, function (hasTextAncestor) {
          return hasTextAncestor ? React.createElement(RCTVirtualText, _extends({}, props, {
            ref: props.forwardedRef
          })) : React.createElement(TextAncestor.Provider, {
            value: true
          }, React.createElement(RCTText, _extends({}, props, {
            ref: props.forwardedRef
          })));
        });
      }
    }, {
      key: "_createResponseHandlers",
      value: function _createResponseHandlers() {
        var _this2 = this;

        return {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var onStartShouldSetResponder = _this2.props.onStartShouldSetResponder;
            var shouldSetResponder = (onStartShouldSetResponder == null ? false : onStartShouldSetResponder()) || isTouchable(_this2.props);

            if (shouldSetResponder) {
              _this2._attachTouchHandlers();
            }

            return shouldSetResponder;
          },
          onResponderGrant: function onResponderGrant(event, dispatchID) {
            nullthrows(_this2.touchableHandleResponderGrant)(event, dispatchID);

            if (_this2.props.onResponderGrant != null) {
              _this2.props.onResponderGrant.call(_this2, event, dispatchID);
            }
          },
          onResponderMove: function onResponderMove(event) {
            nullthrows(_this2.touchableHandleResponderMove)(event);

            if (_this2.props.onResponderMove != null) {
              _this2.props.onResponderMove.call(_this2, event);
            }
          },
          onResponderRelease: function onResponderRelease(event) {
            nullthrows(_this2.touchableHandleResponderRelease)(event);

            if (_this2.props.onResponderRelease != null) {
              _this2.props.onResponderRelease.call(_this2, event);
            }
          },
          onResponderTerminate: function onResponderTerminate(event) {
            nullthrows(_this2.touchableHandleResponderTerminate)(event);

            if (_this2.props.onResponderTerminate != null) {
              _this2.props.onResponderTerminate.call(_this2, event);
            }
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            var onResponderTerminationRequest = _this2.props.onResponderTerminationRequest;

            if (!nullthrows(_this2.touchableHandleResponderTerminationRequest)()) {
              return false;
            }

            if (onResponderTerminationRequest == null) {
              return true;
            }

            return onResponderTerminationRequest();
          }
        };
      }
    }, {
      key: "_attachTouchHandlers",
      value: function _attachTouchHandlers() {
        var _this3 = this;

        if (this.touchableGetPressRectOffset != null) {
          return;
        }

        for (var key in Touchable.Mixin) {
          if (typeof Touchable.Mixin[key] === 'function') {
            this[key] = Touchable.Mixin[key].bind(this);
          }
        }

        this.touchableHandleActivePressIn = function () {
          if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
            _this3.setState({
              isHighlighted: true
            });
          }
        };

        this.touchableHandleActivePressOut = function () {
          if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
            _this3.setState({
              isHighlighted: false
            });
          }
        };

        this.touchableHandlePress = function (event) {
          if (_this3.props.onPress != null) {
            _this3.props.onPress(event);
          }
        };

        this.touchableHandleLongPress = function (event) {
          if (_this3.props.onLongPress != null) {
            _this3.props.onLongPress(event);
          }
        };

        this.touchableGetPressRectOffset = function () {
          return _this3.props.pressRetentionOffset == null ? PRESS_RECT_OFFSET : _this3.props.pressRetentionOffset;
        };
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        return prevState.responseHandlers == null && isTouchable(nextProps) ? _objectSpread({}, prevState, {
          responseHandlers: prevState.createResponderHandlers()
        }) : null;
      }
    }]);

    return TouchableText;
  }(React.Component);

  TouchableText.defaultProps = {
    accessible: true,
    allowFontScaling: true,
    ellipsizeMode: 'tail'
  };
  TouchableText.viewConfig = viewConfig;

  var isTouchable = function isTouchable(props) {
    return props.onPress != null || props.onLongPress != null || props.onStartShouldSetResponder != null;
  };

  var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });
  var RCTVirtualText = UIManager.RCTVirtualText == null ? RCTText : createReactNativeComponentClass('RCTVirtualText', function () {
    return {
      validAttributes: _objectSpread({}, ReactNativeViewAttributes.UIView, {
        isHighlighted: true
      }),
      uiViewClassName: 'RCTVirtualText'
    };
  });

  var Text = function Text(props, forwardedRef) {
    return React.createElement(TouchableText, _extends({}, props, {
      forwardedRef: forwardedRef
    }));
  };

  var TextToExport = React.forwardRef(Text);
  TextToExport.displayName = 'Text';
  TextToExport.propTypes = TextPropTypes;
  module.exports = TextToExport;
},169,[8,19,20,27,30,29,33,43,45,164,75,170,174,40,148,180,68]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[1]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[3]);

  var TextStylePropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var stylePropType = StyleSheetPropType(TextStylePropTypes);
  module.exports = {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
    numberOfLines: PropTypes.number,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onLayout: PropTypes.func,
    onPress: PropTypes.func,
    onLongPress: PropTypes.func,
    pressRetentionOffset: EdgeInsetsPropType,
    selectable: PropTypes.bool,
    selectionColor: ColorPropType,
    suppressHighlighting: PropTypes.bool,
    style: stylePropType,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    allowFontScaling: PropTypes.bool,
    accessible: PropTypes.bool,
    adjustsFontSizeToFit: PropTypes.bool,
    minimumFontScale: PropTypes.number,
    disabled: PropTypes.bool
  };
},170,[55,171,60,172,66]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var EdgeInsetsPropType = PropTypes.shape({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = EdgeInsetsPropType;
},171,[60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createStrictShapeTypeChecker = _$$_REQUIRE(_dependencyMap[0]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[1]);

  function StyleSheetPropType(shape) {
    var shapePropType = createStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = StyleSheetPropType;
},172,[173,73]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var merge = _$$_REQUIRE(_dependencyMap[1]);

  function createStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var _key2 in allKeys) {
        var checker = shapeTypes[_key2];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, _key2, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
        rest[_key3 - 4] = arguments[_key3];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = createStrictShapeTypeChecker;
},173,[3,165]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var BoundingDimensions = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var Position = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var TVEventHandler = _$$_REQUIRE(_dependencyMap[6]);

  var TouchEventUtils = _$$_REQUIRE(_dependencyMap[7]);

  var UIManager = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[10]);

  var normalizeColor = _$$_REQUIRE(_dependencyMap[11]);

  var States = keyMirror({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });
  var IsActive = {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = keyMirror({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = 370;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!Platform.isTV) {
        return;
      }

      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = ReactNative.findNodeHandle(cmp);
        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleFocus(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleBlur(evt);
          } else if (evt.eventType === 'select') {
            cmp.touchableHandlePress && !cmp.props.disabled && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
        return;
      }

      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left;
        pressExpandTop += hitSlop.top;
        pressExpandRight += hitSlop.right;
        pressExpandBottom += hitSlop.bottom;
      }

      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    touchableHandleFocus: function touchableHandleFocus(e) {
      this.props.onFocus && this.props.onFocus(e);
    },
    touchableHandleBlur: function touchableHandleBlur(e) {
      this.props.onBlur && this.props.onBlur(e);
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var tag = this.state.touchable.responderID;

      if (tag == null) {
        return;
      }

      UIManager.measure(tag, this._handleQueryLayout);
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
      } else {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      if (!IsActive[curState] && IsActive[nextState]) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          {
            this._playTouchSound();
          }
          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _playTouchSound: function _playTouchSound() {
      UIManager.playTouchSound();
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    }
  };
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }
      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
      return React.createElement(View, {
        pointerEvents: "none",
        style: _objectSpread({
          position: 'absolute',
          borderColor: hexColor.slice(0, -2) + '55',
          borderWidth: 1,
          borderStyle: 'dashed',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle)
      });
    }
  };
  module.exports = Touchable;
},174,[43,175,41,177,45,77,178,179,40,74,58,56]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _$$_REQUIRE(_dependencyMap[0]);

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},175,[176]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance = Klass.instancePool.pop();

      Klass.call(_instance, copyFieldsFrom);
      return _instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance2 = Klass.instancePool.pop();

      Klass.call(_instance2, a1, a2);
      return _instance2;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance3 = Klass.instancePool.pop();

      Klass.call(_instance3, a1, a2, a3);
      return _instance3;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance4 = Klass.instancePool.pop();

      Klass.call(_instance4, a1, a2, a3, a4);
      return _instance4;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},176,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _$$_REQUIRE(_dependencyMap[0]);

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  PooledClass.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},177,[176]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var TVNavigationEventEmitter = _$$_REQUIRE(_dependencyMap[1]).TVNavigationEventEmitter;

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  function TVEventHandler() {
    this.__nativeTVNavigationEventListener = null;
    this.__nativeTVNavigationEventEmitter = null;
  }

  TVEventHandler.prototype.enable = function (component, callback) {
    this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(TVNavigationEventEmitter);
    this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onHWKeyEvent', function (data) {
      if (callback) {
        callback(component, data);
      }
    });
  };

  TVEventHandler.prototype.disable = function () {
    if (this.__nativeTVNavigationEventListener) {
      this.__nativeTVNavigationEventListener.remove();

      delete this.__nativeTVNavigationEventListener;
    }

    if (this.__nativeTVNavigationEventEmitter) {
      delete this.__nativeTVNavigationEventEmitter;
    }
  };

  module.exports = TVEventHandler;
},178,[41,5,111]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var TouchEventUtils = {
    extractSingleTouch: function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
    }
  };
  module.exports = TouchEventUtils;
},179,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var nullthrows = function nullthrows(x) {
    if (x != null) {
      return x;
    }

    throw new Error("Got unexpected null or undefined");
  };

  module.exports = nullthrows;
},180,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var Touchable = _$$_REQUIRE(_dependencyMap[6]);

  var TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[7]);

  var UIManager = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[10]);

  var ensurePositiveDelayProps = _$$_REQUIRE(_dependencyMap[11]);

  var processColor = _$$_REQUIRE(_dependencyMap[12]);

  var rippleBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['RippleAndroid']),
    color: PropTypes.number,
    borderless: PropTypes.bool
  });
  var themeAttributeBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['ThemeAttrAndroid']),
    attribute: PropTypes.string.isRequired
  });
  var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableNativeFeedback = createReactClass({
    displayName: 'TouchableNativeFeedback',
    propTypes: _objectSpread({}, TouchableWithoutFeedback.propTypes, {
      background: backgroundPropType,
      hasTVPreferredFocus: PropTypes.bool,
      useForeground: PropTypes.bool
    }),
    statics: {
      SelectableBackground: function SelectableBackground() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackground'
        };
      },
      SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackgroundBorderless'
        };
      },
      Ripple: function Ripple(color, borderless) {
        return {
          type: 'RippleAndroid',
          color: processColor(color),
          borderless: borderless
        };
      },
      canUseNativeForeground: function canUseNativeForeground() {
        return Platform.Version >= 23;
      }
    },
    mixins: [Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return {
        background: this.SelectableBackground()
      };
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);

      this._dispatchPressedStateChange(true);

      if (this.pressInLocation) {
        this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
      }
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);

      this._dispatchPressedStateChange(false);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _handleResponderMove: function _handleResponderMove(e) {
      this.touchableHandleResponderMove(e);

      this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
    },
    _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
    },
    _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
    },
    render: function render() {
      var _objectSpread2;

      var child = React.Children.only(this.props.children);
      var children = child.props.children;

      if (Touchable.TOUCH_TARGET_DEBUG && child.type === View) {
        if (!Array.isArray(children)) {
          children = [children];
        }

        children.push(Touchable.renderDebugView({
          color: 'brown',
          hitSlop: this.props.hitSlop
        }));
      }

      if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
        console.warn("Requested foreground ripple, but it is not available on this version of Android. Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different Touchable if the result is false.");
      }

      var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';

      var childProps = _objectSpread({}, child.props, (_objectSpread2 = {}, _defineProperty(_objectSpread2, drawableProp, this.props.background), _defineProperty(_objectSpread2, "accessible", this.props.accessible !== false), _defineProperty(_objectSpread2, "accessibilityLabel", this.props.accessibilityLabel), _defineProperty(_objectSpread2, "accessibilityRole", this.props.accessibilityRole), _defineProperty(_objectSpread2, "accessibilityStates", this.props.accessibilityStates), _defineProperty(_objectSpread2, "children", children), _defineProperty(_objectSpread2, "testID", this.props.testID), _defineProperty(_objectSpread2, "onLayout", this.props.onLayout), _defineProperty(_objectSpread2, "hitSlop", this.props.hitSlop), _defineProperty(_objectSpread2, "isTVSelectable", true), _defineProperty(_objectSpread2, "hasTVPreferredFocus", this.props.hasTVPreferredFocus), _defineProperty(_objectSpread2, "onStartShouldSetResponder", this.touchableHandleStartShouldSetResponder), _defineProperty(_objectSpread2, "onResponderTerminationRequest", this.touchableHandleResponderTerminationRequest), _defineProperty(_objectSpread2, "onResponderGrant", this.touchableHandleResponderGrant), _defineProperty(_objectSpread2, "onResponderMove", this._handleResponderMove), _defineProperty(_objectSpread2, "onResponderRelease", this.touchableHandleResponderRelease), _defineProperty(_objectSpread2, "onResponderTerminate", this.touchableHandleResponderTerminate), _objectSpread2));

      return React.cloneElement(child, childProps);
    }
  });
  module.exports = TouchableNativeFeedback;
},181,[44,43,41,45,60,77,174,182,40,74,184,188,68]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[3]);

  var Touchable = _$$_REQUIRE(_dependencyMap[4]);

  var View = _$$_REQUIRE(_dependencyMap[5]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[6]);

  var ensurePositiveDelayProps = _$$_REQUIRE(_dependencyMap[7]);

  var warning = _$$_REQUIRE(_dependencyMap[8]);

  var _require = _$$_REQUIRE(_dependencyMap[9]),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityRoles = _require.AccessibilityRoles,
      AccessibilityStates = _require.AccessibilityStates,
      AccessibilityTraits = _require.AccessibilityTraits;

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableWithoutFeedback = createReactClass({
    displayName: 'TouchableWithoutFeedback',
    mixins: [TimerMixin, Touchable.Mixin],
    propTypes: {
      accessible: PropTypes.bool,
      accessibilityLabel: PropTypes.node,
      accessibilityHint: PropTypes.string,
      accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
      accessibilityRole: PropTypes.oneOf(AccessibilityRoles),
      accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(AccessibilityStates)),
      accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
      onFocus: PropTypes.func,
      onBlur: PropTypes.func,
      disabled: PropTypes.bool,
      onPress: PropTypes.func,
      onPressIn: PropTypes.func,
      onPressOut: PropTypes.func,
      onLayout: PropTypes.func,
      onLongPress: PropTypes.func,
      nativeID: PropTypes.string,
      testID: PropTypes.string,
      delayPressIn: PropTypes.number,
      delayPressOut: PropTypes.number,
      delayLongPress: PropTypes.number,
      pressRetentionOffset: EdgeInsetsPropType,
      hitSlop: EdgeInsetsPropType
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      var children = child.props.children;

      if (Touchable.TOUCH_TARGET_DEBUG && child.type === View) {
        children = React.Children.toArray(children);
        children.push(Touchable.renderDebugView({
          color: 'red',
          hitSlop: this.props.hitSlop
        }));
      }

      return React.cloneElement(child, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        children: children
      });
    }
  });
  module.exports = TouchableWithoutFeedback;
},182,[171,45,60,183,174,74,184,188,103,189]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},183,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  var factory = _$$_REQUIRE(_dependencyMap[1]);

  if (typeof React === 'undefined') {
    throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},184,[46,185]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _assign = _$$_REQUIRE(_dependencyMap[0]);

  var emptyObject = _$$_REQUIRE(_dependencyMap[1]);

  var _invariant = _$$_REQUIRE(_dependencyMap[2]);

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;
  {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {}
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.");

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.", specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, "ReactClass: You are attempting to define a reserved property, `%s`, that shouldn't be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.", name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},185,[48,186,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};
  module.exports = emptyObject;
},186,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},187,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
    invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
  };

  module.exports = ensurePositiveDelayProps;
},188,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
    AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked'],
    AccessibilityRoles: ['none', 'button', 'link', 'search', 'image', 'keyboardkey', 'text', 'adjustable', 'imagebutton', 'header', 'summary'],
    AccessibilityStates: ['selected', 'disabled']
  };
},189,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var Animated = _$$_REQUIRE(_dependencyMap[1]);

  var Easing = _$$_REQUIRE(_dependencyMap[2]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[6]);

  var Touchable = _$$_REQUIRE(_dependencyMap[7]);

  var TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[8]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[9]);

  var ensurePositiveDelayProps = _$$_REQUIRE(_dependencyMap[10]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[11]);

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableOpacity = createReactClass({
    displayName: 'TouchableOpacity',
    mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],
    propTypes: _objectSpread({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        activeOpacity: 0.2
      };
    },
    getInitialState: function getInitialState() {
      return _objectSpread({}, this.touchableGetInitialState(), {
        anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
      });
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
      if (this.props.disabled !== prevProps.disabled) {
        this._opacityInactive(250);
      }
    },
    setOpacityTo: function setOpacityTo(value, duration) {
      Animated.timing(this.state.anim, {
        toValue: value,
        duration: duration,
        easing: Easing.inOut(Easing.quad),
        useNativeDriver: true
      }).start();
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      if (e.dispatchConfig.registrationName === 'onResponderGrant') {
        this._opacityActive(0);
      } else {
        this._opacityActive(150);
      }

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this._opacityInactive(250);

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _opacityActive: function _opacityActive(duration) {
      this.setOpacityTo(this.props.activeOpacity, duration);
    },
    _opacityInactive: function _opacityInactive(duration) {
      this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    },
    _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
      var childStyle = flattenStyle(this.props.style) || {};
      return childStyle.opacity == undefined ? 1 : childStyle.opacity;
    },
    render: function render() {
      return React.createElement(Animated.View, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        style: [this.props.style, {
          opacity: this.state.anim
        }],
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        isTVSelectable: true,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate
      }, this.props.children, Touchable.renderDebugView({
        color: 'cyan',
        hitSlop: this.props.hitSlop
      }));
    }
  });
  module.exports = TouchableOpacity;
},190,[43,191,217,250,45,60,183,174,182,184,188,73]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[1]);

  var FlatList = _$$_REQUIRE(_dependencyMap[2]);

  var Image = _$$_REQUIRE(_dependencyMap[3]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[4]);

  var SectionList = _$$_REQUIRE(_dependencyMap[5]);

  var Text = _$$_REQUIRE(_dependencyMap[6]);

  var View = _$$_REQUIRE(_dependencyMap[7]);

  module.exports = _objectSpread({}, AnimatedImplementation, {
    View: AnimatedImplementation.createAnimatedComponent(View),
    Text: AnimatedImplementation.createAnimatedComponent(Text),
    Image: AnimatedImplementation.createAnimatedComponent(Image),
    ScrollView: AnimatedImplementation.createAnimatedComponent(ScrollView),
    FlatList: AnimatedImplementation.createAnimatedComponent(FlatList),
    SectionList: AnimatedImplementation.createAnimatedComponent(SectionList)
  });
},191,[43,192,220,244,226,248,169,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _require = _$$_REQUIRE(_dependencyMap[1]),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedAddition = _$$_REQUIRE(_dependencyMap[2]);

  var AnimatedDiffClamp = _$$_REQUIRE(_dependencyMap[3]);

  var AnimatedDivision = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedModulo = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedMultiplication = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedProps = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedSubtraction = _$$_REQUIRE(_dependencyMap[10]);

  var AnimatedTracking = _$$_REQUIRE(_dependencyMap[11]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[12]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[13]);

  var DecayAnimation = _$$_REQUIRE(_dependencyMap[14]);

  var SpringAnimation = _$$_REQUIRE(_dependencyMap[15]);

  var TimingAnimation = _$$_REQUIRE(_dependencyMap[16]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[17]);

  var add = function add(a, b) {
    return new AnimatedAddition(a, b);
  };

  var subtract = function subtract(a, b) {
    return new AnimatedSubtraction(a, b);
  };

  var divide = function divide(a, b) {
    return new AnimatedDivision(a, b);
  };

  var multiply = function multiply(a, b) {
    return new AnimatedMultiplication(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new AnimatedModulo(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new AnimatedDiffClamp(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof AnimatedValueXY) {
      var configX = _objectSpread({}, config);

      var configY = _objectSpread({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var _start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function start(callback) {
        _start(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _objectSpread({}, config, {
          iterations: iterations
        });

        _start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var _start2 = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function start(callback) {
        _start2(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _objectSpread({}, config, {
          iterations: iterations
        });

        _start2(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var _start3 = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function start(callback) {
        _start3(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _objectSpread({}, config, {
          iterations: iterations
        });

        _start3(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new AnimatedValue(0), {
      toValue: 0,
      delay: time,
      duration: 0
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new AnimatedEvent(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    subtract: subtract,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},192,[43,193,201,202,203,195,204,205,196,206,209,210,194,211,212,214,216,219]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[2]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var _require = _$$_REQUIRE(_dependencyMap[3]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof AnimatedValue) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = ReactNative.findNodeHandle(viewRef);
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
    return {
      detach: function detach() {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    };
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AnimatedEvent);

      this._listeners = [];
      this._argMapping = argMapping;

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = shouldUseNativeDriver(config);
    }

    _createClass(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          return this._callListeners;
        }

        return function () {
          for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
              recMapping.setValue(recEvt);
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          if (!_this.__isNative) {
            _this._argMapping.forEach(function (mapping, idx) {
              traverse(mapping, args[idx], 'arg' + idx);
            });
          }

          _this._callListeners.apply(_this, args);
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      }
    }, {
      key: "_validateMapping",
      value: function _validateMapping() {
        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number') {
            invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
          }

          invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
          invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

          for (var mappingKey in recMapping) {
            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        };
      }
    }]);

    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},193,[19,20,194,197,77,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

  var InteractionManager = _$$_REQUIRE(_dependencyMap[9]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[10]);

  var NativeAnimatedAPI = NativeAnimatedHelper.API;
  var _uniqueId = 1;

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    _inherits(AnimatedValue, _AnimatedWithChildren);

    function AnimatedValue(value) {
      var _this;

      _classCallCheck(this, AnimatedValue);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedValue).call(this));
      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();

        _get(_getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        _get(_getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

        if (Object.keys(this._listeners).length) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && Object.keys(this._listeners).length === 0) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this2 = this;

        if (this.__nativeAnimatedValueListener) {
          return;
        }

        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this2.__getNativeTag()) {
            return;
          }

          _this2._updateValue(data.value, false);
        });
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this3 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = InteractionManager.createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this3._updateValue(value, true);
        }, function (result) {
          _this3._animation = null;

          if (handle !== null) {
            InteractionManager.clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        this._value = value;

        if (flush) {
          _flush(this);
        }

        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: this.__getValue()
          });
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);

    return AnimatedValue;
  }(AnimatedWithChildren);

  module.exports = AnimatedValue;
},194,[19,20,27,30,31,33,195,196,198,199,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var normalizeColor = _$$_REQUIRE(_dependencyMap[11]);

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -(1 / 0)) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -(1 / 0)) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var int32Color = normalizeColor(input);

    if (int32Color === null) {
      return input;
    }

    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[0-9\.-]+/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;
    invariant(outputRange.length >= 2, 'Bad output range');
    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(_objectSpread({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);
        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        return String(rounded);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    invariant(arr.length >= 2, name + ' must have at least 2 elements');
    invariant(arr.length !== 2 || arr[0] !== -(1 / 0) || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = function (_AnimatedWithChildren) {
    _inherits(AnimatedInterpolation, _AnimatedWithChildren);

    function AnimatedInterpolation(parent, config) {
      var _this;

      _classCallCheck(this, AnimatedInterpolation);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedInterpolation).call(this));
      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    _createClass(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        _get(_getPrototypeOf(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _get(_getPrototypeOf(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(function (value) {
          if (typeof value !== 'string') {
            return value;
          }

          if (/deg$/.test(value)) {
            var degrees = parseFloat(value) || 0;
            var radians = degrees * Math.PI / 180.0;
            return radians;
          } else {
            return parseFloat(value) || 0;
          }
        });
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);

    return AnimatedInterpolation;
  }(AnimatedWithChildren);

  AnimatedInterpolation.__createInterpolation = createInterpolation;
  module.exports = AnimatedInterpolation;
},195,[19,20,27,30,31,33,43,196,198,197,3,56]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var AnimatedNode = function () {
    function AnimatedNode() {
      _classCallCheck(this, AnimatedNode);
    }

    _createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        NativeAnimatedHelper.assertNativeAnimatedModule();
        invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        if (this.__nativeTag == null) {
          var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
          NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
          this.__nativeTag = nativeTag;
        }

        return this.__nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);

    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},196,[19,20,197,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedModule = _$$_REQUIRE(_dependencyMap[0]).NativeAnimatedModule;

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter;
  var API = {
    createAnimatedNode: function createAnimatedNode(tag, config) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    borderRadius: true,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(key)) {
        throw new Error("Style property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var key in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
        throw new Error("Interpolation property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    invariant(NativeAnimatedModule, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver && !NativeAnimatedModule) {
      if (!_warnedMissingNativeAnimated) {
        console.warn("Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420");
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
      }

      return nativeEventEmitter;
    }

  };
},197,[5,111,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[5]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedWithChildren = function (_AnimatedNode) {
    _inherits(AnimatedWithChildren, _AnimatedNode);

    function AnimatedWithChildren() {
      var _this;

      _classCallCheck(this, AnimatedWithChildren);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedWithChildren).call(this));
      _this._children = [];
      return _this;
    }

    _createClass(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _child = _ref;

            _child.__makeNative();

            NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), _child.__getNativeTag());
          }
        }
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }]);

    return AnimatedWithChildren;
  }(AnimatedNode);

  module.exports = AnimatedWithChildren;
},198,[19,20,27,30,33,196,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var Set = _$$_REQUIRE(_dependencyMap[2]);

  var TaskQueue = _$$_REQUIRE(_dependencyMap[3]);

  var infoLog = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[6]);

  var _emitter = new EventEmitter();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: keyMirror({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG;

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG;
      invariant(!!handle, 'Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},199,[13,35,86,200,139,3,58]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var infoLog = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;

      _classCallCheck(this, TaskQueue);

      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    _createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return _objectSpread({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG;

              this._genPromise(task);
            } else if (task.run) {
              DEBUG;
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG;
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG;
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG;
        DEBUG;
        task.gen().then(function () {
          DEBUG;
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);

    return TaskQueue;
  }();

  module.exports = TaskQueue;
},200,[43,19,20,139,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedAddition = function (_AnimatedWithChildren) {
    _inherits(AnimatedAddition, _AnimatedWithChildren);

    function AnimatedAddition(a, b) {
      var _this;

      _classCallCheck(this, AnimatedAddition);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedAddition).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedAddition;
  }(AnimatedWithChildren);

  module.exports = AnimatedAddition;
},201,[19,20,27,30,31,33,195,196,194,198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    _inherits(AnimatedDiffClamp, _AnimatedWithChildren);

    function AnimatedDiffClamp(a, min, max) {
      var _this;

      _classCallCheck(this, AnimatedDiffClamp);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedDiffClamp).call(this));
      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    _createClass(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _get(_getPrototypeOf(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _get(_getPrototypeOf(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);

    return AnimatedDiffClamp;
  }(AnimatedWithChildren);

  module.exports = AnimatedDiffClamp;
},202,[19,20,27,30,31,33,195,196,198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedDivision = function (_AnimatedWithChildren) {
    _inherits(AnimatedDivision, _AnimatedWithChildren);

    function AnimatedDivision(a, b) {
      var _this;

      _classCallCheck(this, AnimatedDivision);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedDivision).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedDivision;
  }(AnimatedWithChildren);

  module.exports = AnimatedDivision;
},203,[19,20,27,30,31,33,195,196,194,198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedModulo = function (_AnimatedWithChildren) {
    _inherits(AnimatedModulo, _AnimatedWithChildren);

    function AnimatedModulo(a, modulus) {
      var _this;

      _classCallCheck(this, AnimatedModulo);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedModulo).call(this));
      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    _createClass(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _get(_getPrototypeOf(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _get(_getPrototypeOf(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);

    return AnimatedModulo;
  }(AnimatedWithChildren);

  module.exports = AnimatedModulo;
},204,[19,20,27,30,31,33,195,196,198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    _inherits(AnimatedMultiplication, _AnimatedWithChildren);

    function AnimatedMultiplication(a, b) {
      var _this;

      _classCallCheck(this, AnimatedMultiplication);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedMultiplication).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedMultiplication;
  }(AnimatedWithChildren);

  module.exports = AnimatedMultiplication;
},205,[19,20,27,30,31,33,195,196,194,198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _get = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedStyle = _$$_REQUIRE(_dependencyMap[9]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[10]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[11]);

  var invariant = _$$_REQUIRE(_dependencyMap[12]);

  var AnimatedProps = function (_AnimatedNode) {
    _inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, callback) {
      var _this;

      _classCallCheck(this, AnimatedProps);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedProps).call(this));

      if (props.style) {
        props = _objectSpread({}, props, {
          style: new AnimatedStyle(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative || value instanceof AnimatedStyle) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        _get(_getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof AnimatedNode) {
            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);

    return AnimatedProps;
  }(AnimatedNode);

  module.exports = AnimatedProps;
},206,[43,19,20,27,30,31,33,193,196,207,197,77,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _get = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedTransform = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[10]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[11]);

  var AnimatedStyle = function (_AnimatedWithChildren) {
    _inherits(AnimatedStyle, _AnimatedWithChildren);

    function AnimatedStyle(style) {
      var _this;

      _classCallCheck(this, AnimatedStyle);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedStyle).call(this));
      style = flattenStyle(style) || {};

      if (style.transform) {
        style = _objectSpread({}, style, {
          transform: new AnimatedTransform(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    _createClass(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        _get(_getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }

        _get(_getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof AnimatedNode) {
            styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
          }
        }

        NativeAnimatedHelper.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);

    return AnimatedStyle;
  }(AnimatedWithChildren);

  module.exports = AnimatedStyle;
},207,[43,19,20,27,30,31,33,196,208,198,197,73]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[7]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedTransform = function (_AnimatedWithChildren) {
    _inherits(AnimatedTransform, _AnimatedWithChildren);

    function AnimatedTransform(transforms) {
      var _this;

      _classCallCheck(this, AnimatedTransform);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedTransform).call(this));
      _this._transforms = transforms;
      return _this;
    }

    _createClass(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }
        });

        _get(_getPrototypeOf(AnimatedTransform.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__removeChild(_this3);
            }
          }
        });

        _get(_getPrototypeOf(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: value
              });
            }
          }
        });

        NativeAnimatedHelper.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);

    return AnimatedTransform;
  }(AnimatedWithChildren);

  module.exports = AnimatedTransform;
},208,[19,20,27,30,31,33,196,198,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedSubtraction = function (_AnimatedWithChildren) {
    _inherits(AnimatedSubtraction, _AnimatedWithChildren);

    function AnimatedSubtraction(a, b) {
      var _this;

      _classCallCheck(this, AnimatedSubtraction);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedSubtraction).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedSubtraction;
  }(AnimatedWithChildren);

  module.exports = AnimatedSubtraction;
},209,[19,20,27,30,31,33,195,196,194,198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _get = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[8]);

  var _require = _$$_REQUIRE(_dependencyMap[9]),
      generateNewAnimationId = _require.generateNewAnimationId,
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var AnimatedTracking = function (_AnimatedNode) {
    _inherits(AnimatedTracking, _AnimatedNode);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      var _this;

      _classCallCheck(this, AnimatedTracking);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedTracking).call(this));
      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._useNativeDriver = shouldUseNativeDriver(animationConfig);
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedTracking, [{
      key: "__makeNative",
      value: function __makeNative() {
        this.__isNative = true;

        this._parent.__makeNative();

        _get(_getPrototypeOf(AnimatedTracking.prototype), "__makeNative", this).call(this);

        this._value.__makeNative();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);

        if (this._useNativeDriver) {
          this.__makeNative();
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _get(_getPrototypeOf(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(_objectSpread({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var animation = new this._animationClass(_objectSpread({}, this._animationConfig, {
          toValue: undefined
        }));

        var animationConfig = animation.__getNativeAnimationConfig();

        return {
          type: 'tracking',
          animationId: generateNewAnimationId(),
          animationConfig: animationConfig,
          toValue: this._parent.__getNativeTag(),
          value: this._value.__getNativeTag()
        };
      }
    }]);

    return AnimatedTracking;
  }(AnimatedNode);

  module.exports = AnimatedTracking;
},210,[43,19,20,27,30,31,33,194,196,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[6]);

  var invariant = _$$_REQUIRE(_dependencyMap[7]);

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    _inherits(AnimatedValueXY, _AnimatedWithChildren);

    function AnimatedValueXY(valueIn) {
      var _this;

      _classCallCheck(this, AnimatedValueXY);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedValueXY).call(this));
      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new AnimatedValue(value.x);
        _this.y = new AnimatedValue(value.y);
      } else {
        invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, "AnimatedValueXY must be initialized with an object of numbers or AnimatedValues.");
        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);

    return AnimatedValueXY;
  }(AnimatedWithChildren);

  module.exports = AnimatedValueXY;
},211,[19,20,27,30,33,194,198,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var Animation = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var DecayAnimation = function (_Animation) {
    _inherits(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      var _this;

      _classCallCheck(this, DecayAnimation);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DecayAnimation).call(this));
      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      return _this;
    }

    _createClass(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(_getPrototypeOf(DecayAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return DecayAnimation;
  }(Animation);

  module.exports = DecayAnimation;
},212,[19,20,27,30,31,33,213,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[2]);

  var Animation = function () {
    function Animation() {
      _classCallCheck(this, Animation);
    }

    _createClass(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);

    return Animation;
  }();

  module.exports = Animation;
},213,[19,20,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[7]);

  var Animation = _$$_REQUIRE(_dependencyMap[8]);

  var SpringConfig = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var _require = _$$_REQUIRE(_dependencyMap[11]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    _inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      var _this;

      _classCallCheck(this, SpringAnimation);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SpringAnimation).call(this));
      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      invariant(_this._damping > 0, 'Damping value must be greater than 0');
      invariant(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    _createClass(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(_getPrototypeOf(SpringAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return SpringAnimation;
  }(Animation);

  module.exports = SpringAnimation;
},214,[19,20,27,30,31,33,194,211,213,215,3,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},215,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[7]);

  var Animation = _$$_REQUIRE(_dependencyMap[8]);

  var _require = _$$_REQUIRE(_dependencyMap[9]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var _easeInOut;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = _$$_REQUIRE(_dependencyMap[10]);

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    _inherits(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      var _this;

      _classCallCheck(this, TimingAnimation);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(TimingAnimation).call(this));
      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut();
      _this._duration = config.duration !== undefined ? config.duration : 500;
      _this._delay = config.delay !== undefined ? config.delay : 0;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      return _this;
    }

    _createClass(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 16.666666666666668;
        var frames = [];

        for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
          frames.push(this._easing(dt / this._duration));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(_getPrototypeOf(TimingAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return TimingAnimation;
  }(Animation);

  module.exports = TimingAnimation;
},216,[19,20,27,30,31,33,194,211,213,197,217]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _ease;

  var Easing = function () {
    function Easing() {
      _classCallCheck(this, Easing);
    }

    _createClass(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 0.36363636363636365) {
          return 7.5625 * t * t;
        }

        if (t < 0.7272727272727273) {
          t -= 0.5454545454545454;
          return 7.5625 * t * t + 0.75;
        }

        if (t < 0.9090909090909091) {
          t -= 0.8181818181818182;
          return 7.5625 * t * t + 0.9375;
        }

        t -= 0.9545454545454546;
        return 7.5625 * t * t + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = _$$_REQUIRE(_dependencyMap[2]);

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);

    return Easing;
  }();

  module.exports = Easing;
},217,[19,20,218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 0.1;
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = 10;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},218,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedProps = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[10]);

  var invariant = _$$_REQUIRE(_dependencyMap[11]);

  function createAnimatedComponent(Component) {
    invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, "`createAnimatedComponent` does not support stateless functional components; use a class component instead.");

    var AnimatedComponent = function (_React$Component) {
      _inherits(AnimatedComponent, _React$Component);

      function AnimatedComponent(props) {
        var _this;

        _classCallCheck(this, AnimatedComponent);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedComponent).call(this, props));
        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
          }
        };

        _this._setComponentRef = _this._setComponentRef.bind(_assertThisInitialized(_this));
        return _this;
      }

      _createClass(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "UNSAFE_componentWillMount",
        value: function UNSAFE_componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this2 = this;

          var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
          oldPropsAnimated && oldPropsAnimated.__detach();
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, _extends({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable
          }));
        }
      }, {
        key: "_setComponentRef",
        value: function _setComponentRef(c) {
          this._prevComponent = this._component;
          this._component = c;
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);

      return AnimatedComponent;
    }(React.Component);

    AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY = false;
    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in ViewStylePropTypes) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }

  module.exports = createAnimatedComponent;
},219,[8,19,20,27,30,29,33,193,206,45,67,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _createClass = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var MetroListView = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var VirtualizedList = _$$_REQUIRE(_dependencyMap[10]);

  var ListView = _$$_REQUIRE(_dependencyMap[11]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[12]);

  var invariant = _$$_REQUIRE(_dependencyMap[13]);

  var defaultProps = _objectSpread({}, VirtualizedList.defaultProps, {
    numColumns: 1
  });

  var FlatList = function (_React$PureComponent) {
    _inherits(FlatList, _React$PureComponent);

    _createClass(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }]);

    function FlatList(props) {
      var _this;

      _classCallCheck(this, FlatList);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FlatList).call(this, props));
      _this._hasWarnedLegacy = false;
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];

            if (_item != null) {
              ret.push(_item);
            }
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          invariant(Array.isArray(items), "FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.", numColumns);
          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderItem = function (info) {
        var _this$props2 = _this.props,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;

        if (numColumns > 1) {
          var _item2 = info.item,
              _index = info.index;
          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
          return React.createElement(View, {
            style: StyleSheet.compose(styles.row, columnWrapperStyle)
          }, _item2.map(function (it, kk) {
            var element = renderItem({
              item: it,
              index: _index * numColumns + kk,
              separators: info.separators
            });
            return element && React.cloneElement(element, {
              key: kk
            });
          }));
        } else {
          return renderItem(info);
        }
      };

      _this._checkProps(_this.props);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    _createClass(FlatList, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        invariant(prevProps.numColumns === this.props.numColumns, "Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component.");
        invariant(prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');
        invariant(prevProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');
        invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(this.props);
      }
    }, {
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            legacyImplementation = props.legacyImplementation,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        if (legacyImplementation) {
          invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

          if (!this._hasWarnedLegacy) {
            console.warn("FlatList: legacyImplementation is deprecated and will be removed in a future release - some features not supported and performance may suffer. Please migrate to the default implementation.");
            this._hasWarnedLegacy = true;
          }
        }

        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), "FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.");
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _this$props3 = this.props,
            numColumns = _this$props3.numColumns,
            keyExtractor = _this$props3.keyExtractor;
        v.item.forEach(function (item, ii) {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(_objectSpread({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var changed = [];
              var viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(changed, v);
              });
              onViewableItemsChanged({
                viewableItems: viewableItems,
                changed: changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.legacyImplementation) {
          return React.createElement(MetroListView, _extends({}, this.props, {
            items: this.props.data,
            ref: this._captureRef
          }));
        } else {
          return React.createElement(VirtualizedList, _extends({}, this.props, {
            renderItem: this._renderItem,
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs
          }));
        }
      }
    }]);

    return FlatList;
  }(React.PureComponent);

  FlatList.defaultProps = defaultProps;
  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row'
    }
  });
  module.exports = FlatList;
},220,[8,19,27,30,20,33,43,221,45,74,239,222,49,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var ListView = _$$_REQUIRE(_dependencyMap[6]);

  var React = _$$_REQUIRE(_dependencyMap[7]);

  var RefreshControl = _$$_REQUIRE(_dependencyMap[8]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var MetroListView = function (_React$Component) {
    _inherits(MetroListView, _React$Component);

    function MetroListView() {
      var _getPrototypeOf2,
          _this2 = this;

      var _this;

      _classCallCheck(this, MetroListView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MetroListView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = _this._computeState(_this.props, {
        ds: new ListView.DataSource({
          rowHasChanged: function rowHasChanged(itemA, itemB) {
            return true;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged() {
            return true;
          },
          getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
            return _this.state.sectionHeaderData[sectionID];
          }
        }),
        sectionHeaderData: {}
      });

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._renderFooter = function () {
        return React.createElement(_this2.props.FooterComponent, {
          key: "$footer"
        });
      };

      _this._renderRow = function (item, sectionID, rowID, highlightRow) {
        return _this.props.renderItem({
          item: item,
          index: rowID
        });
      };

      _this._renderSectionHeader = function (section, sectionID) {
        var renderSectionHeader = _this.props.renderSectionHeader;
        invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
        return renderSectionHeader({
          section: section
        });
      };

      _this._renderSeparator = function (sID, rID) {
        return React.createElement(_this2.props.SeparatorComponent, {
          key: sID + rID
        });
      };

      return _this;
    }

    _createClass(MetroListView, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        throw new Error('scrollToEnd not supported in legacy ListView.');
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        throw new Error('scrollToIndex not supported in legacy ListView.');
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        throw new Error('scrollToItem not supported in legacy ListView.');
      }
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        throw new Error('scrollToLocation not supported in legacy ListView.');
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._listRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        var _this3 = this;

        this.setState(function (state) {
          return _this3._computeState(newProps, state);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(ListView, _extends({}, this.props, {
          dataSource: this.state.ds,
          ref: this._captureRef,
          renderRow: this._renderRow,
          renderFooter: this.props.FooterComponent && this._renderFooter,
          renderSectionHeader: this.props.sections && this._renderSectionHeader,
          renderSeparator: this.props.SeparatorComponent && this._renderSeparator
        }));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props, state) {
        var sectionHeaderData = {};

        if (props.sections) {
          invariant(!props.items, 'Cannot have both sections and items props.');
          var sections = {};
          props.sections.forEach(function (sectionIn, ii) {
            var sectionID = 's' + ii;
            sections[sectionID] = sectionIn.data;
            sectionHeaderData[sectionID] = sectionIn;
          });
          return {
            ds: state.ds.cloneWithRowsAndSections(sections),
            sectionHeaderData: sectionHeaderData
          };
        } else {
          invariant(!props.sections, 'Cannot have both sections and items props.');
          return {
            ds: state.ds.cloneWithRows(props.items),
            sectionHeaderData: sectionHeaderData
          };
        }
      }
    }]);

    return MetroListView;
  }(React.Component);

  MetroListView.defaultProps = {
    keyExtractor: function keyExtractor(item, index) {
      return item.key || String(index);
    },
    renderScrollComponent: function renderScrollComponent(props) {
      if (props.onRefresh) {
        return React.createElement(ScrollView, _extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh
          })
        }));
      } else {
        return React.createElement(ScrollView, props);
      }
    }
  };
  module.exports = MetroListView;
},221,[8,19,20,27,30,33,222,45,238,226,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var InternalListViewType = _$$_REQUIRE(_dependencyMap[2]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[6]);

  var RCTScrollViewManager = _$$_REQUIRE(_dependencyMap[7]).ScrollViewManager;

  var ScrollView = _$$_REQUIRE(_dependencyMap[8]);

  var ScrollResponder = _$$_REQUIRE(_dependencyMap[9]);

  var StaticRenderer = _$$_REQUIRE(_dependencyMap[10]);

  var View = _$$_REQUIRE(_dependencyMap[11]);

  var cloneReferencedElement = _$$_REQUIRE(_dependencyMap[12]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[13]);

  var isEmpty = _$$_REQUIRE(_dependencyMap[14]);

  var merge = _$$_REQUIRE(_dependencyMap[15]);

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _rafIds: [],
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponder.Mixin],
    statics: {
      DataSource: ListViewDataSource
    },
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _this$_scrollComponen;

        (_this$_scrollComponen = this._scrollComponent).scrollTo.apply(_this$_scrollComponen, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn("The scroll component used by the ListView does not support scrollToEnd. Check the renderScrollComponent prop of your ListView.");
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, props);
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: false,
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent && this._scrollComponent.getInnerViewNode();
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._rafIds = [];
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentWillUnmount: function componentWillUnmount() {
      this._rafIds.forEach(cancelAnimationFrame);

      this._rafIds = [];
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this._requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = _$$_REQUIRE(_dependencyMap[16]);

            warning(false, "In next release empty section headers will be rendered. In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = _$$_REQUIRE(_dependencyMap[17]);

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered. If empty section headers are not desirable their indices should be excluded from sectionIDs object. In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(View, {
                key: 's_' + comboID
              }, separator));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _this$props = this.props,
          renderScrollComponent = _this$props.renderScrollComponent,
          props = _objectWithoutProperties(_this$props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      _extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });

      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _requestAnimationFrame: function _requestAnimationFrame(fn) {
      var _this4 = this;

      var rafId = requestAnimationFrame(function () {
        _this4._rafIds = _this4._rafIds.filter(function (id) {
          return id !== rafId;
        });
        fn();
      });

      this._rafIds.push(rafId);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this5 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this5._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this5._measureAndUpdateScrollProps();

        _this5._prevRenderedRowsCount = _this5.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this6 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this6._childFrames[newFrame.index] = merge(newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},222,[8,6,223,224,41,45,77,5,226,227,236,74,237,184,225,165,103,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[6]);

  var InternalListViewType = function (_React$Component) {
    "use strict";

    _inherits(InternalListViewType, _React$Component);

    function InternalListViewType() {
      _classCallCheck(this, InternalListViewType);

      return _possibleConstructorReturn(this, _getPrototypeOf(InternalListViewType).apply(this, arguments));
    }

    _createClass(InternalListViewType, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {}
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {}
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {}
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {}
    }, {
      key: "getMetrics",
      value: function getMetrics() {}
    }, {
      key: "scrollTo",
      value: function scrollTo() {}
    }, {
      key: "scrollToEnd",
      value: function scrollToEnd(options) {}
    }]);

    return InternalListViewType;
  }(React.Component);

  InternalListViewType.DataSource = ListViewDataSource;
  module.exports = InternalListViewType;
},223,[19,20,27,30,33,45,224]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var isEmpty = _$$_REQUIRE(_dependencyMap[4]);

  var warning = _$$_REQUIRE(_dependencyMap[5]);

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      _classCallCheck(this, ListViewDataSource);

      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    _createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [_toConsumableArray(rowIdentities)] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);

    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var _key = arr[ii];
      warning(!result[_key], 'Value appears more than once in array: ' + _key);
      result[_key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},224,[15,19,20,3,225,103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},225,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[2]);

  var Platform = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var ScrollResponder = _$$_REQUIRE(_dependencyMap[6]);

  var ScrollViewStickyHeader = _$$_REQUIRE(_dependencyMap[7]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var InternalScrollViewType = _$$_REQUIRE(_dependencyMap[10]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[11]);

  var dismissKeyboard = _$$_REQUIRE(_dependencyMap[12]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[13]);

  var invariant = _$$_REQUIRE(_dependencyMap[14]);

  var processDecelerationRate = _$$_REQUIRE(_dependencyMap[15]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[16]);

  var warning = _$$_REQUIRE(_dependencyMap[17]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[18]);

  var AndroidScrollView;
  var AndroidHorizontalScrollContentView;
  var AndroidHorizontalScrollView;
  var RCTScrollView;
  var RCTScrollContentView;
  {
    AndroidScrollView = requireNativeComponent('RCTScrollView');
    AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView');
    AndroidHorizontalScrollContentView = requireNativeComponent('AndroidHorizontalScrollContentView');
  }
  var ScrollView = createReactClass({
    displayName: 'ScrollView',
    mixins: [ScrollResponder.Mixin],
    _scrollAnimatedValue: new AnimatedImplementation.Value(0),
    _scrollAnimatedValueAttachment: null,
    _stickyHeaderRefs: new Map(),
    _headerLayoutYs: new Map(),
    getInitialState: function getInitialState() {
      return _objectSpread({}, this.scrollResponderMixinGetInitialState(), {
        layoutHeight: null
      });
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._scrollAnimatedValue = new AnimatedImplementation.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);

      this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    },
    componentDidMount: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    },
    componentDidUpdate: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
    },
    getScrollResponder: function getScrollResponder() {
      return this;
    },
    getScrollableNode: function getScrollableNode() {
      return ReactNative.findNodeHandle(this._scrollViewRef);
    },
    getInnerViewNode: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    },
    scrollTo: function scrollTo(y, x, animated) {
      if (typeof y === 'number') {
        console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");
      } else {
        var _ref = y || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      this.getScrollResponder().scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    },
    scrollToEnd: function scrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      this.getScrollResponder().scrollResponderScrollToEnd({
        animated: animated
      });
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
      this.scrollTo({
        x: x,
        y: y,
        animated: false
      });
    },
    flashScrollIndicators: function flashScrollIndicators() {
      this.getScrollResponder().scrollResponderFlashScrollIndicators();
    },
    _getKeyForIndex: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    },
    _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    },
    _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    },
    _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
      if (!this.props.stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY(layoutY);
      }
    },
    _handleScroll: function _handleScroll(e) {
      {
        if (this.props.keyboardDismissMode === 'on-drag' && this.state.isTouching) {
          dismissKeyboard();
        }
      }
      this.scrollResponderHandleScroll(e);
    },
    _handleLayout: function _handleLayout(e) {
      if (this.props.invertStickyHeaders) {
        this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }

      if (this.props.onLayout) {
        this.props.onLayout(e);
      }
    },
    _handleContentOnLayout: function _handleContentOnLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _scrollViewRef: null,
    _setScrollViewRef: function _setScrollViewRef(ref) {
      this._scrollViewRef = ref;
    },
    _innerViewRef: null,
    _setInnerViewRef: function _setInnerViewRef(ref) {
      this._innerViewRef = ref;
    },
    render: function render() {
      var _this = this;

      var ScrollViewClass;
      var ScrollContentContainerViewClass;
      {
        if (this.props.horizontal) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      }
      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
      var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
      var children = hasStickyHeaders ? childArray.map(function (child, index) {
        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

        if (indexOfIndex > -1) {
          var key = child.key;
          var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
          return React.createElement(ScrollViewStickyHeader, {
            key: key,
            ref: function ref(_ref2) {
              return _this._setStickyHeaderRef(key, _ref2);
            },
            nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
            onLayout: function onLayout(event) {
              return _this._onStickyHeaderLayout(index, event, key);
            },
            scrollAnimatedValue: _this._scrollAnimatedValue,
            inverted: _this.props.invertStickyHeaders,
            scrollViewHeight: _this.state.layoutHeight
          }, child);
        } else {
          return child;
        }
      }) : this.props.children;
      var contentContainer = React.createElement(ScrollContentContainerViewClass, _extends({}, contentSizeChangeProps, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: hasStickyHeaders ? false : this.props.removeClippedSubviews,
        collapsable: false
      }), children);
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;

      var props = _objectSpread({}, this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this.scrollResponderHandleResponderGrant,
        onResponderReject: this.scrollResponderHandleResponderReject,
        onResponderRelease: this.scrollResponderHandleResponderRelease,
        onResponderTerminate: this.scrollResponderHandleTerminate,
        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
        onScroll: this._handleScroll,
        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this.scrollResponderHandleTouchEnd,
        onTouchMove: this.scrollResponderHandleTouchMove,
        onTouchStart: this.scrollResponderHandleTouchStart,
        onTouchCancel: this.scrollResponderHandleTouchCancel,
        scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,
        pagingEnabled: this.props.pagingEnabled || this.props.snapToInterval != null || this.props.snapToOffsets != null
      });

      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate != null) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        {
          return React.cloneElement(refreshControl, {
            style: props.style
          }, React.createElement(ScrollViewClass, _extends({}, props, {
            style: baseStyle,
            ref: this._setScrollViewRef
          }), contentContainer));
        }
      }

      return React.createElement(ScrollViewClass, _extends({}, props, {
        ref: this._setScrollViewRef
      }), contentContainer);
    }
  });
  var TypedScrollView = ScrollView;
  var styles = StyleSheet.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  module.exports = TypedScrollView;
},226,[8,43,192,41,45,77,227,233,49,74,234,184,231,73,3,235,147,103,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = _$$_REQUIRE(_dependencyMap[0]);

  var FrameRateLogger = _$$_REQUIRE(_dependencyMap[1]);

  var Keyboard = _$$_REQUIRE(_dependencyMap[2]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[3]);

  var Subscribable = _$$_REQUIRE(_dependencyMap[4]);

  var TextInputState = _$$_REQUIRE(_dependencyMap[5]);

  var UIManager = _$$_REQUIRE(_dependencyMap[6]);

  var invariant = _$$_REQUIRE(_dependencyMap[7]);

  var nullthrows = _$$_REQUIRE(_dependencyMap[8]);

  var performanceNow = _$$_REQUIRE(_dependencyMap[9]);

  var warning = _$$_REQUIRE(_dependencyMap[10]);

  var _require = _$$_REQUIRE(_dependencyMap[11]),
      ScrollViewManager = _require.ScrollViewManager;

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
  var ScrollResponderMixin = {
    mixins: [Subscribable.Mixin],
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      if (this.scrollResponderIsAnimating()) {
        return true;
      }

      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !TextInputState.isTextInput(e.target)) {
        return true;
      }

      return false;
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
        TextInputState.blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      FrameRateLogger.beginScroll();
      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        FrameRateLogger.endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = performanceNow();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      FrameRateLogger.endScroll();
      this.state.lastMomentumScrollEndTime = performanceNow();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = performanceNow();
      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
    },
    scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
      console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
      this.scrollResponderScrollTo({
        x: offsetX,
        y: offsetY,
        animated: false
      });
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

      if ('animated' in rect) {
        animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.flashScrollIndicators, []);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = Dimensions.get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
      console.error('Error measuring text field: ', e);
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},227,[51,228,229,77,232,144,40,3,180,100,103,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _$$_REQUIRE(_dependencyMap[0]);

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
      }

      if (NativeModules.FrameRateLogger) {
        var optionsClone = {
          debug: !!options.debug,
          reportStackTraces: !!options.reportStackTraces
        };
        Object.freeze(optionsClone);
        Object.seal(optionsClone);
        NativeModules.FrameRateLogger.setGlobalOptions(optionsClone);
      }
    },
    setContext: function setContext(context) {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
    },
    beginScroll: function beginScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
    },
    endScroll: function endScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},228,[5,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var LayoutAnimation = _$$_REQUIRE(_dependencyMap[0]);

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var KeyboardObserver = _$$_REQUIRE(_dependencyMap[3]).KeyboardObserver;

  var dismissKeyboard = _$$_REQUIRE(_dependencyMap[4]);

  var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      invariant(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      invariant(false, 'Dummy method used for documentation');
    },
    scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
      invariant(false, 'Dummy method used for documentation');
    }
  };
  Keyboard = KeyboardEventEmitter;
  Keyboard.dismiss = dismissKeyboard;

  Keyboard.scheduleLayoutAnimation = function (event) {
    var duration = event.duration,
        easing = event.easing;

    if (duration) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: easing && LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
  };

  module.exports = Keyboard;
},229,[230,3,111,5,231]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var UIManager = _$$_REQUIRE(_dependencyMap[1]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[2]);

  var checkPropTypes = PropTypes.checkPropTypes;
  var TypesEnum = {
    spring: true,
    linear: true,
    easeInEaseOut: true,
    easeIn: true,
    easeOut: true,
    keyboard: true
  };
  var Types = keyMirror(TypesEnum);
  var PropertiesEnum = {
    opacity: true,
    scaleX: true,
    scaleY: true,
    scaleXY: true
  };
  var Properties = keyMirror(PropertiesEnum);
  var animType = PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
    springDamping: PropTypes.number,
    initialVelocity: PropTypes.number,
    type: PropTypes.oneOf(Object.keys(Types)).isRequired,
    property: PropTypes.oneOf(Object.keys(Properties))
  });
  var configType = PropTypes.shape({
    duration: PropTypes.number.isRequired,
    create: animType,
    update: animType,
    delete: animType
  });

  function checkConfig(config, location, name) {
    checkPropTypes({
      config: configType
    }, {
      config: config
    }, location, name);
  }

  function configureNext(config, onAnimationDidEnd) {
    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
  }

  function create(duration, type, creationProp) {
    return {
      duration: duration,
      create: {
        type: type,
        property: creationProp
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: creationProp
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
    linear: create(500, Types.linear, Properties.opacity),
    spring: {
      duration: 700,
      create: {
        type: Types.linear,
        property: Properties.opacity
      },
      update: {
        type: Types.spring,
        springDamping: 0.4
      },
      delete: {
        type: Types.linear,
        property: Properties.opacity
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Types,
    Properties: Properties,
    checkConfig: checkConfig,
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},230,[60,40,58]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = _$$_REQUIRE(_dependencyMap[0]);

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = dismissKeyboard;
},231,[144]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Subscribable = {};
  Subscribable.Mixin = {
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._subscribableSubscriptions = [];
    },
    componentWillUnmount: function componentWillUnmount() {
      this._subscribableSubscriptions && this._subscribableSubscriptions.forEach(function (subscription) {
        return subscription.remove();
      });
      this._subscribableSubscriptions = null;
    },
    addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
      this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
    }
  };
  module.exports = Subscribable;
},232,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[5]);

  var React = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedView = AnimatedImplementation.createAnimatedComponent(View);

  var ScrollViewStickyHeader = function (_React$Component) {
    _inherits(ScrollViewStickyHeader, _React$Component);

    function ScrollViewStickyHeader() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ScrollViewStickyHeader);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollViewStickyHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: _this.props.nextHeaderLayoutY
      };

      _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      };

      return _this;
    }

    _createClass(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            inverted = _this$props.inverted,
            scrollViewHeight = _this$props.scrollViewHeight;
        var _this$state = this.state,
            measured = _this$state.measured,
            layoutHeight = _this$state.layoutHeight,
            layoutY = _this$state.layoutY,
            nextHeaderLayoutY = _this$state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          if (inverted) {
            if (scrollViewHeight != null) {
              var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;

              if (stickStartPoint > 0) {
                inputRange.push(stickStartPoint);
                outputRange.push(0);
                inputRange.push(stickStartPoint + 1);
                outputRange.push(1);
                var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;

                if (collisionPoint > stickStartPoint) {
                  inputRange.push(collisionPoint, collisionPoint + 1);
                  outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                }
              }
            }
          } else {
            inputRange.push(layoutY);
            outputRange.push(0);

            var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

            if (_collisionPoint >= layoutY) {
              inputRange.push(_collisionPoint, _collisionPoint + 1);
              outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
            } else {
              inputRange.push(layoutY + 1);
              outputRange.push(1);
            }
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(AnimatedView, {
          collapsable: false,
          onLayout: this._onLayout,
          style: [child.props.style, styles.header, {
            transform: [{
              translateY: translateY
            }]
          }]
        }, React.cloneElement(child, {
          style: styles.fill,
          onLayout: undefined
        }));
      }
    }]);

    return ScrollViewStickyHeader;
  }(React.Component);

  var styles = StyleSheet.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  module.exports = ScrollViewStickyHeader;
},233,[19,20,27,30,33,192,45,49,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var InternalScrollViewType = function (_ReactNative$NativeCo) {
    "use strict";

    _inherits(InternalScrollViewType, _ReactNative$NativeCo);

    function InternalScrollViewType() {
      _classCallCheck(this, InternalScrollViewType);

      return _possibleConstructorReturn(this, _getPrototypeOf(InternalScrollViewType).apply(this, arguments));
    }

    _createClass(InternalScrollViewType, [{
      key: "scrollTo",
      value: function scrollTo(y, x, animated) {}
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {}
    }, {
      key: "scrollToEnd",
      value: function scrollToEnd(options) {}
    }, {
      key: "scrollWithoutAnimationTo",
      value: function scrollWithoutAnimationTo() {
        var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {}
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {}
    }, {
      key: "getInnerViewNode",
      value: function getInnerViewNode() {}
    }, {
      key: "scrollResponderScrollNativeHandleToKeyboard",
      value: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {}
    }, {
      key: "scrollResponderScrollTo",
      value: function scrollResponderScrollTo(x, y, animated) {}
    }]);

    return InternalScrollViewType;
  }(ReactNative.NativeComponent);

  module.exports = InternalScrollViewType;
},234,[19,20,27,30,33,77]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      return 0.985;
    } else if (decelerationRate === 'fast') {
      return 0.9;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},235,[41]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var StaticRenderer = function (_React$Component) {
    _inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      _classCallCheck(this, StaticRenderer);

      return _possibleConstructorReturn(this, _getPrototypeOf(StaticRenderer).apply(this, arguments));
    }

    _createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);

    return StaticRenderer;
  }(React.Component);

  StaticRenderer.propTypes = {
    shouldUpdate: PropTypes.bool.isRequired,
    render: PropTypes.func.isRequired
  };
  module.exports = StaticRenderer;
},236,[19,20,27,30,33,45,60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  function cloneReferencedElement(element, config) {
    var cloneRef = config.ref;
    var originalRef = element.ref;

    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (originalRef == null || cloneRef == null) {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    if (typeof originalRef !== 'function') {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    return React.cloneElement.apply(React, [element, _objectSpread({}, config, {
      ref: function ref(component) {
        cloneRef(component);
        originalRef(component);
      }
    })].concat(children));
  }

  module.exports = cloneReferencedElement;
},237,[43,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var Platform = _$$_REQUIRE(_dependencyMap[6]);

  var React = _$$_REQUIRE(_dependencyMap[7]);

  var _require = _$$_REQUIRE(_dependencyMap[8]),
      NativeComponent = _require.NativeComponent;

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[9]);

  var nullthrows = _$$_REQUIRE(_dependencyMap[10]);

  {
    var AndroidSwipeRefreshLayout = _$$_REQUIRE(_dependencyMap[11]).AndroidSwipeRefreshLayout;

    var RefreshLayoutConsts = AndroidSwipeRefreshLayout ? AndroidSwipeRefreshLayout.Constants : {
      SIZE: {}
    };
  }
  var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout');

  var RefreshControl = function (_React$Component) {
    _inherits(RefreshControl, _React$Component);

    function RefreshControl() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, RefreshControl);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RefreshControl)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._nativeRef = null;
      _this._lastNativeRefreshing = false;

      _this._onRefresh = function () {
        _this._lastNativeRefreshing = true;
        _this.props.onRefresh && _this.props.onRefresh();

        _this.forceUpdate();
      };

      return _this;
    }

    _createClass(RefreshControl, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativeRefreshing = this.props.refreshing;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.refreshing !== prevProps.refreshing) {
          this._lastNativeRefreshing = this.props.refreshing;
        } else if (this.props.refreshing !== this._lastNativeRefreshing) {
          nullthrows(this._nativeRef).setNativeProps({
            refreshing: this.props.refreshing
          });
          this._lastNativeRefreshing = this.props.refreshing;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(NativeRefreshControl, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._nativeRef = _ref;
          },
          onRefresh: this._onRefresh
        }));
      }
    }]);

    return RefreshControl;
  }(React.Component);

  RefreshControl.SIZE = RefreshLayoutConsts.SIZE;
  module.exports = RefreshControl;
},238,[8,19,20,27,30,33,41,45,77,147,180,40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[2]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[6]);

  var _createClass = _$$_REQUIRE(_dependencyMap[7]);

  var _inherits = _$$_REQUIRE(_dependencyMap[8]);

  var Batchinator = _$$_REQUIRE(_dependencyMap[9]);

  var FillRateHelper = _$$_REQUIRE(_dependencyMap[10]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var React = _$$_REQUIRE(_dependencyMap[12]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[13]);

  var RefreshControl = _$$_REQUIRE(_dependencyMap[14]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[15]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[16]);

  var UIManager = _$$_REQUIRE(_dependencyMap[17]);

  var View = _$$_REQUIRE(_dependencyMap[18]);

  var ViewabilityHelper = _$$_REQUIRE(_dependencyMap[19]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[20]);

  var infoLog = _$$_REQUIRE(_dependencyMap[21]);

  var invariant = _$$_REQUIRE(_dependencyMap[22]);

  var warning = _$$_REQUIRE(_dependencyMap[23]);

  var _require = _$$_REQUIRE(_dependencyMap[24]),
      computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

  var _usedIndexForKey = false;
  var _keylessItemComponentName = '';

  var VirtualizedList = function (_React$PureComponent) {
    _inherits(VirtualizedList, _React$PureComponent);

    _createClass(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _this$props = this.props,
            data = _this$props.data,
            horizontal = _this$props.horizontal,
            getItemCount = _this$props.getItemCount,
            getItemLayout = _this$props.getItemLayout,
            onScrollToIndexFailed = _this$props.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;
        invariant(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          invariant(!!onScrollToIndexFailed, "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures.");
          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _this$props2 = this.props,
            data = _this$props2.data,
            getItem = _this$props2.getItem,
            getItemCount = _this$props2.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(_objectSpread({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref.recordInteraction();
        });

        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return ReactNative.findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            getScrollMetrics: this._getScrollMetrics,
            horizontal: this.props.horizontal,
            getOutermostParentListRef: this._getOutermostParentListRef,
            getNestedChildState: this._getNestedChildState,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          }
        };
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }]);

    function VirtualizedList(_props, context) {
      var _this;

      _classCallCheck(this, VirtualizedList);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualizedList).call(this, _props, context));

      _this._getScrollMetrics = function () {
        return _this._scrollMetrics;
      };

      _this._getOutermostParentListRef = function () {
        if (_this._isNestedWithSameOrientation()) {
          return _this.context.virtualizedList.getOutermostParentListRef();
        } else {
          return _assertThisInitialized(_this);
        }
      };

      _this._getNestedChildState = function (key) {
        var existingChildData = _this._nestedChildLists.get(key);

        return existingChildData && existingChildData.state;
      };

      _this._registerAsNestedChild = function (childList) {
        var childListsInCell = _this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
        childListsInCell.add(childList.key);

        _this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

        var existingChildData = _this._nestedChildLists.get(childList.key);

        invariant(!(existingChildData && existingChildData.ref !== null), "A VirtualizedList contains a cell which itself contains more than one VirtualizedList of the same orientation as the parent list. You must pass a unique listKey prop to each sibling list.");

        _this._nestedChildLists.set(childList.key, {
          ref: childList.ref,
          state: null
        });

        if (_this._hasInteracted) {
          childList.ref.recordInteraction();
        }
      };

      _this._unregisterAsNestedChild = function (childList) {
        _this._nestedChildLists.set(childList.key, {
          ref: null,
          state: childList.state
        });
      };

      _this._onUpdateSeparators = function (keys, newProps) {
        keys.forEach(function (key) {
          var ref = key != null && _this._cellRefs[key];
          ref && ref.updateSeparatorProps(newProps);
        });
      };

      _this._averageCellLength = 0;
      _this._cellKeysToChildListKeys = new Map();
      _this._cellRefs = {};
      _this._frames = {};
      _this._footerLength = 0;
      _this._hasDataChangedSinceEndReached = true;
      _this._hasInteracted = false;
      _this._hasMore = false;
      _this._hasWarned = {};
      _this._highestMeasuredFrameIndex = 0;
      _this._headerLength = 0;
      _this._indicesToKeys = new Map();
      _this._hasDoneInitialScroll = false;
      _this._nestedChildLists = new Map();
      _this._offsetFromParentVirtualizedList = 0;
      _this._prevParentOffset = 0;
      _this._scrollMetrics = {
        contentLength: 0,
        dOffset: 0,
        dt: 10,
        offset: 0,
        timestamp: 0,
        velocity: 0,
        visibleLength: 0
      };
      _this._scrollRef = null;
      _this._sentEndForContentLength = 0;
      _this._totalCellLength = 0;
      _this._totalCellsMeasured = 0;
      _this._viewabilityTuples = [];

      _this._captureScrollRef = function (ref) {
        _this._scrollRef = ref;
      };

      _this._defaultRenderScrollComponent = function (props) {
        var onRefresh = props.onRefresh;

        if (_this._isNestedWithSameOrientation()) {
          return React.createElement(View, props);
        } else if (onRefresh) {
          invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
          return React.createElement(ScrollView, _extends({}, props, {
            refreshControl: props.refreshControl == null ? React.createElement(RefreshControl, {
              refreshing: props.refreshing,
              onRefresh: onRefresh,
              progressViewOffset: props.progressViewOffset
            }) : props.refreshControl
          }));
        } else {
          return React.createElement(ScrollView, props);
        }
      };

      _this._onCellUnmount = function (cellKey) {
        var curr = _this._frames[cellKey];

        if (curr) {
          _this._frames[cellKey] = _objectSpread({}, curr, {
            inLayout: false
          });
        }
      };

      _this._onLayout = function (e) {
        if (_this._isNestedWithSameOrientation()) {
          _this.measureLayoutRelativeToContainingList();
        } else {
          _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
        }

        _this.props.onLayout && _this.props.onLayout(e);

        _this._scheduleCellsToRenderUpdate();

        _this._maybeCallOnEndReached();
      };

      _this._onLayoutEmpty = function (e) {
        _this.props.onLayout && _this.props.onLayout(e);
      };

      _this._onLayoutFooter = function (e) {
        _this._footerLength = _this._selectLength(e.nativeEvent.layout);
      };

      _this._onLayoutHeader = function (e) {
        _this._headerLength = _this._selectLength(e.nativeEvent.layout);
      };

      _this._onContentSizeChange = function (width, height) {
        if (width > 0 && height > 0 && _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 && !_this._hasDoneInitialScroll) {
          _this.scrollToIndex({
            animated: false,
            index: _this.props.initialScrollIndex
          });

          _this._hasDoneInitialScroll = true;
        }

        if (_this.props.onContentSizeChange) {
          _this.props.onContentSizeChange(width, height);
        }

        _this._scrollMetrics.contentLength = _this._selectLength({
          height: height,
          width: width
        });

        _this._scheduleCellsToRenderUpdate();

        _this._maybeCallOnEndReached();
      };

      _this._convertParentScrollMetrics = function (metrics) {
        var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
        var visibleLength = metrics.visibleLength;
        var dOffset = offset - _this._scrollMetrics.offset;
        var contentLength = _this._scrollMetrics.contentLength;
        return {
          visibleLength: visibleLength,
          contentLength: contentLength,
          offset: offset,
          dOffset: dOffset
        };
      };

      _this._onScroll = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref._onScroll(e);
        });

        if (_this.props.onScroll) {
          _this.props.onScroll(e);
        }

        var timestamp = e.timeStamp;

        var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);

        var contentLength = _this._selectLength(e.nativeEvent.contentSize);

        var offset = _this._selectOffset(e.nativeEvent.contentOffset);

        var dOffset = offset - _this._scrollMetrics.offset;

        if (_this._isNestedWithSameOrientation()) {
          if (_this._scrollMetrics.contentLength === 0) {
            return;
          }

          var _this$_convertParentS = _this._convertParentScrollMetrics({
            visibleLength: visibleLength,
            offset: offset
          });

          visibleLength = _this$_convertParentS.visibleLength;
          contentLength = _this$_convertParentS.contentLength;
          offset = _this$_convertParentS.offset;
          dOffset = _this$_convertParentS.dOffset;
        }

        var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
        var velocity = dOffset / dt;

        if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
          infoLog("VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.", {
            dt: dt,
            prevDt: _this._scrollMetrics.dt,
            contentLength: contentLength
          });
          _this._hasWarned.perf = true;
        }

        _this._scrollMetrics = {
          contentLength: contentLength,
          dt: dt,
          dOffset: dOffset,
          offset: offset,
          timestamp: timestamp,
          velocity: velocity,
          visibleLength: visibleLength
        };

        _this._updateViewableItems(_this.props.data);

        if (!_this.props) {
          return;
        }

        _this._maybeCallOnEndReached();

        if (velocity !== 0) {
          _this._fillRateHelper.activate();
        }

        _this._computeBlankness();

        _this._scheduleCellsToRenderUpdate();
      };

      _this._onScrollBeginDrag = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref._onScrollBeginDrag(e);
        });

        _this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.recordInteraction();
        });

        _this._hasInteracted = true;
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };

      _this._onScrollEndDrag = function (e) {
        var velocity = e.nativeEvent.velocity;

        if (velocity) {
          _this._scrollMetrics.velocity = _this._selectOffset(velocity);
        }

        _this._computeBlankness();

        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };

      _this._onMomentumScrollEnd = function (e) {
        _this._scrollMetrics.velocity = 0;

        _this._computeBlankness();

        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };

      _this._updateCellsToRender = function () {
        var _this$props3 = _this.props,
            data = _this$props3.data,
            getItemCount = _this$props3.getItemCount,
            onEndReachedThreshold = _this$props3.onEndReachedThreshold;

        var isVirtualizationDisabled = _this._isVirtualizationDisabled();

        _this._updateViewableItems(data);

        if (!data) {
          return;
        }

        _this.setState(function (state) {
          var newState;

          if (!isVirtualizationDisabled) {
            if (_this._scrollMetrics.visibleLength) {
              if (!_this.props.initialScrollIndex || _this._scrollMetrics.offset) {
                newState = computeWindowedRenderLimits(_this.props, state, _this._getFrameMetricsApprox, _this._scrollMetrics);
              }
            }
          } else {
            var _this$_scrollMetrics = _this._scrollMetrics,
                contentLength = _this$_scrollMetrics.contentLength,
                offset = _this$_scrollMetrics.offset,
                visibleLength = _this$_scrollMetrics.visibleLength;
            var distanceFromEnd = contentLength - visibleLength - offset;
            var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? _this.props.maxToRenderPerBatch : 0;
            newState = {
              first: 0,
              last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
            };
          }

          if (newState && _this._nestedChildLists.size > 0) {
            var newFirst = newState.first;
            var newLast = newState.last;

            for (var ii = newFirst; ii <= newLast; ii++) {
              var cellKeyForIndex = _this._indicesToKeys.get(ii);

              var childListKeys = cellKeyForIndex && _this._cellKeysToChildListKeys.get(cellKeyForIndex);

              if (!childListKeys) {
                continue;
              }

              var someChildHasMore = false;

              for (var _iterator = childListKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();;) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var _childKey = _ref;

                var childList = _this._nestedChildLists.get(_childKey);

                if (childList && childList.ref && childList.ref.hasMore()) {
                  someChildHasMore = true;
                  break;
                }
              }

              if (someChildHasMore) {
                newState.last = ii;
                break;
              }
            }
          }

          return newState;
        });
      };

      _this._createViewToken = function (index, isViewable) {
        var _this$props4 = _this.props,
            data = _this$props4.data,
            getItem = _this$props4.getItem,
            keyExtractor = _this$props4.keyExtractor;
        var item = getItem(data, index);
        return {
          index: index,
          item: item,
          key: keyExtractor(item, index),
          isViewable: isViewable
        };
      };

      _this._getFrameMetricsApprox = function (index) {
        var frame = _this._getFrameMetrics(index);

        if (frame && frame.index === index) {
          return frame;
        } else {
          var getItemLayout = _this.props.getItemLayout;
          invariant(!getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
          return {
            length: _this._averageCellLength,
            offset: _this._averageCellLength * index
          };
        }
      };

      _this._getFrameMetrics = function (index) {
        var _this$props5 = _this.props,
            data = _this$props5.data,
            getItem = _this$props5.getItem,
            getItemCount = _this$props5.getItemCount,
            getItemLayout = _this$props5.getItemLayout,
            keyExtractor = _this$props5.keyExtractor;
        invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
        var item = getItem(data, index);

        var frame = item && _this._frames[keyExtractor(item, index)];

        if (!frame || frame.index !== index) {
          if (getItemLayout) {
            frame = getItemLayout(data, index);
          }
        }

        return frame;
      };

      invariant(!_props.onScroll || !_props.onScroll.__isNative, "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver");
      invariant(_props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      var initialState = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };

      if (_this._isNestedWithSameOrientation()) {
        var storedState = _this.context.virtualizedList.getNestedChildState(_this.props.listKey || _this._getCellKey());

        if (storedState) {
          initialState = storedState;
          _this.state = storedState;
          _this._frames = storedState.frames;
        }
      }

      _this.state = initialState;
      return _this;
    }

    _createClass(VirtualizedList, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.registerAsNestedChild({
            cellKey: this._getCellKey(),
            key: this.props.listKey || this._getCellKey(),
            ref: this
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.unregisterAsNestedChild({
            key: this.props.listKey || this._getCellKey(),
            state: {
              first: this.state.first,
              last: this.state.last,
              frames: this._frames
            }
          });
        }

        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;

        var _this$props6 = this.props,
            CellRendererComponent = _this$props6.CellRendererComponent,
            ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
            data = _this$props6.data,
            getItem = _this$props6.getItem,
            getItemCount = _this$props6.getItemCount,
            horizontal = _this$props6.horizontal,
            keyExtractor = _this$props6.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          _this2._indicesToKeys.set(ii, key);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this2._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this2._onCellLayout(e, key, ii);
            },
            onUnmount: _this2._onCellUnmount,
            parentProps: _this2.props,
            ref: function ref(_ref2) {
              _this2._cellRefs[key] = _ref2;
            }
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization;
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props7 = this.props,
            ListEmptyComponent = _this$props7.ListEmptyComponent,
            ListFooterComponent = _this$props7.ListFooterComponent,
            ListHeaderComponent = _this$props7.ListHeaderComponent;
        var _this$props8 = this.props,
            data = _this$props8.data,
            horizontal = _this$props8.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, null);
          cells.push(React.createElement(VirtualizedCellWrapper, {
            cellKey: this._getCellKey() + '-header',
            key: "$header"
          }, React.createElement(View, {
            onLayout: this._onLayoutHeader,
            style: StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle)
          }, element)));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          _keylessItemComponentName = '';
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _this$state = this.state,
              first = _this$state.first,
              last = _this$state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, first);

          if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - initBlock.offset;
                  cells.push(React.createElement(View, {
                    key: "$sticky_lead",
                    style: _defineProperty({}, spacerKey, leadSpace)
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_trail",
                    style: _defineProperty({}, spacerKey, trailSpace)
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(View, {
                key: "$lead_spacer",
                style: _defineProperty({}, spacerKey, firstSpace)
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn("VirtualizedList: missing keys for items, make sure to specify a key property on each item or provide a custom keyExtractor.", _keylessItemComponentName);
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(View, {
              key: "$tail_spacer",
              style: _defineProperty({}, spacerKey, tailSpacerLength)
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, null);

          cells.push(React.cloneElement(_element, {
            key: '$empty',
            onLayout: function onLayout(event) {
              _this3._onLayoutEmpty(event);

              if (_element.props.onLayout) {
                _element.props.onLayout(event);
              }
            },
            style: [_element.props.style, inversionStyle]
          }));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, null);

          cells.push(React.createElement(VirtualizedCellWrapper, {
            cellKey: this._getCellKey() + '-footer',
            key: "$footer"
          }, React.createElement(View, {
            onLayout: this._onLayoutFooter,
            style: StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle)
          }, _element2)));
        }

        var scrollProps = _objectSpread({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
          stickyHeaderIndices: stickyHeaderIndices
        });

        if (inversionStyle) {
          scrollProps.style = [inversionStyle, this.props.style];
        }

        this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
        var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);

        if (this.props.debug) {
          return React.createElement(View, {
            style: {
              flex: 1
            }
          }, ret, this._renderDebugOverlay());
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props9 = this.props,
            data = _this$props9.data,
            extraData = _this$props9.extraData;

        if (data !== prevProps.data || extraData !== prevProps.extraData) {
          this._hasDataChangedSinceEndReached = true;

          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }

        this._scheduleCellsToRenderUpdate();
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        var childListKeys = this._cellKeysToChildListKeys.get(cellKey);

        if (childListKeys) {
          for (var _iterator2 = childListKeys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref7;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref7 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref7 = _i2.value;
            }

            var _childKey2 = _ref7;

            var childList = this._nestedChildLists.get(_childKey2);

            childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
          }
        }

        this._computeBlankness();
      }
    }, {
      key: "measureLayoutRelativeToContainingList",
      value: function measureLayoutRelativeToContainingList() {
        var _this4 = this;

        try {
          UIManager.measureLayout(ReactNative.findNodeHandle(this), ReactNative.findNodeHandle(this.context.virtualizedList.getOutermostParentListRef()), function (error) {
            console.warn("VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList.");
          }, function (x, y, width, height) {
            _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
              x: x,
              y: y
            });
            _this4._scrollMetrics.contentLength = _this4._selectLength({
              width: width,
              height: height
            });

            var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.virtualizedList.getScrollMetrics());

            _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
            _this4._scrollMetrics.offset = scrollMetrics.offset;
          });
        } catch (error) {
          console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
        }
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        var baseStyle = {
          position: 'absolute',
          top: 0,
          right: 0
        };
        return React.createElement(View, {
          style: _objectSpread({}, baseStyle, {
            bottom: 0,
            width: 20,
            borderColor: 'blue',
            borderWidth: 1
          })
        }, framesInLayout.map(function (f, ii) {
          return React.createElement(View, {
            key: 'f' + ii,
            style: _objectSpread({}, baseStyle, {
              left: 0,
              top: f.offset * normalize,
              height: f.length * normalize,
              backgroundColor: 'orange'
            })
          });
        }), React.createElement(View, {
          style: _objectSpread({}, baseStyle, {
            left: 0,
            top: windowTop * normalize,
            height: windowLen * normalize,
            borderColor: 'green',
            borderWidth: 2
          })
        }), React.createElement(View, {
          style: _objectSpread({}, baseStyle, {
            left: 0,
            top: visTop * normalize,
            height: visLen * normalize,
            borderColor: 'red',
            borderWidth: 2
          })
        }));
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _this$props10 = this.props,
            data = _this$props10.data,
            getItemCount = _this$props10.getItemCount,
            onEndReached = _this$props10.onEndReached,
            onEndReachedThreshold = _this$props10.onEndReachedThreshold;
        var _this$_scrollMetrics2 = this._scrollMetrics,
            contentLength = _this$_scrollMetrics2.contentLength,
            visibleLength = _this$_scrollMetrics2.visibleLength,
            offset = _this$_scrollMetrics2.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
          this._hasDataChangedSinceEndReached = false;
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _this$state2 = this.state,
            first = _this$state2.first,
            last = _this$state2.last;
        var _this$_scrollMetrics3 = this._scrollMetrics,
            offset = _this$_scrollMetrics3.offset,
            visibleLength = _this$_scrollMetrics3.visibleLength,
            velocity = _this$_scrollMetrics3.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;
        var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;

        if (first > 0) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
        }

        if (last < itemCount - 1) {
          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && this._averageCellLength) {
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this5 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._getFrameMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, _this5.state);
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(newProps, prevState) {
        var data = newProps.data,
            extraData = newProps.extraData,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        return {
          first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
        };
      }
    }]);

    return VirtualizedList;
  }(React.PureComponent);

  VirtualizedList.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      _usedIndexForKey = true;

      if (item.type && item.type.displayName) {
        _keylessItemComponentName = item.type.displayName;
      }

      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  };
  VirtualizedList.contextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    }),
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      getNestedChildState: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  };
  VirtualizedList.childContextTypes = {
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      getNestedChildState: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  };

  var CellRenderer = function (_React$Component) {
    _inherits(CellRenderer, _React$Component);

    function CellRenderer() {
      var _getPrototypeOf2;

      var _this6;

      _classCallCheck(this, CellRenderer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this6 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CellRenderer)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this6.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this6.props.item
        }
      };
      _this6._separators = {
        highlight: function highlight() {
          var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

          _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      };
      return _this6;
    }

    _createClass(CellRenderer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: _objectSpread({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props11 = this.props,
            CellRendererComponent = _this$props11.CellRendererComponent,
            ItemSeparatorComponent = _this$props11.ItemSeparatorComponent,
            fillRateHelper = _this$props11.fillRateHelper,
            horizontal = _this$props11.horizontal,
            item = _this$props11.item,
            index = _this$props11.index,
            inversionStyle = _this$props11.inversionStyle,
            parentProps = _this$props11.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout;
        invariant(renderItem, 'no renderItem!');
        var element = renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, this.state.separatorProps);
        var cellStyle = inversionStyle ? horizontal ? [{
          flexDirection: 'row-reverse'
        }, inversionStyle] : [{
          flexDirection: 'column-reverse'
        }, inversionStyle] : horizontal ? [{
          flexDirection: 'row'
        }, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(View, {
            style: cellStyle,
            onLayout: onLayout
          }, element, itemSeparator);
        }

        return React.createElement(CellRendererComponent, _extends({}, this.props, {
          style: cellStyle,
          onLayout: onLayout
        }), element, itemSeparator);
      }
    }]);

    return CellRenderer;
  }(React.Component);

  CellRenderer.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  };

  var VirtualizedCellWrapper = function (_React$Component2) {
    _inherits(VirtualizedCellWrapper, _React$Component2);

    function VirtualizedCellWrapper() {
      _classCallCheck(this, VirtualizedCellWrapper);

      return _possibleConstructorReturn(this, _getPrototypeOf(VirtualizedCellWrapper).apply(this, arguments));
    }

    _createClass(VirtualizedCellWrapper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);

    return VirtualizedCellWrapper;
  }(React.Component);

  VirtualizedCellWrapper.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  };
  var styles = StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    }
  });
  module.exports = VirtualizedList;
},239,[44,8,43,19,27,30,29,20,33,240,241,60,45,77,238,226,49,40,74,242,73,139,3,103,243]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var InteractionManager = _$$_REQUIRE(_dependencyMap[2]);

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      _classCallCheck(this, Batchinator);

      this._delay = delayMS;
      this._callback = callback;
    }

    _createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);

    return Batchinator;
  }();

  module.exports = Batchinator;
},240,[19,20,199]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var performanceNow = _$$_REQUIRE(_dependencyMap[3]);

  var warning = _$$_REQUIRE(_dependencyMap[4]);

  var Info = function Info() {
    _classCallCheck(this, Info);

    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  };

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;
  var _sampleRate = null;

  var FillRateHelper = function () {
    _createClass(FillRateHelper, null, [{
      key: "addListener",
      value: function addListener(callback) {
        warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    function FillRateHelper(getFrameMetrics) {
      _classCallCheck(this, FillRateHelper);

      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    _createClass(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG;
          this._samplesStartTime = performanceNow();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG;
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = performanceNow() - start;

        var info = _objectSpread({}, this._info, {
          total_time_spent: total_time_spent
        });

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = performanceNow();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }]);

    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},241,[43,20,19,100,103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };

      _classCallCheck(this, ViewabilityHelper);

      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    _createClass(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _this$_config = this._config,
            itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref4 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref4 = _i.value;
          }

          var _ref8 = _ref4;

          var _ref3 = _slicedToArray(_ref8, 2);

          var _key2 = _ref3[0];
          var _viewable2 = _ref3[1];

          if (!prevItems.has(_key2)) {
            changed.push(_viewable2);
          }
        }

        for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref7;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref7 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref7 = _i2.value;
          }

          var _ref9 = _ref7;

          var _ref6 = _slicedToArray(_ref9, 2);

          var _key3 = _ref6[0];
          var _viewable3 = _ref6[1];

          if (!nextItems.has(_key3)) {
            changed.push(_objectSpread({}, _viewable3, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);

    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},242,[43,9,19,20,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];
    var outLength = 0;

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;
          outLength++;

          if (kk === offsets.length - 1) {
            invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));
            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - 0.5 * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},243,[9,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var ImageStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[8]);

  var TextAncestor = _$$_REQUIRE(_dependencyMap[9]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[10]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[11]);

  var merge = _$$_REQUIRE(_dependencyMap[12]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[13]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[14]);

  var ImageLoader = NativeModules.ImageLoader;
  var RKImage = requireNativeComponent('RCTImageView');
  var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage');
  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var ImageProps = _objectSpread({}, ViewPropTypes, {
    style: StyleSheetPropType(ImageStylePropTypes),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      headers: PropTypes.objectOf(PropTypes.string)
    }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
      uri: PropTypes.string,
      width: PropTypes.number,
      height: PropTypes.number,
      headers: PropTypes.objectOf(PropTypes.string)
    }))]),
    blurRadius: PropTypes.number,
    defaultSource: PropTypes.number,
    loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string
    }), PropTypes.number]),
    progressiveRenderingEnabled: PropTypes.bool,
    fadeDuration: PropTypes.number,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    testID: PropTypes.string,
    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
    resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'repeat', 'center'])
  });

  function getSize(url, success, failure) {
    return ImageLoader.getSize(url).then(function (sizes) {
      success(sizes.width, sizes.height);
    }).catch(failure || function () {
      console.warn('Failed to get size for image: ' + url);
    });
  }

  function prefetch(url, callback) {
    var requestId = generateRequestId();
    callback && callback(requestId);
    return ImageLoader.prefetchImage(url, requestId);
  }

  function abortPrefetch(requestId) {
    ImageLoader.abortRequest(requestId);
  }

  function queryCache(urls) {
    return _regeneratorRuntime.async(function queryCache$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regeneratorRuntime.awrap(ImageLoader.queryCache(urls));

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    });
  }

  var Image = function Image(props, forwardedRef) {
    var _source, _source3;

    var source = resolveAssetSource(props.source);
    var defaultSource = resolveAssetSource(props.defaultSource);
    var loadingIndicatorSource = resolveAssetSource(props.loadingIndicatorSource);

    if (source && source.uri === '') {
      console.warn('source.uri should not be an empty string');
    }

    if (props.src) {
      console.warn('The <Image> component requires a `source` property rather than `src`.');
    }

    if (props.children) {
      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }

    if (props.defaultSource && props.loadingIndicatorSource) {
      throw new Error('The <Image> component cannot have defaultSource and loadingIndicatorSource at the same time. Please use either defaultSource or loadingIndicatorSource.');
    }

    if (source && !source.uri && !Array.isArray(source)) {
      source = null;
    }

    var style;
    var sources;

    if (((_source = source) == null ? undefined : _source.uri) != null) {
      var _source2 = source,
          _width = _source2.width,
          _height = _source2.height;
      style = flattenStyle([{
        width: _width,
        height: _height
      }, styles.base, props.style]);
      sources = [{
        uri: source.uri
      }];
    } else {
      style = flattenStyle([styles.base, props.style]);
      sources = source;
    }

    var onLoadStart = props.onLoadStart,
        onLoad = props.onLoad,
        onLoadEnd = props.onLoadEnd,
        onError = props.onError;
    var nativeProps = merge(props, {
      style: style,
      shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
      src: sources,
      headers: (_source3 = source) == null ? undefined : _source3.headers,
      defaultSrc: defaultSource ? defaultSource.uri : null,
      loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null,
      ref: forwardedRef
    });
    return React.createElement(TextAncestor.Consumer, null, function (hasTextAncestor) {
      return hasTextAncestor ? React.createElement(RCTTextInlineImage, nativeProps) : React.createElement(RKImage, nativeProps);
    });
  };

  Image = React.forwardRef(Image);
  Image.getSize = getSize;
  Image.prefetch = prefetch;
  Image.abortPrefetch = abortPrefetch;
  Image.queryCache = queryCache;
  Image.resolveAssetSource = resolveAssetSource;
  Image.propTypes = ImageProps;
  var styles = StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });
  module.exports = Image;
},244,[129,43,54,5,45,77,60,49,172,75,245,73,165,147,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[2]);

  var PlatformViewPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[5]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits,
      AccessibilityRoles = _require.AccessibilityRoles,
      AccessibilityStates = _require.AccessibilityStates;

  var stylePropType = StyleSheetPropType(ViewStylePropTypes);
  module.exports = _objectSpread({
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityHint: PropTypes.string,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityIgnoresInvertColors: PropTypes.bool,
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityRole: PropTypes.oneOf(AccessibilityRoles),
    accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(AccessibilityStates)),
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: EdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  }, PlatformViewPropTypes);
},245,[43,45,171,246,60,172,67,189]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var TVViewPropTypes = {};

  if (Platform.isTV || true) {
    TVViewPropTypes = _$$_REQUIRE(_dependencyMap[1]);
  }

  module.exports = TVViewPropTypes;
},246,[41,247]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var TVViewPropTypes = {
    isTVSelectable: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    tvParallaxProperties: PropTypes.object,
    tvParallaxShiftDistanceX: PropTypes.number,
    tvParallaxShiftDistanceY: PropTypes.number,
    tvParallaxTiltAngle: PropTypes.number,
    tvParallaxMagnification: PropTypes.number
  };
  module.exports = TVViewPropTypes;
},247,[60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var MetroListView = _$$_REQUIRE(_dependencyMap[7]);

  var Platform = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[10]);

  var VirtualizedSectionList = _$$_REQUIRE(_dependencyMap[11]);

  var defaultProps = _objectSpread({}, VirtualizedSectionList.defaultProps, {
    stickySectionHeadersEnabled: false
  });

  var SectionList = function (_React$PureComponent) {
    _inherits(SectionList, _React$PureComponent);

    function SectionList() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SectionList);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SectionList)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      };

      return _this;
    }

    _createClass(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
        return React.createElement(List, _extends({}, this.props, {
          ref: this._captureRef
        }));
      }
    }]);

    return SectionList;
  }(React.PureComponent);

  SectionList.defaultProps = defaultProps;
  module.exports = SectionList;
},248,[8,19,20,27,30,33,43,221,41,45,226,249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[5]);

  var _createClass = _$$_REQUIRE(_dependencyMap[6]);

  var _inherits = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var VirtualizedList = _$$_REQUIRE(_dependencyMap[10]);

  var invariant = _$$_REQUIRE(_dependencyMap[11]);

  var VirtualizedSectionList = function (_React$PureComponent) {
    _inherits(VirtualizedSectionList, _React$PureComponent);

    _createClass(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex + 1;

        for (var ii = 0; ii < params.sectionIndex; ii++) {
          index += this.props.sections[ii].data.length + 2;
        }

        var toIndexParams = _objectSpread({}, params, {
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }]);

    function VirtualizedSectionList(props, context) {
      var _this;

      _classCallCheck(this, VirtualizedSectionList);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualizedSectionList).call(this, props, context));

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        invariant(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return _objectSpread({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;

        if (_this.props.onViewableItemsChanged) {
          _this.props.onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _assertThisInitialized(_this)).filter(Boolean),
            changed: changed.map(_this._convertViewable, _assertThisInitialized(_this)).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var section = info.section;

          if (info.header === true) {
            var renderSectionHeader = _this.props.renderSectionHeader;
            return renderSectionHeader ? renderSectionHeader({
              section: section
            }) : null;
          } else {
            var renderSectionFooter = _this.props.renderSectionFooter;
            return renderSectionFooter ? renderSectionFooter({
              section: section
            }) : null;
          }
        } else {
          var renderItem = info.section.renderItem || _this.props.renderItem;

          var SeparatorComponent = _this._getSeparatorComponent(index, info);

          invariant(renderItem, 'no renderItem!');
          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(props);
      return _this;
    }

    _createClass(VirtualizedSectionList, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + section.data.length + 2;
        }, 0);
        return {
          childProps: _objectSpread({}, props, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: getItem,
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(VirtualizedList, _extends({}, this.state.childProps, {
          ref: this._captureRef
        }));
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var defaultKeyExtractor = this.props.keyExtractor;

        for (var ii = 0; ii < this.props.sections.length; ii++) {
          var section = this.props.sections[ii];
          var key = section.key || String(ii);
          itemIndex -= 1;

          if (itemIndex >= section.data.length + 1) {
            itemIndex -= section.data.length + 1;
          } else if (itemIndex === -1) {
            return {
              section: section,
              key: key + ':header',
              index: null,
              header: true,
              trailingSection: this.props.sections[ii + 1]
            };
          } else if (itemIndex === section.data.length) {
            return {
              section: section,
              key: key + ':footer',
              index: null,
              header: false,
              trailingSection: this.props.sections[ii + 1]
            };
          } else {
            var keyExtractor = section.keyExtractor || defaultKeyExtractor;
            return {
              section: section,
              key: key + ':' + keyExtractor(section.data[itemIndex], itemIndex),
              index: itemIndex,
              leadingItem: section.data[itemIndex - 1],
              leadingSection: this.props.sections[ii - 1],
              trailingItem: section.data[itemIndex + 1],
              trailingSection: this.props.sections[ii + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === info.section.data.length - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }]);

    return VirtualizedSectionList;
  }(React.PureComponent);

  VirtualizedSectionList.defaultProps = _objectSpread({}, VirtualizedList.defaultProps, {
    data: []
  });

  var ItemWithSeparator = function (_React$Component) {
    _inherits(ItemWithSeparator, _React$Component);

    function ItemWithSeparator() {
      var _getPrototypeOf2;

      var _this2;

      _classCallCheck(this, ItemWithSeparator);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ItemWithSeparator)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this2.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this2.props.item,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.trailingItem,
          trailingSection: _this2.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this2.props.leadingItem,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.item,
          trailingSection: _this2.props.trailingSection
        }
      };
      _this2._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this2$props = _this2.props,
              LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
              cellKey = _this2$props.cellKey,
              prevCellKey = _this2$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent != null) {
            _this2.setState(function (state) {
              return {
                leadingSeparatorProps: _objectSpread({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      };
      return _this2;
    }

    _createClass(ItemWithSeparator, [{
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: _objectSpread({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            LeadingSeparatorComponent = _this$props.LeadingSeparatorComponent,
            SeparatorComponent = _this$props.SeparatorComponent,
            item = _this$props.item,
            index = _this$props.index,
            section = _this$props.section;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, this.state.leadingSeparatorProps);
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, this.state.separatorProps);
        return leadingSeparator || separator ? React.createElement(View, null, leadingSeparator, element, separator) : element;
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        return {
          separatorProps: _objectSpread({}, prevState.separatorProps, {
            leadingItem: props.item,
            leadingSection: props.leadingSection,
            section: props.section,
            trailingItem: props.trailingItem,
            trailingSection: props.trailingSection
          }),
          leadingSeparatorProps: _objectSpread({}, prevState.leadingSeparatorProps, {
            leadingItem: props.leadingItem,
            leadingSection: props.leadingSection,
            section: props.section,
            trailingItem: props.item,
            trailingSection: props.trailingSection
          })
        };
      }
    }]);

    return ItemWithSeparator;
  }(React.Component);

  function getItem(sections, index) {
    if (!sections) {
      return null;
    }

    var itemIdx = index - 1;

    for (var ii = 0; ii < sections.length; ii++) {
      if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
        return sections[ii];
      } else if (itemIdx < sections[ii].data.length) {
        return sections[ii].data[itemIdx];
      } else {
        itemIdx -= sections[ii].data.length + 2;
      }
    }

    return null;
  }

  module.exports = VirtualizedSectionList;
},249,[8,43,19,27,30,29,20,33,45,74,239,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  module.exports = NativeMethodsMixin;
},250,[77]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[2]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[5]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[7]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[8]);

  var RCTCheckBox = requireNativeComponent('AndroidCheckBox');
  var CheckBox = createReactClass({
    displayName: 'CheckBox',
    propTypes: _objectSpread({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onChange: PropTypes.func,
      onValueChange: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctCheckBox: {},
    _onChange: function _onChange(event) {
      this._rctCheckBox.setNativeProps({
        value: this.props.value
      });

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = _objectSpread({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = [styles.rctCheckBox, this.props.style];
      return React.createElement(RCTCheckBox, _extends({}, props, {
        ref: function ref(_ref) {
          _this._rctCheckBox = _ref;
        },
        onChange: this._onChange
      }));
    }
  });
  var styles = StyleSheet.create({
    rctCheckBox: {
      height: 32,
      width: 32
    }
  });
  module.exports = CheckBox;
},251,[8,43,250,60,45,49,245,184,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[6]);

  var Text = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var DummyDatePickerIOS = function (_React$Component) {
    _inherits(DummyDatePickerIOS, _React$Component);

    function DummyDatePickerIOS() {
      _classCallCheck(this, DummyDatePickerIOS);

      return _possibleConstructorReturn(this, _getPrototypeOf(DummyDatePickerIOS).apply(this, arguments));
    }

    _createClass(DummyDatePickerIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(View, {
          style: [styles.dummyDatePickerIOS, this.props.style]
        }, React.createElement(Text, {
          style: styles.datePickerText
        }, "DatePickerIOS is not supported on this platform!"));
      }
    }]);

    return DummyDatePickerIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummyDatePickerIOS: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    datePickerText: {
      color: '#333333',
      margin: 20
    }
  });
  module.exports = DummyDatePickerIOS;
},252,[19,20,27,30,33,45,49,169,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[2]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[7]);

  var StatusBar = _$$_REQUIRE(_dependencyMap[8]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[9]);

  var UIManager = _$$_REQUIRE(_dependencyMap[10]);

  var View = _$$_REQUIRE(_dependencyMap[11]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[12]);

  var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

  var createReactClass = _$$_REQUIRE(_dependencyMap[13]);

  var dismissKeyboard = _$$_REQUIRE(_dependencyMap[14]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[15]);

  var RK_DRAWER_REF = 'drawerlayout';
  var INNERVIEW_REF = 'innerView';
  var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];
  var DrawerLayoutAndroid = createReactClass({
    displayName: 'DrawerLayoutAndroid',
    statics: {
      positions: DrawerConsts.DrawerPosition
    },
    propTypes: _objectSpread({}, ViewPropTypes, {
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
      drawerBackgroundColor: ColorPropType,
      drawerPosition: PropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),
      drawerWidth: PropTypes.number,
      drawerLockMode: PropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),
      onDrawerSlide: PropTypes.func,
      onDrawerStateChanged: PropTypes.func,
      onDrawerOpen: PropTypes.func,
      onDrawerClose: PropTypes.func,
      renderNavigationView: PropTypes.func.isRequired,
      statusBarBackgroundColor: ColorPropType
    }),
    mixins: [NativeMethodsMixin],
    getDefaultProps: function getDefaultProps() {
      return {
        drawerBackgroundColor: 'white'
      };
    },
    getInitialState: function getInitialState() {
      return {
        statusBarBackgroundColor: undefined
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this.refs[INNERVIEW_REF].getInnerViewNode();
    },
    render: function render() {
      var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
      var drawerViewWrapper = React.createElement(View, {
        style: [styles.drawerSubview, {
          width: this.props.drawerWidth,
          backgroundColor: this.props.drawerBackgroundColor
        }],
        collapsable: false
      }, this.props.renderNavigationView(), drawStatusBar && React.createElement(View, {
        style: styles.drawerStatusBar
      }));
      var childrenWrapper = React.createElement(View, {
        ref: INNERVIEW_REF,
        style: styles.mainSubview,
        collapsable: false
      }, drawStatusBar && React.createElement(StatusBar, {
        translucent: true,
        backgroundColor: this.props.statusBarBackgroundColor
      }), drawStatusBar && React.createElement(View, {
        style: [styles.statusBar, {
          backgroundColor: this.props.statusBarBackgroundColor
        }]
      }), this.props.children);
      return React.createElement(AndroidDrawerLayout, _extends({}, this.props, {
        ref: RK_DRAWER_REF,
        drawerWidth: this.props.drawerWidth,
        drawerPosition: this.props.drawerPosition,
        drawerLockMode: this.props.drawerLockMode,
        style: [styles.base, this.props.style],
        onDrawerSlide: this._onDrawerSlide,
        onDrawerOpen: this._onDrawerOpen,
        onDrawerClose: this._onDrawerClose,
        onDrawerStateChanged: this._onDrawerStateChanged
      }), childrenWrapper, drawerViewWrapper);
    },
    _onDrawerSlide: function _onDrawerSlide(event) {
      if (this.props.onDrawerSlide) {
        this.props.onDrawerSlide(event);
      }

      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    },
    _onDrawerOpen: function _onDrawerOpen() {
      if (this.props.onDrawerOpen) {
        this.props.onDrawerOpen();
      }
    },
    _onDrawerClose: function _onDrawerClose() {
      if (this.props.onDrawerClose) {
        this.props.onDrawerClose();
      }
    },
    _onDrawerStateChanged: function _onDrawerStateChanged(event) {
      if (this.props.onDrawerStateChanged) {
        this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
      }
    },
    openDrawer: function openDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
    },
    closeDrawer: function closeDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
    },
    _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
      return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
    }
  });
  var styles = StyleSheet.create({
    base: {
      flex: 1,
      elevation: 16
    },
    mainSubview: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    drawerSubview: {
      position: 'absolute',
      top: 0,
      bottom: 0
    },
    statusBar: {
      height: StatusBar.currentHeight
    },
    drawerStatusBar: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: StatusBar.currentHeight,
      backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
  });
  var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout');
  module.exports = DrawerLayoutAndroid;
},253,[8,43,55,250,41,45,60,77,254,49,40,74,245,184,231,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var _extends = _$$_REQUIRE(_dependencyMap[5]);

  var React = _$$_REQUIRE(_dependencyMap[6]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[8]);

  var Platform = _$$_REQUIRE(_dependencyMap[9]);

  var processColor = _$$_REQUIRE(_dependencyMap[10]);

  var StatusBarManager = _$$_REQUIRE(_dependencyMap[11]).StatusBarManager;

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, _extends({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = function (_React$Component) {
    _inherits(StatusBar, _React$Component);

    function StatusBar() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, StatusBar);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StatusBar)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._stackEntry = null;

      _this._updatePropsStack = function () {
        clearImmediate(StatusBar._updateImmediate);
        StatusBar._updateImmediate = setImmediate(function () {
          var oldProps = StatusBar._currentValues;
          var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);
          {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value);
            }

            if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
              StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value);
            }

            if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
              StatusBarManager.setTranslucent(mergedProps.translucent);
            }
          }
          StatusBar._currentValues = mergedProps;
        });
      };

      return _this;
    }

    _createClass(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = createStackEntry(this.props);

        StatusBar._propsStack.push(this._stackEntry);

        this._updatePropsStack();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        StatusBar._propsStack.splice(index, 1);

        this._updatePropsStack();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        this._stackEntry = createStackEntry(this.props);
        StatusBar._propsStack[index] = this._stackEntry;

        this._updatePropsStack();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;
        {
          StatusBarManager.setHidden(hidden);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;
        {
          StatusBarManager.setStyle(style);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }
        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        StatusBarManager.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        StatusBarManager.setColor(processColor(color), animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        StatusBar._defaultProps.translucent = translucent;
        StatusBarManager.setTranslucent(translucent);
      }
    }]);

    return StatusBar;
  }(React.Component);

  StatusBar._propsStack = [];
  StatusBar._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  });
  StatusBar._updateImmediate = null;
  StatusBar._currentValues = null;
  StatusBar.currentHeight = StatusBarManager.HEIGHT;
  StatusBar.propTypes = {
    hidden: PropTypes.bool,
    animated: PropTypes.bool,
    backgroundColor: ColorPropType,
    translucent: PropTypes.bool,
    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),
    networkActivityIndicatorVisible: PropTypes.bool,
    showHideTransition: PropTypes.oneOf(['fade', 'slide'])
  };
  StatusBar.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  };
  module.exports = StatusBar;
},254,[19,20,27,30,33,8,45,60,55,41,68,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var Image = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[9]);

  var View = _$$_REQUIRE(_dependencyMap[10]);

  var ensureComponentIsNative = _$$_REQUIRE(_dependencyMap[11]);

  var ImageBackground = function (_React$Component) {
    _inherits(ImageBackground, _React$Component);

    function ImageBackground() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ImageBackground);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ImageBackground)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._viewRef = null;

      _this._captureRef = function (ref) {
        _this._viewRef = ref;
      };

      return _this;
    }

    _createClass(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          ensureComponentIsNative(viewRef);
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            style = _this$props.style,
            imageStyle = _this$props.imageStyle,
            imageRef = _this$props.imageRef,
            props = _objectWithoutProperties(_this$props, ["children", "style", "imageStyle", "imageRef"]);

        return React.createElement(View, {
          accessibilityIgnoresInvertColors: true,
          style: style,
          ref: this._captureRef
        }, React.createElement(Image, _extends({}, props, {
          style: [StyleSheet.absoluteFill, {
            width: style.width,
            height: style.height
          }, imageStyle],
          ref: imageRef
        })), children);
      }
    }]);

    return ImageBackground;
  }(React.Component);

  module.exports = ImageBackground;
},255,[8,6,19,20,27,30,33,244,45,49,74,256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var ensureComponentIsNative = function ensureComponentIsNative(component) {
    invariant(component && typeof component.setNativeProps === 'function', "Touchable child must either be native or forward setNativeProps to a native component");
  };

  module.exports = ensureComponentIsNative;
},256,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var RCTImageEditingManager = _$$_REQUIRE(_dependencyMap[2]).ImageEditingManager;

  var ImageEditor = function () {
    function ImageEditor() {
      _classCallCheck(this, ImageEditor);
    }

    _createClass(ImageEditor, null, [{
      key: "cropImage",
      value: function cropImage(uri, cropData, success, failure) {
        RCTImageEditingManager.cropImage(uri, cropData, success, failure);
      }
    }]);

    return ImageEditor;
  }();

  module.exports = ImageEditor;
},257,[19,20,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var RCTImageStoreManager = _$$_REQUIRE(_dependencyMap[2]).ImageStoreManager;

  var ImageStore = function () {
    function ImageStore() {
      _classCallCheck(this, ImageStore);
    }

    _createClass(ImageStore, null, [{
      key: "hasImageForTag",
      value: function hasImageForTag(uri, callback) {
        if (RCTImageStoreManager.hasImageForTag) {
          RCTImageStoreManager.hasImageForTag(uri, callback);
        } else {
          console.warn('hasImageForTag() not implemented');
        }
      }
    }, {
      key: "removeImageForTag",
      value: function removeImageForTag(uri) {
        if (RCTImageStoreManager.removeImageForTag) {
          RCTImageStoreManager.removeImageForTag(uri);
        } else {
          console.warn('removeImageForTag() not implemented');
        }
      }
    }, {
      key: "addImageFromBase64",
      value: function addImageFromBase64(base64ImageData, success, failure) {
        RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
      }
    }, {
      key: "getBase64ForTag",
      value: function getBase64ForTag(uri, success, failure) {
        RCTImageStoreManager.getBase64ForTag(uri, success, failure);
      }
    }]);

    return ImageStore;
  }();

  module.exports = ImageStore;
},258,[19,20,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[5]);

  var React = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[8]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[9]);

  var RCTInputAccessoryView = requireNativeComponent('RCTInputAccessoryView');

  var InputAccessoryView = function (_React$Component) {
    _inherits(InputAccessoryView, _React$Component);

    function InputAccessoryView() {
      _classCallCheck(this, InputAccessoryView);

      return _possibleConstructorReturn(this, _getPrototypeOf(InputAccessoryView).apply(this, arguments));
    }

    _createClass(InputAccessoryView, [{
      key: "render",
      value: function render() {
        console.warn('<InputAccessoryView> is not supported on Android yet.');

        if (React.Children.count(this.props.children) === 0) {
          return null;
        }

        return React.createElement(RCTInputAccessoryView, {
          style: [this.props.style, styles.container],
          nativeID: this.props.nativeID,
          backgroundColor: this.props.backgroundColor
        }, this.props.children);
      }
    }]);

    return InputAccessoryView;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      position: 'absolute'
    }
  });
  module.exports = InputAccessoryView;
},259,[19,20,27,30,33,55,45,49,245,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var Keyboard = _$$_REQUIRE(_dependencyMap[7]);

  var LayoutAnimation = _$$_REQUIRE(_dependencyMap[8]);

  var Platform = _$$_REQUIRE(_dependencyMap[9]);

  var React = _$$_REQUIRE(_dependencyMap[10]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[11]);

  var View = _$$_REQUIRE(_dependencyMap[12]);

  var viewRef = 'VIEW';

  var KeyboardAvoidingView = function (_React$Component) {
    _inherits(KeyboardAvoidingView, _React$Component);

    function KeyboardAvoidingView() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, KeyboardAvoidingView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(KeyboardAvoidingView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._frame = null;
      _this._subscriptions = [];
      _this.state = {
        bottom: 0
      };

      _this._onKeyboardChange = function (event) {
        if (event == null) {
          _this.setState({
            bottom: 0
          });

          return;
        }

        var duration = event.duration,
            easing = event.easing,
            endCoordinates = event.endCoordinates;

        var height = _this._relativeKeyboardHeight(endCoordinates);

        if (_this.state.bottom === height) {
          return;
        }

        if (duration && easing) {
          LayoutAnimation.configureNext({
            duration: duration,
            update: {
              duration: duration,
              type: LayoutAnimation.Types[easing] || 'keyboard'
            }
          });
        }

        _this.setState({
          bottom: height
        });
      };

      _this._onLayout = function (event) {
        _this._frame = event.nativeEvent.layout;
      };

      return _this;
    }

    _createClass(KeyboardAvoidingView, [{
      key: "_relativeKeyboardHeight",
      value: function _relativeKeyboardHeight(keyboardFrame) {
        var frame = this._frame;

        if (!frame || !keyboardFrame) {
          return 0;
        }

        var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
        return Math.max(frame.y + frame.height - keyboardY, 0);
      }
    }, {
      key: "UNSAFE_componentWillUpdate",
      value: function UNSAFE_componentWillUpdate(nextProps, nextState) {
        if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
          nextState.bottom = 0;
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        {
          this._subscriptions = [Keyboard.addListener('keyboardDidHide', this._onKeyboardChange), Keyboard.addListener('keyboardDidShow', this._onKeyboardChange)];
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._subscriptions.forEach(function (subscription) {
          subscription.remove();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            behavior = _this$props.behavior,
            children = _this$props.children,
            contentContainerStyle = _this$props.contentContainerStyle,
            enabled = _this$props.enabled,
            keyboardVerticalOffset = _this$props.keyboardVerticalOffset,
            style = _this$props.style,
            props = _objectWithoutProperties(_this$props, ["behavior", "children", "contentContainerStyle", "enabled", "keyboardVerticalOffset", "style"]);

        var bottomHeight = enabled ? this.state.bottom : 0;

        switch (behavior) {
          case 'height':
            var heightStyle;

            if (this._frame != null) {
              heightStyle = {
                height: this._frame.height - bottomHeight,
                flex: 0
              };
            }

            return React.createElement(View, _extends({
              ref: viewRef,
              style: StyleSheet.compose(style, heightStyle),
              onLayout: this._onLayout
            }, props), children);

          case 'position':
            return React.createElement(View, _extends({
              ref: viewRef,
              style: style,
              onLayout: this._onLayout
            }, props), React.createElement(View, {
              style: StyleSheet.compose(contentContainerStyle, {
                bottom: bottomHeight
              })
            }, children));

          case 'padding':
            return React.createElement(View, _extends({
              ref: viewRef,
              style: StyleSheet.compose(style, {
                paddingBottom: bottomHeight
              }),
              onLayout: this._onLayout
            }, props), children);

          default:
            return React.createElement(View, _extends({
              ref: viewRef,
              onLayout: this._onLayout,
              style: style
            }, props), children);
        }
      }
    }]);

    return KeyboardAvoidingView;
  }(React.Component);

  KeyboardAvoidingView.defaultProps = {
    enabled: true,
    keyboardVerticalOffset: 0
  };
  module.exports = KeyboardAvoidingView;
},260,[8,6,19,20,27,30,33,229,230,41,45,49,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},261,[262]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[6]);

  var UnimplementedView = function (_React$Component) {
    _inherits(UnimplementedView, _React$Component);

    function UnimplementedView() {
      _classCallCheck(this, UnimplementedView);

      return _possibleConstructorReturn(this, _getPrototypeOf(UnimplementedView).apply(this, arguments));
    }

    _createClass(UnimplementedView, [{
      key: "setNativeProps",
      value: function setNativeProps() {}
    }, {
      key: "render",
      value: function render() {
        var View = _$$_REQUIRE(_dependencyMap[7]);

        return React.createElement(View, {
          style: [styles.unimplementedView, this.props.style]
        }, this.props.children);
      }
    }]);

    return UnimplementedView;
  }(React.Component);

  var styles = StyleSheet.create({
    unimplementedView: {}
  });
  module.exports = UnimplementedView;
},262,[19,20,27,30,33,45,49,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _container;

  var AppContainer = _$$_REQUIRE(_dependencyMap[6]);

  var I18nManager = _$$_REQUIRE(_dependencyMap[7]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[8]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[9]);

  var Platform = _$$_REQUIRE(_dependencyMap[10]);

  var React = _$$_REQUIRE(_dependencyMap[11]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[12]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[13]);

  var View = _$$_REQUIRE(_dependencyMap[14]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[15]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[16]);

  var RCTModalHostView = requireNativeComponent('RCTModalHostView');
  var ModalEventEmitter = null;
  var uniqueModalIdentifier = 0;

  var Modal = function (_React$Component) {
    _inherits(Modal, _React$Component);

    function Modal(props) {
      var _this;

      _classCallCheck(this, Modal);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    _createClass(Modal, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: null
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType;

        if (!animationType) {
          animationType = 'none';

          if (this.props.animated) {
            animationType = 'slide';
          }
        }

        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = this.props.children;
        return React.createElement(RCTModalHostView, {
          animationType: animationType,
          presentationStyle: presentationStyle,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          identifier: this._identifier,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange
        }, React.createElement(View, {
          style: [styles.container, containerStyles]
        }, innerChildren));
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);

    return Modal;
  }(React.Component);

  Modal.propTypes = {
    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),
    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),
    transparent: PropTypes.bool,
    hardwareAccelerated: PropTypes.bool,
    visible: PropTypes.bool,
    onRequestClose: Platform.isTV || true ? PropTypes.func.isRequired : PropTypes.func,
    onShow: PropTypes.func,
    onDismiss: PropTypes.func,
    animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),
    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),
    onOrientationChange: PropTypes.func
  };
  Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  };
  Modal.contextTypes = {
    rootTag: PropTypes.number
  };
  Modal.childContextTypes = {
    virtualizedList: PropTypes.object
  };
  var side = I18nManager.isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {
      position: 'absolute'
    }, _defineProperty(_container, side, 0), _defineProperty(_container, "top", 0), _container)
  });
  module.exports = Modal;
},263,[44,19,20,27,30,33,264,265,111,5,41,45,60,49,74,65,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var EmitterSubscription = _$$_REQUIRE(_dependencyMap[5]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var View = _$$_REQUIRE(_dependencyMap[11]);

  var AppContainer = function (_React$Component) {
    _inherits(AppContainer, _React$Component);

    function AppContainer() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AppContainer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AppContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        inspector: null,
        mainKey: 1
      };
      _this._subscription = null;
      return _this;
    }

    _createClass(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription != null) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var yellowBox = null;
        var innerView = React.createElement(View, {
          collapsable: !this.state.inspector,
          key: this.state.mainKey,
          pointerEvents: "box-none",
          style: styles.appContainer,
          ref: function ref(_ref) {
            _this3._mainRef = _ref;
          }
        }, this.props.children);
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper != null) {
          innerView = React.createElement(Wrapper, null, innerView);
        }

        return React.createElement(View, {
          style: styles.appContainer,
          pointerEvents: "box-none"
        }, innerView, yellowBox, this.state.inspector);
      }
    }]);

    return AppContainer;
  }(React.Component);

  AppContainer.childContextTypes = {
    rootTag: PropTypes.number
  };
  var styles = StyleSheet.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},264,[19,20,27,30,33,36,60,26,45,77,49,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = _$$_REQUIRE(_dependencyMap[0]).I18nManager || {
    isRTL: false,
    doLeftAndRightSwapInRTL: true,
    allowRTL: function allowRTL() {},
    forceRTL: function forceRTL() {},
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL() {}
  };
  module.exports = I18nManager;
},265,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},266,[262]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[5]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[6]);

  var PickerIOS = _$$_REQUIRE(_dependencyMap[7]);

  var PickerAndroid = _$$_REQUIRE(_dependencyMap[8]);

  var Platform = _$$_REQUIRE(_dependencyMap[9]);

  var React = _$$_REQUIRE(_dependencyMap[10]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[12]);

  var TextStylePropTypes = _$$_REQUIRE(_dependencyMap[13]);

  var UnimplementedView = _$$_REQUIRE(_dependencyMap[14]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[15]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[16]);

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
  var pickerStyleType = StyleSheetPropType(_objectSpread({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';

  var PickerItem = function (_React$Component) {
    _inherits(PickerItem, _React$Component);

    function PickerItem() {
      _classCallCheck(this, PickerItem);

      return _possibleConstructorReturn(this, _getPrototypeOf(PickerItem).apply(this, arguments));
    }

    _createClass(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);

    return PickerItem;
  }(React.Component);

  PickerItem.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.any,
    color: ColorPropType,
    testID: PropTypes.string
  };

  var Picker = function (_React$Component2) {
    _inherits(Picker, _React$Component2);

    function Picker() {
      _classCallCheck(this, Picker);

      return _possibleConstructorReturn(this, _getPrototypeOf(Picker).apply(this, arguments));
    }

    _createClass(Picker, [{
      key: "render",
      value: function render() {
        {
          return React.createElement(PickerAndroid, this.props, this.props.children);
        }
      }
    }]);

    return Picker;
  }(React.Component);

  Picker.MODE_DIALOG = MODE_DIALOG;
  Picker.MODE_DROPDOWN = MODE_DROPDOWN;
  Picker.Item = PickerItem;
  Picker.defaultProps = {
    mode: MODE_DIALOG
  };
  Picker.propTypes = _objectSpread({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: PropTypes.any,
    onValueChange: PropTypes.func,
    enabled: PropTypes.bool,
    mode: PropTypes.oneOf(['dialog', 'dropdown']),
    itemStyle: itemStylePropType,
    prompt: PropTypes.string,
    testID: PropTypes.string
  });
  module.exports = Picker;
},267,[19,20,27,30,33,43,55,268,269,41,45,60,172,66,262,245,67]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},268,[262]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[11]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[12]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[13]);

  var processColor = _$$_REQUIRE(_dependencyMap[14]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[15]);

  var DropdownPicker = requireNativeComponent('AndroidDropdownPicker');
  var DialogPicker = requireNativeComponent('AndroidDialogPicker');
  var REF_PICKER = 'picker';
  var MODE_DROPDOWN = 'dropdown';
  var pickerStyleType = StyleSheetPropType(_objectSpread({}, ViewStylePropTypes, {
    color: ColorPropType
  }));

  var PickerAndroid = function (_React$Component) {
    _inherits(PickerAndroid, _React$Component);

    function PickerAndroid(_props, context) {
      var _this;

      _classCallCheck(this, PickerAndroid);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(PickerAndroid).call(this, _props, context));

      _this._stateFromProps = function (props) {
        var selectedIndex = 0;
        var items = React.Children.map(props.children, function (child, index) {
          if (child.props.value === props.selectedValue) {
            selectedIndex = index;
          }

          var childProps = {
            value: child.props.value,
            label: child.props.label
          };

          if (child.props.color) {
            childProps.color = processColor(child.props.color);
          }

          return childProps;
        });
        return {
          selectedIndex: selectedIndex,
          items: items
        };
      };

      _this._onChange = function (event) {
        if (_this.props.onValueChange) {
          var position = event.nativeEvent.position;

          if (position >= 0) {
            var children = React.Children.toArray(_this.props.children);
            var value = children[position].props.value;

            _this.props.onValueChange(value, position);
          } else {
            _this.props.onValueChange(null, position);
          }
        }

        _this._lastNativePosition = event.nativeEvent.position;

        _this.forceUpdate();
      };

      var state = _this._stateFromProps(_props);

      _this.state = _objectSpread({}, state, {
        initialSelectedIndex: state.selectedIndex
      });
      return _this;
    }

    _createClass(PickerAndroid, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._stateFromProps(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;
        var nativeProps = {
          enabled: this.props.enabled,
          items: this.state.items,
          mode: this.props.mode,
          onSelect: this._onChange,
          prompt: this.props.prompt,
          selected: this.state.initialSelectedIndex,
          testID: this.props.testID,
          style: [styles.pickerAndroid, this.props.style],
          accessibilityLabel: this.props.accessibilityLabel
        };
        return React.createElement(Picker, _extends({
          ref: REF_PICKER
        }, nativeProps));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativePosition = this.state.initialSelectedIndex;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
          this.refs[REF_PICKER].setNativeProps({
            selected: this.state.selectedIndex
          });
          this._lastNativePosition = this.state.selectedIndex;
        }
      }
    }]);

    return PickerAndroid;
  }(React.Component);

  PickerAndroid.propTypes = _objectSpread({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: ReactPropTypes.any,
    enabled: ReactPropTypes.bool,
    mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
    onValueChange: ReactPropTypes.func,
    prompt: ReactPropTypes.string,
    testID: ReactPropTypes.string
  });
  var styles = StyleSheet.create({
    pickerAndroid: {
      height: 50
    }
  });
  module.exports = PickerAndroid;
},269,[8,19,20,27,30,33,43,55,45,60,49,172,245,67,68,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[6]);

  var Text = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var DummyProgressViewIOS = function (_React$Component) {
    _inherits(DummyProgressViewIOS, _React$Component);

    function DummyProgressViewIOS() {
      _classCallCheck(this, DummyProgressViewIOS);

      return _possibleConstructorReturn(this, _getPrototypeOf(DummyProgressViewIOS).apply(this, arguments));
    }

    _createClass(DummyProgressViewIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(View, {
          style: [styles.dummy, this.props.style]
        }, React.createElement(Text, {
          style: styles.text
        }, "ProgressViewIOS is not supported on this platform!"));
      }
    }]);

    return DummyProgressViewIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 20,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummyProgressViewIOS;
},270,[19,20,27,30,33,45,49,169,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},271,[74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[6]);

  var Text = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var DummySegmentedControlIOS = function (_React$Component) {
    _inherits(DummySegmentedControlIOS, _React$Component);

    function DummySegmentedControlIOS() {
      _classCallCheck(this, DummySegmentedControlIOS);

      return _possibleConstructorReturn(this, _getPrototypeOf(DummySegmentedControlIOS).apply(this, arguments));
    }

    _createClass(DummySegmentedControlIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(View, {
          style: [styles.dummy, this.props.style]
        }, React.createElement(Text, {
          style: styles.text
        }, "SegmentedControlIOS is not supported on this platform!"));
      }
    }]);

    return DummySegmentedControlIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 50,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummySegmentedControlIOS;
},272,[19,20,27,30,33,45,49,169,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[4]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[5]);

  var RCTSlider = requireNativeComponent('RCTSlider');

  var Slider = function Slider(props, forwardedRef) {
    var style = StyleSheet.compose(styles.slider, props.style);

    var onValueChange = props.onValueChange && function (event) {
      var userEvent = true;
      {
        userEvent = event.nativeEvent.fromUser;
      }
      props.onValueChange && userEvent && props.onValueChange(event.nativeEvent.value);
    };

    var onChange = onValueChange;

    var onSlidingComplete = props.onSlidingComplete && function (event) {
      props.onSlidingComplete && props.onSlidingComplete(event.nativeEvent.value);
    };

    return React.createElement(RCTSlider, _extends({}, props, {
      ref: forwardedRef,
      style: style,
      onChange: onChange,
      onSlidingComplete: onSlidingComplete,
      onValueChange: onValueChange,
      enabled: !props.disabled,
      onStartShouldSetResponder: function onStartShouldSetResponder() {
        return true;
      },
      onResponderTerminationRequest: function onResponderTerminationRequest() {
        return false;
      }
    }));
  };

  var SliderWithRef = React.forwardRef(Slider);
  SliderWithRef.defaultProps = {
    disabled: false,
    value: 0,
    minimumValue: 0,
    maximumValue: 1,
    step: 0
  };
  var styles;
  {
    styles = StyleSheet.create({
      slider: {}
    });
  }
  module.exports = SliderWithRef;
},273,[8,77,41,45,49,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},274,[262]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var SwitchNativeComponent = _$$_REQUIRE(_dependencyMap[7]);

  var Platform = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var Switch = function (_React$Component) {
    _inherits(Switch, _React$Component);

    function Switch() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Switch);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Switch)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._handleChange = function (event) {
        if (_this._nativeSwitchRef == null) {
          return;
        }

        var value = _this.props.value === true;
        {
          _this._nativeSwitchRef.setNativeProps({
            on: value
          });
        }

        if (_this.props.onChange != null) {
          _this.props.onChange(event);
        }

        if (_this.props.onValueChange != null) {
          _this.props.onValueChange(event.nativeEvent.value);
        }
      };

      _this._handleSwitchNativeComponentRef = function (ref) {
        _this._nativeSwitchRef = ref;
      };

      return _this;
    }

    _createClass(Switch, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            disabled = _this$props.disabled,
            ios_backgroundColor = _this$props.ios_backgroundColor,
            onChange = _this$props.onChange,
            onValueChange = _this$props.onValueChange,
            style = _this$props.style,
            thumbColor = _this$props.thumbColor,
            trackColor = _this$props.trackColor,
            value = _this$props.value,
            props = _objectWithoutProperties(_this$props, ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"]);

        var _thumbColor = thumbColor;

        var _trackColorForFalse = trackColor == null ? undefined : trackColor.false;

        var _trackColorForTrue = trackColor == null ? undefined : trackColor.true;

        var _ref = props,
            thumbTintColor = _ref.thumbTintColor,
            tintColor = _ref.tintColor,
            onTintColor = _ref.onTintColor;

        if (thumbTintColor != null) {
          _thumbColor = thumbTintColor;
        }

        if (tintColor != null) {
          _trackColorForFalse = tintColor;
        }

        if (onTintColor != null) {
          _trackColorForTrue = onTintColor;
        }

        var platformProps = {
          enabled: disabled !== true,
          on: value === true,
          style: style,
          thumbTintColor: _thumbColor,
          trackTintColor: value === true ? _trackColorForTrue : _trackColorForFalse
        };
        return React.createElement(SwitchNativeComponent, _extends({}, props, platformProps, {
          onChange: this._handleChange,
          onResponderTerminationRequest: returnsFalse,
          onStartShouldSetResponder: returnsTrue,
          ref: this._handleSwitchNativeComponentRef
        }));
      }
    }]);

    return Switch;
  }(React.Component);

  var returnsFalse = function returnsFalse() {
    return false;
  };

  var returnsTrue = function returnsTrue() {
    return true;
  };

  module.exports = Switch;
},275,[8,6,19,20,27,30,33,276,41,45,49]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[2]);

  var SwitchNativeComponent = requireNativeComponent('AndroidSwitch');
  module.exports = SwitchNativeComponent;
},276,[41,77,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var SwipeableRow = _$$_REQUIRE(_dependencyMap[9]);

  var FlatList = _$$_REQUIRE(_dependencyMap[10]);

  var SwipeableFlatList = function (_React$Component) {
    _inherits(SwipeableFlatList, _React$Component);

    function SwipeableFlatList(props, context) {
      var _this;

      _classCallCheck(this, SwipeableFlatList);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SwipeableFlatList).call(this, props, context));
      _this._flatListRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.state.openRowKey) {
          _this.setState({
            openRowKey: null
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderItem = function (info) {
        var slideoutView = _this.props.renderQuickActions(info);

        var key = _this.props.keyExtractor(info.item, info.index);

        if (!slideoutView) {
          return _this.props.renderItem(info);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = true;
        }

        return React.createElement(SwipeableRow, {
          slideoutView: slideoutView,
          isOpen: key === _this.state.openRowKey,
          maxSwipeDistance: _this._getMaxSwipeDistance(info),
          onOpen: function onOpen() {
            return _this._onOpen(key);
          },
          onClose: function onClose() {
            return _this._onClose(key);
          },
          shouldBounceOnMount: shouldBounceOnMount,
          onSwipeEnd: _this._setListViewScrollable,
          onSwipeStart: _this._setListViewNotScrollable
        }, _this.props.renderItem(info));
      };

      _this._setListViewScrollable = function () {
        _this._setListViewScrollableTo(true);
      };

      _this._setListViewNotScrollable = function () {
        _this._setListViewScrollableTo(false);
      };

      _this.state = {
        openRowKey: null
      };
      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      return _this;
    }

    _createClass(SwipeableFlatList, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(FlatList, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._flatListRef = _ref;
          },
          onScroll: this._onScroll,
          renderItem: this._renderItem,
          extraData: this.state
        }));
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(info) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(info);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_setListViewScrollableTo",
      value: function _setListViewScrollableTo(value) {
        if (this._flatListRef) {
          this._flatListRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(key) {
        this.setState({
          openRowKey: key
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(key) {
        this.setState({
          openRowKey: null
        });
      }
    }]);

    return SwipeableFlatList;
  }(React.Component);

  SwipeableFlatList.propTypes = _objectSpread({}, FlatList.propTypes, {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderQuickActions: PropTypes.func.isRequired
  });
  SwipeableFlatList.defaultProps = _objectSpread({}, FlatList.defaultProps, {
    bounceFirstRowOnMount: true,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  });
  module.exports = SwipeableFlatList;
},277,[43,8,19,20,27,30,33,60,45,278,220]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var Animated = _$$_REQUIRE(_dependencyMap[5]);

  var I18nManager = _$$_REQUIRE(_dependencyMap[6]);

  var PanResponder = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[11]);

  var View = _$$_REQUIRE(_dependencyMap[12]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[13]);

  var emptyFunction = _$$_REQUIRE(_dependencyMap[14]);

  var IS_RTL = I18nManager.isRTL;
  var CLOSED_LEFT_POSITION = 0;
  var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;
  var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;
  var SLOW_SPEED_SWIPE_FACTOR = 4;
  var SWIPE_DURATION = 300;
  var ON_MOUNT_BOUNCE_DELAY = 700;
  var ON_MOUNT_BOUNCE_DURATION = 400;
  var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
  var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;
  var RIGHT_SWIPE_THRESHOLD = 120;
  var SwipeableRow = createReactClass({
    displayName: 'SwipeableRow',
    _panResponder: {},
    _previousLeft: CLOSED_LEFT_POSITION,
    mixins: [TimerMixin],
    propTypes: {
      children: PropTypes.any,
      isOpen: PropTypes.bool,
      preventSwipeRight: PropTypes.bool,
      maxSwipeDistance: PropTypes.number.isRequired,
      onOpen: PropTypes.func.isRequired,
      onClose: PropTypes.func.isRequired,
      onSwipeEnd: PropTypes.func.isRequired,
      onSwipeStart: PropTypes.func.isRequired,
      shouldBounceOnMount: PropTypes.bool,
      slideoutView: PropTypes.node.isRequired,
      swipeThreshold: PropTypes.number.isRequired
    },
    getInitialState: function getInitialState() {
      return {
        currentLeft: new Animated.Value(this._previousLeft),
        isSwipeableViewRendered: false,
        rowHeight: null
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        isOpen: false,
        preventSwipeRight: false,
        maxSwipeDistance: 0,
        onOpen: emptyFunction,
        onClose: emptyFunction,
        onSwipeEnd: emptyFunction,
        onSwipeStart: emptyFunction,
        swipeThreshold: 30
      };
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._panResponder = PanResponder.create({
        onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        }
      });
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      if (this.props.shouldBounceOnMount) {
        this.setTimeout(function () {
          _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
        }, ON_MOUNT_BOUNCE_DELAY);
      }
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.isOpen && !nextProps.isOpen) {
        this._animateToClosedPosition();
      }
    },
    render: function render() {
      var slideOutView;

      if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
        slideOutView = React.createElement(View, {
          style: [styles.slideOutContainer, {
            height: this.state.rowHeight
          }]
        }, this.props.slideoutView);
      }

      var swipeableView = React.createElement(Animated.View, {
        onLayout: this._onSwipeableViewLayout,
        style: {
          transform: [{
            translateX: this.state.currentLeft
          }]
        }
      }, this.props.children);
      return React.createElement(View, this._panResponder.panHandlers, slideOutView, swipeableView);
    },
    close: function close() {
      this.props.onClose();

      this._animateToClosedPosition();
    },
    _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
      this.setState({
        isSwipeableViewRendered: true,
        rowHeight: event.nativeEvent.layout.height
      });
    },
    _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
      return gestureState.dy < 10 && this._isValidSwipe(gestureState);
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
    _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
      if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
        return;
      }

      this.props.onSwipeStart();

      if (this._isSwipingRightFromClosed(gestureState)) {
        this._swipeSlowSpeed(gestureState);
      } else {
        this._swipeFullSpeed(gestureState);
      }
    },
    _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
    },
    _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
    },
    _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
    },
    _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
    },
    _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
      return false;
    },
    _animateTo: function _animateTo(toValue) {
      var _this2 = this;

      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;
      Animated.timing(this.state.currentLeft, {
        duration: duration,
        toValue: toValue,
        useNativeDriver: true
      }).start(function () {
        _this2._previousLeft = toValue;
        callback();
      });
    },
    _animateToOpenPosition: function _animateToOpenPosition() {
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance);
    },
    _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
      speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
      var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance, duration);
    },
    _animateToClosedPosition: function _animateToClosedPosition() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

      this._animateTo(CLOSED_LEFT_POSITION, duration);
    },
    _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
      this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    },
    _animateBounceBack: function _animateBounceBack(duration) {
      var swipeBounceBackDistance = IS_RTL ? -30 : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;

      this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
    },
    _isValidSwipe: function _isValidSwipe(gestureState) {
      if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
        return false;
      }

      return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
    },
    _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
      return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
      var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;

      if (this._isSwipingRightFromClosed(gestureState)) {
        this.props.onOpen();

        this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
      } else if (this._shouldAnimateRemainder(gestureState)) {
        if (horizontalDistance < 0) {
          this.props.onOpen();

          this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
        } else {
          this.props.onClose();

          this._animateToClosedPosition();
        }
      } else {
        if (this._previousLeft === CLOSED_LEFT_POSITION) {
          this._animateToClosedPosition();
        } else {
          this._animateToOpenPosition();
        }
      }

      this.props.onSwipeEnd();
    }
  });

  var TypedSwipeableRow = function (_React$Component) {
    _inherits(TypedSwipeableRow, _React$Component);

    function TypedSwipeableRow() {
      _classCallCheck(this, TypedSwipeableRow);

      return _possibleConstructorReturn(this, _getPrototypeOf(TypedSwipeableRow).apply(this, arguments));
    }

    _createClass(TypedSwipeableRow, [{
      key: "close",
      value: function close() {}
    }]);

    return TypedSwipeableRow;
  }(React.Component);

  var styles = StyleSheet.create({
    slideOutContainer: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0
    }
  });
  module.exports = SwipeableRow;
},278,[19,20,27,30,33,191,265,279,45,60,49,183,74,184,39]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = _$$_REQUIRE(_dependencyMap[0]);

  var TouchHistoryMath = _$$_REQUIRE(_dependencyMap[1]);

  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random()
      };

      PanResponder._initializeGestureState(gestureState);

      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(e) {
          return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
          return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
          if (e.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(e) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }

          gestureState.x0 = currentCentroidX(e.touchHistory);
          gestureState.y0 = currentCentroidY(e.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(e, gestureState);
          }

          return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
        },
        onResponderReject: function onResponderReject(e) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
        },
        onResponderRelease: function onResponderRelease(e) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(e, gestureState);
          }
        },
        onResponderMove: function onResponderMove(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(e, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(e) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(e) {
          return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},279,[199,280]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];

          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = undefined;

            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }

            total += toAdd;
            count++;
          }
        }
      }

      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
  };
  module.exports = TouchHistoryMath;
},280,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _createClass = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var ListView = _$$_REQUIRE(_dependencyMap[6]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var SwipeableListViewDataSource = _$$_REQUIRE(_dependencyMap[9]);

  var SwipeableRow = _$$_REQUIRE(_dependencyMap[10]);

  var SwipeableListView = function (_React$Component) {
    _inherits(SwipeableListView, _React$Component);

    _createClass(SwipeableListView, null, [{
      key: "getNewDataSource",
      value: function getNewDataSource() {
        return new SwipeableListViewDataSource({
          getRowData: function getRowData(data, sectionID, rowID) {
            return data[sectionID][rowID];
          },
          getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
            return data[sectionID];
          },
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
            return s1 !== s2;
          }
        });
      }
    }]);

    function SwipeableListView(props, context) {
      var _this;

      _classCallCheck(this, SwipeableListView);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SwipeableListView).call(this, props, context));
      _this._listViewRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.props.dataSource.getOpenRowID()) {
          _this.setState({
            dataSource: _this.state.dataSource.setOpenRowID(null)
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderRow = function (rowData, sectionID, rowID) {
        var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

        if (!slideoutView) {
          return _this.props.renderRow(rowData, sectionID, rowID);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
        }

        return React.createElement(SwipeableRow, {
          slideoutView: slideoutView,
          isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
          maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
          key: rowID,
          onOpen: function onOpen() {
            return _this._onOpen(rowData.id);
          },
          onClose: function onClose() {
            return _this._onClose(rowData.id);
          },
          onSwipeEnd: function onSwipeEnd() {
            return _this._setListViewScrollable(true);
          },
          onSwipeStart: function onSwipeStart() {
            return _this._setListViewScrollable(false);
          },
          shouldBounceOnMount: shouldBounceOnMount
        }, _this.props.renderRow(rowData, sectionID, rowID));
      };

      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      _this.state = {
        dataSource: _this.props.dataSource
      };
      return _this;
    }

    _createClass(SwipeableListView, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
          this.setState({
            dataSource: nextProps.dataSource
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(ListView, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._listViewRef = _ref;
          },
          dataSource: this.state.dataSource.getDataSource(),
          onScroll: this._onScroll,
          renderRow: this._renderRow
        }));
      }
    }, {
      key: "_setListViewScrollable",
      value: function _setListViewScrollable(value) {
        if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
          this._listViewRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
          return this._listViewRef.getScrollResponder();
        }
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(rowData, sectionID, rowID);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(rowID)
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(null)
        });
      }
    }]);

    return SwipeableListView;
  }(React.Component);

  SwipeableListView.propTypes = {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderRow: PropTypes.func.isRequired,
    renderQuickActions: PropTypes.func.isRequired
  };
  SwipeableListView.defaultProps = {
    bounceFirstRowOnMount: false,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  };
  module.exports = SwipeableListView;
},281,[8,19,27,30,20,33,222,60,45,282,278]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[2]);

  var SwipeableListViewDataSource = function () {
    function SwipeableListViewDataSource(params) {
      var _this = this;

      _classCallCheck(this, SwipeableListViewDataSource);

      this._dataSource = new ListViewDataSource({
        getRowData: params.getRowData,
        getSectionHeaderData: params.getSectionHeaderData,
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
        },
        sectionHeaderHasChanged: params.sectionHeaderHasChanged
      });
    }

    _createClass(SwipeableListViewDataSource, [{
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);
        this._dataBlob = dataBlob;
        this.rowIdentities = this._dataSource.rowIdentities;
        this.sectionIdentities = this._dataSource.sectionIdentities;
        return this;
      }
    }, {
      key: "getDataSource",
      value: function getDataSource() {
        return this._dataSource;
      }
    }, {
      key: "getOpenRowID",
      value: function getOpenRowID() {
        return this._openRowID;
      }
    }, {
      key: "getFirstRowID",
      value: function getFirstRowID() {
        if (this.rowIdentities) {
          return this.rowIdentities[0] && this.rowIdentities[0][0];
        }

        return Object.keys(this._dataBlob)[0];
      }
    }, {
      key: "getLastRowID",
      value: function getLastRowID() {
        if (this.rowIdentities && this.rowIdentities.length) {
          var lastSection = this.rowIdentities[this.rowIdentities.length - 1];

          if (lastSection && lastSection.length) {
            return lastSection[lastSection.length - 1];
          }
        }

        return Object.keys(this._dataBlob)[this._dataBlob.length - 1];
      }
    }, {
      key: "setOpenRowID",
      value: function setOpenRowID(rowID) {
        this._previousOpenRowID = this._openRowID;
        this._openRowID = rowID;
        this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);
        return this;
      }
    }]);

    return SwipeableListViewDataSource;
  }();

  module.exports = SwipeableListViewDataSource;
},282,[19,20,224]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[6]);

  var TabBarItemIOS = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var DummyTabBarIOS = function (_React$Component) {
    _inherits(DummyTabBarIOS, _React$Component);

    function DummyTabBarIOS() {
      _classCallCheck(this, DummyTabBarIOS);

      return _possibleConstructorReturn(this, _getPrototypeOf(DummyTabBarIOS).apply(this, arguments));
    }

    _createClass(DummyTabBarIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(View, {
          style: [this.props.style, styles.tabGroup]
        }, this.props.children);
      }
    }]);

    return DummyTabBarIOS;
  }(React.Component);

  DummyTabBarIOS.Item = TabBarItemIOS;
  var styles = StyleSheet.create({
    tabGroup: {
      flex: 1
    }
  });
  module.exports = DummyTabBarIOS;
},283,[19,20,27,30,33,45,49,284,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var View = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var DummyTab = function (_React$Component) {
    _inherits(DummyTab, _React$Component);

    function DummyTab() {
      _classCallCheck(this, DummyTab);

      return _possibleConstructorReturn(this, _getPrototypeOf(DummyTab).apply(this, arguments));
    }

    _createClass(DummyTab, [{
      key: "render",
      value: function render() {
        if (!this.props.selected) {
          return React.createElement(View, null);
        }

        return React.createElement(View, {
          style: [this.props.style, styles.tab]
        }, this.props.children);
      }
    }]);

    return DummyTab;
  }(React.Component);

  var styles = StyleSheet.create({
    tab: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderColor: 'red',
      borderWidth: 1
    }
  });
  module.exports = DummyTab;
},284,[19,20,27,30,33,45,74,49]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var _extends = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[7]);

  var DocumentSelectionState = _$$_REQUIRE(_dependencyMap[8]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[9]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[10]);

  var Platform = _$$_REQUIRE(_dependencyMap[11]);

  var React = _$$_REQUIRE(_dependencyMap[12]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[13]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[14]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[15]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[16]);

  var Text = _$$_REQUIRE(_dependencyMap[17]);

  var TextAncestor = _$$_REQUIRE(_dependencyMap[18]);

  var TextInputState = _$$_REQUIRE(_dependencyMap[19]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[20]);

  var TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[21]);

  var UIManager = _$$_REQUIRE(_dependencyMap[22]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[23]);

  var emptyFunction = _$$_REQUIRE(_dependencyMap[24]);

  var invariant = _$$_REQUIRE(_dependencyMap[25]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[26]);

  var warning = _$$_REQUIRE(_dependencyMap[27]);

  var AndroidTextInput;
  var RCTMultilineTextInputView;
  var RCTSinglelineTextInputView;
  {
    AndroidTextInput = requireNativeComponent('AndroidTextInput');
  }
  var onlyMultiline = {
    onTextInput: true,
    children: true
  };
  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  var TextInput = createReactClass({
    displayName: 'TextInput',
    statics: {
      State: {
        currentlyFocusedField: TextInputState.currentlyFocusedField,
        focusTextInput: TextInputState.focusTextInput,
        blurTextInput: TextInputState.blurTextInput
      }
    },
    propTypes: _objectSpread({}, ViewPropTypes, {
      autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
      autoCorrect: PropTypes.bool,
      spellCheck: PropTypes.bool,
      autoFocus: PropTypes.bool,
      allowFontScaling: PropTypes.bool,
      editable: PropTypes.bool,
      keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
      keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
      returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
      returnKeyLabel: PropTypes.string,
      maxLength: PropTypes.number,
      numberOfLines: PropTypes.number,
      disableFullscreenUI: PropTypes.bool,
      enablesReturnKeyAutomatically: PropTypes.bool,
      multiline: PropTypes.bool,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onBlur: PropTypes.func,
      onFocus: PropTypes.func,
      onChange: PropTypes.func,
      onChangeText: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      onTextInput: PropTypes.func,
      onEndEditing: PropTypes.func,
      onSelectionChange: PropTypes.func,
      onSubmitEditing: PropTypes.func,
      onKeyPress: PropTypes.func,
      onLayout: PropTypes.func,
      onScroll: PropTypes.func,
      placeholder: PropTypes.string,
      placeholderTextColor: ColorPropType,
      scrollEnabled: PropTypes.bool,
      secureTextEntry: PropTypes.bool,
      selectionColor: ColorPropType,
      selectionState: PropTypes.instanceOf(DocumentSelectionState),
      selection: PropTypes.shape({
        start: PropTypes.number.isRequired,
        end: PropTypes.number
      }),
      value: PropTypes.string,
      defaultValue: PropTypes.string,
      clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
      clearTextOnFocus: PropTypes.bool,
      selectTextOnFocus: PropTypes.bool,
      blurOnSubmit: PropTypes.bool,
      style: Text.propTypes.style,
      underlineColorAndroid: ColorPropType,
      inlineImageLeft: PropTypes.string,
      inlineImagePadding: PropTypes.number,
      dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
      caretHidden: PropTypes.bool,
      contextMenuHidden: PropTypes.bool,
      inputAccessoryViewID: PropTypes.string,
      textContentType: PropTypes.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password'])
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        allowFontScaling: true,
        underlineColorAndroid: 'transparent'
      };
    },
    mixins: [NativeMethodsMixin, TimerMixin],
    isFocused: function isFocused() {
      return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
    },
    _inputRef: undefined,
    _focusSubscription: undefined,
    _lastNativeText: undefined,
    _lastNativeSelection: undefined,
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._lastNativeText = this.props.value;
      var tag = ReactNative.findNodeHandle(this._inputRef);

      if (tag != null) {
        TextInputState.registerInput(tag);
      }

      if (this.context.focusEmitter) {
        this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
          if (_this === el) {
            _this.requestAnimationFrame(_this.focus);
          } else if (_this.isFocused()) {
            _this.blur();
          }
        });

        if (this.props.autoFocus) {
          this.context.onFocusRequested(this);
        }
      } else {
        if (this.props.autoFocus) {
          this.requestAnimationFrame(this.focus);
        }
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this._focusSubscription && this._focusSubscription.remove();

      if (this.isFocused()) {
        this.blur();
      }

      var tag = ReactNative.findNodeHandle(this._inputRef);

      if (tag != null) {
        TextInputState.unregisterInput(tag);
      }
    },
    contextTypes: {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    },
    clear: function clear() {
      this.setNativeProps({
        text: ''
      });
    },
    render: function render() {
      var textInput;
      {
        textInput = this._renderAndroid();
      }
      return React.createElement(TextAncestor.Provider, {
        value: true
      }, textInput);
    },
    _getText: function _getText() {
      return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
    },
    _setNativeRef: function _setNativeRef(ref) {
      this._inputRef = ref;
    },
    _renderIOSLegacy: function _renderIOSLegacy() {
      var textContainer;

      var props = _extends({}, this.props);

      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      if (!props.multiline) {
        textContainer = React.createElement(RCTSinglelineTextInputView, _extends({
          ref: this._setNativeRef
        }, props, {
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onSelectionChange: this._onSelectionChange,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText()
        }));
      } else {
        var children = props.children;
        var childCount = 0;
        React.Children.forEach(children, function () {
          return ++childCount;
        });
        invariant(!(props.value && childCount), 'Cannot specify both value and children.');

        if (childCount >= 1) {
          children = React.createElement(Text, {
            style: props.style,
            allowFontScaling: props.allowFontScaling
          }, children);
        }

        if (props.inputView) {
          children = [children, props.inputView];
        }

        props.style.unshift(styles.multilineInput);
        textContainer = React.createElement(RCTMultilineTextInputView, _extends({
          ref: this._setNativeRef
        }, props, {
          children: children,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onContentSizeChange: this.props.onContentSizeChange,
          onSelectionChange: this._onSelectionChange,
          onTextInput: this._onTextInput,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          dataDetectorTypes: this.props.dataDetectorTypes,
          onScroll: this._onScroll
        }));
      }

      return React.createElement(TouchableWithoutFeedback, {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityRole: props.accessibilityRole,
        accessibilityStates: props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: props.testID
      }, textContainer);
    },
    _renderIOS: function _renderIOS() {
      var props = _extends({}, this.props);

      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;

      if (props.multiline) {
        props.style.unshift(styles.multilineInput);
      }

      var textContainer = React.createElement(RCTTextInputView, _extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll
      }));
      return React.createElement(TouchableWithoutFeedback, {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityRole: props.accessibilityRole,
        accessibilityStates: props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: props.testID
      }, textContainer);
    },
    _renderAndroid: function _renderAndroid() {
      var props = _extends({}, this.props);

      props.style = [this.props.style];
      props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
      var children = this.props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(Text, null, children);
      }

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var textContainer = React.createElement(AndroidTextInput, _extends({
        ref: this._setNativeRef
      }, props, {
        mostRecentEventCount: 0,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        text: this._getText(),
        children: children,
        disableFullscreenUI: this.props.disableFullscreenUI,
        textBreakStrategy: this.props.textBreakStrategy,
        onScroll: this._onScroll
      }));
      return React.createElement(TouchableWithoutFeedback, {
        onLayout: props.onLayout,
        onPress: this._onPress,
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: this.props.testID
      }, textContainer);
    },
    _onFocus: function _onFocus(event) {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.focus();
      }
    },
    _onPress: function _onPress(event) {
      if (this.props.editable || this.props.editable === undefined) {
        this.focus();
      }
    },
    _onChange: function _onChange(event) {
      if (this._inputRef) {
        this._inputRef.setNativeProps({
          mostRecentEventCount: event.nativeEvent.eventCount
        });
      }

      var text = event.nativeEvent.text;
      this.props.onChange && this.props.onChange(event);
      this.props.onChangeText && this.props.onChangeText(text);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeText = text;
      this.forceUpdate();
    },
    _onSelectionChange: function _onSelectionChange(event) {
      this.props.onSelectionChange && this.props.onSelectionChange(event);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeSelection = event.nativeEvent.selection;

      if (this.props.selection || this.props.selectionState) {
        this.forceUpdate();
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var nativeProps = {};

      if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
        nativeProps.text = this.props.value;
      }

      var selection = this.props.selection;

      if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
        nativeProps.selection = this.props.selection;
      }

      if (Object.keys(nativeProps).length > 0 && this._inputRef) {
        this._inputRef.setNativeProps(nativeProps);
      }

      if (this.props.selectionState && selection) {
        this.props.selectionState.update(selection.start, selection.end);
      }
    },
    _onBlur: function _onBlur(event) {
      this.blur();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.blur();
      }
    },
    _onTextInput: function _onTextInput(event) {
      this.props.onTextInput && this.props.onTextInput(event);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event);
    }
  });

  var InternalTextInputType = function (_ReactNative$NativeCo) {
    _inherits(InternalTextInputType, _ReactNative$NativeCo);

    function InternalTextInputType() {
      _classCallCheck(this, InternalTextInputType);

      return _possibleConstructorReturn(this, _getPrototypeOf(InternalTextInputType).apply(this, arguments));
    }

    _createClass(InternalTextInputType, [{
      key: "clear",
      value: function clear() {}
    }, {
      key: "isFocused",
      value: function isFocused() {}
    }]);

    return InternalTextInputType;
  }(ReactNative.NativeComponent);

  var TypedTextInput = TextInput;
  var styles = StyleSheet.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  module.exports = TypedTextInput;
},285,[19,20,27,30,33,8,43,55,286,35,250,41,45,184,60,77,49,169,75,144,183,182,40,245,39,3,147,103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var mixInEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var DocumentSelectionState = function () {
    function DocumentSelectionState(anchor, focus) {
      _classCallCheck(this, DocumentSelectionState);

      this._anchorOffset = anchor;
      this._focusOffset = focus;
      this._hasFocus = false;
    }

    _createClass(DocumentSelectionState, [{
      key: "update",
      value: function update(anchor, focus) {
        if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
          this._anchorOffset = anchor;
          this._focusOffset = focus;
          this.emit('update');
        }
      }
    }, {
      key: "constrainLength",
      value: function constrainLength(maxLength) {
        this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this._hasFocus) {
          this._hasFocus = true;
          this.emit('focus');
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        if (this._hasFocus) {
          this._hasFocus = false;
          this.emit('blur');
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this._hasFocus;
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this._anchorOffset === this._focusOffset;
      }
    }, {
      key: "isBackward",
      value: function isBackward() {
        return this._anchorOffset > this._focusOffset;
      }
    }, {
      key: "getAnchorOffset",
      value: function getAnchorOffset() {
        return this._hasFocus ? this._anchorOffset : null;
      }
    }, {
      key: "getFocusOffset",
      value: function getFocusOffset() {
        return this._hasFocus ? this._focusOffset : null;
      }
    }, {
      key: "getStartOffset",
      value: function getStartOffset() {
        return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "getEndOffset",
      value: function getEndOffset() {
        return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "overlaps",
      value: function overlaps(start, end) {
        return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
      }
    }]);

    return DocumentSelectionState;
  }();

  mixInEventEmitter(DocumentSelectionState, {
    blur: true,
    focus: true,
    update: true
  });
  module.exports = DocumentSelectionState;
},286,[19,20,287]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var EventEmitterWithHolding = _$$_REQUIRE(_dependencyMap[2]);

  var EventHolder = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var keyOf = _$$_REQUIRE(_dependencyMap[5]);

  var TYPES_KEY = keyOf({
    __types: true
  });

  function mixInEventEmitter(cls, types) {
    invariant(types, 'Must supply set of valid event types');
    var target = cls.prototype || cls;
    invariant(!target.__eventEmitter, 'An active emitter is already mixed in');
    var ctor = cls.constructor;

    if (ctor) {
      invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
    }

    if (target.hasOwnProperty(TYPES_KEY)) {
      _extends(target.__types, types);
    } else if (target.__types) {
      target.__types = _extends({}, target.__types, types);
    } else {
      target.__types = types;
    }

    _extends(target, EventEmitterMixin);
  }

  var EventEmitterMixin = {
    emit: function emit(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
    },
    emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
    },
    addListener: function addListener(eventType, listener, context) {
      return this.__getEventEmitter().addListener(eventType, listener, context);
    },
    once: function once(eventType, listener, context) {
      return this.__getEventEmitter().once(eventType, listener, context);
    },
    addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
      return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
    },
    addListenerMap: function addListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    removeAllListeners: function removeAllListeners() {
      this.__getEventEmitter().removeAllListeners();
    },
    removeCurrentListener: function removeCurrentListener() {
      this.__getEventEmitter().removeCurrentListener();
    },
    releaseHeldEventType: function releaseHeldEventType(eventType) {
      this.__getEventEmitter().releaseHeldEventType(eventType);
    },
    __getEventEmitter: function __getEventEmitter() {
      if (!this.__eventEmitter) {
        var emitter = new EventEmitter();
        var holder = new EventHolder();
        this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
      }

      return this.__eventEmitter;
    }
  };
  module.exports = mixInEventEmitter;
},287,[8,35,288,289,3,290]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var EventEmitterWithHolding = function () {
    function EventEmitterWithHolding(emitter, holder) {
      _classCallCheck(this, EventEmitterWithHolding);

      this._emitter = emitter;
      this._eventHolder = holder;
      this._currentEventToken = null;
      this._emittingHeldEvents = false;
    }

    _createClass(EventEmitterWithHolding, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener, context);
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        return this._emitter.once(eventType, listener, context);
      }
    }, {
      key: "addRetroactiveListener",
      value: function addRetroactiveListener(eventType, listener, context) {
        var subscription = this._emitter.addListener(eventType, listener, context);

        this._emittingHeldEvents = true;

        this._eventHolder.emitToListener(eventType, listener, context);

        this._emittingHeldEvents = false;
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        this._emitter.removeCurrentListener();
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        return this._emitter.listeners(eventType);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _this$_emitter;

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_this$_emitter = this._emitter).emit.apply(_this$_emitter, [eventType].concat(args));
      }
    }, {
      key: "emitAndHold",
      value: function emitAndHold(eventType) {
        var _this$_eventHolder, _this$_emitter2;

        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._currentEventToken = (_this$_eventHolder = this._eventHolder).holdEvent.apply(_this$_eventHolder, [eventType].concat(args));

        (_this$_emitter2 = this._emitter).emit.apply(_this$_emitter2, [eventType].concat(args));

        this._currentEventToken = null;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        if (this._currentEventToken) {
          this._eventHolder.releaseEvent(this._currentEventToken);
        } else if (this._emittingHeldEvents) {
          this._eventHolder.releaseCurrentEvent();
        }
      }
    }, {
      key: "releaseHeldEventType",
      value: function releaseHeldEventType(eventType) {
        this._eventHolder.releaseEventType(eventType);
      }
    }]);

    return EventEmitterWithHolding;
  }();

  module.exports = EventEmitterWithHolding;
},288,[19,20]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var EventHolder = function () {
    function EventHolder() {
      _classCallCheck(this, EventHolder);

      this._heldEvents = {};
      this._currentEventKey = null;
    }

    _createClass(EventHolder, [{
      key: "holdEvent",
      value: function holdEvent(eventType) {
        this._heldEvents[eventType] = this._heldEvents[eventType] || [];
        var eventsOfType = this._heldEvents[eventType];
        var key = {
          eventType: eventType,
          index: eventsOfType.length
        };

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        eventsOfType.push(args);
        return key;
      }
    }, {
      key: "emitToListener",
      value: function emitToListener(eventType, listener, context) {
        var _this = this;

        var eventsOfType = this._heldEvents[eventType];

        if (!eventsOfType) {
          return;
        }

        var origEventKey = this._currentEventKey;
        eventsOfType.forEach(function (eventHeld, index) {
          if (!eventHeld) {
            return;
          }

          _this._currentEventKey = {
            eventType: eventType,
            index: index
          };
          listener.apply(context, eventHeld);
        });
        this._currentEventKey = origEventKey;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
        this._currentEventKey && this.releaseEvent(this._currentEventKey);
      }
    }, {
      key: "releaseEvent",
      value: function releaseEvent(token) {
        delete this._heldEvents[token.eventType][token.index];
      }
    }, {
      key: "releaseEventType",
      value: function releaseEventType(type) {
        this._heldEvents[type] = [];
      }
    }]);

    return EventHolder;
  }();

  module.exports = EventHolder;
},289,[19,20,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},290,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RCTToastAndroid = _$$_REQUIRE(_dependencyMap[0]).ToastAndroid;

  var ToastAndroid = {
    SHORT: RCTToastAndroid.SHORT,
    LONG: RCTToastAndroid.LONG,
    TOP: RCTToastAndroid.TOP,
    BOTTOM: RCTToastAndroid.BOTTOM,
    CENTER: RCTToastAndroid.CENTER,
    show: function show(message, duration) {
      RCTToastAndroid.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
      RCTToastAndroid.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
      RCTToastAndroid.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
  };
  module.exports = ToastAndroid;
},291,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var Image = _$$_REQUIRE(_dependencyMap[2]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var UIManager = _$$_REQUIRE(_dependencyMap[6]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[8]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[9]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[10]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[11]);

  var optionalImageSource = PropTypes.oneOfType([Image.propTypes.source, PropTypes.oneOf([])]);
  var ToolbarAndroid = createReactClass({
    displayName: 'ToolbarAndroid',
    mixins: [NativeMethodsMixin],
    propTypes: _objectSpread({}, ViewPropTypes, {
      actions: PropTypes.arrayOf(PropTypes.shape({
        title: PropTypes.string.isRequired,
        icon: optionalImageSource,
        show: PropTypes.oneOf(['always', 'ifRoom', 'never']),
        showWithText: PropTypes.bool
      })),
      logo: optionalImageSource,
      navIcon: optionalImageSource,
      onActionSelected: PropTypes.func,
      onIconClicked: PropTypes.func,
      overflowIcon: optionalImageSource,
      subtitle: PropTypes.string,
      subtitleColor: ColorPropType,
      title: PropTypes.string,
      titleColor: ColorPropType,
      contentInsetStart: PropTypes.number,
      contentInsetEnd: PropTypes.number,
      rtl: PropTypes.bool,
      testID: PropTypes.string
    }),
    render: function render() {
      var nativeProps = _objectSpread({}, this.props);

      if (this.props.logo) {
        nativeProps.logo = resolveAssetSource(this.props.logo);
      }

      if (this.props.navIcon) {
        nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
      }

      if (this.props.overflowIcon) {
        nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
      }

      if (this.props.actions) {
        var nativeActions = [];

        for (var i = 0; i < this.props.actions.length; i++) {
          var action = _objectSpread({}, this.props.actions[i]);

          if (action.icon) {
            action.icon = resolveAssetSource(action.icon);
          }

          if (action.show) {
            action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
          }

          nativeActions.push(action);
        }

        nativeProps.nativeActions = nativeActions;
      }

      return React.createElement(NativeToolbar, _extends({
        onSelect: this._onSelect
      }, nativeProps));
    },
    _onSelect: function _onSelect(event) {
      var position = event.nativeEvent.position;

      if (position === -1) {
        this.props.onIconClicked && this.props.onIconClicked();
      } else {
        this.props.onActionSelected && this.props.onActionSelected(position);
      }
    }
  });
  var NativeToolbar = requireNativeComponent('ToolbarAndroid');
  module.exports = ToolbarAndroid;
},292,[8,43,244,250,45,60,40,245,55,184,147,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[2]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ReactNativeViewAttributes = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var Touchable = _$$_REQUIRE(_dependencyMap[8]);

  var TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[9]);

  var View = _$$_REQUIRE(_dependencyMap[10]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[12]);

  var ensurePositiveDelayProps = _$$_REQUIRE(_dependencyMap[13]);

  var DEFAULT_PROPS = {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  };
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableHighlight = createReactClass({
    displayName: 'TouchableHighlight',
    propTypes: _objectSpread({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      underlayColor: ColorPropType,
      style: ViewPropTypes.style,
      onShowUnderlay: PropTypes.func,
      onHideUnderlay: PropTypes.func,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object,
      testOnly_pressed: PropTypes.bool
    }),
    mixins: [NativeMethodsMixin, Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return DEFAULT_PROPS;
    },
    getInitialState: function getInitialState() {
      this._isMounted = false;

      if (this.props.testOnly_pressed) {
        return _objectSpread({}, this.touchableGetInitialState(), {
          extraChildStyle: {
            opacity: this.props.activeOpacity
          },
          extraUnderlayStyle: {
            backgroundColor: this.props.underlayColor
          }
        });
      } else {
        return _objectSpread({}, this.touchableGetInitialState(), {
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
      }
    },
    componentDidMount: function componentDidMount() {
      this._isMounted = true;
      ensurePositiveDelayProps(this.props);
    },
    componentWillUnmount: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this._hideTimeout);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      this._showUnderlay();

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      if (!this._hideTimeout) {
        this._hideUnderlay();
      }

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      clearTimeout(this._hideTimeout);

      if (!Platform.isTV) {
        this._showUnderlay();

        this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
      }

      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _showUnderlay: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
      this.props.onShowUnderlay && this.props.onShowUnderlay();
    },
    _hideUnderlay: function _hideUnderlay() {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      if (this.props.testOnly_pressed) {
        return;
      }

      if (this._hasPressHandler()) {
        this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
        this.props.onHideUnderlay && this.props.onHideUnderlay();
      }
    },
    _hasPressHandler: function _hasPressHandler() {
      return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      return React.createElement(View, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        nativeID: this.props.nativeID,
        testID: this.props.testID
      }, React.cloneElement(child, {
        style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
      }), Touchable.renderDebugView({
        color: 'green',
        hitSlop: this.props.hitSlop
      }));
    }
  });
  module.exports = TouchableHighlight;
},293,[43,55,250,60,41,45,164,49,174,182,74,245,184,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[6]);

  var _inherits = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[9]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[10]);

  var UIManager = _$$_REQUIRE(_dependencyMap[11]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[12]);

  var dismissKeyboard = _$$_REQUIRE(_dependencyMap[13]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[14]);

  var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager');
  var VIEWPAGER_REF = 'viewPager';

  var ViewPagerAndroid = function (_React$Component) {
    _inherits(ViewPagerAndroid, _React$Component);

    function ViewPagerAndroid() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ViewPagerAndroid);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ViewPagerAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.getInnerViewNode = function () {
        return _this.refs[VIEWPAGER_REF].getInnerViewNode();
      };

      _this._childrenWithOverridenStyle = function () {
        return React.Children.map(_this.props.children, function (child) {
          if (!child) {
            return null;
          }

          var newProps = _objectSpread({}, child.props, {
            style: [child.props.style, {
              position: 'absolute',
              left: 0,
              top: 0,
              right: 0,
              bottom: 0,
              width: undefined,
              height: undefined
            }],
            collapsable: false
          });

          if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
            console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
          }

          return React.createElement(child.type, newProps);
        });
      };

      _this._onPageScroll = function (e) {
        if (_this.props.onPageScroll) {
          _this.props.onPageScroll(e);
        }

        if (_this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      };

      _this._onPageScrollStateChanged = function (e) {
        if (_this.props.onPageScrollStateChanged) {
          _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
        }
      };

      _this._onPageSelected = function (e) {
        if (_this.props.onPageSelected) {
          _this.props.onPageSelected(e);
        }
      };

      _this.setPage = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
      };

      _this.setPageWithoutAnimation = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
      };

      return _this;
    }

    _createClass(ViewPagerAndroid, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.initialPage != null) {
          this.setPageWithoutAnimation(this.props.initialPage);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(NativeAndroidViewPager, _extends({}, this.props, {
          ref: VIEWPAGER_REF,
          style: this.props.style,
          onPageScroll: this._onPageScroll,
          onPageScrollStateChanged: this._onPageScrollStateChanged,
          onPageSelected: this._onPageSelected,
          children: this._childrenWithOverridenStyle()
        }));
      }
    }]);

    return ViewPagerAndroid;
  }(React.Component);

  ViewPagerAndroid.propTypes = _objectSpread({}, ViewPropTypes, {
    initialPage: PropTypes.number,
    onPageScroll: PropTypes.func,
    onPageScrollStateChanged: PropTypes.func,
    onPageSelected: PropTypes.func,
    pageMargin: PropTypes.number,
    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
    scrollEnabled: PropTypes.bool,
    peekEnabled: PropTypes.bool
  });
  module.exports = ViewPagerAndroid;
},294,[8,43,19,20,27,30,29,33,45,60,77,40,245,231,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[7]);

  var ActivityIndicator = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[10]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[11]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[12]);

  var UIManager = _$$_REQUIRE(_dependencyMap[13]);

  var View = _$$_REQUIRE(_dependencyMap[14]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[15]);

  var WebViewShared = _$$_REQUIRE(_dependencyMap[16]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[17]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[18]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[19]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[20]);

  var RCT_WEBVIEW_REF = 'webview';
  var WebViewState = keyMirror({
    IDLE: null,
    LOADING: null,
    ERROR: null
  });

  var defaultRenderLoading = function defaultRenderLoading() {
    return React.createElement(View, {
      style: styles.loadingView
    }, React.createElement(ActivityIndicator, {
      style: styles.loadingProgressBar
    }));
  };

  var WebView = function (_React$Component) {
    _inherits(WebView, _React$Component);

    function WebView() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WebView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WebView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        viewState: WebViewState.IDLE,
        lastErrorEvent: null,
        startInLoadingState: true
      };

      _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
      };

      _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
      };

      _this.reload = function () {
        _this.setState({
          viewState: WebViewState.LOADING
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
      };

      _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
      };

      _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
      };

      _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
      };

      _this.updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      };

      _this.getWebViewHandle = function () {
        return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
      };

      _this.onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        onLoadStart && onLoadStart(event);

        _this.updateNavigationState(event);
      };

      _this.onLoadingError = function (event) {
        event.persist();
        var _this$props = _this.props,
            onError = _this$props.onError,
            onLoadEnd = _this$props.onLoadEnd;
        onError && onError(event);
        onLoadEnd && onLoadEnd(event);
        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: WebViewState.ERROR
        });
      };

      _this.onLoadingFinish = function (event) {
        var _this$props2 = _this.props,
            onLoad = _this$props2.onLoad,
            onLoadEnd = _this$props2.onLoadEnd;
        onLoad && onLoad(event);
        onLoadEnd && onLoadEnd(event);

        _this.setState({
          viewState: WebViewState.IDLE
        });

        _this.updateNavigationState(event);
      };

      _this.onMessage = function (event) {
        var onMessage = _this.props.onMessage;
        onMessage && onMessage(event);
      };

      return _this;
    }

    _createClass(WebView, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        if (this.props.startInLoadingState) {
          this.setState({
            viewState: WebViewState.LOADING
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var otherView = null;

        if (this.state.viewState === WebViewState.LOADING) {
          otherView = (this.props.renderLoading || defaultRenderLoading)();
        } else if (this.state.viewState === WebViewState.ERROR) {
          var errorEvent = this.state.lastErrorEvent;
          otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
        } else if (this.state.viewState !== WebViewState.IDLE) {
          console.error('RCTWebView invalid state encountered: ' + this.state.loading);
        }

        var webViewStyles = [styles.container, this.props.style];

        if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
          webViewStyles.push(styles.hidden);
        }

        var source = this.props.source || {};

        if (this.props.html) {
          source.html = this.props.html;
        } else if (this.props.url) {
          source.uri = this.props.url;
        }

        if (source.method === 'POST' && source.headers) {
          console.warn('WebView: `source.headers` is not supported when using POST.');
        } else if (source.method === 'GET' && source.body) {
          console.warn('WebView: `source.body` is not supported when using GET.');
        }

        var nativeConfig = this.props.nativeConfig || {};
        var originWhitelist = (this.props.originWhitelist || []).map(WebViewShared.originWhitelistToRegex);
        var NativeWebView = nativeConfig.component || RCTWebView;
        var webView = React.createElement(NativeWebView, _extends({
          ref: RCT_WEBVIEW_REF,
          key: "webViewKey",
          style: webViewStyles,
          source: resolveAssetSource(source),
          scalesPageToFit: this.props.scalesPageToFit,
          allowFileAccess: this.props.allowFileAccess,
          injectedJavaScript: this.props.injectedJavaScript,
          userAgent: this.props.userAgent,
          javaScriptEnabled: this.props.javaScriptEnabled,
          thirdPartyCookiesEnabled: this.props.thirdPartyCookiesEnabled,
          domStorageEnabled: this.props.domStorageEnabled,
          messagingEnabled: typeof this.props.onMessage === 'function',
          onMessage: this.onMessage,
          contentInset: this.props.contentInset,
          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
          onContentSizeChange: this.props.onContentSizeChange,
          onLoadingStart: this.onLoadingStart,
          onLoadingFinish: this.onLoadingFinish,
          onLoadingError: this.onLoadingError,
          testID: this.props.testID,
          geolocationEnabled: this.props.geolocationEnabled,
          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
          allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
          originWhitelist: originWhitelist,
          mixedContentMode: this.props.mixedContentMode,
          saveFormDataDisabled: this.props.saveFormDataDisabled,
          urlPrefixesForDefaultIntent: this.props.urlPrefixesForDefaultIntent
        }, nativeConfig.props));
        return React.createElement(View, {
          style: styles.container
        }, webView, otherView);
      }
    }]);

    return WebView;
  }(React.Component);

  WebView.propTypes = _objectSpread({}, ViewPropTypes, {
    renderError: PropTypes.func,
    renderLoading: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    automaticallyAdjustContentInsets: PropTypes.bool,
    contentInset: EdgeInsetsPropType,
    onNavigationStateChange: PropTypes.func,
    onMessage: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    startInLoadingState: PropTypes.bool,
    style: ViewPropTypes.style,
    html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      method: PropTypes.oneOf(['GET', 'POST']),
      headers: PropTypes.object,
      body: PropTypes.string
    }), PropTypes.shape({
      html: PropTypes.string,
      baseUrl: PropTypes.string
    }), PropTypes.number]),
    useWebKit: PropTypes.bool,
    javaScriptEnabled: PropTypes.bool,
    thirdPartyCookiesEnabled: PropTypes.bool,
    domStorageEnabled: PropTypes.bool,
    geolocationEnabled: PropTypes.bool,
    injectedJavaScript: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    allowFileAccess: PropTypes.bool,
    userAgent: PropTypes.string,
    testID: PropTypes.string,
    mediaPlaybackRequiresUserAction: PropTypes.bool,
    allowUniversalAccessFromFileURLs: PropTypes.bool,
    originWhitelist: PropTypes.arrayOf(PropTypes.string),
    injectJavaScript: PropTypes.func,
    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),
    saveFormDataDisabled: PropTypes.bool,
    nativeConfig: PropTypes.shape({
      component: PropTypes.any,
      props: PropTypes.object,
      viewManager: PropTypes.object
    }),
    urlPrefixesForDefaultIntent: PropTypes.arrayOf(PropTypes.string)
  });
  WebView.defaultProps = {
    javaScriptEnabled: true,
    thirdPartyCookiesEnabled: true,
    scalesPageToFit: true,
    saveFormDataDisabled: false,
    originWhitelist: WebViewShared.defaultOriginWhitelist
  };
  var RCTWebView = requireNativeComponent('RCTWebView');
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    hidden: {
      height: 0,
      flex: 0
    },
    loadingView: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    loadingProgressBar: {
      height: 20
    }
  });
  module.exports = WebView;
},295,[43,8,19,20,27,30,33,171,42,45,60,77,49,40,74,245,296,65,58,147,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var escapeStringRegexp = _$$_REQUIRE(_dependencyMap[0]);

  var WebViewShared = {
    defaultOriginWhitelist: ['http://*', 'https://*'],
    extractOrigin: function extractOrigin(url) {
      var result = /^[A-Za-z0-9]+:(\/\/)?[^/]*/.exec(url);
      return result === null ? null : result[0];
    },
    originWhitelistToRegex: function originWhitelistToRegex(originWhitelist) {
      return escapeStringRegexp(originWhitelist).replace(/\\\*/g, '.*');
    }
  };
  module.exports = WebViewShared;
},296,[297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

  module.exports = function (str) {
    if (typeof str !== 'string') {
      throw new TypeError('Expected a string');
    }

    return str.replace(matchOperatorsRe, '\\$&');
  };
},297,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var RCTActionSheetManager = _$$_REQUIRE(_dependencyMap[1]).ActionSheetManager;

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var processColor = _$$_REQUIRE(_dependencyMap[3]);

  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTActionSheetManager.showActionSheetWithOptions(_objectSpread({}, options, {
        tintColor: processColor(options.tintColor)
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      RCTActionSheetManager.showShareActionSheetWithOptions(_objectSpread({}, options, {
        tintColor: processColor(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},298,[43,5,3,68]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[1]);

  var BugReporting = _$$_REQUIRE(_dependencyMap[2]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[4]);

  var SceneTracker = _$$_REQUIRE(_dependencyMap[5]);

  var infoLog = _$$_REQUIRE(_dependencyMap[6]);

  var invariant = _$$_REQUIRE(_dependencyMap[7]);

  var renderApplication = _$$_REQUIRE(_dependencyMap[8]);

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var tasks = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          invariant(appConfig.component != null, "AppRegistry.registerConfig(...): Every config is expected to set either `run` or `component`, but `%s` has neither.", appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.fabric);
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return _objectSpread({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: _objectSpread({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(false) + ', development-level warning are ' + 'OFF' + ', performance optimizations are ' + 'ON';
      infoLog(msg);
      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
        return msg;
      });
      invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + "Hint: This error often happens when you're running the packager " + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + "folder and run 'npm start').\n\n" + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');
      SceneTracker.setActiveScene({
        name: appKey
      });
      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
      if (tasks.has(taskKey)) {
        console.warn("registerHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      tasks.set(taskKey, task);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = tasks.get(taskKey);

      if (!taskProvider) {
        throw new Error("No task registered for key " + taskKey);
      }

      taskProvider()(data).then(function () {
        return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      }).catch(function (reason) {
        console.error(reason);
        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      });
    }
  };
  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
  module.exports = AppRegistry;
},299,[43,13,300,5,77,302,139,3,303]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[3]);

  var Map = _$$_REQUIRE(_dependencyMap[4]);

  var infoLog = _$$_REQUIRE(_dependencyMap[5]);

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return _$$_REQUIRE(_dependencyMap[6])();
    });
  }

  var BugReporting = function () {
    function BugReporting() {
      _classCallCheck(this, BugReporting);
    }

    _createClass(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }

        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref7 = _ref3;

          var _ref2 = _slicedToArray(_ref7, 2);

          var _key3 = _ref2[0];
          var _callback2 = _ref2[1];
          extraData[_key3] = _callback2();
        }

        var fileData = {};

        for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref6;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref6 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref6 = _i2.value;
          }

          var _ref8 = _ref6;

          var _ref5 = _slicedToArray(_ref8, 2);

          var _key4 = _ref5[0];
          var _callback3 = _ref5[1];
          fileData[_key4] = _callback3();
        }

        infoLog('BugReporting extraData:', extraData);

        var BugReportingNativeModule = _$$_REQUIRE(_dependencyMap[7]).BugReporting;

        BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

        var RedBoxNativeModule = _$$_REQUIRE(_dependencyMap[7]).RedBox;

        RedBoxNativeModule && RedBoxNativeModule.setExtraData && RedBoxNativeModule.setExtraData(extraData, 'From BugReporting.js');
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);

    return BugReporting;
  }();

  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  module.exports = BugReporting;
},300,[9,19,20,26,82,139,301,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return "React tree dumps have been temporarily disabled while React is upgraded to Fiber.";
  }

  module.exports = dumpReactTree;
},301,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},302,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var AppContainer = _$$_REQUIRE(_dependencyMap[1]);

  var React = _$$_REQUIRE(_dependencyMap[2]);

  var ReactFabricIndicator = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  _$$_REQUIRE(_dependencyMap[5]);

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showFabricIndicator) {
    invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var renderable = React.createElement(AppContainer, {
      rootTag: rootTag,
      WrapperComponent: WrapperComponent
    }, React.createElement(RootComponent, _extends({}, initialProps, {
      rootTag: rootTag
    })), fabric === true && showFabricIndicator === true ? React.createElement(ReactFabricIndicator, null) : null);

    if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
      var AsyncMode = React.unstable_AsyncMode;
      renderable = React.createElement(AsyncMode, null, renderable);
    }

    if (fabric) {
      _$$_REQUIRE(_dependencyMap[6]).render(renderable, rootTag);
    } else {
      _$$_REQUIRE(_dependencyMap[7]).render(renderable, rootTag);
    }
  }

  module.exports = renderApplication;
},303,[8,264,45,304,3,305,306,77]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[1]);

  var Text = _$$_REQUIRE(_dependencyMap[2]);

  var View = _$$_REQUIRE(_dependencyMap[3]);

  function ReactFabricIndicator() {
    return React.createElement(View, {
      style: styles.container
    }, React.createElement(Text, {
      style: styles.text
    }, "FABRIC"));
  }

  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: 'rgba(0,0,0, 0.25)',
      position: 'absolute',
      top: 0,
      right: 0,
      padding: 2
    },
    text: {
      fontSize: 6,
      color: '#ffffff'
    }
  });
  module.exports = ReactFabricIndicator;
},304,[45,49,169,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeviceEventManager = _$$_REQUIRE(_dependencyMap[0]).DeviceEventManager;

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var DEVICE_BACK_EVENT = 'hardwareBackPress';

  var _backPressSubscriptions = new Set();

  RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
    var invokeDefault = true;
    var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

    for (var i = 0; i < subscriptions.length; ++i) {
      if (subscriptions[i]()) {
        invokeDefault = false;
        break;
      }
    }

    if (invokeDefault) {
      BackHandler.exitApp();
    }
  });
  var BackHandler = {
    exitApp: function exitApp() {
      DeviceEventManager.invokeDefaultBackPressHandler();
    },
    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }
  };
  module.exports = BackHandler;
},305,[5,26]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

  var ReactFabric;
  {
    ReactFabric = _$$_REQUIRE(_dependencyMap[1]);
  }
  BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);
  module.exports = ReactFabric;
},306,[13,307]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewConfigRegistry = _$$_REQUIRE(_dependencyMap[2]),
      UIManager = _$$_REQUIRE(_dependencyMap[3]),
      React = _$$_REQUIRE(_dependencyMap[4]),
      deepDiffer = _$$_REQUIRE(_dependencyMap[5]),
      flattenStyle = _$$_REQUIRE(_dependencyMap[6]),
      TextInputState = _$$_REQUIRE(_dependencyMap[7]),
      FabricUIManager = _$$_REQUIRE(_dependencyMap[8]);

  var scheduler = _$$_REQUIRE(_dependencyMap[9]),
      ExceptionsManager = _$$_REQUIRE(_dependencyMap[10]);

  function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      condition = undefined;
      if (undefined === format) condition = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
        var args = [a, b, c, d, e, f],
            argIndex = 0;
        condition = Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        condition.name = "Invariant Violation";
      }
      condition.framesToPop = 1;
      throw condition;
    }
  }

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else invariant(false, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."), error = undefined;

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = true);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes$1 = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes$1,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes$1.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes$1.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes$1.selectionChangeShouldSetResponder : eventTypes$1.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes$1.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes$1.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes$1.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes$1.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes$1.responderStart : targetInst ? eventTypes$1.responderMove : depthA ? eventTypes$1.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes$1.responderTerminate : topLevelType ? eventTypes$1.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes$1 = ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes$1 = ReactNativeViewConfigRegistry.customDirectEventTypes,
      ReactNativeBridgeEventPlugin = {
    eventTypes: ReactNativeViewConfigRegistry.eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (null == targetInst) return null;
      var bubbleDispatchConfig = customBubblingEventTypes$1[topLevelType],
          directDispatchConfig = customDirectEventTypes$1[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    }
  };
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });

  function getInstanceFromInstance(instanceHandle) {
    return instanceHandle;
  }

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(inst) {
    return inst.canonical.currentProps;
  };

  getInstanceFromNode = getInstanceFromInstance;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode.canonical._nativeTag;
    invariant(inst, "All native instances should have a tag.");
    return inst;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode.canonical._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
      hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_CONCURRENT_MODE_TYPE:
        return "ConcurrentMode";

      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return "Context.Consumer";

      case REACT_PROVIDER_TYPE:
        return "Context.Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return,
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(false, "Unable to find node on an unmounted component.");
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        child = false;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(3 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  var now$1 = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0;

  function setTimeoutCallback() {
    frameDeadline = now$1() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback();
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(false, "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null(target.stateNode, target.type, props);
    }
  }

  function _batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function _flushInteractiveUpdatesImpl() {}

  var isBatching = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) return fn(bookkeeping);
    isBatching = true;

    try {
      return _batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isBatching = false, null !== restoreTarget || null !== restoreQueue) if (_flushInteractiveUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  function dispatchEvent(target, topLevelType, nativeEvent) {
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;
      if (events && (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), hasRethrowError)) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
    });
  }

  function shim$1() {
    invariant(false, "The current renderer does not support hyration. This error is likely caused by a bug in React. Please file an issue.");
  }

  var nextReactTag = 2;
  FabricUIManager.registerEventHandler && FabricUIManager.registerEventHandler(dispatchEvent);

  var ReactFabricHostComponent = function () {
    function ReactFabricHostComponent(tag, viewConfig, props) {
      if (!(this instanceof ReactFabricHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this.viewConfig = viewConfig;
      this.currentProps = props;
    }

    ReactFabricHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactFabricHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactFabricHostComponent;
  }();

  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    invariant(hostContext.isInAParentText, "Text strings must be rendered within a <Text> component.");
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: FabricUIManager.createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout;

  function cloneHiddenInstance(instance) {
    var node = instance.node;
    var updatePayload = diffProperties(null, emptyObject, {
      style: {
        display: "none"
      }
    }, instance.canonical.viewConfig.validAttributes);
    return {
      node: FabricUIManager.cloneNodeWithNewProps(node, updatePayload),
      canonical: instance.canonical
    };
  }

  function cloneUnhiddenInstance(instance, type, props) {
    var viewConfig = instance.canonical.viewConfig;
    type = instance.node;

    var prevProps = _extends({}, props, {
      style: [props.style, {
        display: "none"
      }]
    });

    props = diffProperties(null, prevProps, props, viewConfig.validAttributes);
    return {
      node: FabricUIManager.cloneNodeWithNewProps(type, props),
      canonical: instance.canonical
    };
  }

  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 2:
        case 16:
        case 0:
        case 1:
        case 5:
        case 8:
        case 13:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          var JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
          break a;

        default:
          JSCompiler_inline_result = "";
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(contextStackCursor.current === emptyContextObject, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      invariant(contextKey in fiber, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || "Unknown", contextKey);
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.firstContextDependency = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.firstContextDependency = current.firstContextDependency;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        return createFiberFromMode(pendingProps, mode | 3, expirationTime, key);

      case REACT_STRICT_MODE_TYPE:
        return createFiberFromMode(pendingProps, mode | 2, expirationTime, key);

      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 4), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.type = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        invariant(false, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = createFiber(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromMode(pendingProps, mode, expirationTime, key) {
    pendingProps = createFiber(8, pendingProps, key, mode);
    mode = 0 === (mode & 1) ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
    pendingProps.elementType = mode;
    pendingProps.type = mode;
    pendingProps.expirationTime = expirationTime;
    return pendingProps;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = createFiber(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function markPendingPriorityLevel(root, expirationTime) {
    root.didError = false;
    var earliestPendingTime = root.earliestPendingTime;
    0 === earliestPendingTime ? root.earliestPendingTime = root.latestPendingTime = expirationTime : earliestPendingTime < expirationTime ? root.earliestPendingTime = expirationTime : root.latestPendingTime > expirationTime && (root.latestPendingTime = expirationTime);
    findNextExpirationTimeToWorkOn(expirationTime, root);
  }

  function markSuspendedPriorityLevel(root, suspendedTime) {
    root.didError = false;
    var latestPingedTime = root.latestPingedTime;
    0 !== latestPingedTime && latestPingedTime >= suspendedTime && (root.latestPingedTime = 0);
    latestPingedTime = root.earliestPendingTime;
    var latestPendingTime = root.latestPendingTime;
    latestPingedTime === suspendedTime ? root.earliestPendingTime = latestPendingTime === suspendedTime ? root.latestPendingTime = 0 : latestPendingTime : latestPendingTime === suspendedTime && (root.latestPendingTime = latestPingedTime);
    latestPingedTime = root.earliestSuspendedTime;
    latestPendingTime = root.latestSuspendedTime;
    0 === latestPingedTime ? root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime : latestPingedTime < suspendedTime ? root.earliestSuspendedTime = suspendedTime : latestPendingTime > suspendedTime && (root.latestSuspendedTime = suspendedTime);
    findNextExpirationTimeToWorkOn(suspendedTime, root);
  }

  function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
    var earliestPendingTime = root.earliestPendingTime;
    root = root.earliestSuspendedTime;
    earliestPendingTime > renderExpirationTime && (renderExpirationTime = earliestPendingTime);
    root > renderExpirationTime && (renderExpirationTime = root);
    return renderExpirationTime;
  }

  function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
    var earliestSuspendedTime = root.earliestSuspendedTime,
        latestSuspendedTime = root.latestSuspendedTime,
        earliestPendingTime = root.earliestPendingTime,
        latestPingedTime = root.latestPingedTime;
    earliestPendingTime = 0 !== earliestPendingTime ? earliestPendingTime : latestPingedTime;
    0 === earliestPendingTime && (0 === completedExpirationTime || latestSuspendedTime < completedExpirationTime) && (earliestPendingTime = latestSuspendedTime);
    completedExpirationTime = earliestPendingTime;
    0 !== completedExpirationTime && earliestSuspendedTime > completedExpirationTime && (completedExpirationTime = earliestSuspendedTime);
    root.nextExpirationTimeToWorkOn = earliestPendingTime;
    root.expirationTime = completedExpirationTime;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime) {
    return {
      expirationTime: expirationTime,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -2049 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;
      updateExpirationTime < renderExpirationTime ? (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), newExpirationTime < updateExpirationTime && (newExpirationTime = updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update)));
      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;
      _updateExpirationTime < renderExpirationTime ? (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), newExpirationTime < _updateExpirationTime && (newExpirationTime = _updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update)));
      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        invariant("function" === typeof _callback3, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback3);

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue2 = currentValue;
  }

  function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress.firstContextDependency = null;
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };
      null === lastContextDependency ? (invariant(null !== currentlyRenderingFiber, "Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps."), currentlyRenderingFiber.firstContextDependency = lastContextDependency = observedBits) : lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue2;
  }

  var NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    return x === y ? 0 !== x || 0 !== y || 1 / x === 1 / y : x !== x && y !== y;
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function readLazyComponentType(lazyComponent) {
    var result = lazyComponent._result;

    switch (lazyComponent._status) {
      case 1:
        return result;

      case 2:
        throw result;

      case 0:
        throw result;

      default:
        throw lazyComponent._status = 0, result = lazyComponent._ctor, result = result(), result.then(function (moduleObject) {
          0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
        }, function (error) {
          0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
        }), lazyComponent._result = result, result;
    }
  }

  var ReactCurrentOwner$4 = ReactSharedInternals.ReactCurrentOwner,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      flushPassiveEffects();
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      flushPassiveEffects();
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      flushPassiveEffects();
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = ReactCurrentOwner$4.currentDispatcher.readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = ReactCurrentOwner$4.currentDispatcher.readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    contextType = workInProgress.updateQueue;
    null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), contextType = workInProgress.updateQueue, null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;
        element && (invariant(1 === element.tag, "Function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", returnFiber);
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      invariant("string" === typeof returnFiber, "Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.", returnFiber);
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(false, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.elementType === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 4 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 7 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber;
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (7 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.elementType === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                  break;
                }
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);
              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          expirationTime = returnFiber.type, invariant(false, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 5:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 6:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = createFiber(5, null, null, 0);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = Component(nextProps, ref);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current$$1) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current$$1 = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current$$1.ref = workInProgress.ref;
      current$$1.return = workInProgress;
      return workInProgress.child = current$$1;
    }

    type = current$$1.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current$$1.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current$$1 = createWorkInProgress(type, nextProps, renderExpirationTime);
    current$$1.ref = workInProgress.ref;
    current$$1.return = workInProgress;
    return workInProgress.child = current$$1;
  }

  function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current$$1 && updateExpirationTime < renderExpirationTime && shallowEqual(current$$1.memoizedProps, nextProps) && current$$1.ref === workInProgress.ref ? bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var unmaskedContext = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = Component(nextProps, unmaskedContext);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = true;else if (null === current$$1) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = ReactCurrentOwner$4.currentDispatcher.readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      oldContext = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldContext = workInProgress.memoizedState);
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
    } else instance = workInProgress.stateNode, oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = ReactCurrentOwner$4.currentDispatcher.readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = instance.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState), oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        nextState = workInProgress.memoizedState;

    if (0 === (workInProgress.effectTag & 64)) {
      nextState = null;
      var nextDidTimeout = false;
    } else nextState = {
      timedOutAt: null !== nextState ? nextState.timedOutAt : 0
    }, nextDidTimeout = true, workInProgress.effectTag &= -65;

    null === current$$1 ? nextDidTimeout ? (nextDidTimeout = nextProps.fallback, nextProps = createFiberFromFragment(null, mode, 0, null), 0 === (workInProgress.mode & 1) && (nextProps.child = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child), mode = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null), nextProps.sibling = mode, renderExpirationTime = nextProps, renderExpirationTime.return = mode.return = workInProgress) : renderExpirationTime = mode = mountChildFibers(workInProgress, null, nextProps.children, renderExpirationTime) : null !== current$$1.memoizedState ? (mode = current$$1.child, current$$1 = mode.sibling, nextDidTimeout ? (renderExpirationTime = nextProps.fallback, nextProps = createWorkInProgress(mode, mode.pendingProps, 0), nextProps.effectTag |= 2, 0 === (workInProgress.mode & 1) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== mode.child && (nextProps.child = nextDidTimeout)), mode = nextProps.sibling = createWorkInProgress(current$$1, renderExpirationTime, current$$1.expirationTime), mode.effectTag |= 2, renderExpirationTime = nextProps, nextProps.childExpirationTime = 0, renderExpirationTime.return = mode.return = workInProgress) : renderExpirationTime = mode = reconcileChildFibers(workInProgress, mode.child, nextProps.children, renderExpirationTime)) : (current$$1 = current$$1.child, nextDidTimeout ? (nextDidTimeout = nextProps.fallback, nextProps = createFiberFromFragment(null, mode, 0, null), nextProps.effectTag |= 2, nextProps.child = current$$1, current$$1.return = nextProps, 0 === (workInProgress.mode & 1) && (nextProps.child = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child), mode = nextProps.sibling = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null), mode.effectTag |= 2, renderExpirationTime = nextProps, nextProps.childExpirationTime = 0, renderExpirationTime.return = mode.return = workInProgress) : mode = renderExpirationTime = reconcileChildFibers(workInProgress, current$$1, nextProps.children, renderExpirationTime));
    workInProgress.memoizedState = nextState;
    workInProgress.child = renderExpirationTime;
    return mode;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.firstContextDependency = current$$1.firstContextDependency);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    invariant(null === current$$1 || workInProgress.child === current$$1.child, "Resuming work not yet implemented.");

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  function beginWork(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;

    if (null !== current$$1 && current$$1.memoizedProps === workInProgress.pendingProps && !didPerformWorkStackCursor.current && updateExpirationTime < renderExpirationTime) {
      switch (workInProgress.tag) {
        case 3:
          pushHostRootContext(workInProgress);
          break;

        case 5:
          pushHostContext(workInProgress);
          break;

        case 1:
          isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
          break;

        case 4:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case 10:
          pushProvider(workInProgress, workInProgress.memoizedProps.value);
          break;

        case 13:
          if (null !== workInProgress.memoizedState) {
            updateExpirationTime = workInProgress.child.childExpirationTime;
            if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
            workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
            return null !== workInProgress ? workInProgress.sibling : null;
          }

      }

      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }

    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        var context = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        context = updateExpirationTime(current$$1, context);
        workInProgress.effectTag |= 1;

        if ("object" === typeof context && null !== context && "function" === typeof context.render && undefined === context.$$typeof) {
          workInProgress.tag = 1;

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;

          workInProgress.memoizedState = null !== context.state && undefined !== context.state ? context.state : null;
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current$$1);
          context.updater = classComponentUpdater;
          workInProgress.stateNode = context;
          context._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current$$1, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, true, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, context, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        context = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        hasContext = workInProgress.pendingProps;
        current$$1 = readLazyComponentType(context);
        workInProgress.type = current$$1;
        context = workInProgress.tag = resolveLazyComponentTag(current$$1);
        hasContext = resolveDefaultProps(current$$1, hasContext);
        getDerivedStateFromProps = undefined;

        switch (context) {
          case 0:
            getDerivedStateFromProps = updateFunctionComponent(null, workInProgress, current$$1, hasContext, renderExpirationTime);
            break;

          case 1:
            getDerivedStateFromProps = updateClassComponent(null, workInProgress, current$$1, hasContext, renderExpirationTime);
            break;

          case 11:
            getDerivedStateFromProps = updateForwardRef(null, workInProgress, current$$1, hasContext, renderExpirationTime);
            break;

          case 14:
            getDerivedStateFromProps = updateMemoComponent(null, workInProgress, current$$1, resolveDefaultProps(current$$1.type, hasContext), updateExpirationTime, renderExpirationTime);
            break;

          default:
            invariant(false, "Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.", current$$1);
        }

        return getDerivedStateFromProps;

      case 0:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateFunctionComponent(current$$1, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateClassComponent(current$$1, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 3:
        return pushHostRootContext(workInProgress), updateExpirationTime = workInProgress.updateQueue, invariant(null !== updateExpirationTime, "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."), context = workInProgress.memoizedState, context = null !== context ? context.element : null, processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime), updateExpirationTime = workInProgress.memoizedState.element, updateExpirationTime === context ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child), workInProgress;

      case 5:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child, workInProgress;

      case 6:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), null;

      case 13:
        return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), updateForwardRef(current$$1, workInProgress, updateExpirationTime, context, renderExpirationTime);

      case 7:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          context = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = context.value;
          pushProvider(workInProgress, hasContext);

          if (null !== getDerivedStateFromProps) {
            var oldValue = getDerivedStateFromProps.value;
            hasContext = oldValue === hasContext && (0 !== oldValue || 1 / oldValue === 1 / hasContext) || oldValue !== oldValue && hasContext !== hasContext ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, hasContext) : 1073741823) | 0;

            if (0 === hasContext) {
              if (getDerivedStateFromProps.children === context.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (getDerivedStateFromProps = workInProgress.child, null !== getDerivedStateFromProps && (getDerivedStateFromProps.return = workInProgress); null !== getDerivedStateFromProps;) {
              oldValue = getDerivedStateFromProps.firstContextDependency;

              if (null !== oldValue) {
                do {
                  if (oldValue.context === updateExpirationTime && 0 !== (oldValue.observedBits & hasContext)) {
                    if (1 === getDerivedStateFromProps.tag) {
                      var nextFiber = createUpdate(renderExpirationTime);
                      nextFiber.tag = 2;
                      enqueueUpdate(getDerivedStateFromProps, nextFiber);
                    }

                    getDerivedStateFromProps.expirationTime < renderExpirationTime && (getDerivedStateFromProps.expirationTime = renderExpirationTime);
                    nextFiber = getDerivedStateFromProps.alternate;
                    null !== nextFiber && nextFiber.expirationTime < renderExpirationTime && (nextFiber.expirationTime = renderExpirationTime);

                    for (var node = getDerivedStateFromProps.return; null !== node;) {
                      nextFiber = node.alternate;
                      if (node.childExpirationTime < renderExpirationTime) node.childExpirationTime = renderExpirationTime, null !== nextFiber && nextFiber.childExpirationTime < renderExpirationTime && (nextFiber.childExpirationTime = renderExpirationTime);else if (null !== nextFiber && nextFiber.childExpirationTime < renderExpirationTime) nextFiber.childExpirationTime = renderExpirationTime;else break;
                      node = node.return;
                    }
                  }

                  nextFiber = getDerivedStateFromProps.child;
                  oldValue = oldValue.next;
                } while (null !== oldValue);
              } else nextFiber = 10 === getDerivedStateFromProps.tag ? getDerivedStateFromProps.type === workInProgress.type ? null : getDerivedStateFromProps.child : getDerivedStateFromProps.child;

              if (null !== nextFiber) nextFiber.return = getDerivedStateFromProps;else for (nextFiber = getDerivedStateFromProps; null !== nextFiber;) {
                if (nextFiber === workInProgress) {
                  nextFiber = null;
                  break;
                }

                getDerivedStateFromProps = nextFiber.sibling;

                if (null !== getDerivedStateFromProps) {
                  getDerivedStateFromProps.return = nextFiber.return;
                  nextFiber = getDerivedStateFromProps;
                  break;
                }

                nextFiber = nextFiber.return;
              }
              getDerivedStateFromProps = nextFiber;
            }
          }

          reconcileChildren(current$$1, workInProgress, context.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return context = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), context = readContext(context, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(context), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return context = workInProgress.type, hasContext = resolveDefaultProps(context.type, workInProgress.pendingProps), updateMemoComponent(current$$1, workInProgress, context, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === updateExpirationTime ? context : resolveDefaultProps(updateExpirationTime, context), null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current$$1 = true, pushContextProvider(workInProgress)) : current$$1 = false, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, context, renderExpirationTime), mountClassInstance(workInProgress, updateExpirationTime, context, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, true, current$$1, renderExpirationTime);

      default:
        invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  var _appendAllChildren = undefined,
      updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      a: if (5 === node.tag) {
        var instance = node.stateNode;

        if (needsVisibilityToggle) {
          var props = node.memoizedProps,
              type = node.type;
          instance = isHidden ? cloneHiddenInstance(instance, type, props, node) : cloneUnhiddenInstance(instance, type, props, node);
          node.stateNode = instance;
        }

        FabricUIManager.appendChild(parent.node, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;

        if (needsVisibilityToggle) {
          instance = node.memoizedProps;
          props = requiredContext(rootInstanceStackCursor.current);
          type = requiredContext(contextStackCursor$1.current);
          if (isHidden) throw Error("Not yet implemented.");
          instance = createTextInstance(instance, props, type, workInProgress);
          node.stateNode = instance;
        }

        FabricUIManager.appendChild(parent.node, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && (props = node.alternate, null !== props && (instance = null !== node.memoizedState, null !== props.memoizedState !== instance))) {
          props = instance ? node.child : node;
          null !== props && _appendAllChildren(parent, props, true, instance);
          break a;
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      a: if (5 === node.tag) {
        var instance = node.stateNode;

        if (needsVisibilityToggle) {
          var props = node.memoizedProps,
              type = node.type;
          instance = isHidden ? cloneHiddenInstance(instance, type, props, node) : cloneUnhiddenInstance(instance, type, props, node);
          node.stateNode = instance;
        }

        FabricUIManager.appendChildToSet(containerChildSet, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;

        if (needsVisibilityToggle) {
          instance = node.memoizedProps;
          props = requiredContext(rootInstanceStackCursor.current);
          type = requiredContext(contextStackCursor$1.current);
          if (isHidden) throw Error("Not yet implemented.");
          instance = createTextInstance(instance, props, type, workInProgress);
          node.stateNode = instance;
        }

        FabricUIManager.appendChildToSet(containerChildSet, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && (props = node.alternate, null !== props && (instance = null !== node.memoizedState, null !== props.memoizedState !== instance))) {
          props = instance ? node.child : node;
          null !== props && appendAllChildrenToContainer(containerChildSet, props, true, instance);
          break a;
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  updateHostContainer = function updateHostContainer(workInProgress) {
    var portalOrRoot = workInProgress.stateNode;

    if (null !== workInProgress.firstEffect) {
      var container = portalOrRoot.containerInfo,
          newChildSet = FabricUIManager.createChildSet(container);
      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet;
      workInProgress.effectTag |= 4;
      FabricUIManager.completeRoot(container, newChildSet);
    }
  };

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    type = current.stateNode;
    var oldProps = current.memoizedProps;
    if ((current = null === workInProgress.firstEffect) && oldProps === newProps) workInProgress.stateNode = type;else {
      var recyclableInstance = workInProgress.stateNode;
      requiredContext(contextStackCursor$1.current);
      var updatePayload = null;
      oldProps !== newProps && (oldProps = diffProperties(null, oldProps, newProps, recyclableInstance.canonical.viewConfig.validAttributes), recyclableInstance.canonical.currentProps = newProps, updatePayload = oldProps);
      current && null === updatePayload ? workInProgress.stateNode = type : (newProps = updatePayload, recyclableInstance = type.node, type = {
        node: current ? null !== newProps ? FabricUIManager.cloneNodeWithNewProps(recyclableInstance, newProps) : FabricUIManager.cloneNode(recyclableInstance) : null !== newProps ? FabricUIManager.cloneNodeWithNewChildrenAndProps(recyclableInstance, newProps) : FabricUIManager.cloneNodeWithNewChildren(recyclableInstance),
        canonical: type.canonical
      }, workInProgress.stateNode = type, current ? workInProgress.effectTag |= 4 : _appendAllChildren(type, workInProgress, false, false));
    }
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (current = requiredContext(rootInstanceStackCursor.current), oldText = requiredContext(contextStackCursor$1.current), workInProgress.stateNode = createTextInstance(newText, current, oldText, workInProgress), workInProgress.effectTag |= 4);
  };

  function logCapturedError(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;

    if (error instanceof Error) {
      capturedError = error.message;
      var name = error.name;

      try {
        error.message = (capturedError ? name + ": " + capturedError : name) + "\n\nThis error is located at:" + componentStack;
      } catch (e) {}
    } else error = "string" === typeof error ? Error(error + "\n\nThis error is located at:" + componentStack) : Error("Unspecified error at:" + componentStack);

    ExceptionsManager.handleException(error, false);
  }

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        return;
    }

    switch (finishedWork.tag) {
      case 1:
        break;

      case 5:
        break;

      case 6:
        break;

      case 3:
      case 4:
        break;

      default:
        invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      onUncaughtError(error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error$jscomp$0 = errorInfo.value;

      expirationTime.payload = function () {
        return getDerivedStateFromError(error$jscomp$0);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var error = errorInfo.value,
          stack = errorInfo.stack;
      logError(fiber, errorInfo);
      this.componentDidCatch(error, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 3:
        return popHostContainer(workInProgress), popTopLevelContextObject(workInProgress), effectTag = workInProgress.effectTag, invariant(0 === (effectTag & 64), "The root failed to unmount after an error. This is likely a bug in React. Please file an issue."), workInProgress.effectTag = effectTag & -2049 | 64, workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return effectTag = workInProgress.effectTag, effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 4:
        return popHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  var DispatcherWithoutHooks = {
    readContext: readContext
  },
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      isWorking = false,
      nextUnitOfWork = null,
      nextRoot = null,
      nextRenderExpirationTime = 0,
      nextLatestAbsoluteTimeoutMs = -1,
      nextRenderDidError = false,
      nextEffect = null,
      isCommitting$1 = false,
      passiveEffectCallbackHandle = null,
      passiveEffectCallback = null,
      legacyErrorBoundariesThatAlreadyFailed = null;

  function resetStack() {
    if (null !== nextUnitOfWork) for (var interruptedWork = nextUnitOfWork.return; null !== interruptedWork;) {
      var interruptedWork$jscomp$0 = interruptedWork;

      switch (interruptedWork$jscomp$0.tag) {
        case 1:
          var childContextTypes = interruptedWork$jscomp$0.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork$jscomp$0);
          break;

        case 3:
          popHostContainer(interruptedWork$jscomp$0);
          popTopLevelContextObject(interruptedWork$jscomp$0);
          break;

        case 5:
          popHostContext(interruptedWork$jscomp$0);
          break;

        case 4:
          popHostContainer(interruptedWork$jscomp$0);
          break;

        case 10:
          popProvider(interruptedWork$jscomp$0);
      }

      interruptedWork = interruptedWork.return;
    }
    nextRoot = null;
    nextRenderExpirationTime = 0;
    nextLatestAbsoluteTimeoutMs = -1;
    nextRenderDidError = false;
    nextUnitOfWork = null;
  }

  function flushPassiveEffects() {
    false;
  }

  function completeUnitOfWork(workInProgress) {
    for (;;) {
      var current$$1 = workInProgress.alternate,
          returnFiber = workInProgress.return,
          siblingFiber = workInProgress.sibling;

      if (0 === (workInProgress.effectTag & 1024)) {
        nextUnitOfWork = workInProgress;

        a: {
          var current = current$$1;
          current$$1 = workInProgress;
          var renderExpirationTime = nextRenderExpirationTime;
          var instance = current$$1.pendingProps;

          switch (current$$1.tag) {
            case 2:
              break;

            case 16:
              break;

            case 15:
            case 0:
              break;

            case 1:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 3:
              popHostContainer(current$$1);
              popTopLevelContextObject(current$$1);
              instance = current$$1.stateNode;
              instance.pendingContext && (instance.context = instance.pendingContext, instance.pendingContext = null);
              if (null === current || null === current.child) current$$1.effectTag &= -3;
              updateHostContainer(current$$1);
              break;

            case 5:
              popHostContext(current$$1);
              renderExpirationTime = requiredContext(rootInstanceStackCursor.current);
              var type = current$$1.type;
              if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, instance, renderExpirationTime), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (instance) {
                var currentHostContext = requiredContext(contextStackCursor$1.current),
                    internalInstanceHandle = current$$1;
                current = nextReactTag;
                nextReactTag += 2;
                var viewConfig = ReactNativeViewConfigRegistry.get(type);
                invariant("RCTView" !== type || !currentHostContext.isInAParentText, "Nesting of <View> within <Text> is not currently supported.");
                type = diffProperties(null, emptyObject, instance, viewConfig.validAttributes);
                renderExpirationTime = FabricUIManager.createNode(current, viewConfig.uiViewClassName, renderExpirationTime, type, internalInstanceHandle);
                instance = new ReactFabricHostComponent(current, viewConfig, instance);
                instance = {
                  node: renderExpirationTime,
                  canonical: instance
                };

                _appendAllChildren(instance, current$$1, false, false);

                current$$1.stateNode = instance;
                null !== current$$1.ref && (current$$1.effectTag |= 128);
              } else invariant(null !== current$$1.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              break;

            case 6:
              current && null != current$$1.stateNode ? updateHostText$1(current, current$$1, current.memoizedProps, instance) : ("string" !== typeof instance && invariant(null !== current$$1.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), current = requiredContext(rootInstanceStackCursor.current), renderExpirationTime = requiredContext(contextStackCursor$1.current), current$$1.stateNode = createTextInstance(instance, current, renderExpirationTime, current$$1));
              break;

            case 11:
              break;

            case 13:
              instance = current$$1.memoizedState;

              if (0 !== (current$$1.effectTag & 64)) {
                current$$1.expirationTime = renderExpirationTime;
                nextUnitOfWork = current$$1;
                break a;
              }

              instance = null !== instance;
              viewConfig = null !== current && null !== current.memoizedState;
              null !== current && !instance && viewConfig && (current = current.child.sibling, null !== current && reconcileChildFibers(current$$1, current, null, renderExpirationTime));
              if (instance !== viewConfig || 0 === (current$$1.effectTag & 1) && instance) current$$1.effectTag |= 4;
              break;

            case 7:
              break;

            case 8:
              break;

            case 12:
              break;

            case 4:
              popHostContainer(current$$1);
              updateHostContainer(current$$1);
              break;

            case 10:
              popProvider(current$$1);
              break;

            case 9:
              break;

            case 14:
              break;

            case 17:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
          }

          nextUnitOfWork = null;
        }

        current$$1 = workInProgress;

        if (1 === nextRenderExpirationTime || 1 !== current$$1.childExpirationTime) {
          instance = 0;

          for (current = current$$1.child; null !== current;) {
            renderExpirationTime = current.expirationTime, viewConfig = current.childExpirationTime, renderExpirationTime > instance && (instance = renderExpirationTime), viewConfig > instance && (instance = viewConfig), current = current.sibling;
          }

          current$$1.childExpirationTime = instance;
        }

        if (null !== nextUnitOfWork) return nextUnitOfWork;
        null !== returnFiber && 0 === (returnFiber.effectTag & 1024) && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress.firstEffect), returnFiber.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress : returnFiber.firstEffect = workInProgress, returnFiber.lastEffect = workInProgress));
      } else {
        workInProgress = unwindWork(workInProgress, nextRenderExpirationTime);
        if (null !== workInProgress) return workInProgress.effectTag &= 1023, workInProgress;
        null !== returnFiber && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.effectTag |= 1024);
      }

      if (null !== siblingFiber) return siblingFiber;
      if (null !== returnFiber) workInProgress = returnFiber;else break;
    }

    return null;
  }

  function performUnitOfWork(workInProgress) {
    var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
    workInProgress.memoizedProps = workInProgress.pendingProps;
    null === next && (next = completeUnitOfWork(workInProgress));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function renderRoot(root$jscomp$0, isYieldy) {
    invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
    flushPassiveEffects();
    isWorking = true;
    ReactCurrentOwner$2.currentDispatcher = DispatcherWithoutHooks;
    var expirationTime = root$jscomp$0.nextExpirationTimeToWorkOn;
    if (expirationTime !== nextRenderExpirationTime || root$jscomp$0 !== nextRoot || null === nextUnitOfWork) resetStack(), nextRoot = root$jscomp$0, nextRenderExpirationTime = expirationTime, nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime), root$jscomp$0.pendingCommitExpirationTime = 0;
    var didFatal = false;

    do {
      try {
        if (isYieldy) for (; null !== nextUnitOfWork && !shouldYieldToRenderer();) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        } else for (; null !== nextUnitOfWork;) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } catch (thrownValue) {
        if (lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null, null === nextUnitOfWork) didFatal = true, onUncaughtError(thrownValue);else {
          invariant(null !== nextUnitOfWork, "Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.");
          var sourceFiber = nextUnitOfWork,
              returnFiber = sourceFiber.return;
          if (null === returnFiber) didFatal = true, onUncaughtError(thrownValue);else {
            a: {
              var root = root$jscomp$0,
                  returnFiber$jscomp$0 = returnFiber,
                  sourceFiber$jscomp$0 = sourceFiber,
                  value = thrownValue;
              returnFiber = nextRenderExpirationTime;
              sourceFiber$jscomp$0.effectTag |= 1024;
              sourceFiber$jscomp$0.firstEffect = sourceFiber$jscomp$0.lastEffect = null;

              if (null !== value && "object" === typeof value && "function" === typeof value.then) {
                var thenable = value;
                value = returnFiber$jscomp$0;
                var earliestTimeoutMs = -1,
                    startTimeMs = -1;

                do {
                  if (13 === value.tag) {
                    var current$$1 = value.alternate;

                    if (null !== current$$1 && (current$$1 = current$$1.memoizedState, null !== current$$1)) {
                      startTimeMs = 10 * (1073741822 - current$$1.timedOutAt);
                      break;
                    }

                    current$$1 = value.pendingProps.maxDuration;
                    if ("number" === typeof current$$1) if (0 >= current$$1) earliestTimeoutMs = 0;else if (-1 === earliestTimeoutMs || current$$1 < earliestTimeoutMs) earliestTimeoutMs = current$$1;
                  }

                  value = value.return;
                } while (null !== value);

                value = returnFiber$jscomp$0;

                do {
                  if (current$$1 = 13 === value.tag) current$$1 = undefined === value.memoizedProps.fallback ? false : null === value.memoizedState;

                  if (current$$1) {
                    returnFiber$jscomp$0 = retrySuspendedRoot.bind(null, root, value, sourceFiber$jscomp$0, 0 === (value.mode & 1) ? 1073741823 : returnFiber);
                    thenable.then(returnFiber$jscomp$0, returnFiber$jscomp$0);

                    if (0 === (value.mode & 1)) {
                      value.effectTag |= 64;
                      reconcileChildren(sourceFiber$jscomp$0.alternate, sourceFiber$jscomp$0, null, returnFiber);
                      sourceFiber$jscomp$0.effectTag &= -1025;
                      sourceFiber$jscomp$0.effectTag &= -933;
                      1 === sourceFiber$jscomp$0.tag && null === sourceFiber$jscomp$0.alternate && (sourceFiber$jscomp$0.tag = 17);
                      sourceFiber$jscomp$0.expirationTime = returnFiber;
                      break a;
                    }

                    -1 === earliestTimeoutMs ? root = 1073741823 : (-1 === startTimeMs && (startTimeMs = 10 * (1073741822 - findEarliestOutstandingPriorityLevel(root, returnFiber)) - 5e3), root = startTimeMs + earliestTimeoutMs);
                    0 <= root && nextLatestAbsoluteTimeoutMs < root && (nextLatestAbsoluteTimeoutMs = root);
                    value.effectTag |= 2048;
                    value.expirationTime = returnFiber;
                    break a;
                  }

                  value = value.return;
                } while (null !== value);

                value = Error((getComponentName(sourceFiber$jscomp$0.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber$jscomp$0));
              }

              nextRenderDidError = true;
              value = createCapturedValue(value, sourceFiber$jscomp$0);
              root = returnFiber$jscomp$0;

              do {
                switch (root.tag) {
                  case 3:
                    sourceFiber$jscomp$0 = value;
                    root.effectTag |= 2048;
                    root.expirationTime = returnFiber;
                    returnFiber = createRootErrorUpdate(root, sourceFiber$jscomp$0, returnFiber);
                    enqueueCapturedUpdate(root, returnFiber);
                    break a;

                  case 1:
                    if (sourceFiber$jscomp$0 = value, returnFiber$jscomp$0 = root.type, thenable = root.stateNode, 0 === (root.effectTag & 64) && ("function" === typeof returnFiber$jscomp$0.getDerivedStateFromError || null !== thenable && "function" === typeof thenable.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(thenable)))) {
                      root.effectTag |= 2048;
                      root.expirationTime = returnFiber;
                      returnFiber = createClassErrorUpdate(root, sourceFiber$jscomp$0, returnFiber);
                      enqueueCapturedUpdate(root, returnFiber);
                      break a;
                    }

                }

                root = root.return;
              } while (null !== root);
            }

            nextUnitOfWork = completeUnitOfWork(sourceFiber);
            continue;
          }
        }
      }

      break;
    } while (1);

    isWorking = false;
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = ReactCurrentOwner$2.currentDispatcher = null;
    if (didFatal) nextRoot = null, root$jscomp$0.finishedWork = null;else if (null !== nextUnitOfWork) root$jscomp$0.finishedWork = null;else {
      didFatal = root$jscomp$0.current.alternate;
      invariant(null !== didFatal, "Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.");
      nextRoot = null;

      if (nextRenderDidError) {
        sourceFiber = root$jscomp$0.latestPendingTime;
        returnFiber = root$jscomp$0.latestSuspendedTime;
        root = root$jscomp$0.latestPingedTime;

        if (0 !== sourceFiber && sourceFiber < expirationTime || 0 !== returnFiber && returnFiber < expirationTime || 0 !== root && root < expirationTime) {
          markSuspendedPriorityLevel(root$jscomp$0, expirationTime);
          onSuspend(root$jscomp$0, didFatal, expirationTime, root$jscomp$0.expirationTime, -1);
          return;
        }

        if (!root$jscomp$0.didError && isYieldy) {
          root$jscomp$0.didError = true;
          expirationTime = root$jscomp$0.nextExpirationTimeToWorkOn = expirationTime;
          isYieldy = root$jscomp$0.expirationTime = 1073741823;
          onSuspend(root$jscomp$0, didFatal, expirationTime, isYieldy, -1);
          return;
        }
      }

      isYieldy && -1 !== nextLatestAbsoluteTimeoutMs ? (markSuspendedPriorityLevel(root$jscomp$0, expirationTime), isYieldy = 10 * (1073741822 - findEarliestOutstandingPriorityLevel(root$jscomp$0, expirationTime)), isYieldy < nextLatestAbsoluteTimeoutMs && (nextLatestAbsoluteTimeoutMs = isYieldy), isYieldy = 10 * (1073741822 - requestCurrentTime()), isYieldy = nextLatestAbsoluteTimeoutMs - isYieldy, onSuspend(root$jscomp$0, didFatal, expirationTime, root$jscomp$0.expirationTime, 0 > isYieldy ? 0 : isYieldy)) : (root$jscomp$0.pendingCommitExpirationTime = expirationTime, root$jscomp$0.finishedWork = didFatal);
    }
  }

  function captureCommitPhaseError(sourceFiber, value) {
    for (var fiber = sourceFiber.return; null !== fiber;) {
      switch (fiber.tag) {
        case 1:
          var instance = fiber.stateNode;

          if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
            sourceFiber = createCapturedValue(value, sourceFiber);
            sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
            enqueueUpdate(fiber, sourceFiber);
            scheduleWork(fiber, 1073741823);
            return;
          }

          break;

        case 3:
          sourceFiber = createCapturedValue(value, sourceFiber);
          sourceFiber = createRootErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          scheduleWork(fiber, 1073741823);
          return;
      }

      fiber = fiber.return;
    }

    3 === sourceFiber.tag && (fiber = createCapturedValue(value, sourceFiber), fiber = createRootErrorUpdate(sourceFiber, fiber, 1073741823), enqueueUpdate(sourceFiber, fiber), scheduleWork(sourceFiber, 1073741823));
  }

  function computeExpirationForFiber(currentTime, fiber) {
    isWorking ? currentTime = isCommitting$1 ? 1073741823 : nextRenderExpirationTime : fiber.mode & 1 ? (currentTime = isBatchingInteractiveUpdates ? 1073741822 - 10 * (((1073741822 - currentTime + 15) / 10 | 0) + 1) : 1073741822 - 25 * (((1073741822 - currentTime + 500) / 25 | 0) + 1), null !== nextRoot && currentTime === nextRenderExpirationTime && --currentTime) : currentTime = 1073741823;
    isBatchingInteractiveUpdates && (0 === lowestPriorityPendingInteractiveExpirationTime || currentTime < lowestPriorityPendingInteractiveExpirationTime) && (lowestPriorityPendingInteractiveExpirationTime = currentTime);
    return currentTime;
  }

  function retrySuspendedRoot(root, boundaryFiber, sourceFiber, suspendedTime) {
    var retryTime = root.earliestSuspendedTime;
    var latestSuspendedTime = root.latestSuspendedTime;

    if (0 !== retryTime && suspendedTime <= retryTime && suspendedTime >= latestSuspendedTime) {
      latestSuspendedTime = retryTime = suspendedTime;
      root.didError = false;
      var latestPingedTime = root.latestPingedTime;
      if (0 === latestPingedTime || latestPingedTime > latestSuspendedTime) root.latestPingedTime = latestSuspendedTime;
      findNextExpirationTimeToWorkOn(latestSuspendedTime, root);
    } else retryTime = requestCurrentTime(), retryTime = computeExpirationForFiber(retryTime, boundaryFiber), markPendingPriorityLevel(root, retryTime);

    0 !== (boundaryFiber.mode & 1) && root === nextRoot && nextRenderExpirationTime === suspendedTime && (nextRoot = null);
    scheduleWorkToRoot(boundaryFiber, retryTime);
    0 === (boundaryFiber.mode & 1) && (scheduleWorkToRoot(sourceFiber, retryTime), 1 === sourceFiber.tag && null !== sourceFiber.stateNode && (boundaryFiber = createUpdate(retryTime), boundaryFiber.tag = 2, enqueueUpdate(sourceFiber, boundaryFiber)));
    sourceFiber = root.expirationTime;
    0 !== sourceFiber && requestWork(root, sourceFiber);
  }

  function scheduleWorkToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    return null === root ? null : root;
  }

  function scheduleWork(fiber, expirationTime) {
    fiber = scheduleWorkToRoot(fiber, expirationTime);
    null !== fiber && (!isWorking && 0 !== nextRenderExpirationTime && expirationTime > nextRenderExpirationTime && resetStack(), markPendingPriorityLevel(fiber, expirationTime), isWorking && !isCommitting$1 && nextRoot === fiber || requestWork(fiber, fiber.expirationTime), nestedUpdateCount > NESTED_UPDATE_LIMIT && (nestedUpdateCount = 0, invariant(false, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.")));
  }

  var firstScheduledRoot = null,
      lastScheduledRoot = null,
      callbackExpirationTime = 0,
      callbackID = undefined,
      isRendering = false,
      nextFlushedRoot = null,
      nextFlushedExpirationTime = 0,
      lowestPriorityPendingInteractiveExpirationTime = 0,
      hasUnhandledError = false,
      unhandledError = null,
      isBatchingUpdates = false,
      isUnbatchingUpdates = false,
      isBatchingInteractiveUpdates = false,
      completedBatches = null,
      originalStartTimeMs = now$1(),
      currentRendererTime = 1073741822 - (originalStartTimeMs / 10 | 0),
      currentSchedulerTime = currentRendererTime,
      NESTED_UPDATE_LIMIT = 50,
      nestedUpdateCount = 0,
      lastCommittedRootDuringThisBatch = null;

  function recomputeCurrentRendererTime() {
    currentRendererTime = 1073741822 - ((now$1() - originalStartTimeMs) / 10 | 0);
  }

  function scheduleCallbackWithExpirationTime(root, expirationTime) {
    if (0 !== callbackExpirationTime) {
      if (expirationTime < callbackExpirationTime) return;
      null !== callbackID && (root = callbackID, scheduledCallback = null, clearTimeout(root));
    }

    callbackExpirationTime = expirationTime;
    now$1();
    scheduledCallback = performAsyncWork;
    callbackID = setTimeout(setTimeoutCallback, 1);
  }

  function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
    root.expirationTime = rootExpirationTime;
    0 !== msUntilTimeout || shouldYieldToRenderer() ? 0 < msUntilTimeout && (root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout)) : (root.pendingCommitExpirationTime = suspendedExpirationTime, root.finishedWork = finishedWork);
  }

  function onTimeout(root, finishedWork, suspendedExpirationTime) {
    root.pendingCommitExpirationTime = suspendedExpirationTime;
    root.finishedWork = finishedWork;
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;
    invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.");
    nextFlushedRoot = root;
    nextFlushedExpirationTime = suspendedExpirationTime;
    performWorkOnRoot(root, suspendedExpirationTime, false);
    performWork(1073741823, false);
  }

  function requestCurrentTime() {
    if (isRendering) return currentSchedulerTime;
    findHighestPriorityRoot();
    if (0 === nextFlushedExpirationTime || 1 === nextFlushedExpirationTime) recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime;
    return currentSchedulerTime;
  }

  function requestWork(root, expirationTime) {
    null === root.nextScheduledRoot ? (root.expirationTime = expirationTime, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = root, root.nextScheduledRoot = root) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot)) : expirationTime > root.expirationTime && (root.expirationTime = expirationTime);
    isRendering || (isBatchingUpdates ? isUnbatchingUpdates : 1073741823 === expirationTime ? performWork(1073741823, false) : scheduleCallbackWithExpirationTime(root, expirationTime));
  }

  function findHighestPriorityRoot() {
    var highestPriorityWork = 0,
        highestPriorityRoot = null;
    if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
      var remainingExpirationTime = root.expirationTime;

      if (0 === remainingExpirationTime) {
        invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

        if (root === root.nextScheduledRoot) {
          firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
          break;
        } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
          lastScheduledRoot = previousScheduledRoot;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          root.nextScheduledRoot = null;
          break;
        } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

        root = previousScheduledRoot.nextScheduledRoot;
      } else {
        remainingExpirationTime > highestPriorityWork && (highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root);
        if (root === lastScheduledRoot) break;
        if (1073741823 === highestPriorityWork) break;
        previousScheduledRoot = root;
        root = root.nextScheduledRoot;
      }
    }
    nextFlushedRoot = highestPriorityRoot;
    nextFlushedExpirationTime = highestPriorityWork;
  }

  var didYield = false;

  function shouldYieldToRenderer() {
    return didYield ? true : frameDeadline <= now$1() ? didYield = true : false;
  }

  function performAsyncWork() {
    try {
      if (!shouldYieldToRenderer() && null !== firstScheduledRoot) {
        recomputeCurrentRendererTime();
        var root = firstScheduledRoot;

        do {
          var expirationTime = root.expirationTime;
          0 !== expirationTime && currentRendererTime <= expirationTime && (root.nextExpirationTimeToWorkOn = currentRendererTime);
          root = root.nextScheduledRoot;
        } while (root !== firstScheduledRoot);
      }

      performWork(0, true);
    } finally {
      didYield = false;
    }
  }

  function performWork(minExpirationTime, isYieldy) {
    findHighestPriorityRoot();
    if (isYieldy) for (recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime);) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime), findHighestPriorityRoot(), recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime;
    } else for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && minExpirationTime <= nextFlushedExpirationTime;) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false), findHighestPriorityRoot();
    }
    isYieldy && (callbackExpirationTime = 0, callbackID = null);
    0 !== nextFlushedExpirationTime && scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
    nestedUpdateCount = 0;
    lastCommittedRootDuringThisBatch = null;
    if (null !== completedBatches) for (minExpirationTime = completedBatches, completedBatches = null, isYieldy = 0; isYieldy < minExpirationTime.length; isYieldy++) {
      var batch = minExpirationTime[isYieldy];

      try {
        batch._onComplete();
      } catch (error) {
        hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
      }
    }
    if (hasUnhandledError) throw minExpirationTime = unhandledError, unhandledError = null, hasUnhandledError = false, minExpirationTime;
  }

  function performWorkOnRoot(root, expirationTime, isYieldy) {
    invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
    isRendering = true;

    if (isYieldy) {
      var _finishedWork = root.finishedWork;
      null !== _finishedWork ? completeRoot$1(root, _finishedWork, expirationTime) : (root.finishedWork = null, _finishedWork = root.timeoutHandle, -1 !== _finishedWork && (root.timeoutHandle = -1, cancelTimeout(_finishedWork)), renderRoot(root, isYieldy), _finishedWork = root.finishedWork, null !== _finishedWork && (shouldYieldToRenderer() ? root.finishedWork = _finishedWork : completeRoot$1(root, _finishedWork, expirationTime)));
    } else _finishedWork = root.finishedWork, null !== _finishedWork ? completeRoot$1(root, _finishedWork, expirationTime) : (root.finishedWork = null, _finishedWork = root.timeoutHandle, -1 !== _finishedWork && (root.timeoutHandle = -1, cancelTimeout(_finishedWork)), renderRoot(root, isYieldy), _finishedWork = root.finishedWork, null !== _finishedWork && completeRoot$1(root, _finishedWork, expirationTime));

    isRendering = false;
  }

  function completeRoot$1(root, finishedWork$jscomp$0, expirationTime) {
    var firstBatch = root.firstBatch;

    if (null !== firstBatch && firstBatch._expirationTime >= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
      root.finishedWork = finishedWork$jscomp$0;
      root.expirationTime = 0;
      return;
    }

    root.finishedWork = null;
    root === lastCommittedRootDuringThisBatch ? nestedUpdateCount++ : (lastCommittedRootDuringThisBatch = root, nestedUpdateCount = 0);
    isCommitting$1 = isWorking = true;
    invariant(root.current !== finishedWork$jscomp$0, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
    expirationTime = root.pendingCommitExpirationTime;
    invariant(0 !== expirationTime, "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    root.pendingCommitExpirationTime = 0;
    firstBatch = finishedWork$jscomp$0.expirationTime;
    var childExpirationTimeBeforeCommit = finishedWork$jscomp$0.childExpirationTime;
    firstBatch = childExpirationTimeBeforeCommit > firstBatch ? childExpirationTimeBeforeCommit : firstBatch;
    root.didError = false;
    0 === firstBatch ? (root.earliestPendingTime = 0, root.latestPendingTime = 0, root.earliestSuspendedTime = 0, root.latestSuspendedTime = 0, root.latestPingedTime = 0) : (childExpirationTimeBeforeCommit = root.latestPendingTime, 0 !== childExpirationTimeBeforeCommit && (childExpirationTimeBeforeCommit > firstBatch ? root.earliestPendingTime = root.latestPendingTime = 0 : root.earliestPendingTime > firstBatch && (root.earliestPendingTime = root.latestPendingTime)), childExpirationTimeBeforeCommit = root.earliestSuspendedTime, 0 === childExpirationTimeBeforeCommit ? markPendingPriorityLevel(root, firstBatch) : firstBatch < root.latestSuspendedTime ? (root.earliestSuspendedTime = 0, root.latestSuspendedTime = 0, root.latestPingedTime = 0, markPendingPriorityLevel(root, firstBatch)) : firstBatch > childExpirationTimeBeforeCommit && markPendingPriorityLevel(root, firstBatch));
    findNextExpirationTimeToWorkOn(0, root);
    ReactCurrentOwner$2.current = null;
    1 < finishedWork$jscomp$0.effectTag ? null !== finishedWork$jscomp$0.lastEffect ? (finishedWork$jscomp$0.lastEffect.nextEffect = finishedWork$jscomp$0, firstBatch = finishedWork$jscomp$0.firstEffect) : firstBatch = finishedWork$jscomp$0 : firstBatch = finishedWork$jscomp$0.firstEffect;

    for (nextEffect = firstBatch; null !== nextEffect;) {
      childExpirationTimeBeforeCommit = false;
      var error$jscomp$0 = undefined;

      try {
        for (; null !== nextEffect;) {
          if (nextEffect.effectTag & 256) a: {
            var current$$1 = nextEffect.alternate,
                finishedWork = nextEffect;

            switch (finishedWork.tag) {
              case 0:
              case 11:
              case 15:
                break a;

              case 1:
                if (finishedWork.effectTag & 256 && null !== current$$1) {
                  var prevProps = current$$1.memoizedProps,
                      prevState = current$$1.memoizedState,
                      instance = finishedWork.stateNode,
                      snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }

                break a;

              case 3:
              case 5:
              case 6:
              case 4:
              case 17:
                break a;

              default:
                invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        childExpirationTimeBeforeCommit = true, error$jscomp$0 = e;
      }

      childExpirationTimeBeforeCommit && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, error$jscomp$0), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    for (nextEffect = firstBatch; null !== nextEffect;) {
      current$$1 = false;
      prevProps = undefined;

      try {
        for (; null !== nextEffect;) {
          var effectTag = nextEffect.effectTag;

          if (effectTag & 128) {
            var current$$1$jscomp$0 = nextEffect.alternate;

            if (null !== current$$1$jscomp$0) {
              var currentRef = current$$1$jscomp$0.ref;
              null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
            }
          }

          switch (effectTag & 14) {
            case 2:
              nextEffect.effectTag &= -3;
              break;

            case 6:
              nextEffect.effectTag &= -3;
              commitWork(nextEffect.alternate, nextEffect);
              break;

            case 4:
              commitWork(nextEffect.alternate, nextEffect);
              break;

            case 8:
              prevState = nextEffect;

              a: for (snapshot = instance = prevState;;) {
                childExpirationTimeBeforeCommit = snapshot;
                "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(childExpirationTimeBeforeCommit);

                switch (childExpirationTimeBeforeCommit.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    var updateQueue = childExpirationTimeBeforeCommit.updateQueue;

                    if (null !== updateQueue) {
                      var lastEffect = updateQueue.lastEffect;

                      if (null !== lastEffect) {
                        var firstEffect = lastEffect.next;
                        error$jscomp$0 = firstEffect;

                        do {
                          var destroy = error$jscomp$0.destroy;

                          if (null !== destroy) {
                            finishedWork = childExpirationTimeBeforeCommit;

                            try {
                              destroy();
                            } catch (error) {
                              captureCommitPhaseError(finishedWork, error);
                            }
                          }

                          error$jscomp$0 = error$jscomp$0.next;
                        } while (error$jscomp$0 !== firstEffect);
                      }
                    }

                    break;

                  case 1:
                    safelyDetachRef(childExpirationTimeBeforeCommit);
                    var instance$jscomp$0 = childExpirationTimeBeforeCommit.stateNode;
                    if ("function" === typeof instance$jscomp$0.componentWillUnmount) try {
                      instance$jscomp$0.props = childExpirationTimeBeforeCommit.memoizedProps, instance$jscomp$0.state = childExpirationTimeBeforeCommit.memoizedState, instance$jscomp$0.componentWillUnmount();
                    } catch (unmountError) {
                      captureCommitPhaseError(childExpirationTimeBeforeCommit, unmountError);
                    }
                    break;

                  case 5:
                    safelyDetachRef(childExpirationTimeBeforeCommit);
                    break;

                  case 4:
                    FabricUIManager.createChildSet(childExpirationTimeBeforeCommit.stateNode.containerInfo);
                }

                if (null !== snapshot.child) snapshot.child.return = snapshot, snapshot = snapshot.child;else {
                  if (snapshot === instance) break;

                  for (; null === snapshot.sibling;) {
                    if (null === snapshot.return || snapshot.return === instance) break a;
                    snapshot = snapshot.return;
                  }

                  snapshot.sibling.return = snapshot.return;
                  snapshot = snapshot.sibling;
                }
              }

              prevState.return = null;
              prevState.child = null;
              prevState.alternate && (prevState.alternate.child = null, prevState.alternate.return = null);
          }

          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        current$$1 = true, prevProps = e;
      }

      current$$1 && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, prevProps), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    root.current = finishedWork$jscomp$0;

    for (nextEffect = firstBatch; null !== nextEffect;) {
      effectTag = false;
      current$$1$jscomp$0 = undefined;

      try {
        for (currentRef = expirationTime; null !== nextEffect;) {
          var effectTag$jscomp$0 = nextEffect.effectTag;

          if (effectTag$jscomp$0 & 36) {
            var current$$1$jscomp$1 = nextEffect.alternate;
            updateQueue = nextEffect;
            lastEffect = currentRef;

            switch (updateQueue.tag) {
              case 0:
              case 11:
              case 15:
                break;

              case 1:
                var instance$jscomp$1 = updateQueue.stateNode;
                if (updateQueue.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$1.componentDidMount();else {
                  var prevProps$jscomp$0 = updateQueue.elementType === updateQueue.type ? current$$1$jscomp$1.memoizedProps : resolveDefaultProps(updateQueue.type, current$$1$jscomp$1.memoizedProps);
                  instance$jscomp$1.componentDidUpdate(prevProps$jscomp$0, current$$1$jscomp$1.memoizedState, instance$jscomp$1.__reactInternalSnapshotBeforeUpdate);
                }
                var updateQueue$jscomp$0 = updateQueue.updateQueue;
                null !== updateQueue$jscomp$0 && commitUpdateQueue(updateQueue, updateQueue$jscomp$0, instance$jscomp$1, lastEffect);
                break;

              case 3:
                var _updateQueue = updateQueue.updateQueue;

                if (null !== _updateQueue) {
                  firstEffect = null;
                  if (null !== updateQueue.child) switch (updateQueue.child.tag) {
                    case 5:
                      firstEffect = updateQueue.child.stateNode.canonical;
                      break;

                    case 1:
                      firstEffect = updateQueue.child.stateNode;
                  }
                  commitUpdateQueue(updateQueue, _updateQueue, firstEffect, lastEffect);
                }

                break;

              case 5:
                null === current$$1$jscomp$1 && updateQueue.effectTag & 4 && invariant(false, "The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
                break;

              case 6:
                break;

              case 4:
                break;

              case 12:
                break;

              case 13:
                break;

              case 17:
                break;

              default:
                invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }

          if (effectTag$jscomp$0 & 128) {
            var ref = nextEffect.ref;

            if (null !== ref) {
              var instance$jscomp$2 = nextEffect.stateNode;

              switch (nextEffect.tag) {
                case 5:
                  var instanceToUse = instance$jscomp$2.canonical;
                  break;

                default:
                  instanceToUse = instance$jscomp$2;
              }

              "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
            }
          }

          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        effectTag = true, current$$1$jscomp$0 = e;
      }

      effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, current$$1$jscomp$0), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    isWorking = isCommitting$1 = false;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork$jscomp$0.stateNode);
    effectTag$jscomp$0 = finishedWork$jscomp$0.expirationTime;
    finishedWork$jscomp$0 = finishedWork$jscomp$0.childExpirationTime;
    finishedWork$jscomp$0 = finishedWork$jscomp$0 > effectTag$jscomp$0 ? finishedWork$jscomp$0 : effectTag$jscomp$0;
    0 === finishedWork$jscomp$0 && (legacyErrorBoundariesThatAlreadyFailed = null);
    root.expirationTime = finishedWork$jscomp$0;
    root.finishedWork = null;
  }

  function onUncaughtError(error) {
    invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
    nextFlushedRoot.expirationTime = 0;
    hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
  }

  function findHostInstance$1(component) {
    var fiber = component._reactInternalFiber;
    undefined === fiber && ("function" === typeof component.render ? invariant(false, "Unable to find node on an unmounted component.") : invariant(false, "Argument appears to not be a ReactComponent. Keys: %s", Object.keys(component)));
    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime();
    current$$1 = computeExpirationForFiber(currentTime, current$$1);
    currentTime = container.current;

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        invariant(2 === isFiberMountedImpl(parentComponent) && 1 === parentComponent.tag, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        invariant(false, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        parentContext = undefined;
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    callback = createUpdate(current$$1);
    callback.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (callback.callback = container);
    flushPassiveEffects();
    enqueueUpdate(currentTime, callback);
    scheduleWork(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(false, "getInspectorDataForViewTag() is not available in production");
  };

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance$1(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  _batchedUpdatesImpl = function _batchedUpdatesImpl(fn, a) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;

    try {
      return fn(a);
    } finally {
      (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1073741823, false);
    }
  };

  _flushInteractiveUpdatesImpl = function _flushInteractiveUpdatesImpl() {
    isRendering || 0 === lowestPriorityPendingInteractiveExpirationTime || (performWork(lowestPriorityPendingInteractiveExpirationTime, false), lowestPriorityPendingInteractiveExpirationTime = 0);
  };

  var roots = new Map(),
      ReactFabric = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance$1),
    findNodeHandle: findNodeHandle,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = createFiber(3, null, null, 0);
        var root$jscomp$0 = {
          current: root,
          containerInfo: containerTag,
          pendingChildren: null,
          earliestPendingTime: 0,
          latestPendingTime: 0,
          earliestSuspendedTime: 0,
          latestSuspendedTime: 0,
          latestPingedTime: 0,
          didError: false,
          pendingCommitExpirationTime: 0,
          finishedWork: null,
          timeoutHandle: -1,
          context: null,
          pendingContext: null,
          hydrate: false,
          nextExpirationTimeToWorkOn: 0,
          expirationTime: 0,
          firstBatch: null,
          nextScheduledRoot: null
        };
        root = root.stateNode = root$jscomp$0;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 5:
          element = element.child.stateNode.canonical;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          },
          measureInWindow: function measureInWindow(callback) {
            UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance) {
              var viewConfig = maybeInstance.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, viewConfig.validAttributes);
              null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance$1)
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      }
    }));
  })({
    findFiberByHostInstance: getInstanceFromInstance,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.6.1",
    rendererPackageName: "react-native-renderer"
  });

  var ReactFabric$2 = {
    default: ReactFabric
  },
      ReactFabric$3 = ReactFabric$2 && ReactFabric || ReactFabric$2;
  module.exports = ReactFabric$3.default || ReactFabric$3;
},307,[8,79,141,40,46,143,73,144,308,145,87]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var FabricUIManager = global.nativeFabricUIManager;
  module.exports = FabricUIManager;
},308,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var MissingNativeEventEmitterShim = _$$_REQUIRE(_dependencyMap[5]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[6]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[7]);

  var RCTAppState = NativeModules.AppState;

  var logError = _$$_REQUIRE(_dependencyMap[8]);

  var invariant = _$$_REQUIRE(_dependencyMap[9]);

  var AppState = function (_NativeEventEmitter) {
    _inherits(AppState, _NativeEventEmitter);

    function AppState() {
      var _this;

      _classCallCheck(this, AppState);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AppState).call(this, RCTAppState));
      _this.isAvailable = true;
      _this.isAvailable = true;
      _this._eventHandlers = {
        change: new Map(),
        memoryWarning: new Map()
      };
      _this.currentState = RCTAppState.initialAppState || 'active';
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      RCTAppState.getCurrentAppState(function (appStateData) {
        if (!eventUpdated && _this.currentState !== appStateData.app_state) {
          _this.currentState = appStateData.app_state;

          _this.emit('appStateDidChange', appStateData);
        }
      }, logError);
      return _this;
    }

    _createClass(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        if (type === 'change') {
          this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
            handler(appStateData.app_state);
          }));
        } else if (type === 'memoryWarning') {
          this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);

    return AppState;
  }(NativeEventEmitter);

  {
    AppState = new AppState();
  }
  module.exports = AppState;
},309,[19,20,27,30,33,110,111,5,132,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[1]);

  var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},310,[9,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BackHandler = _$$_REQUIRE(_dependencyMap[0]);

  var warning = _$$_REQUIRE(_dependencyMap[1]);

  var BackAndroid = {
    exitApp: function exitApp() {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.exitApp();
    },
    addEventListener: function addEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      return BackHandler.addEventListener(eventName, handler);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.removeEventListener(eventName, handler);
    }
  };
  module.exports = BackAndroid;
},311,[305,103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var checkPropTypes = PropTypes.checkPropTypes;

  var RCTCameraRollManager = _$$_REQUIRE(_dependencyMap[3]).CameraRollManager;

  var createStrictShapeTypeChecker = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var GROUP_TYPES_OPTIONS = {
    Album: 'Album',
    All: 'All',
    Event: 'Event',
    Faces: 'Faces',
    Library: 'Library',
    PhotoStream: 'PhotoStream',
    SavedPhotos: 'SavedPhotos'
  };
  var ASSET_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Photos: 'Photos'
  };
  var getPhotosParamChecker = createStrictShapeTypeChecker({
    first: PropTypes.number.isRequired,
    after: PropTypes.string,
    groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),
    groupName: PropTypes.string,
    assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),
    mimeTypes: PropTypes.arrayOf(PropTypes.string)
  });
  var getPhotosReturnChecker = createStrictShapeTypeChecker({
    edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
      node: createStrictShapeTypeChecker({
        type: PropTypes.string.isRequired,
        group_name: PropTypes.string.isRequired,
        image: createStrictShapeTypeChecker({
          uri: PropTypes.string.isRequired,
          height: PropTypes.number.isRequired,
          width: PropTypes.number.isRequired,
          isStored: PropTypes.bool,
          playableDuration: PropTypes.number.isRequired
        }).isRequired,
        timestamp: PropTypes.number.isRequired,
        location: createStrictShapeTypeChecker({
          latitude: PropTypes.number,
          longitude: PropTypes.number,
          altitude: PropTypes.number,
          heading: PropTypes.number,
          speed: PropTypes.number
        })
      }).isRequired
    })).isRequired,
    page_info: createStrictShapeTypeChecker({
      has_next_page: PropTypes.bool.isRequired,
      start_cursor: PropTypes.string,
      end_cursor: PropTypes.string
    }).isRequired
  });

  var CameraRoll = function () {
    function CameraRoll() {
      _classCallCheck(this, CameraRoll);
    }

    _createClass(CameraRoll, null, [{
      key: "saveImageWithTag",
      value: function saveImageWithTag(tag) {
        console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
        return this.saveToCameraRoll(tag, 'photo');
      }
    }, {
      key: "deletePhotos",
      value: function deletePhotos(photos) {
        return RCTCameraRollManager.deletePhotos(photos);
      }
    }, {
      key: "saveToCameraRoll",
      value: function saveToCameraRoll(tag, type) {
        invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');
        invariant(type === 'photo' || type === 'video' || type === undefined, "The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed " + (type || 'unknown'));
        var mediaType = 'photo';

        if (type) {
          mediaType = type;
        } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
          mediaType = 'video';
        }

        return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
      }
    }, {
      key: "getPhotos",
      value: function getPhotos(params) {
        if (arguments.length > 1) {
          console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
          var successCallback = arguments[1];

          var errorCallback = arguments[2] || function () {};

          RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
        }

        return RCTCameraRollManager.getPhotos(params);
      }
    }]);

    return CameraRoll;
  }();

  CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
  CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;
  module.exports = CameraRoll;
},312,[19,20,60,5,173,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Clipboard = _$$_REQUIRE(_dependencyMap[0]).Clipboard;

  module.exports = {
    getString: function getString() {
      return Clipboard.getString();
    },
    setString: function setString(content) {
      Clipboard.setString(content);
    }
  };
},313,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var DatePickerModule = _$$_REQUIRE(_dependencyMap[3]).DatePickerAndroid;

  function _toMillis(options, key) {
    var dateVal = options[key];

    if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
      options[key] = dateVal.getTime();
    }
  }

  var DatePickerAndroid = function () {
    function DatePickerAndroid() {
      _classCallCheck(this, DatePickerAndroid);
    }

    _createClass(DatePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        var optionsMs;
        return _regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                optionsMs = options;

                if (optionsMs) {
                  _toMillis(options, 'date');

                  _toMillis(options, 'minDate');

                  _toMillis(options, 'maxDate');
                }

                return _context.abrupt("return", DatePickerModule.open(options));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }, {
      key: "dateSetAction",
      get: function get() {
        return 'dateSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return DatePickerAndroid;
  }();

  module.exports = DatePickerAndroid;
},314,[129,19,20,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var RCTImagePicker = _$$_REQUIRE(_dependencyMap[1]).ImagePickerIOS;

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      return RCTImagePicker.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      return RCTImagePicker.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      config = _objectSpread({
        videoMode: false
      }, config);
      return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      config = _objectSpread({
        showImages: true,
        showVideos: false
      }, config);
      return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},315,[43,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[5]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[6]);

  var Platform = _$$_REQUIRE(_dependencyMap[7]);

  var invariant = _$$_REQUIRE(_dependencyMap[8]);

  var LinkingManager = NativeModules.IntentAndroid;

  var Linking = function (_NativeEventEmitter) {
    _inherits(Linking, _NativeEventEmitter);

    function Linking() {
      _classCallCheck(this, Linking);

      return _possibleConstructorReturn(this, _getPrototypeOf(Linking).call(this, LinkingManager));
    }

    _createClass(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return LinkingManager.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return LinkingManager.canOpenURL(url);
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return LinkingManager.getInitialURL();
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        invariant(url, 'Invalid URL: cannot be empty');
      }
    }]);

    return Linking;
  }(NativeEventEmitter);

  module.exports = new Linking();
},316,[19,20,27,30,33,111,5,41,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Map = _$$_REQUIRE(_dependencyMap[0]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

  var Platform = _$$_REQUIRE(_dependencyMap[3]);

  var RCTNetInfo = NativeModules.NetInfo;
  var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);
  var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

  var _subscriptions = new Map();

  var _isConnectedDeprecated;

  {
    _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
      return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
    };
  }

  function _isConnected(connection) {
    return connection.type !== 'none' && connection.type !== 'unknown';
  }

  var _isConnectedSubscriptions = new Map();

  var NetInfo = {
    addEventListener: function addEventListener(eventName, handler) {
      var listener;

      if (eventName === 'connectionChange') {
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler({
            type: appStateData.connectionType,
            effectiveType: appStateData.effectiveConnectionType
          });
        });
      } else if (eventName === 'change') {
        console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler(appStateData.network_info);
        });
      } else {
        console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
        return {
          remove: function remove() {}
        };
      }

      _subscriptions.set(handler, listener);

      return {
        remove: function remove() {
          return NetInfo.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    fetch: function fetch() {
      console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return resp.network_info;
      });
    },
    getConnectionInfo: function getConnectionInfo() {
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return {
          type: resp.connectionType,
          effectiveType: resp.effectiveConnectionType
        };
      });
    },
    isConnected: {
      addEventListener: function addEventListener(eventName, handler) {
        var listener = function listener(connection) {
          if (eventName === 'change') {
            handler(_isConnectedDeprecated(connection));
          } else if (eventName === 'connectionChange') {
            handler(_isConnected(connection));
          }
        };

        _isConnectedSubscriptions.set(handler, listener);

        NetInfo.addEventListener(eventName, listener);
        return {
          remove: function remove() {
            return NetInfo.isConnected.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        var listener = _isConnectedSubscriptions.get(handler);

        NetInfo.removeEventListener(eventName, listener);

        _isConnectedSubscriptions.delete(handler);
      },
      fetch: function fetch() {
        return NetInfo.getConnectionInfo().then(_isConnected);
      }
    },
    isConnectionExpensive: function isConnectionExpensive() {
      return RCTNetInfo.isConnectionMetered();
    }
  };
  module.exports = NetInfo;
},317,[82,111,5,41]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var RCTPushNotificationManager = _$$_REQUIRE(_dependencyMap[3]).PushNotificationManager;

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

  var PushNotificationIOS = function () {
    _createClass(PushNotificationIOS, null, [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        RCTPushNotificationManager.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        RCTPushNotificationManager.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        RCTPushNotificationManager.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        RCTPushNotificationManager.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        RCTPushNotificationManager.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        RCTPushNotificationManager.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        RCTPushNotificationManager.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {};

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        } else {
          requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
          };
        }

        return RCTPushNotificationManager.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        RCTPushNotificationManager.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        RCTPushNotificationManager.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);

    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      _classCallCheck(this, PushNotificationIOS);

      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
            _this._threadID = notifVal['thread-id'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    _createClass(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;
        RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }]);

    return PushNotificationIOS;
  }();

  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  module.exports = PushNotificationIOS;
},318,[19,20,111,5,3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Settings = {
    get: function get(key) {
      console.warn('Settings is not yet supported on Android');
      return null;
    },
    set: function set(settings) {
      console.warn('Settings is not yet supported on Android');
    },
    watchKeys: function watchKeys(keys, callback) {
      console.warn('Settings is not yet supported on Android');
      return -1;
    },
    clearWatch: function clearWatch(watchId) {
      console.warn('Settings is not yet supported on Android');
    }
  };
  module.exports = Settings;
},319,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var Platform = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var processColor = _$$_REQUIRE(_dependencyMap[5]);

  var _require = _$$_REQUIRE(_dependencyMap[6]),
      ActionSheetManager = _require.ActionSheetManager,
      ShareModule = _require.ShareModule;

  var Share = function () {
    function Share() {
      _classCallCheck(this, Share);
    }

    _createClass(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        {
          invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
          return ShareModule.share(content, options.dialogTitle);
        }
      }
    }, {
      key: "sharedAction",
      get: function get() {
        return 'sharedAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return Share;
  }();

  module.exports = Share;
},320,[43,19,20,41,3,68,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = new NativeEventEmitter('StatusBarManager');
},321,[111]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var TimePickerModule = _$$_REQUIRE(_dependencyMap[3]).TimePickerAndroid;

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      _classCallCheck(this, TimePickerAndroid);
    }

    _createClass(TimePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        return _regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", TimePickerModule.open(options));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }, {
      key: "timeSetAction",
      get: function get() {
        return 'timeSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return TimePickerAndroid;
  }();

  module.exports = TimePickerAndroid;
},322,[129,19,20,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = _$$_REQUIRE(_dependencyMap[0]).Vibration;

  var Platform = _$$_REQUIRE(_dependencyMap[1]);

  var _vibrating = false;
  var _id = 0;

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    RCTVibration.vibrate();

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      {
        if (typeof pattern === 'number') {
          RCTVibration.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      {
        RCTVibration.cancel();
      }
    }
  };
  module.exports = Vibration;
},323,[5,41]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var warning = _$$_REQUIRE(_dependencyMap[0]);

  var VibrationIOS = {
    vibrate: function vibrate() {
      warning('VibrationIOS is not supported on this platform!');
    }
  };
  module.exports = VibrationIOS;
},324,[103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var YellowBox;
  {
    YellowBox = function (_React$Component2) {
      _inherits(YellowBox, _React$Component2);

      function YellowBox() {
        _classCallCheck(this, YellowBox);

        return _possibleConstructorReturn(this, _getPrototypeOf(YellowBox).apply(this, arguments));
      }

      _createClass(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {}
      }, {
        key: "install",
        value: function install() {}
      }, {
        key: "uninstall",
        value: function uninstall() {}
      }]);

      return YellowBox;
    }(React.Component);
  }
  module.exports = YellowBox;
},325,[19,20,27,30,33,45]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ReactNative = _$$_REQUIRE(_dependencyMap[0]);

  var UIManager = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = function takeSnapshot(view, options) {
    if (typeof view !== 'number' && view !== 'window') {
      view = ReactNative.findNodeHandle(view) || 'window';
    }

    return UIManager.__takeSnapshot(view, options);
  };
},326,[77,40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var PointPropType = PropTypes.shape({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},327,[60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _navigation = _$$_REQUIRE(_dependencyMap[8]);

  var _notifications = _$$_REQUIRE(_dependencyMap[9]);

  var _background = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var App = function (_React$Component) {
    (0, _inherits2.default)(App, _React$Component);

    function App() {
      (0, _classCallCheck2.default)(this, App);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(App).apply(this, arguments));
    }

    (0, _createClass2.default)(App, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        (0, _notifications.initializeNotifications)();
        (0, _background.default)();
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(_navigation.NavContainer, {
          uriPrefix: _navigation.prefix
        });
      }
    }]);
    return App;
  }(_react.default.Component);

  exports.default = App;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      alignItems: 'center',
      justifyContent: 'center'
    }
  });
},328,[1,19,20,27,30,33,46,2,329,916,924]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavContainer = exports.prefix = exports.AppNav = exports.AuthNav = undefined;

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[2]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _AuthLoadingScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _DonateScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _DonateSuccessScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LoginScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _RegisterWebScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _NewsDetailScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _NewsScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _ActionScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _ProfileScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _PrivacyPolicyScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _VersionScreen = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _reactNativeIonicons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var NewsNav = (0, _reactNavigation.createStackNavigator)({
    NewsHome: _NewsScreen.default,
    NewsDetail: {
      screen: _NewsDetailScreen.default,
      path: 'news/:id'
    }
  }, {
    initialRouteName: 'NewsHome'
  });
  var ActionNav = (0, _reactNavigation.createStackNavigator)({
    ActionHome: _ActionScreen.default
  });
  var DonateNav = (0, _reactNavigation.createStackNavigator)({
    DonateHome: {
      screen: _DonateScreen.default,
      path: 'donate'
    },
    DonateSuccess: _DonateSuccessScreen.default
  });
  var ProfileNav = (0, _reactNavigation.createStackNavigator)({
    ProfileHome: _ProfileScreen.default,
    Register: _RegisterWebScreen.default,
    Privacy: _PrivacyPolicyScreen.default,
    Version: _VersionScreen.default
  });
  var MainNav = (0, _reactNavigation.createBottomTabNavigator)({
    News: {
      screen: NewsNav
    },
    Action: {
      screen: ActionNav
    },
    Donate: {
      screen: DonateNav
    },
    Profile: {
      screen: ProfileNav
    }
  }, {
    defaultNavigationOptions: function defaultNavigationOptions(_ref) {
      var navigation = _ref.navigation;
      return {
        tabBarIcon: function tabBarIcon(_ref2) {
          var focused = _ref2.focused,
              horizontal = _ref2.horizontal,
              tintColor = _ref2.tintColor;
          var routeName = navigation.state.routeName;
          var iconName = "md-options";

          if (routeName === "News") {
            iconName = "md-paper";
          } else if (routeName === "Action") {
            iconName = "md-pulse";
          } else if (routeName === "Donate") {
            iconName = "md-cash";
          } else if (routeName === "Profile") {
            iconName = "md-person";
          }

          return _react.default.createElement(_reactNativeIonicons.default, {
            name: iconName,
            size: horizontal ? 20 : 25,
            color: tintColor
          });
        }
      };
    }
  });
  var AuthNav = (0, _reactNavigation.createStackNavigator)({
    Login: {
      screen: _LoginScreen.default,
      navigationOptions: {
        header: null
      }
    },
    Register: _RegisterWebScreen.default
  });
  exports.AuthNav = AuthNav;
  var AppNav = (0, _reactNavigation.createSwitchNavigator)({
    AuthLoading: _AuthLoadingScreen.default,
    App: {
      screen: MainNav,
      path: ''
    },
    Auth: AuthNav,
    Profile: ProfileNav
  }, {
    initialRouteName: "AuthLoading"
  });
  exports.AppNav = AppNav;
  var prefix = _reactNative.Platform.OS === 'android' ? 'fsf://fsf/' : 'fsf://';
  exports.prefix = prefix;
  var NavContainer = (0, _reactNavigation.createAppContainer)(AppNav);
  exports.NavContainer = NavContainer;
},329,[1,46,330,2,468,470,862,863,865,866,911,914,915,919,920,921]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get createAppContainer() {
      return _$$_REQUIRE(_dependencyMap[0]).createAppContainer;
    },

    get createNavigationContainer() {
      console.warn('`createNavigationContainer()` has been deprecated, please use `createAppContainer()` instead. You can also import createAppContainer directly from @react-navigation/native');
      return _$$_REQUIRE(_dependencyMap[0]).createAppContainer;
    },

    get createKeyboardAwareNavigator() {
      return _$$_REQUIRE(_dependencyMap[0]).createKeyboardAwareNavigator;
    },

    get createNavigationAwareScrollable() {
      return _$$_REQUIRE(_dependencyMap[0]).createNavigationAwareScrollable;
    },

    get ScrollView() {
      return _$$_REQUIRE(_dependencyMap[0]).ScrollView;
    },

    get FlatList() {
      return _$$_REQUIRE(_dependencyMap[0]).FlatList;
    },

    get SectionList() {
      return _$$_REQUIRE(_dependencyMap[0]).SectionList;
    },

    get ResourceSavingSceneView() {
      return _$$_REQUIRE(_dependencyMap[0]).ResourceSavingSceneView;
    },

    get SafeAreaView() {
      return _$$_REQUIRE(_dependencyMap[0]).SafeAreaView;
    },

    get withOrientation() {
      return _$$_REQUIRE(_dependencyMap[0]).withOrientation;
    },

    get createNavigator() {
      return _$$_REQUIRE(_dependencyMap[1]).createNavigator;
    },

    get StateUtils() {
      return _$$_REQUIRE(_dependencyMap[1]).StateUtils;
    },

    get getNavigation() {
      return _$$_REQUIRE(_dependencyMap[1]).getNavigation;
    },

    get NavigationContext() {
      return _$$_REQUIRE(_dependencyMap[1]).NavigationContext;
    },

    get NavigationProvider() {
      return _$$_REQUIRE(_dependencyMap[1]).NavigationProvider;
    },

    get NavigationConsumer() {
      return _$$_REQUIRE(_dependencyMap[1]).NavigationConsumer;
    },

    get NavigationActions() {
      return _$$_REQUIRE(_dependencyMap[1]).NavigationActions;
    },

    get StackActions() {
      return _$$_REQUIRE(_dependencyMap[1]).StackActions;
    },

    get StackRouter() {
      return _$$_REQUIRE(_dependencyMap[1]).StackRouter;
    },

    get TabRouter() {
      return _$$_REQUIRE(_dependencyMap[1]).TabRouter;
    },

    get SwitchRouter() {
      return _$$_REQUIRE(_dependencyMap[1]).SwitchRouter;
    },

    get createConfigGetter() {
      return _$$_REQUIRE(_dependencyMap[1]).StackAcreateConfigGetterctions;
    },

    get getScreenForRouteName() {
      return _$$_REQUIRE(_dependencyMap[1]).getScreenForRouteName;
    },

    get validateRouteConfigMap() {
      return _$$_REQUIRE(_dependencyMap[1]).validateRouteConfigMap;
    },

    get getActiveChildNavigationOptions() {
      return _$$_REQUIRE(_dependencyMap[1]).getActiveChildNavigationOptions;
    },

    get pathUtils() {
      return _$$_REQUIRE(_dependencyMap[1]).pathUtils;
    },

    get SceneView() {
      return _$$_REQUIRE(_dependencyMap[1]).SceneView;
    },

    get SwitchView() {
      return _$$_REQUIRE(_dependencyMap[1]).SwitchView;
    },

    get NavigationEvents() {
      return _$$_REQUIRE(_dependencyMap[1]).NavigationEvents;
    },

    get withNavigation() {
      return _$$_REQUIRE(_dependencyMap[1]).withNavigation;
    },

    get withNavigationFocus() {
      return _$$_REQUIRE(_dependencyMap[1]).withNavigationFocus;
    },

    get createStackNavigator() {
      return _$$_REQUIRE(_dependencyMap[2]).createStackNavigator;
    },

    get createSwitchNavigator() {
      return _$$_REQUIRE(_dependencyMap[1]).createSwitchNavigator;
    },

    get createBottomTabNavigator() {
      return _$$_REQUIRE(_dependencyMap[3]).createBottomTabNavigator;
    },

    get createMaterialTopTabNavigator() {
      return _$$_REQUIRE(_dependencyMap[3]).createMaterialTopTabNavigator;
    },

    get createDrawerNavigator() {
      return _$$_REQUIRE(_dependencyMap[4]).createDrawerNavigator;
    },

    get DrawerRouter() {
      return _$$_REQUIRE(_dependencyMap[4]).DrawerRouter;
    },

    get DrawerActions() {
      return _$$_REQUIRE(_dependencyMap[4]).DrawerActions;
    },

    get Transitioner() {
      console.warn('Importing the stack Transitioner directly from react-navigation is now deprecated. Instead, import { Transitioner } from "react-navigation-stack";');
      return _$$_REQUIRE(_dependencyMap[2]).Transitioner;
    },

    get StackView() {
      return _$$_REQUIRE(_dependencyMap[2]).StackView;
    },

    get StackViewCard() {
      return _$$_REQUIRE(_dependencyMap[2]).StackViewCard;
    },

    get StackViewTransitionConfigs() {
      return _$$_REQUIRE(_dependencyMap[2]).StackViewTransitionConfigs;
    },

    get Header() {
      return _$$_REQUIRE(_dependencyMap[2]).Header;
    },

    get HeaderTitle() {
      return _$$_REQUIRE(_dependencyMap[2]).HeaderTitle;
    },

    get HeaderBackButton() {
      return _$$_REQUIRE(_dependencyMap[2]).HeaderBackButton;
    },

    get HeaderStyleInterpolator() {
      return _$$_REQUIRE(_dependencyMap[2]).HeaderStyleInterpolator;
    },

    get DrawerView() {
      return _$$_REQUIRE(_dependencyMap[4]).DrawerView;
    },

    get DrawerItems() {
      return _$$_REQUIRE(_dependencyMap[4]).DrawerNavigatorItems;
    },

    get DrawerSidebar() {
      return _$$_REQUIRE(_dependencyMap[4]).DrawerSidebar;
    },

    get BottomTabBar() {
      return _$$_REQUIRE(_dependencyMap[3]).BottomTabBar;
    },

    get MaterialTopTabBar() {
      return _$$_REQUIRE(_dependencyMap[3]).MaterialTopTabBar;
    }

  };
},330,[331,334,410,436,456]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get createAppContainer() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    },

    get createKeyboardAwareNavigator() {
      return _$$_REQUIRE(_dependencyMap[1]).default;
    },

    get createNavigationAwareScrollable() {
      return _$$_REQUIRE(_dependencyMap[2]).default;
    },

    get withOrientation() {
      return _$$_REQUIRE(_dependencyMap[3]).default;
    },

    get ResourceSavingSceneView() {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    },

    get SafeAreaView() {
      return _$$_REQUIRE(_dependencyMap[5]).default;
    },

    get ScrollView() {
      return _$$_REQUIRE(_dependencyMap[6]).ScrollView;
    },

    get FlatList() {
      return _$$_REQUIRE(_dependencyMap[6]).FlatList;
    },

    get SectionList() {
      return _$$_REQUIRE(_dependencyMap[6]).SectionList;
    }

  };
},331,[332,380,381,385,386,387,390]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._TESTING_ONLY_reset_container_count = _TESTING_ONLY_reset_container_count;
  exports.default = createNavigationContainer;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[11]);

  var _core = _$$_REQUIRE(_dependencyMap[12]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _docsUrl = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var urlToPathAndParams = _core.pathUtils.urlToPathAndParams;

  function isStateful(props) {
    return !props.navigation;
  }

  function validateProps(props) {
    if (isStateful(props)) {
      return;
    }

    var navigation = props.navigation,
        screenProps = props.screenProps,
        containerProps = (0, _objectWithoutProperties2.default)(props, ["navigation", "screenProps"]);
    var keys = Object.keys(containerProps);

    if (keys.length !== 0) {
      throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
    }
  }

  var _statefulContainerCount = 0;

  function _TESTING_ONLY_reset_container_count() {
    _statefulContainerCount = 0;
  }

  var _reactNavigationIsHydratingState = false;

  function createNavigationContainer(Component) {
    var NavigationContainer = function (_React$Component) {
      (0, _inherits2.default)(NavigationContainer, _React$Component);
      (0, _createClass2.default)(NavigationContainer, null, [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          validateProps(nextProps);
          return null;
        }
      }]);

      function NavigationContainer(props) {
        var _this;

        (0, _classCallCheck2.default)(this, NavigationContainer);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NavigationContainer).call(this, props));
        _this.subs = null;
        _this._actionEventSubscribers = new Set();

        _this._handleOpenURL = function (_ref) {
          var url = _ref.url;
          var _this$props = _this.props,
              enableURLHandling = _this$props.enableURLHandling,
              uriPrefix = _this$props.uriPrefix;

          if (enableURLHandling === false) {
            return;
          }

          var parsedUrl = urlToPathAndParams(url, uriPrefix);

          if (parsedUrl) {
            var path = parsedUrl.path,
                params = parsedUrl.params;
            var action = Component.router.getActionForPathAndParams(path, params);

            if (action) {
              _this.dispatch(action);
            }
          }
        };

        _this._persistNavigationState = function _callee(nav) {
          var persistenceKey;
          return _regenerator.default.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  persistenceKey = _this.props.persistenceKey;

                  if (persistenceKey) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  _context.next = 5;
                  return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem(persistenceKey, JSON.stringify(nav)));

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          });
        };

        _this.dispatch = function (action) {
          if (_this.props.navigation) {
            return _this.props.navigation.dispatch(action);
          }

          _this._navState = _this._navState || _this.state.nav;
          var lastNavState = _this._navState;
          (0, _invariant.default)(lastNavState, 'should be set in constructor if stateful');
          var reducedState = Component.router.getStateForAction(action, lastNavState);
          var navState = reducedState === null ? lastNavState : reducedState;

          var dispatchActionEvents = function dispatchActionEvents() {
            _this._actionEventSubscribers.forEach(function (subscriber) {
              return subscriber({
                type: 'action',
                action: action,
                state: navState,
                lastState: lastNavState
              });
            });
          };

          if (reducedState === null) {
            dispatchActionEvents();
            return true;
          }

          if (navState !== lastNavState) {
            _this._navState = navState;

            _this.setState({
              nav: navState
            }, function () {
              _this._onNavigationStateChange(lastNavState, navState, action);

              dispatchActionEvents();

              _this._persistNavigationState(navState);
            });

            return true;
          }

          dispatchActionEvents();
          return false;
        };

        _this._getScreenProps = function () {
          return _this.props.screenProps;
        };

        validateProps(props);
        _this._initialAction = _core.NavigationActions.init();

        if (_this._isStateful()) {
          _this.subs = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {
            if (!_this._isMounted) {
              _this.subs && _this.subs.remove();
            } else {
              return _this.dispatch(_core.NavigationActions.back());
            }
          });
        }

        _this.state = {
          nav: _this._isStateful() && !props.persistenceKey ? Component.router.getStateForAction(_this._initialAction) : null
        };
        return _this;
      }

      (0, _createClass2.default)(NavigationContainer, [{
        key: "_renderLoading",
        value: function _renderLoading() {
          return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;
        }
      }, {
        key: "_isStateful",
        value: function _isStateful() {
          return isStateful(this.props);
        }
      }, {
        key: "_validateProps",
        value: function _validateProps(props) {
          if (this._isStateful()) {
            return;
          }

          var navigation = props.navigation,
              screenProps = props.screenProps,
              containerProps = (0, _objectWithoutProperties2.default)(props, ["navigation", "screenProps"]);
          var keys = Object.keys(containerProps);

          if (keys.length !== 0) {
            throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
          }
        }
      }, {
        key: "_onNavigationStateChange",
        value: function _onNavigationStateChange(prevNav, nav, action) {
          if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {
            if (console.group) {
              console.group('Navigation Dispatch: ');
              console.log('Action: ', action);
              console.log('New State: ', nav);
              console.log('Last State: ', prevNav);
              console.groupEnd();
            } else {
              console.log('Navigation Dispatch: ', {
                action: action,
                newState: nav,
                lastState: prevNav
              });
            }

            return;
          }

          if (typeof this.props.onNavigationStateChange === 'function') {
            this.props.onNavigationStateChange(prevNav, nav, action);
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this._navState === this.state.nav) {
            this._navState = null;
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          var _this$props2, persistenceKey, uriPrefix, enableURLHandling, parsedUrl, startupStateJSON, _url, action, startupState, _parsedUrl, path, params, urlAction, dispatchActions;

          return _regenerator.default.async(function componentDidMount$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this._isMounted = true;

                  if (this._isStateful()) {
                    _context2.next = 3;
                    break;
                  }

                  return _context2.abrupt("return");

                case 3:
                  _statefulContainerCount++;

                  _reactNative.Linking.addEventListener('url', this._handleOpenURL);

                  _this$props2 = this.props, persistenceKey = _this$props2.persistenceKey, uriPrefix = _this$props2.uriPrefix, enableURLHandling = _this$props2.enableURLHandling;
                  parsedUrl = null;
                  startupStateJSON = null;

                  if (!(enableURLHandling !== false)) {
                    _context2.next = 20;
                    break;
                  }

                  _context2.t0 = persistenceKey;

                  if (!_context2.t0) {
                    _context2.next = 15;
                    break;
                  }

                  _context2.next = 14;
                  return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem(persistenceKey));

                case 14:
                  _context2.t0 = _context2.sent;

                case 15:
                  startupStateJSON = _context2.t0;
                  _context2.next = 18;
                  return _regenerator.default.awrap(_reactNative.Linking.getInitialURL());

                case 18:
                  _url = _context2.sent;
                  parsedUrl = _url && urlToPathAndParams(_url, uriPrefix);

                case 20:
                  action = this._initialAction;
                  startupState = this.state.nav;

                  if (!startupState) {
                    !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');
                    startupState = Component.router.getStateForAction(action);
                  }

                  if (startupStateJSON) {
                    try {
                      startupState = JSON.parse(startupStateJSON);
                      _reactNavigationIsHydratingState = true;
                    } catch (e) {}
                  }

                  if (parsedUrl) {
                    _parsedUrl = parsedUrl, path = _parsedUrl.path, params = _parsedUrl.params;
                    urlAction = Component.router.getActionForPathAndParams(path, params);

                    if (urlAction) {
                      !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', url);
                      action = urlAction;
                      startupState = Component.router.getStateForAction(urlAction, startupState);
                    }
                  }

                  dispatchActions = function dispatchActions() {
                    return _this2._actionEventSubscribers.forEach(function (subscriber) {
                      return subscriber({
                        type: 'action',
                        action: action,
                        state: _this2.state.nav,
                        lastState: null
                      });
                    });
                  };

                  if (!(startupState === this.state.nav)) {
                    _context2.next = 29;
                    break;
                  }

                  dispatchActions();
                  return _context2.abrupt("return");

                case 29:
                  this.setState({
                    nav: startupState
                  }, function () {
                    _reactNavigationIsHydratingState = false;
                    dispatchActions();
                  });

                case 30:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "componentDidCatch",
        value: function componentDidCatch(e, errorInfo) {
          if (_reactNavigationIsHydratingState) {
            _reactNavigationIsHydratingState = false;
            console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state..');
            this.dispatch(_core.NavigationActions.init());
          } else {
            throw e;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._isMounted = false;

          _reactNative.Linking.removeEventListener('url', this._handleOpenURL);

          this.subs && this.subs.remove();

          if (this._isStateful()) {
            _statefulContainerCount--;
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var navigation = this.props.navigation;

          if (this._isStateful()) {
            var navState = this.state.nav;

            if (!navState) {
              return this._renderLoading();
            }

            if (!this._navigation || this._navigation.state !== navState) {
              this._navigation = (0, _core.getNavigation)(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {
                return _this3._navigation;
              });
            }

            navigation = this._navigation;
          }

          (0, _invariant.default)(navigation, 'failed to get navigation');
          return _react.default.createElement(_core.NavigationProvider, {
            value: navigation
          }, _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {
            navigation: navigation
          })));
        }
      }]);
      return NavigationContainer;
    }(_react.default.Component);

    NavigationContainer.router = Component.router;
    NavigationContainer.navigationOptions = null;
    return (0, _reactLifecyclesCompat.polyfill)(NavigationContainer);
  }
},332,[1,8,129,19,27,30,20,33,6,46,2,333,334,378,379]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillReceiveProps(nextProps) {
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
      return state !== null && state !== undefined ? state : null;
    }

    this.setState(updater.bind(this));
  }

  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }

  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  function polyfill(Component) {
    var prototype = Component.prototype;

    if (!prototype || !prototype.isReactComponent) {
      throw new Error('Can only polyfill class components');
    }

    if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {
      return Component;
    }

    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;

    if (typeof prototype.componentWillMount === 'function') {
      foundWillMountName = 'componentWillMount';
    } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
      foundWillMountName = 'UNSAFE_componentWillMount';
    }

    if (typeof prototype.componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'componentWillReceiveProps';
    } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
    }

    if (typeof prototype.componentWillUpdate === 'function') {
      foundWillUpdateName = 'componentWillUpdate';
    } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
      foundWillUpdateName = 'UNSAFE_componentWillUpdate';
    }

    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
      var componentName = Component.displayName || Component.name;
      var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
      throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      prototype.componentWillMount = componentWillMount;
      prototype.componentWillReceiveProps = componentWillReceiveProps;
    }

    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
      if (typeof prototype.componentDidUpdate !== 'function') {
        throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
      }

      prototype.componentWillUpdate = componentWillUpdate;
      var componentDidUpdate = prototype.componentDidUpdate;

      prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
        var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
        componentDidUpdate.call(this, prevProps, prevState, snapshot);
      };
    }

    return Component;
  }

  exports.polyfill = polyfill;
},333,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get StateUtils() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    },

    get getNavigation() {
      return _$$_REQUIRE(_dependencyMap[1]).default;
    },

    get createNavigator() {
      return _$$_REQUIRE(_dependencyMap[2]).default;
    },

    get NavigationContext() {
      return _$$_REQUIRE(_dependencyMap[3]).default;
    },

    get NavigationProvider() {
      return _$$_REQUIRE(_dependencyMap[3]).default.Provider;
    },

    get NavigationConsumer() {
      return _$$_REQUIRE(_dependencyMap[3]).default.Consumer;
    },

    get createSwitchNavigator() {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    },

    get NavigationActions() {
      return _$$_REQUIRE(_dependencyMap[5]).default;
    },

    get StackActions() {
      return _$$_REQUIRE(_dependencyMap[6]).default;
    },

    get StackRouter() {
      return _$$_REQUIRE(_dependencyMap[7]).default;
    },

    get TabRouter() {
      return _$$_REQUIRE(_dependencyMap[8]).default;
    },

    get SwitchRouter() {
      return _$$_REQUIRE(_dependencyMap[9]).default;
    },

    get createConfigGetter() {
      return _$$_REQUIRE(_dependencyMap[10]).default;
    },

    get getScreenForRouteName() {
      return _$$_REQUIRE(_dependencyMap[11]).default;
    },

    get validateRouteConfigMap() {
      return _$$_REQUIRE(_dependencyMap[12]).default;
    },

    get getActiveChildNavigationOptions() {
      return _$$_REQUIRE(_dependencyMap[13]).default;
    },

    get pathUtils() {
      return _$$_REQUIRE(_dependencyMap[14]);
    },

    get SceneView() {
      return _$$_REQUIRE(_dependencyMap[15]).default;
    },

    get SwitchView() {
      return _$$_REQUIRE(_dependencyMap[16]).default;
    },

    get NavigationEvents() {
      return _$$_REQUIRE(_dependencyMap[17]).default;
    },

    get withNavigation() {
      return _$$_REQUIRE(_dependencyMap[18]).default;
    },

    get withNavigationFocus() {
      return _$$_REQUIRE(_dependencyMap[19]).default;
    }

  };
},334,[335,337,344,345,351,339,358,369,371,352,356,353,359,373,360,368,367,374,375,377]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var StateUtils = {
    get: function get(state, key) {
      return state.routes.find(function (route) {
        return route.key === key;
      }) || null;
    },
    indexOf: function indexOf(state, key) {
      return state.routes.findIndex(function (route) {
        return route.key === key;
      });
    },
    has: function has(state, key) {
      return !!state.routes.some(function (route) {
        return route.key === key;
      });
    },
    push: function push(state, route) {
      (0, _invariant.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);
      var routes = state.routes.slice();
      routes.push(route);
      return (0, _objectSpread2.default)({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    pop: function pop(state) {
      if (state.index <= 0) {
        return state;
      }

      var routes = state.routes.slice(0, -1);
      return (0, _objectSpread2.default)({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    jumpToIndex: function jumpToIndex(state, index) {
      if (index === state.index) {
        return state;
      }

      (0, _invariant.default)(!!state.routes[index], 'invalid index %s to jump to', index);
      return (0, _objectSpread2.default)({}, state, {
        index: index
      });
    },
    jumpTo: function jumpTo(state, key) {
      var index = StateUtils.indexOf(state, key);
      return StateUtils.jumpToIndex(state, index);
    },
    back: function back(state) {
      var index = state.index - 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    forward: function forward(state) {
      var index = state.index + 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    replaceAndPrune: function replaceAndPrune(state, key, route) {
      var index = StateUtils.indexOf(state, key);
      var replaced = StateUtils.replaceAtIndex(state, index, route);
      return (0, _objectSpread2.default)({}, replaced, {
        routes: replaced.routes.slice(0, index + 1)
      });
    },
    replaceAt: function replaceAt(state, key, route) {
      var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var index = StateUtils.indexOf(state, key);
      var nextIndex = preserveIndex ? state.index : index;
      var nextState = StateUtils.replaceAtIndex(state, index, route);
      nextState.index = nextIndex;
      return nextState;
    },
    replaceAtIndex: function replaceAtIndex(state, index, route) {
      (0, _invariant.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);

      if (state.routes[index] === route && index === state.index) {
        return state;
      }

      var routes = state.routes.slice();
      routes[index] = route;
      return (0, _objectSpread2.default)({}, state, {
        index: index,
        routes: routes
      });
    },
    reset: function reset(state, routes, index) {
      (0, _invariant.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');
      var nextIndex = index === undefined ? routes.length - 1 : index;

      if (state.routes.length === routes.length && state.index === nextIndex) {
        var compare = function compare(route, ii) {
          return routes[ii] === route;
        };

        if (state.routes.every(compare)) {
          return state;
        }
      }

      (0, _invariant.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);
      return (0, _objectSpread2.default)({}, state, {
        index: nextIndex,
        routes: routes
      });
    }
  };
  var _default = StateUtils;
  exports.default = _default;
},335,[1,43,336]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var validateFormat = function validateFormat() {};

  if (process.env !== 'production') {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},336,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getNavigation;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _getNavigationActionCreators = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getChildNavigation2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getChildrenNavigationCache = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  function getNavigation(router, state, dispatch, actionSubscribers, getScreenProps, getCurrentNavigation) {
    var actions = router.getActionCreators(state, null);
    var navigation = {
      actions: actions,
      router: router,
      state: state,
      dispatch: dispatch,
      getScreenProps: getScreenProps,
      getChildNavigation: function getChildNavigation(childKey) {
        return (0, _getChildNavigation2.default)(navigation, childKey, getCurrentNavigation);
      },
      isFocused: function isFocused(childKey) {
        var _getCurrentNavigation = getCurrentNavigation().state,
            routes = _getCurrentNavigation.routes,
            index = _getCurrentNavigation.index;

        if (childKey == null || routes[index].key === childKey) {
          return true;
        }

        return false;
      },
      addListener: function addListener(eventName, handler) {
        if (eventName !== 'action') {
          return {
            remove: function remove() {}
          };
        }

        actionSubscribers.add(handler);
        return {
          remove: function remove() {
            actionSubscribers.delete(handler);
          }
        };
      },
      dangerouslyGetParent: function dangerouslyGetParent() {
        return null;
      },
      _childrenNavigation: (0, _getChildrenNavigationCache.default)(getCurrentNavigation())
    };
    var actionCreators = (0, _objectSpread2.default)({}, (0, _getNavigationActionCreators.default)(navigation.state), actions);
    Object.keys(actionCreators).forEach(function (actionName) {
      navigation[actionName] = function () {
        return navigation.dispatch(actionCreators[actionName].apply(actionCreators, arguments));
      };
    });
    return navigation;
  }
},337,[1,43,338,340,343]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _NavigationActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var getNavigationActionCreators = function getNavigationActionCreators(route) {
    return {
      goBack: function goBack(key) {
        var actualizedKey = key;

        if (key === undefined && route.key) {
          (0, _invariant.default)(typeof route.key === 'string', 'key should be a string');
          actualizedKey = route.key;
        }

        return _NavigationActions.default.back({
          key: actualizedKey
        });
      },
      navigate: function navigate(navigateTo, params, action) {
        if (typeof navigateTo === 'string') {
          return _NavigationActions.default.navigate({
            routeName: navigateTo,
            params: params,
            action: action
          });
        }

        (0, _invariant.default)(typeof navigateTo === 'object', 'Must navigateTo an object or a string');
        (0, _invariant.default)(params == null, 'Params must not be provided to .navigate() when specifying an object');
        (0, _invariant.default)(action == null, 'Child action must not be provided to .navigate() when specifying an object');
        return _NavigationActions.default.navigate(navigateTo);
      },
      setParams: function setParams(params) {
        (0, _invariant.default)(route.key && typeof route.key === 'string', 'setParams cannot be called by root navigator');
        return _NavigationActions.default.setParams({
          params: params,
          key: route.key
        });
      }
    };
  };

  var _default = getNavigationActionCreators;
  exports.default = _default;
},338,[1,339,336]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var BACK = 'Navigation/BACK';
  var INIT = 'Navigation/INIT';
  var NAVIGATE = 'Navigation/NAVIGATE';
  var SET_PARAMS = 'Navigation/SET_PARAMS';

  var back = function back() {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      type: BACK,
      key: payload.key,
      immediate: payload.immediate
    };
  };

  var init = function init() {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = {
      type: INIT
    };

    if (payload.params) {
      action.params = payload.params;
    }

    return action;
  };

  var navigate = function navigate(payload) {
    var action = {
      type: NAVIGATE,
      routeName: payload.routeName
    };

    if (payload.params) {
      action.params = payload.params;
    }

    if (payload.action) {
      action.action = payload.action;
    }

    if (payload.key) {
      action.key = payload.key;
    }

    return action;
  };

  var setParams = function setParams(payload) {
    return {
      type: SET_PARAMS,
      key: payload.key,
      params: payload.params
    };
  };

  var _default = {
    BACK: BACK,
    INIT: INIT,
    NAVIGATE: NAVIGATE,
    SET_PARAMS: SET_PARAMS,
    back: back,
    init: init,
    navigate: navigate,
    setParams: setParams
  };
  exports.default = _default;
},339,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _getChildEventSubscriber = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getChildRouter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getNavigationActionCreators = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getChildrenNavigationCache = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var createParamGetter = function createParamGetter(route) {
    return function (paramName, defaultValue) {
      var params = route.params;

      if (params && paramName in params) {
        return params[paramName];
      }

      return defaultValue;
    };
  };

  function _getChildNavigation(navigation, childKey, getCurrentParentNavigation) {
    var children = (0, _getChildrenNavigationCache.default)(navigation);
    var childRoute = navigation.state.routes.find(function (r) {
      return r.key === childKey;
    });

    if (!childRoute) {
      return null;
    }

    if (children[childKey] && children[childKey].state === childRoute) {
      return children[childKey];
    }

    var childRouter = (0, _getChildRouter.default)(navigation.router, childRoute.routeName);
    var focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;
    var actionCreators = (0, _objectSpread2.default)({}, navigation.actions, navigation.router.getActionCreators(childRoute, navigation.state.key), childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {}, (0, _getNavigationActionCreators.default)(childRoute));
    var actionHelpers = {};
    Object.keys(actionCreators).forEach(function (actionName) {
      actionHelpers[actionName] = function () {
        var actionCreator = actionCreators[actionName];
        var action = actionCreator.apply(undefined, arguments);
        return navigation.dispatch(action);
      };
    });

    if (children[childKey]) {
      children[childKey] = (0, _objectSpread2.default)({}, children[childKey], actionHelpers, {
        state: childRoute,
        router: childRouter,
        actions: actionCreators,
        getParam: createParamGetter(childRoute)
      });
      return children[childKey];
    } else {
      var childSubscriber = (0, _getChildEventSubscriber.default)(navigation.addListener, childKey);
      children[childKey] = (0, _objectSpread2.default)({}, actionHelpers, {
        state: childRoute,
        router: childRouter,
        actions: actionCreators,
        getParam: createParamGetter(childRoute),
        getChildNavigation: function getChildNavigation(grandChildKey) {
          return _getChildNavigation(children[childKey], grandChildKey, function () {
            var nav = getCurrentParentNavigation();
            return nav && nav.getChildNavigation(childKey);
          });
        },
        isFocused: function isFocused() {
          var currentNavigation = getCurrentParentNavigation();

          if (!currentNavigation) {
            return false;
          }

          var _currentNavigation$st = currentNavigation.state,
              routes = _currentNavigation$st.routes,
              index = _currentNavigation$st.index;

          if (!currentNavigation.isFocused()) {
            return false;
          }

          if (routes[index].key === childKey) {
            return true;
          }

          return false;
        },
        dispatch: navigation.dispatch,
        getScreenProps: navigation.getScreenProps,
        dangerouslyGetParent: getCurrentParentNavigation,
        addListener: childSubscriber.addListener,
        emit: childSubscriber.emit
      });
      return children[childKey];
    }
  }

  var _default = _getChildNavigation;
  exports.default = _default;
},340,[1,43,341,342,338,343]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getChildEventSubscriber;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function getChildEventSubscriber(addListener, key) {
    var initialLastFocusEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'didBlur';
    var actionSubscribers = new Set();
    var willFocusSubscribers = new Set();
    var didFocusSubscribers = new Set();
    var willBlurSubscribers = new Set();
    var didBlurSubscribers = new Set();
    var refocusSubscribers = new Set();

    var removeAll = function removeAll() {
      [actionSubscribers, willFocusSubscribers, didFocusSubscribers, willBlurSubscribers, didBlurSubscribers, refocusSubscribers].forEach(function (set) {
        return set.clear();
      });
      upstreamSubscribers.forEach(function (subs) {
        return subs && subs.remove();
      });
    };

    var getChildSubscribers = function getChildSubscribers(evtName) {
      switch (evtName) {
        case 'action':
          return actionSubscribers;

        case 'willFocus':
          return willFocusSubscribers;

        case 'didFocus':
          return didFocusSubscribers;

        case 'willBlur':
          return willBlurSubscribers;

        case 'didBlur':
          return didBlurSubscribers;

        case 'refocus':
          return refocusSubscribers;

        default:
          return null;
      }
    };

    var _emit = function emit(type, payload) {
      var payloadWithType = (0, _objectSpread2.default)({}, payload, {
        type: type
      });
      var subscribers = getChildSubscribers(type);
      subscribers && subscribers.forEach(function (subs) {
        subs(payloadWithType);
      });
    };

    var lastFocusEvent = initialLastFocusEvent;
    var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'refocus', 'action'];
    var upstreamSubscribers = upstreamEvents.map(function (eventName) {
      return addListener(eventName, function (payload) {
        if (eventName === 'refocus') {
          _emit(eventName, payload);

          return;
        }

        var state = payload.state,
            lastState = payload.lastState,
            action = payload.action;
        var lastRoutes = lastState && lastState.routes;
        var routes = state && state.routes;
        var focusKey = routes && routes[state.index].key;
        var isChildFocused = focusKey === key;
        var lastRoute = lastRoutes && lastRoutes.find(function (route) {
          return route.key === key;
        });
        var newRoute = routes && routes.find(function (route) {
          return route.key === key;
        });
        var childPayload = {
          context: key + ":" + action.type + "_" + (payload.context || 'Root'),
          state: newRoute,
          lastState: lastRoute,
          action: action,
          type: eventName
        };
        var isTransitioning = !!state && state.isTransitioning;
        var previouslylastFocusEvent = lastFocusEvent;

        if (lastFocusEvent === 'didBlur') {
          if (eventName === 'willFocus' && isChildFocused) {
            _emit(lastFocusEvent = 'willFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused) {
            _emit(lastFocusEvent = 'willFocus', childPayload);
          }
        }

        if (lastFocusEvent === 'willFocus') {
          if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {
            _emit(lastFocusEvent = 'didFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused && !isTransitioning) {
            _emit(lastFocusEvent = 'didFocus', childPayload);
          }
        }

        if (lastFocusEvent === 'didFocus') {
          if (!isChildFocused) {
            _emit(lastFocusEvent = 'willBlur', childPayload);
          } else if (eventName === 'willBlur') {
            _emit(lastFocusEvent = 'willBlur', childPayload);
          } else if (eventName === 'action' && previouslylastFocusEvent === 'didFocus') {
            _emit('action', childPayload);
          }
        }

        if (lastFocusEvent === 'willBlur') {
          if (eventName === 'action' && !isChildFocused && !isTransitioning) {
            _emit(lastFocusEvent = 'didBlur', childPayload);
          } else if (eventName === 'didBlur') {
            _emit(lastFocusEvent = 'didBlur', childPayload);
          } else if (eventName === 'action' && isChildFocused && !isTransitioning) {
            _emit(lastFocusEvent = 'didFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused && isTransitioning) {
            _emit(lastFocusEvent = 'willFocus', childPayload);
          }
        }

        if (lastFocusEvent === 'didBlur' && !newRoute) {
          removeAll();
        }
      });
    });
    return {
      addListener: function addListener(eventName, eventHandler) {
        var subscribers = getChildSubscribers(eventName);

        if (!subscribers) {
          throw new Error("Invalid event name \"" + eventName + "\"");
        }

        subscribers.add(eventHandler);

        var remove = function remove() {
          subscribers.delete(eventHandler);
        };

        return {
          remove: remove
        };
      },
      emit: function emit(eventName, payload) {
        if (eventName !== 'refocus') {
          console.error("navigation.emit only supports the 'refocus' event currently.");
          return;
        }

        _emit(eventName, payload);
      }
    };
  }
},341,[1,43]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getChildRouter;

  function getChildRouter(router, routeName) {
    if (router.childRouters && router.childRouters[routeName]) {
      return router.childRouters[routeName];
    }

    var Component = router.getComponentForRouteName(routeName);
    return Component.router;
  }
},342,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getChildrenNavigationCache;

  function getChildrenNavigationCache(navigation) {
    if (!navigation) {
      return {};
    }

    var childrenNavigationCache = navigation._childrenNavigation || (navigation._childrenNavigation = {});
    var childKeys = navigation.state.routes.map(function (route) {
      return route.key;
    });
    Object.keys(childrenNavigationCache).forEach(function (cacheKey) {
      if (!childKeys.includes(cacheKey)) {
        delete childrenNavigationCache[cacheKey];
      }
    });
    return navigation._childrenNavigation;
  }
},343,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[8]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  function createNavigator(NavigatorView, router, navigationConfig) {
    var Navigator = function (_React$Component) {
      (0, _inherits2.default)(Navigator, _React$Component);

      function Navigator() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, Navigator);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Navigator)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          descriptors: {},
          screenProps: _this.props.screenProps
        };
        return _this;
      }

      (0, _createClass2.default)(Navigator, [{
        key: "render",
        value: function render() {
          return _react.default.createElement(NavigatorView, (0, _extends2.default)({}, this.props, {
            screenProps: this.state.screenProps,
            navigation: this.props.navigation,
            navigationConfig: navigationConfig,
            descriptors: this.state.descriptors
          }));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          var prevDescriptors = prevState.descriptors;
          var navigation = nextProps.navigation,
              screenProps = nextProps.screenProps;
          (0, _invariant.default)(navigation != null, 'The navigation prop is missing for this navigator. In react-navigation 3 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html');
          var state = navigation.state;
          var routes = state.routes;

          if (typeof routes === 'undefined') {
            throw new TypeError('No "routes" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');
          }

          var descriptors = {};
          routes.forEach(function (route) {
            if (prevDescriptors && prevDescriptors[route.key] && route === prevDescriptors[route.key].state && screenProps === prevState.screenProps) {
              descriptors[route.key] = prevDescriptors[route.key];
              return;
            }

            var getComponent = router.getComponentForRouteName.bind(null, route.routeName);
            var childNavigation = navigation.getChildNavigation(route.key);
            var options = router.getScreenOptions(childNavigation, screenProps);
            descriptors[route.key] = {
              key: route.key,
              getComponent: getComponent,
              options: options,
              state: route,
              navigation: childNavigation
            };
          });
          return {
            descriptors: descriptors,
            screenProps: screenProps
          };
        }
      }]);
      return Navigator;
    }(_react.default.Component);

    Navigator.router = router;
    Navigator.navigationOptions = navigationConfig.navigationOptions;
    return (0, _reactLifecyclesCompat.polyfill)(Navigator);
  }

  var _default = createNavigator;
  exports.default = _default;
},344,[1,8,19,20,27,30,33,46,333,336]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _createReactContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var NavigationContext = (0, _createReactContext.default)();
  var _default = NavigationContext;
  exports.default = _default;
},345,[1,346]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _react = _$$_REQUIRE(_dependencyMap[0]);

  var _react2 = _interopRequireDefault(_react);

  var _implementation = _$$_REQUIRE(_dependencyMap[1]);

  var _implementation2 = _interopRequireDefault(_implementation);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = _react2.default.createContext || _implementation2.default;
  module.exports = exports['default'];
},346,[46,347]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _react = _$$_REQUIRE(_dependencyMap[0]);

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _$$_REQUIRE(_dependencyMap[1]);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _gud = _$$_REQUIRE(_dependencyMap[2]);

  var _gud2 = _interopRequireDefault(_gud);

  var _warning = _$$_REQUIRE(_dependencyMap[3]);

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var MAX_SIGNED_31_BIT_INT = 1073741823;

  function objectIs(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function createEventEmitter(value) {
    var handlers = [];
    return {
      on: function on(handler) {
        handlers.push(handler);
      },
      off: function off(handler) {
        handlers = handlers.filter(function (h) {
          return h !== handler;
        });
      },
      get: function get() {
        return value;
      },
      set: function set(newValue, changedBits) {
        value = newValue;
        handlers.forEach(function (handler) {
          return handler(value, changedBits);
        });
      }
    };
  }

  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }

  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;

    var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';

    var Provider = function (_Component) {
      _inherits(Provider, _Component);

      function Provider() {
        var _temp, _this, _ret;

        _classCallCheck(this, Provider);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret);
      }

      Provider.prototype.getChildContext = function getChildContext() {
        var _ref;

        return _ref = {}, _ref[contextProp] = this.emitter, _ref;
      };

      Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits = undefined;

          if (objectIs(oldValue, newValue)) {
            changedBits = 0;
          } else {
            changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            changedBits |= 0;

            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };

      Provider.prototype.render = function render() {
        return this.props.children;
      };

      return Provider;
    }(_react.Component);

    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);

    var Consumer = function (_Component2) {
      _inherits(Consumer, _Component2);

      function Consumer() {
        var _temp2, _this2, _ret2;

        _classCallCheck(this, Consumer);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
          value: _this2.getValue()
        }, _this2.onUpdate = function (newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;

          if ((observedBits & changedBits) !== 0) {
            _this2.setState({
              value: _this2.getValue()
            });
          }
        }, _temp2), _possibleConstructorReturn(_this2, _ret2);
      }

      Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;
        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };

      Consumer.prototype.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }

        var observedBits = this.props.observedBits;
        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };

      Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };

      Consumer.prototype.getValue = function getValue() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };

      Consumer.prototype.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };

      return Consumer;
    }(_react.Component);

    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
    return {
      Provider: Provider,
      Consumer: Consumer
    };
  }

  exports.default = createReactContext;
  module.exports = exports['default'];
},347,[46,60,348,349]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var key = '__global_unique_id__';

  module.exports = function () {
    return global[key] = (global[key] || 0) + 1;
  };
},348,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _$$_REQUIRE(_dependencyMap[0]);

  var warning = emptyFunction;
  module.exports = warning;
},349,[350]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},350,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _createNavigator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _SwitchRouter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _SwitchView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function createSwitchNavigator(routeConfigMap) {
    var switchConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var router = (0, _SwitchRouter.default)(routeConfigMap, switchConfig);
    var Navigator = (0, _createNavigator.default)(_SwitchView.default, router, switchConfig);
    return Navigator;
  }

  var _default = createSwitchNavigator;
  exports.default = _default;
},351,[1,344,352,367]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getScreenForRouteName = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createConfigGetter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _NavigationActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _StackActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _validateRouteConfigMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _pathUtils = _$$_REQUIRE(_dependencyMap[9]);

  var defaultActionCreators = function defaultActionCreators() {
    return {};
  };

  function childrenUpdateWithoutSwitchingIndex(actionType) {
    return [_NavigationActions.default.SET_PARAMS, _StackActions.default.COMPLETE_TRANSITION].includes(actionType);
  }

  var _default = function _default(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap.default)(routeConfigs);
    var order = config.order || Object.keys(routeConfigs);
    var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;
    var initialRouteParams = config.initialRouteParams;
    var initialRouteName = config.initialRouteName || order[0];
    var backBehavior = config.backBehavior || 'none';
    var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';
    var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;
    var initialRouteIndex = order.indexOf(initialRouteName);
    var childRouters = {};
    order.forEach(function (routeName) {
      childRouters[routeName] = null;
      var screen = (0, _getScreenForRouteName.default)(routeConfigs, routeName);

      if (screen.router) {
        childRouters[routeName] = screen.router;
      }
    });

    function getParamsForRoute(routeName, params) {
      var routeConfig = routeConfigs[routeName];

      if (routeConfig && routeConfig.params) {
        return (0, _objectSpread2.default)({}, routeConfig.params, params);
      } else {
        return params;
      }
    }

    var _createPathParser = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, config),
        getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,
        _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;

    if (initialRouteIndex === -1) {
      throw new Error("Invalid initialRouteName '" + initialRouteName + "'." + ("Should be one of " + order.map(function (n) {
        return "\"" + n + "\"";
      }).join(', ')));
    }

    function resetChildRoute(routeName) {
      var initialParams = routeName === initialRouteName ? initialRouteParams : undefined;
      var params = getParamsForRoute(routeName, initialParams);
      var childRouter = childRouters[routeName];

      if (childRouter) {
        var childAction = _NavigationActions.default.init();

        return (0, _objectSpread2.default)({}, childRouter.getStateForAction(childAction), {
          key: routeName,
          routeName: routeName,
          params: params
        });
      }

      return {
        key: routeName,
        routeName: routeName,
        params: params
      };
    }

    function getNextState(prevState, possibleNextState) {
      if (!prevState) {
        return possibleNextState;
      }

      var nextState;

      if (prevState.index !== possibleNextState.index && resetOnBlur) {
        var prevRouteName = prevState.routes[prevState.index].routeName;
        var nextRoutes = (0, _toConsumableArray2.default)(possibleNextState.routes);
        nextRoutes[prevState.index] = resetChildRoute(prevRouteName);
        return (0, _objectSpread2.default)({}, possibleNextState, {
          routes: nextRoutes
        });
      } else {
        nextState = possibleNextState;
      }

      return nextState;
    }

    function getInitialState() {
      var routes = order.map(resetChildRoute);
      return {
        routes: routes,
        index: initialRouteIndex,
        isTransitioning: false
      };
    }

    return {
      childRouters: childRouters,
      getActionCreators: function getActionCreators(route, stateKey) {
        return getCustomActionCreators(route, stateKey);
      },
      getStateForAction: function getStateForAction(action, inputState) {
        var prevState = inputState ? (0, _objectSpread2.default)({}, inputState) : inputState;
        var state = inputState || getInitialState();
        var activeChildIndex = state.index;

        if (action.type === _NavigationActions.default.INIT) {
          var params = action.params;

          if (params) {
            state.routes = state.routes.map(function (route) {
              return (0, _objectSpread2.default)({}, route, {
                params: (0, _objectSpread2.default)({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)
              });
            });
          }
        }

        var activeChildLastState = state.routes[state.index];
        var activeChildRouter = childRouters[order[state.index]];

        if (activeChildRouter) {
          var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);

          if (!activeChildState && inputState) {
            return null;
          }

          if (activeChildState && activeChildState !== activeChildLastState) {
            var _routes = (0, _toConsumableArray2.default)(state.routes);

            _routes[state.index] = activeChildState;
            return getNextState(prevState, (0, _objectSpread2.default)({}, state, {
              routes: _routes
            }));
          }
        }

        var isBackEligible = action.key == null || action.key === activeChildLastState.key;

        if (action.type === _NavigationActions.default.BACK) {
          if (isBackEligible && shouldBackNavigateToInitialRoute) {
            activeChildIndex = initialRouteIndex;
          } else {
            return state;
          }
        }

        var didNavigate = false;

        if (action.type === _NavigationActions.default.NAVIGATE) {
          didNavigate = !!order.find(function (childId, i) {
            if (childId === action.routeName) {
              activeChildIndex = i;
              return true;
            }

            return false;
          });

          if (didNavigate) {
            var childState = state.routes[activeChildIndex];
            var childRouter = childRouters[action.routeName];
            var newChildState;

            if (action.action) {
              newChildState = childRouter ? childRouter.getStateForAction(action.action, childState) : null;
            } else if (!action.action && action.params) {
              newChildState = (0, _objectSpread2.default)({}, childState, {
                params: (0, _objectSpread2.default)({}, childState.params || {}, action.params)
              });
            }

            if (newChildState && newChildState !== childState) {
              var _routes2 = (0, _toConsumableArray2.default)(state.routes);

              _routes2[activeChildIndex] = newChildState;
              return getNextState(prevState, (0, _objectSpread2.default)({}, state, {
                routes: _routes2,
                index: activeChildIndex
              }));
            } else if (!newChildState && state.index === activeChildIndex && prevState) {
              return null;
            }
          }
        }

        if (action.type === _NavigationActions.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var _params = (0, _objectSpread2.default)({}, lastRoute.params, action.params);

            var _routes3 = (0, _toConsumableArray2.default)(state.routes);

            _routes3[state.routes.indexOf(lastRoute)] = (0, _objectSpread2.default)({}, lastRoute, {
              params: _params
            });
            return getNextState(prevState, (0, _objectSpread2.default)({}, state, {
              routes: _routes3
            }));
          }
        }

        if (activeChildIndex !== state.index) {
          return getNextState(prevState, (0, _objectSpread2.default)({}, state, {
            index: activeChildIndex
          }));
        } else if (didNavigate && !inputState) {
          return state;
        } else if (didNavigate) {
          return (0, _objectSpread2.default)({}, state);
        }

        var index = state.index;
        var routes = state.routes;
        order.find(function (childId, i) {
          var childRouter = childRouters[childId];

          if (i === index) {
            return false;
          }

          var childState = routes[i];

          if (childRouter) {
            childState = childRouter.getStateForAction(action, childState);
          }

          if (!childState) {
            index = i;
            return true;
          }

          if (childState !== routes[i]) {
            routes = (0, _toConsumableArray2.default)(routes);
            routes[i] = childState;
            index = i;
            return true;
          }

          return false;
        });

        if (childrenUpdateWithoutSwitchingIndex(action.type)) {
          index = state.index;
        }

        if (index !== state.index || routes !== state.routes) {
          return getNextState(prevState, (0, _objectSpread2.default)({}, state, {
            index: index,
            routes: routes
          }));
        }

        return state;
      },
      getComponentForState: function getComponentForState(state) {
        var routeName = state.routes[state.index].routeName;
        (0, _invariant.default)(routeName, "There is no route defined for index " + state.index + ". Check that\n        that you passed in a navigation state with a valid tab/screen index.");
        var childRouter = childRouters[routeName];

        if (childRouter) {
          return childRouter.getComponentForState(state.routes[state.index]);
        }

        return (0, _getScreenForRouteName.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName.default)(routeConfigs, routeName);
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        return getPathAndParamsForRoute(route);
      },
      getActionForPathAndParams: function getActionForPathAndParams(path, params) {
        return _getActionForPathAndParams(path, params);
      },
      getScreenOptions: (0, _createConfigGetter.default)(routeConfigs, config.defaultNavigationOptions)
    };
  };

  exports.default = _default;
},352,[1,15,43,336,353,356,339,358,359,360]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getScreenForRouteName;

  var _reactIs = _$$_REQUIRE(_dependencyMap[1]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function getScreenForRouteName(routeConfigs, routeName) {
    var routeConfig = routeConfigs[routeName];

    if (!routeConfig) {
      throw new Error("There is no route defined for key " + routeName + ".\n" + ("Must be one of: " + Object.keys(routeConfigs).map(function (a) {
        return "'" + a + "'";
      }).join(',')));
    }

    if (routeConfig.screen) {
      return routeConfig.screen;
    }

    if (typeof routeConfig.getScreen === 'function') {
      var screen = routeConfig.getScreen();
      (0, _invariant.default)((0, _reactIs.isValidElementType)(screen), "The getScreen defined for route '" + routeName + " didn't return a valid " + 'screen or navigator.\n\n' + 'Please pass it like this:\n' + (routeName + ": {\n  getScreen: () => require('./MyScreen').default\n}"));
      return screen;
    }

    return routeConfig;
  }
},353,[1,354,336]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},354,[355]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.6.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var b = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      c = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      d = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      e = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      f = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      g = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      h = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      k = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      l = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.async_mode") : 60111,
      m = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      n = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      p = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      r = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      t = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;

  function u(a) {
    if ("object" === typeof a && null !== a) {
      var q = a.$$typeof;

      switch (q) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case h:
                  return a;

                default:
                  return q;
              }

          }

        case d:
          return q;
      }
    }
  }

  function v(a) {
    return u(a) === m;
  }

  exports.typeOf = u;
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Profiler = g;
  exports.Portal = d;
  exports.StrictMode = f;

  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
  };

  exports.isAsyncMode = function (a) {
    return v(a) || u(a) === l;
  };

  exports.isConcurrentMode = v;

  exports.isContextConsumer = function (a) {
    return u(a) === k;
  };

  exports.isContextProvider = function (a) {
    return u(a) === h;
  };

  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };

  exports.isForwardRef = function (a) {
    return u(a) === n;
  };

  exports.isFragment = function (a) {
    return u(a) === e;
  };

  exports.isProfiler = function (a) {
    return u(a) === g;
  };

  exports.isPortal = function (a) {
    return u(a) === d;
  };

  exports.isStrictMode = function (a) {
    return u(a) === f;
  };
},355,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getScreenForRouteName = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _validateScreenOptions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  function applyConfig(configurer, navigationOptions, configProps) {
    if (typeof configurer === 'function') {
      return (0, _objectSpread2.default)({}, navigationOptions, configurer((0, _objectSpread2.default)({}, configProps, {
        navigationOptions: navigationOptions
      })));
    }

    if (typeof configurer === 'object') {
      return (0, _objectSpread2.default)({}, navigationOptions, configurer);
    }

    return navigationOptions;
  }

  var _default = function _default(routeConfigs, navigatorScreenConfig) {
    return function (navigation, screenProps) {
      var state = navigation.state;
      var route = state;
      (0, _invariant.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');
      var Component = (0, _getScreenForRouteName.default)(routeConfigs, route.routeName);
      var routeConfig = routeConfigs[route.routeName];
      var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;
      var componentScreenConfig = Component.navigationOptions;
      var configOptions = {
        navigation: navigation,
        screenProps: screenProps || {}
      };
      var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);
      outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);
      outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);
      (0, _validateScreenOptions.default)(outputConfig, route);
      return outputConfig;
    };
  };

  exports.default = _default;
},356,[1,43,336,353,357]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var deprecatedKeys = ['tabBar'];

  var _default = function _default(screenOptions, route) {
    var keys = Object.keys(screenOptions);
    var deprecatedKey = keys.find(function (key) {
      return deprecatedKeys.includes(key);
    });

    if (typeof screenOptions.title === 'function') {
      throw new Error(["`title` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', '    title: ({ state }) => state...', '}', '', 'with:', '({ navigation }) => ({', '    title: navigation.state...', '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'function') {
      throw new Error(["`" + deprecatedKey + "` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', "    " + deprecatedKey + ": ({ state }) => ({", '         key: state...', '    })', '}', '', 'with:', '({ navigation }) => ({', "    " + deprecatedKey + "Key: navigation.state...", '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'object') {
      throw new Error(["Invalid key `" + deprecatedKey + "` defined in navigation options for `" + route.routeName + "` screen.", '\n', 'Try replacing the following navigation options:', '{', "    " + deprecatedKey + ": {"].concat((0, _toConsumableArray2.default)(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "        " + key + ": ...,";
      })), ['    },', '}', '\n', 'with:', '{'], (0, _toConsumableArray2.default)(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "    " + (deprecatedKey + key[0].toUpperCase() + key.slice(1)) + ": ...,";
      })), ['}']).join('\n'));
    }
  };

  exports.default = _default;
},357,[1,15]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var POP = 'Navigation/POP';
  var POP_TO_TOP = 'Navigation/POP_TO_TOP';
  var PUSH = 'Navigation/PUSH';
  var RESET = 'Navigation/RESET';
  var REPLACE = 'Navigation/REPLACE';
  var COMPLETE_TRANSITION = 'Navigation/COMPLETE_TRANSITION';

  var pop = function pop(payload) {
    return (0, _objectSpread2.default)({
      type: POP
    }, payload);
  };

  var popToTop = function popToTop(payload) {
    return (0, _objectSpread2.default)({
      type: POP_TO_TOP
    }, payload);
  };

  var push = function push(payload) {
    return (0, _objectSpread2.default)({
      type: PUSH
    }, payload);
  };

  var reset = function reset(payload) {
    return (0, _objectSpread2.default)({
      type: RESET
    }, payload);
  };

  var replace = function replace(payload) {
    return (0, _objectSpread2.default)({
      type: REPLACE
    }, payload);
  };

  var completeTransition = function completeTransition(payload) {
    return (0, _objectSpread2.default)({
      type: COMPLETE_TRANSITION
    }, payload);
  };

  var _default = {
    POP: POP,
    POP_TO_TOP: POP_TO_TOP,
    PUSH: PUSH,
    RESET: RESET,
    REPLACE: REPLACE,
    COMPLETE_TRANSITION: COMPLETE_TRANSITION,
    pop: pop,
    popToTop: popToTop,
    push: push,
    reset: reset,
    replace: replace,
    completeTransition: completeTransition
  };
  exports.default = _default;
},358,[1,43]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactIs = _$$_REQUIRE(_dependencyMap[1]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function validateRouteConfigMap(routeConfigs) {
    var routeNames = Object.keys(routeConfigs);
    (0, _invariant.default)(routeNames.length > 0, 'Please specify at least one route when configuring a navigator.');
    routeNames.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];
      var screenComponent = getScreenComponent(routeConfig);

      if (!screenComponent || !(0, _reactIs.isValidElementType)(screenComponent) && !routeConfig.getScreen) {
        throw new Error("The component for route '" + routeName + "' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n" + routeName + ": MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n" + routeName + ": MyNavigator,\n}");
      }

      if (routeConfig.screen && routeConfig.getScreen) {
        throw new Error("Route '" + routeName + "' should declare a screen or a getScreen, not both.");
      }
    });
  }

  function getScreenComponent(routeConfig) {
    if (!routeConfig) {
      return null;
    }

    return routeConfig.screen ? routeConfig.screen : routeConfig;
  }

  var _default = validateRouteConfigMap;
  exports.default = _default;
},359,[1,354,336]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPathParser = exports.urlToPathAndParams = exports.getParamsFromPath = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _pathToRegexp = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var _NavigationActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var queryString = _$$_REQUIRE(_dependencyMap[7]);

  var getParamsFromPath = function getParamsFromPath(inputParams, pathMatch, pathMatchKeys) {
    var params = pathMatch.slice(1).reduce(function (paramsOut, matchResult, i) {
      var key = pathMatchKeys[i];

      if (!key || key.asterisk) {
        return paramsOut;
      }

      var paramName = key.name;
      var decodedMatchResult;

      if (matchResult) {
        try {
          decodedMatchResult = decodeURIComponent(matchResult);
        } catch (e) {}
      }

      paramsOut[paramName] = decodedMatchResult || matchResult;
      return paramsOut;
    }, (0, _objectSpread2.default)({}, inputParams));
    return params;
  };

  exports.getParamsFromPath = getParamsFromPath;

  var getRestOfPath = function getRestOfPath(pathMatch, pathMatchKeys) {
    var rest = pathMatch[pathMatchKeys.findIndex(function (k) {
      return k.asterisk;
    }) + 1];
    return rest;
  };

  var urlToPathAndParams = function urlToPathAndParams(url, uriPrefix) {
    var searchMatch = url.match(/^(.*)\?(.*)$/);
    var params = searchMatch ? queryString.parse(searchMatch[2]) : {};
    var urlWithoutSearch = searchMatch ? searchMatch[1] : url;
    var delimiter = uriPrefix || '://';
    var path = urlWithoutSearch.split(delimiter)[1];

    if (path === undefined) {
      path = urlWithoutSearch;
    }

    if (path === '/') {
      path = '';
    }

    if (path[path.length - 1] === '/') {
      path = path.slice(0, -1);
    }

    return {
      path: path,
      params: params
    };
  };

  exports.urlToPathAndParams = urlToPathAndParams;

  var createPathParser = function createPathParser(childRouters, routeConfigs, _ref) {
    var _ref$paths = _ref.paths,
        pathConfigs = _ref$paths === undefined ? {} : _ref$paths,
        disableRouteNamePaths = _ref.disableRouteNamePaths;
    var pathsByRouteNames = {};
    var paths = [];
    Object.keys(childRouters).forEach(function (routeName) {
      var pathPattern;

      if (pathConfigs[routeName] !== undefined) {
        pathPattern = pathConfigs[routeName];
      } else {
        pathPattern = routeConfigs[routeName].path;
      }

      if (pathPattern === undefined) {
        pathPattern = disableRouteNamePaths ? null : routeName;
      }

      (0, _invariant.default)(pathPattern === null || typeof pathPattern === 'string', "Route path for " + routeName + " must be specified as a string, or null.");
      var isPathMatchable = pathPattern !== null;
      var exactReKeys = [];
      var exactRe = isPathMatchable ? (0, _pathToRegexp.default)(pathPattern, exactReKeys) : null;
      var extendedPathReKeys = [];
      var isWildcard = pathPattern === '' || !isPathMatchable;
      var extendedPathRe = (0, _pathToRegexp.default)(isWildcard ? '*' : pathPattern + "/*", extendedPathReKeys);
      pathsByRouteNames[routeName] = {
        exactRe: exactRe,
        exactReKeys: exactReKeys,
        extendedPathRe: extendedPathRe,
        extendedPathReKeys: extendedPathReKeys,
        isWildcard: isWildcard,
        toPath: pathPattern === null ? function () {
          return '';
        } : (0, _pathToRegexp.compile)(pathPattern)
      };
    });
    paths = Object.entries(pathsByRouteNames);

    var getActionForPathAndParams = function getActionForPathAndParams() {
      var pathToResolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var inputParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref4;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref4 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref4 = _i.value;
        }

        var _ref8 = _ref4;

        var _ref3 = (0, _slicedToArray2.default)(_ref8, 2);

        var _routeName2 = _ref3[0];
        var _path2 = _ref3[1];
        var exactRe = _path2.exactRe,
            exactReKeys = _path2.exactReKeys,
            extendedPathRe = _path2.extendedPathRe,
            extendedPathReKeys = _path2.extendedPathReKeys;
        var childRouter = childRouters[_routeName2];
        var exactMatch = exactRe && exactRe.exec(pathToResolve);

        if (exactMatch && exactMatch.length) {
          var extendedMatch = extendedPathRe && extendedPathRe.exec(pathToResolve);
          var childAction = null;

          if (extendedMatch && childRouter) {
            var restOfPath = getRestOfPath(extendedMatch, extendedPathReKeys);
            childAction = childRouter.getActionForPathAndParams(restOfPath, inputParams);
          }

          return _NavigationActions.default.navigate({
            routeName: _routeName2,
            params: getParamsFromPath(inputParams, exactMatch, exactReKeys),
            action: childAction
          });
        }
      }

      for (var _iterator2 = paths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref7;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref7 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref7 = _i2.value;
        }

        var _ref9 = _ref7;

        var _ref6 = (0, _slicedToArray2.default)(_ref9, 2);

        var _routeName3 = _ref6[0];
        var _path3 = _ref6[1];
        var _extendedPathRe = _path3.extendedPathRe,
            _extendedPathReKeys = _path3.extendedPathReKeys;
        var _childRouter = childRouters[_routeName3];

        var _extendedMatch = _extendedPathRe && _extendedPathRe.exec(pathToResolve);

        if (_extendedMatch && _extendedMatch.length) {
          var _restOfPath = getRestOfPath(_extendedMatch, _extendedPathReKeys);

          var _childAction = null;

          if (_childRouter) {
            _childAction = _childRouter.getActionForPathAndParams(_restOfPath, inputParams);
          }

          if (!_childAction) {
            continue;
          }

          return _NavigationActions.default.navigate({
            routeName: _routeName3,
            params: getParamsFromPath(inputParams, _extendedMatch, _extendedPathReKeys),
            action: _childAction
          });
        }
      }

      return null;
    };

    var getPathAndParamsForRoute = function getPathAndParamsForRoute(route) {
      var routeName = route.routeName,
          params = route.params;
      var childRouter = childRouters[routeName];
      var _pathsByRouteNames$ro = pathsByRouteNames[routeName],
          toPath = _pathsByRouteNames$ro.toPath,
          exactReKeys = _pathsByRouteNames$ro.exactReKeys;
      var subPath = toPath(params);
      var nonPathParams = {};

      if (params) {
        Object.keys(params).filter(function (paramName) {
          return !exactReKeys.find(function (k) {
            return k.name === paramName;
          });
        }).forEach(function (paramName) {
          nonPathParams[paramName] = params[paramName];
        });
      }

      if (childRouter) {
        var child = childRouter.getPathAndParamsForState(route);
        return {
          path: subPath ? subPath + "/" + child.path : child.path,
          params: child.params ? (0, _objectSpread2.default)({}, nonPathParams, child.params) : nonPathParams
        };
      }

      return {
        path: subPath,
        params: nonPathParams
      };
    };

    return {
      getActionForPathAndParams: getActionForPathAndParams,
      getPathAndParamsForRoute: getPathAndParamsForRoute
    };
  };

  exports.createPathParser = createPathParser;
},360,[361,1,9,43,362,339,336,364]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  module.exports = _interopRequireWildcard;
},361,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isarray = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = pathToRegexp;
  module.exports.parse = parse;
  module.exports.compile = compile;
  module.exports.tokensToFunction = tokensToFunction;
  module.exports.tokensToRegExp = tokensToRegExp;
  var PATH_REGEXP = new RegExp(['(\\\\.)', '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

  function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;

    while ((res = PATH_REGEXP.exec(str)) != null) {
      var m = res[0];
      var escaped = res[1];
      var offset = res.index;
      path += str.slice(index, offset);
      index = offset + m.length;

      if (escaped) {
        path += escaped[1];
        continue;
      }

      var next = str[index];
      var prefix = res[2];
      var name = res[3];
      var capture = res[4];
      var group = res[5];
      var modifier = res[6];
      var asterisk = res[7];

      if (path) {
        tokens.push(path);
        path = '';
      }

      var partial = prefix != null && next != null && next !== prefix;
      var repeat = modifier === '+' || modifier === '*';
      var optional = modifier === '?' || modifier === '*';
      var delimiter = res[2] || defaultDelimiter;
      var pattern = capture || group;
      tokens.push({
        name: name || key++,
        prefix: prefix || '',
        delimiter: delimiter,
        optional: optional,
        repeat: repeat,
        partial: partial,
        asterisk: !!asterisk,
        pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
      });
    }

    if (index < str.length) {
      path += str.substr(index);
    }

    if (path) {
      tokens.push(path);
    }

    return tokens;
  }

  function compile(str, options) {
    return tokensToFunction(parse(str, options));
  }

  function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function tokensToFunction(tokens) {
    var matches = new Array(tokens.length);

    for (var i = 0; i < tokens.length; i++) {
      if (typeof tokens[i] === 'object') {
        matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
      }
    }

    return function (obj, opts) {
      var path = '';
      var data = obj || {};
      var options = opts || {};
      var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          path += token;
          continue;
        }

        var value = data[token.name];
        var segment;

        if (value == null) {
          if (token.optional) {
            if (token.partial) {
              path += token.prefix;
            }

            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to be defined');
          }
        }

        if (isarray(value)) {
          if (!token.repeat) {
            throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
          }

          if (value.length === 0) {
            if (token.optional) {
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to not be empty');
            }
          }

          for (var j = 0; j < value.length; j++) {
            segment = encode(value[j]);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
            }

            path += (j === 0 ? token.prefix : token.delimiter) + segment;
          }

          continue;
        }

        segment = token.asterisk ? encodeAsterisk(value) : encode(value);

        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
        }

        path += token.prefix + segment;
      }

      return path;
    };
  }

  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
  }

  function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
  }

  function attachKeys(re, keys) {
    re.keys = keys;
    return re;
  }

  function flags(options) {
    return options.sensitive ? '' : 'i';
  }

  function regexpToRegexp(path, keys) {
    var groups = path.source.match(/\((?!\?)/g);

    if (groups) {
      for (var i = 0; i < groups.length; i++) {
        keys.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: false,
          repeat: false,
          partial: false,
          asterisk: false,
          pattern: null
        });
      }
    }

    return attachKeys(path, keys);
  }

  function arrayToRegexp(path, keys, options) {
    var parts = [];

    for (var i = 0; i < path.length; i++) {
      parts.push(pathToRegexp(path[i], keys, options).source);
    }

    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
  }

  function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
  }

  function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        route += escapeString(token);
      } else {
        var prefix = escapeString(token.prefix);
        var capture = '(?:' + token.pattern + ')';
        keys.push(token);

        if (token.repeat) {
          capture += '(?:' + prefix + capture + ')*';
        }

        if (token.optional) {
          if (!token.partial) {
            capture = '(?:' + prefix + '(' + capture + '))?';
          } else {
            capture = prefix + '(' + capture + ')?';
          }
        } else {
          capture = prefix + '(' + capture + ')';
        }

        route += capture;
      }
    }

    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

    if (!strict) {
      route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    }

    if (end) {
      route += '$';
    } else {
      route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    }

    return attachKeys(new RegExp('^' + route, flags(options)), keys);
  }

  function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};

    if (path instanceof RegExp) {
      return regexpToRegexp(path, keys);
    }

    if (isarray(path)) {
      return arrayToRegexp(path, keys, options);
    }

    return stringToRegexp(path, keys, options);
  }
},362,[363]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };
},363,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var strictUriEncode = _$$_REQUIRE(_dependencyMap[2]);

  var decodeComponent = _$$_REQUIRE(_dependencyMap[3]);

  function encoderForArrayFormat(options) {
    switch (options.arrayFormat) {
      case 'index':
        return function (key, value, index) {
          return value === null ? [encode(key, options), '[', index, ']'].join('') : [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('');
        };

      case 'bracket':
        return function (key, value) {
          return value === null ? [encode(key, options), '[]'].join('') : [encode(key, options), '[]=', encode(value, options)].join('');
        };

      default:
        return function (key, value) {
          return value === null ? encode(key, options) : [encode(key, options), '=', encode(value, options)].join('');
        };
    }
  }

  function parserForArrayFormat(options) {
    var result;

    switch (options.arrayFormat) {
      case 'index':
        return function (key, value, accumulator) {
          result = /\[(\d*)\]$/.exec(key);
          key = key.replace(/\[\d*\]$/, '');

          if (!result) {
            accumulator[key] = value;
            return;
          }

          if (accumulator[key] === undefined) {
            accumulator[key] = {};
          }

          accumulator[key][result[1]] = value;
        };

      case 'bracket':
        return function (key, value, accumulator) {
          result = /(\[\])$/.exec(key);
          key = key.replace(/\[\]$/, '');

          if (!result) {
            accumulator[key] = value;
            return;
          }

          if (accumulator[key] === undefined) {
            accumulator[key] = [value];
            return;
          }

          accumulator[key] = [].concat(accumulator[key], value);
        };

      default:
        return function (key, value, accumulator) {
          if (accumulator[key] === undefined) {
            accumulator[key] = value;
            return;
          }

          accumulator[key] = [].concat(accumulator[key], value);
        };
    }
  }

  function encode(value, options) {
    if (options.encode) {
      return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
    }

    return value;
  }

  function decode(value, options) {
    if (options.decode) {
      return decodeComponent(value);
    }

    return value;
  }

  function keysSorter(input) {
    if (Array.isArray(input)) {
      return input.sort();
    }

    if (typeof input === 'object') {
      return keysSorter(Object.keys(input)).sort(function (a, b) {
        return Number(a) - Number(b);
      }).map(function (key) {
        return input[key];
      });
    }

    return input;
  }

  function extract(input) {
    var queryStart = input.indexOf('?');

    if (queryStart === -1) {
      return '';
    }

    return input.slice(queryStart + 1);
  }

  function parse(input, options) {
    options = _extends({
      decode: true,
      arrayFormat: 'none'
    }, options);
    var formatter = parserForArrayFormat(options);
    var ret = Object.create(null);

    if (typeof input !== 'string') {
      return ret;
    }

    input = input.trim().replace(/^[?#&]/, '');

    if (!input) {
      return ret;
    }

    for (var _iterator = input.split('&'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var _param = _ref;

      var _param$replace$split = _param.replace(/\+/g, ' ').split('='),
          _param$replace$split2 = _slicedToArray(_param$replace$split, 2),
          key = _param$replace$split2[0],
          value = _param$replace$split2[1];

      value = value === undefined ? null : decode(value, options);
      formatter(decode(key, options), value, ret);
    }

    return Object.keys(ret).sort().reduce(function (result, key) {
      var value = ret[key];

      if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
        result[key] = keysSorter(value);
      } else {
        result[key] = value;
      }

      return result;
    }, Object.create(null));
  }

  exports.extract = extract;
  exports.parse = parse;

  exports.stringify = function (obj, options) {
    if (!obj) {
      return '';
    }

    options = _extends({
      encode: true,
      strict: true,
      arrayFormat: 'none'
    }, options);
    var formatter = encoderForArrayFormat(options);
    var keys = Object.keys(obj);

    if (options.sort !== false) {
      keys.sort(options.sort);
    }

    return keys.map(function (key) {
      var value = obj[key];

      if (value === undefined) {
        return '';
      }

      if (value === null) {
        return encode(key, options);
      }

      if (Array.isArray(value)) {
        var result = [];

        for (var _iterator2 = value.slice(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var _value = _ref2;

          if (_value === undefined) {
            continue;
          }

          result.push(formatter(key, _value, result.length));
        }

        return result.join('&');
      }

      return encode(key, options) + '=' + encode(value, options);
    }).filter(function (x) {
      return x.length > 0;
    }).join('&');
  };

  exports.parseUrl = function (input, options) {
    var hashStart = input.indexOf('#');

    if (hashStart !== -1) {
      input = input.slice(0, hashStart);
    }

    return {
      url: input.split('?')[0] || '',
      query: parse(extract(input), options)
    };
  };
},364,[9,8,365,366]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function (str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (x) {
      return "%" + x.charCodeAt(0).toString(16).toUpperCase();
    });
  };
},365,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var token = '%[a-f0-9]{2}';
  var singleMatcher = new RegExp(token, 'gi');
  var multiMatcher = new RegExp("(%[a-f0-9]{2})+", 'gi');

  function decodeComponents(components, split) {
    try {
      return decodeURIComponent(components.join(''));
    } catch (err) {}

    if (components.length === 1) {
      return components;
    }

    split = split || 1;
    var left = components.slice(0, split);
    var right = components.slice(split);
    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
  }

  function decode(input) {
    try {
      return decodeURIComponent(input);
    } catch (err) {
      var tokens = input.match(singleMatcher);

      for (var i = 1; i < tokens.length; i++) {
        input = decodeComponents(tokens, i).join('');
        tokens = input.match(singleMatcher);
      }

      return input;
    }
  }

  function customDecodeURIComponent(input) {
    var replaceMap = {
      '%FE%FF': "\uFFFD\uFFFD",
      '%FF%FE': "\uFFFD\uFFFD"
    };
    var match = multiMatcher.exec(input);

    while (match) {
      try {
        replaceMap[match[0]] = decodeURIComponent(match[0]);
      } catch (err) {
        var result = decode(match[0]);

        if (result !== match[0]) {
          replaceMap[match[0]] = result;
        }
      }

      match = multiMatcher.exec(input);
    }

    replaceMap['%C2'] = "\uFFFD";
    var entries = Object.keys(replaceMap);

    for (var i = 0; i < entries.length; i++) {
      var key = entries[i];
      input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    }

    return input;
  }

  module.exports = function (encodedURI) {
    if (typeof encodedURI !== 'string') {
      throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
    }

    try {
      encodedURI = encodedURI.replace(/\+/g, ' ');
      return decodeURIComponent(encodedURI);
    } catch (err) {
      return customDecodeURIComponent(encodedURI);
    }
  };
},366,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _SceneView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var SwitchView = function (_React$Component) {
    (0, _inherits2.default)(SwitchView, _React$Component);

    function SwitchView() {
      (0, _classCallCheck2.default)(this, SwitchView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SwitchView).apply(this, arguments));
    }

    (0, _createClass2.default)(SwitchView, [{
      key: "render",
      value: function render() {
        var state = this.props.navigation.state;
        var activeKey = state.routes[state.index].key;
        var descriptor = this.props.descriptors[activeKey];
        var ChildComponent = descriptor.getComponent();
        return _react.default.createElement(_SceneView.default, {
          component: ChildComponent,
          navigation: descriptor.navigation,
          screenProps: this.props.screenProps
        });
      }
    }]);
    return SwitchView;
  }(_react.default.Component);

  exports.default = SwitchView;
},367,[1,19,20,27,30,33,46,368]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _NavigationContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var SceneView = function (_React$PureComponent) {
    (0, _inherits2.default)(SceneView, _React$PureComponent);

    function SceneView() {
      (0, _classCallCheck2.default)(this, SceneView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SceneView).apply(this, arguments));
    }

    (0, _createClass2.default)(SceneView, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            screenProps = _this$props.screenProps,
            Component = _this$props.component,
            navigation = _this$props.navigation;
        return _react.default.createElement(_NavigationContext.default.Provider, {
          value: navigation
        }, _react.default.createElement(Component, {
          screenProps: screenProps,
          navigation: navigation
        }));
      }
    }]);
    return SceneView;
  }(_react.default.PureComponent);

  exports.default = SceneView;
},368,[1,19,20,27,30,33,46,345]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _NavigationActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _StackActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createConfigGetter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getScreenForRouteName = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _StateUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _validateRouteConfigMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _KeyGenerator = _$$_REQUIRE(_dependencyMap[10]);

  var _pathUtils = _$$_REQUIRE(_dependencyMap[11]);

  function behavesLikePushAction(action) {
    return action.type === _NavigationActions.default.NAVIGATE || action.type === _StackActions.default.PUSH;
  }

  var defaultActionCreators = function defaultActionCreators() {
    return {};
  };

  function isResetToRootStack(action) {
    return action.type === _StackActions.default.RESET && action.key === null;
  }

  var _default = function _default(routeConfigs) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap.default)(routeConfigs);
    var childRouters = {};
    var routeNames = Object.keys(routeConfigs);
    routeNames.forEach(function (routeName) {
      var screen = (0, _getScreenForRouteName.default)(routeConfigs, routeName);

      if (screen && screen.router) {
        childRouters[routeName] = screen.router;
      } else {
        childRouters[routeName] = null;
      }
    });
    var initialRouteParams = stackConfig.initialRouteParams;
    var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;
    var initialRouteName = stackConfig.initialRouteName || routeNames[0];
    var initialChildRouter = childRouters[initialRouteName];

    function getInitialState(action) {
      var route = {};
      var childRouter = childRouters[action.routeName];

      if (behavesLikePushAction(action) && childRouter !== undefined) {
        var childState = {};

        if (childRouter !== null) {
          var childAction = action.action || _NavigationActions.default.init({
            params: action.params
          });

          childState = childRouter.getStateForAction(childAction);
        }

        return {
          key: 'StackRouterRoot',
          isTransitioning: false,
          index: 0,
          routes: [(0, _objectSpread2.default)({
            params: action.params
          }, childState, {
            key: action.key || (0, _KeyGenerator.generateKey)(),
            routeName: action.routeName
          })]
        };
      }

      if (initialChildRouter) {
        route = initialChildRouter.getStateForAction(_NavigationActions.default.navigate({
          routeName: initialRouteName,
          params: initialRouteParams
        }));
      }

      var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && (0, _objectSpread2.default)({}, routeConfigs[initialRouteName].params || {}, route.params || {}, action.params || {}, initialRouteParams || {});
      var initialRouteKey = stackConfig.initialRouteKey;
      route = (0, _objectSpread2.default)({}, route, params ? {
        params: params
      } : {}, {
        routeName: initialRouteName,
        key: action.key || initialRouteKey || (0, _KeyGenerator.generateKey)()
      });
      return {
        key: 'StackRouterRoot',
        isTransitioning: false,
        index: 0,
        routes: [route]
      };
    }

    function getParamsForRouteAndAction(routeName, action) {
      var routeConfig = routeConfigs[routeName];

      if (routeConfig && routeConfig.params) {
        return (0, _objectSpread2.default)({}, routeConfig.params, action.params);
      } else {
        return action.params;
      }
    }

    var _createPathParser = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, stackConfig),
        getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,
        _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;

    return {
      childRouters: childRouters,
      getComponentForState: function getComponentForState(state) {
        var activeChildRoute = state.routes[state.index];
        var routeName = activeChildRoute.routeName;

        if (childRouters[routeName]) {
          return childRouters[routeName].getComponentForState(activeChildRoute);
        }

        return (0, _getScreenForRouteName.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName.default)(routeConfigs, routeName);
      },
      getActionCreators: function getActionCreators(route, navStateKey) {
        return (0, _objectSpread2.default)({}, getCustomActionCreators(route, navStateKey), {
          pop: function pop(n, params) {
            return _StackActions.default.pop((0, _objectSpread2.default)({
              n: n
            }, params));
          },
          popToTop: function popToTop(params) {
            return _StackActions.default.popToTop(params);
          },
          push: function push(routeName, params, action) {
            return _StackActions.default.push({
              routeName: routeName,
              params: params,
              action: action
            });
          },
          replace: function replace(replaceWith, params, action, newKey) {
            if (typeof replaceWith === 'string') {
              return _StackActions.default.replace({
                routeName: replaceWith,
                params: params,
                action: action,
                key: route.key,
                newKey: newKey
              });
            }

            (0, _invariant.default)(typeof replaceWith === 'object', 'Must replaceWith an object or a string');
            (0, _invariant.default)(params == null, 'Params must not be provided to .replace() when specifying an object');
            (0, _invariant.default)(action == null, 'Child action must not be provided to .replace() when specifying an object');
            (0, _invariant.default)(newKey == null, 'Child action must not be provided to .replace() when specifying an object');
            return _StackActions.default.replace(replaceWith);
          },
          reset: function reset(actions, index) {
            return _StackActions.default.reset({
              actions: actions,
              index: index == null ? actions.length - 1 : index,
              key: navStateKey
            });
          },
          dismiss: function dismiss() {
            return _NavigationActions.default.back({
              key: navStateKey
            });
          }
        });
      },
      getStateForAction: function getStateForAction(action, state) {
        if (!state) {
          return getInitialState(action);
        }

        var activeChildRoute = state.routes[state.index];

        if (!isResetToRootStack(action) && action.type !== _NavigationActions.default.NAVIGATE) {
          var activeChildRouter = childRouters[activeChildRoute.routeName];

          if (activeChildRouter) {
            var route = activeChildRouter.getStateForAction(action, activeChildRoute);

            if (route !== null && route !== activeChildRoute) {
              return _StateUtils.default.replaceAt(state, activeChildRoute.key, route, action.type === _NavigationActions.default.SET_PARAMS);
            }
          }
        } else if (action.type === _NavigationActions.default.NAVIGATE) {
          for (var _iterator = state.routes.slice().reverse(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _childRoute = _ref;
            var childRouter = childRouters[_childRoute.routeName];
            var childAction = action.routeName === _childRoute.routeName && action.action ? action.action : action;

            if (childRouter) {
              var nextRouteState = childRouter.getStateForAction(childAction, _childRoute);

              if (nextRouteState === null || nextRouteState !== _childRoute) {
                var newState = _StateUtils.default.replaceAndPrune(state, nextRouteState ? nextRouteState.key : _childRoute.key, nextRouteState ? nextRouteState : _childRoute);

                return (0, _objectSpread2.default)({}, newState, {
                  isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning
                });
              }
            }
          }
        }

        if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {
            var _childRouter = childRouters[action.routeName];

            var _route;

            (0, _invariant.default)(action.type !== _StackActions.default.PUSH || action.key == null, 'StackRouter does not support key on the push action');
            var lastRouteIndex = state.routes.findIndex(function (r) {
              if (action.key) {
                return r.key === action.key;
              } else {
                return r.routeName === action.routeName;
              }
            });

            if (action.type !== _StackActions.default.PUSH && lastRouteIndex !== -1) {
              if (state.index === lastRouteIndex && !action.params) {
                return null;
              }

              var routes = state.routes.slice(0, lastRouteIndex + 1);

              if (action.params) {
                var _route2 = state.routes[lastRouteIndex];
                routes[lastRouteIndex] = (0, _objectSpread2.default)({}, _route2, {
                  params: (0, _objectSpread2.default)({}, _route2.params, action.params)
                });
              }

              return (0, _objectSpread2.default)({}, state, {
                isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,
                index: lastRouteIndex,
                routes: routes
              });
            }

            if (_childRouter) {
              var _childAction = action.action || _NavigationActions.default.init({
                params: getParamsForRouteAndAction(action.routeName, action)
              });

              _route = (0, _objectSpread2.default)({
                params: getParamsForRouteAndAction(action.routeName, action)
              }, _childRouter.getStateForAction(_childAction), {
                routeName: action.routeName,
                key: action.key || (0, _KeyGenerator.generateKey)()
              });
            } else {
              _route = {
                params: getParamsForRouteAndAction(action.routeName, action),
                routeName: action.routeName,
                key: action.key || (0, _KeyGenerator.generateKey)()
              };
            }

            return (0, _objectSpread2.default)({}, _StateUtils.default.push(state, _route), {
              isTransitioning: action.immediate !== true
            });
          } else if (action.type === _StackActions.default.PUSH && childRouters[action.routeName] === undefined) {
          return state;
        }

        if (behavesLikePushAction(action)) {
          var childRouterNames = Object.keys(childRouters);

          for (var i = 0; i < childRouterNames.length; i++) {
            var childRouterName = childRouterNames[i];
            var _childRouter2 = childRouters[childRouterName];

            if (_childRouter2) {
              var initChildRoute = _childRouter2.getStateForAction(_NavigationActions.default.init());

              var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);

              var routeToPush = null;

              if (navigatedChildRoute === null) {
                routeToPush = initChildRoute;
              } else if (navigatedChildRoute !== initChildRoute) {
                routeToPush = navigatedChildRoute;
              }

              if (routeToPush) {
                var _route3 = (0, _objectSpread2.default)({}, routeToPush, {
                  routeName: childRouterName,
                  key: action.key || (0, _KeyGenerator.generateKey)()
                });

                return (0, _objectSpread2.default)({}, _StateUtils.default.push(state, _route3), {
                  isTransitioning: action.immediate !== true
                });
              }
            }
          }
        }

        if (action.type === _StackActions.default.POP_TO_TOP) {
          if (action.key && state.key !== action.key) {
            return state;
          }

          if (state.index > 0) {
            return (0, _objectSpread2.default)({}, state, {
              isTransitioning: action.immediate !== true,
              index: 0,
              routes: [state.routes[0]]
            });
          }

          return state;
        }

        if (action.type === _StackActions.default.REPLACE) {
          var routeIndex;

          if (action.key === undefined && state.routes.length) {
            routeIndex = state.routes.length - 1;
          } else {
            routeIndex = state.routes.findIndex(function (r) {
              return r.key === action.key;
            });
          }

          if (routeIndex !== -1) {
            var _childRouter3 = childRouters[action.routeName];
            var childState = {};

            if (_childRouter3) {
              var _childAction2 = action.action || _NavigationActions.default.init({
                params: getParamsForRouteAndAction(action.routeName, action)
              });

              childState = _childRouter3.getStateForAction(_childAction2);
            }

            var _routes = (0, _toConsumableArray2.default)(state.routes);

            _routes[routeIndex] = (0, _objectSpread2.default)({
              params: getParamsForRouteAndAction(action.routeName, action)
            }, childState, {
              routeName: action.routeName,
              key: action.newKey || (0, _KeyGenerator.generateKey)()
            });
            return (0, _objectSpread2.default)({}, state, {
              routes: _routes
            });
          }
        }

        if (action.type === _StackActions.default.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && action.toChildKey === state.routes[state.index].key && state.isTransitioning) {
          return (0, _objectSpread2.default)({}, state, {
            isTransitioning: false
          });
        }

        if (action.type === _NavigationActions.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var params = (0, _objectSpread2.default)({}, lastRoute.params, action.params);

            var _routes2 = (0, _toConsumableArray2.default)(state.routes);

            _routes2[state.routes.indexOf(lastRoute)] = (0, _objectSpread2.default)({}, lastRoute, {
              params: params
            });
            return (0, _objectSpread2.default)({}, state, {
              routes: _routes2
            });
          }
        }

        if (action.type === _StackActions.default.RESET) {
          if (action.key != null && action.key != state.key) {
            return state;
          }

          var newStackActions = action.actions;
          return (0, _objectSpread2.default)({}, state, {
            routes: newStackActions.map(function (newStackAction) {
              var router = childRouters[newStackAction.routeName];
              var childState = {};

              if (router) {
                var _childAction3 = newStackAction.action || _NavigationActions.default.init({
                  params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)
                });

                childState = router.getStateForAction(_childAction3);
              }

              return (0, _objectSpread2.default)({
                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)
              }, childState, {
                routeName: newStackAction.routeName,
                key: newStackAction.key || (0, _KeyGenerator.generateKey)()
              });
            }),
            index: action.index
          });
        }

        if (action.type === _NavigationActions.default.BACK || action.type === _StackActions.default.POP) {
          var _key = action.key,
              n = action.n,
              immediate = action.immediate;
          var backRouteIndex = state.index;

          if (action.type === _StackActions.default.POP && n != null) {
            backRouteIndex = Math.max(1, state.index - n + 1);
          } else if (_key) {
            var backRoute = state.routes.find(function (route) {
              return route.key === _key;
            });
            backRouteIndex = state.routes.indexOf(backRoute);
          }

          if (backRouteIndex > 0) {
            return (0, _objectSpread2.default)({}, state, {
              routes: state.routes.slice(0, backRouteIndex),
              index: backRouteIndex - 1,
              isTransitioning: immediate !== true
            });
          }
        }

        var keyIndex = action.key ? _StateUtils.default.indexOf(state, action.key) : -1;

        for (var _iterator2 = state.routes.slice().reverse(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var _childRoute3 = _ref2;

          if (_childRoute3.key === activeChildRoute.key) {
            continue;
          }

          if (keyIndex >= 0 && _childRoute3.key !== action.key) {
            continue;
          }

          var _childRouter5 = childRouters[_childRoute3.routeName];

          if (_childRouter5) {
            var _route4 = _childRouter5.getStateForAction(action, _childRoute3);

            if (_route4 === null) {
              return state;
            } else if (_route4 && _route4 !== _childRoute3) {
              return _StateUtils.default.replaceAt(state, _childRoute3.key, _route4, action.type === _NavigationActions.default.SET_PARAMS || action.type === _StackActions.default.COMPLETE_TRANSITION || action.type.includes('DRAWER'));
            }
          }
        }

        return state;
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        return getPathAndParamsForRoute(route);
      },
      getActionForPathAndParams: function getActionForPathAndParams(path, params) {
        return _getActionForPathAndParams(path, params);
      },
      getScreenOptions: (0, _createConfigGetter.default)(routeConfigs, stackConfig.defaultNavigationOptions)
    };
  };

  exports.default = _default;
},369,[1,15,43,339,358,356,353,335,359,336,370,360]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._TESTING_ONLY_normalize_keys = _TESTING_ONLY_normalize_keys;
  exports.generateKey = generateKey;
  var uniqueBaseId = "id-" + Date.now();
  var uuidCount = 0;

  function _TESTING_ONLY_normalize_keys() {
    uniqueBaseId = 'id';
    uuidCount = 0;
  }

  function generateKey() {
    return uniqueBaseId + "-" + uuidCount++;
  }
},370,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _SwitchRouter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _withDefaultValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _default = function _default(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    config = (0, _objectSpread2.default)({}, config);
    config = (0, _withDefaultValue.default)(config, 'resetOnBlur', false);
    config = (0, _withDefaultValue.default)(config, 'backBehavior', 'initialRoute');
    var switchRouter = (0, _SwitchRouter.default)(routeConfigs, config);
    return switchRouter;
  };

  exports.default = _default;
},371,[1,43,352,372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _default = function _default(obj, key, defaultValue) {
    if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {
      return obj;
    }

    obj[key] = defaultValue;
    return obj;
  };

  exports.default = _default;
},372,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var getActiveChildNavigationOptions = function getActiveChildNavigationOptions(navigation, screenProps) {
    var state = navigation.state,
        router = navigation.router,
        getChildNavigation = navigation.getChildNavigation;
    var activeRoute = state.routes[state.index];
    var activeNavigation = getChildNavigation(activeRoute.key);
    var options = router.getScreenOptions(activeNavigation, screenProps);
    return options;
  };

  var _default = getActiveChildNavigationOptions;
  exports.default = _default;
},373,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _withNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var EventNameToPropName = {
    willFocus: 'onWillFocus',
    didFocus: 'onDidFocus',
    willBlur: 'onWillBlur',
    didBlur: 'onDidBlur'
  };
  var EventNames = Object.keys(EventNameToPropName);

  var NavigationEvents = function (_React$Component) {
    (0, _inherits2.default)(NavigationEvents, _React$Component);

    function NavigationEvents() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, NavigationEvents);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(NavigationEvents)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.addListener = function (eventName) {
        var listener = _this.props[EventNameToPropName[eventName]];

        if (listener) {
          _this.subscriptions[eventName] = _this.props.navigation.addListener(eventName, listener);
        }
      };

      _this.removeListener = function (eventName) {
        if (_this.subscriptions[eventName]) {
          _this.subscriptions[eventName].remove();

          _this.subscriptions[eventName] = undefined;
        }
      };

      return _this;
    }

    (0, _createClass2.default)(NavigationEvents, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.subscriptions = {};
        EventNames.forEach(this.addListener);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this2 = this;

        EventNames.forEach(function (eventName) {
          var listenerHasChanged = _this2.props[EventNameToPropName[eventName]] !== prevProps[EventNameToPropName[eventName]];

          if (listenerHasChanged) {
            _this2.removeListener(eventName);

            _this2.addListener(eventName);
          }
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        EventNames.forEach(this.removeListener);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return NavigationEvents;
  }(_react.default.Component);

  var _default = (0, _withNavigation.default)(NavigationEvents);

  exports.default = _default;
},374,[1,19,20,27,30,33,46,375]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = withNavigation;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _NavigationContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  function withNavigation(Component) {
    var ComponentWithNavigation = function (_React$Component) {
      (0, _inherits2.default)(ComponentWithNavigation, _React$Component);

      function ComponentWithNavigation() {
        (0, _classCallCheck2.default)(this, ComponentWithNavigation);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ComponentWithNavigation).apply(this, arguments));
      }

      (0, _createClass2.default)(ComponentWithNavigation, [{
        key: "render",
        value: function render() {
          var _this = this;

          var navigationProp = this.props.navigation;
          return _react.default.createElement(_NavigationContext.default.Consumer, null, function (navigationContext) {
            var navigation = navigationProp || navigationContext;
            (0, _invariant.default)(!!navigation, 'withNavigation can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.');
            return _react.default.createElement(Component, (0, _extends2.default)({}, _this.props, {
              navigation: navigation,
              ref: _this.props.onRef
            }));
          });
        }
      }]);
      return ComponentWithNavigation;
    }(_react.default.Component);

    ComponentWithNavigation.displayName = "withNavigation(" + (Component.displayName || Component.name) + ")";
    return (0, _hoistNonReactStatics.default)(ComponentWithNavigation, Component);
  }
},375,[1,8,19,20,27,30,33,46,376,336,345]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactIs = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;

  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }

      var targetStatics = TYPE_STATICS[targetComponent['$$typeof']] || REACT_STATICS;
      var sourceStatics = TYPE_STATICS[sourceComponent['$$typeof']] || REACT_STATICS;

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }

      return targetComponent;
    }

    return targetComponent;
  }

  module.exports = hoistNonReactStatics;
},376,[354,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = withNavigationFocus;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _withNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  function withNavigationFocus(Component) {
    var ComponentWithNavigationFocus = function (_React$Component) {
      (0, _inherits2.default)(ComponentWithNavigationFocus, _React$Component);

      function ComponentWithNavigationFocus(props) {
        var _this;

        (0, _classCallCheck2.default)(this, ComponentWithNavigationFocus);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ComponentWithNavigationFocus).call(this, props));
        _this.state = {
          isFocused: props.navigation ? props.navigation.isFocused() : false
        };
        return _this;
      }

      (0, _createClass2.default)(ComponentWithNavigationFocus, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          var navigation = this.props.navigation;
          (0, _invariant.default)(!!navigation, 'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.');
          this.subscriptions = [navigation.addListener('didFocus', function () {
            return _this2.setState({
              isFocused: true
            });
          }), navigation.addListener('willBlur', function () {
            return _this2.setState({
              isFocused: false
            });
          })];
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.subscriptions.forEach(function (sub) {
            return sub.remove();
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {
            isFocused: this.state.isFocused,
            ref: this.props.onRef
          }));
        }
      }]);
      return ComponentWithNavigationFocus;
    }(_react.default.Component);

    ComponentWithNavigationFocus.displayName = "withNavigationFocus(" + (Component.displayName || Component.name) + ")";
    return (0, _hoistNonReactStatics.default)((0, _withNavigation.default)(ComponentWithNavigationFocus), Component);
  }
},377,[1,8,19,20,27,30,33,46,376,336,375]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var validateFormat = function validateFormat(format) {};

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},378,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = docsUrl;

  function docsUrl(path) {
    return "https://reactnavigation.org/docs/" + path;
  }
},379,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _default = function _default(Navigator, navigatorConfig) {
    var _class, _temp;

    return _temp = _class = function (_React$Component) {
      (0, _inherits2.default)(KeyboardAwareNavigator, _React$Component);

      function KeyboardAwareNavigator() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, KeyboardAwareNavigator);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(KeyboardAwareNavigator)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this._previouslyFocusedTextInput = null;

        _this._handleGestureBegin = function () {
          _this._previouslyFocusedTextInput = _reactNative.TextInput.State.currentlyFocusedField();

          if (_this._previouslyFocusedTextInput) {
            _reactNative.TextInput.State.blurTextInput(_this._previouslyFocusedTextInput);
          }

          _this.props.onGestureBegin && _this.props.onGestureBegin();
        };

        _this._handleGestureCanceled = function () {
          if (_this._previouslyFocusedTextInput) {
            _reactNative.TextInput.State.focusTextInput(_this._previouslyFocusedTextInput);
          }

          _this.props.onGestureCanceled && _this.props.onGestureCanceled();
        };

        _this._handleGestureFinish = function () {
          _this._previouslyFocusedTextInput = null;
          _this.props.onGestureFinish && _this.props.onGestureFinish();
        };

        _this._handleTransitionStart = function (transitionProps, prevTransitionProps) {
          if (transitionProps.index !== prevTransitionProps.index) {
            var currentField = _reactNative.TextInput.State.currentlyFocusedField();

            if (currentField) {
              _reactNative.TextInput.State.blurTextInput(currentField);
            }
          }

          var onTransitionStart = _this.props.onTransitionStart || navigatorConfig.onTransitionStart;
          onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);
        };

        return _this;
      }

      (0, _createClass2.default)(KeyboardAwareNavigator, [{
        key: "render",
        value: function render() {
          return _react.default.createElement(Navigator, (0, _extends2.default)({}, this.props, {
            onGestureBegin: this._handleGestureBegin,
            onGestureCanceled: this._handleGestureCanceled,
            onGestureFinish: this._handleGestureFinish,
            onTransitionStart: this._handleTransitionStart
          }));
        }
      }]);
      return KeyboardAwareNavigator;
    }(_react.default.Component), _class.router = Navigator.router, _class.navigationOptions = Navigator.navigationOptions, _temp;
  };

  exports.default = _default;
},380,[1,8,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createNavigationAwareScrollable;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _core = _$$_REQUIRE(_dependencyMap[9]);

  function createNavigationAwareScrollable(Component) {
    var ComponentWithNavigationScrolling = function (_React$PureComponent) {
      (0, _inherits2.default)(ComponentWithNavigationScrolling, _React$PureComponent);

      function ComponentWithNavigationScrolling() {
        (0, _classCallCheck2.default)(this, ComponentWithNavigationScrolling);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ComponentWithNavigationScrolling).apply(this, arguments));
      }

      (0, _createClass2.default)(ComponentWithNavigationScrolling, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this = this;

          this._subscription = this.props.navigation.addListener('refocus', function () {
            var scrollableNode = _this.getNode();

            if (_this.props.navigation.isFocused() && scrollableNode !== null) {
              if (scrollableNode.scrollToTop != null) {
                scrollableNode.scrollToTop();
              } else if (scrollableNode.scrollTo != null) {
                scrollableNode.scrollTo({
                  y: 0
                });
              }
            }
          });
        }
      }, {
        key: "getNode",
        value: function getNode() {
          if (this._scrollRef === null) {
            return null;
          }

          if (this._scrollRef.getScrollResponder) {
            return this._scrollRef.getScrollResponder();
          } else if (this._scrollRef.getNode) {
            return this._scrollRef.getNode();
          } else {
            return this._scrollRef;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this._subscription != null) {
            this._subscription.remove();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;

          return _react.default.createElement(Component, (0, _extends2.default)({
            ref: function ref(view) {
              _this2._scrollRef = view;
            }
          }, this.props));
        }
      }]);
      return ComponentWithNavigationScrolling;
    }(_react.default.PureComponent);

    ComponentWithNavigationScrolling.displayName = "NavigationAwareScrollable(" + (Component.displayName || Component.name) + ")";
    return (0, _hoistNonReactStatics.default)((0, _core.withNavigation)(ComponentWithNavigationScrolling), Component);
  }
},381,[1,8,19,20,27,30,33,46,382,334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactIs = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;

  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }

      var targetStatics = TYPE_STATICS[targetComponent['$$typeof']] || REACT_STATICS;
      var sourceStatics = TYPE_STATICS[sourceComponent['$$typeof']] || REACT_STATICS;

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }

      return targetComponent;
    }

    return targetComponent;
  }

  module.exports = hoistNonReactStatics;
},382,[383,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},383,[384]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.6.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var b = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      c = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      d = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      e = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      f = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      g = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      h = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      k = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      l = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.async_mode") : 60111,
      m = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      n = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      p = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      r = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      t = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;

  function u(a) {
    if ("object" === typeof a && null !== a) {
      var q = a.$$typeof;

      switch (q) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case h:
                  return a;

                default:
                  return q;
              }

          }

        case d:
          return q;
      }
    }
  }

  function v(a) {
    return u(a) === m;
  }

  exports.typeOf = u;
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Profiler = g;
  exports.Portal = d;
  exports.StrictMode = f;

  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
  };

  exports.isAsyncMode = function (a) {
    return v(a) || u(a) === l;
  };

  exports.isConcurrentMode = v;

  exports.isContextConsumer = function (a) {
    return u(a) === k;
  };

  exports.isContextProvider = function (a) {
    return u(a) === h;
  };

  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };

  exports.isForwardRef = function (a) {
    return u(a) === n;
  };

  exports.isFragment = function (a) {
    return u(a) === e;
  };

  exports.isProfiler = function (a) {
    return u(a) === g;
  };

  exports.isPortal = function (a) {
    return u(a) === d;
  };

  exports.isStrictMode = function (a) {
    return u(a) === f;
  };
},384,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.isOrientationLandscape = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };

  exports.isOrientationLandscape = isOrientationLandscape;

  function _default(WrappedComponent) {
    var withOrientation = function (_React$Component) {
      (0, _inherits2.default)(withOrientation, _React$Component);

      function withOrientation() {
        var _this;

        (0, _classCallCheck2.default)(this, withOrientation);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(withOrientation).call(this));

        _this.handleOrientationChange = function (_ref2) {
          var window = _ref2.window;
          var isLandscape = isOrientationLandscape(window);

          _this.setState({
            isLandscape: isLandscape
          });
        };

        var _isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));

        _this.state = {
          isLandscape: _isLandscape
        };
        return _this;
      }

      (0, _createClass2.default)(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement(WrappedComponent, (0, _extends2.default)({}, this.props, this.state));
        }
      }]);
      return withOrientation;
    }(_react.default.Component);

    return (0, _hoistNonReactStatics.default)(withOrientation, WrappedComponent);
  }
},385,[1,8,19,20,27,30,33,46,2,382]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[10]);

  var _core = _$$_REQUIRE(_dependencyMap[11]);

  var FAR_FAR_AWAY = 3000;

  var ResourceSavingSceneView = function (_React$PureComponent) {
    (0, _inherits2.default)(ResourceSavingSceneView, _React$PureComponent);
    (0, _createClass2.default)(ResourceSavingSceneView, null, [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.isFocused && !prevState.awake) {
          return {
            awake: true
          };
        } else {
          return null;
        }
      }
    }]);

    function ResourceSavingSceneView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, ResourceSavingSceneView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ResourceSavingSceneView).call(this));

      _this._mustAlwaysBeVisible = function () {
        return _this.props.animationEnabled || _this.props.swipeEnabled;
      };

      _this.state = {
        awake: props.lazy ? props.isFocused : true
      };
      return _this;
    }

    (0, _createClass2.default)(ResourceSavingSceneView, [{
      key: "render",
      value: function render() {
        var awake = this.state.awake;
        var _this$props = this.props,
            isFocused = _this$props.isFocused,
            childNavigation = _this$props.childNavigation,
            navigation = _this$props.navigation,
            removeClippedSubviews = _this$props.removeClippedSubviews,
            lazy = _this$props.lazy,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["isFocused", "childNavigation", "navigation", "removeClippedSubviews", "lazy"]);
        return _react.default.createElement(_reactNative.View, {
          style: styles.container,
          collapsable: false,
          removeClippedSubviews: _reactNative.Platform.OS === 'android' ? removeClippedSubviews : !isFocused && removeClippedSubviews
        }, _react.default.createElement(_reactNative.View, {
          style: this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached
        }, awake ? _react.default.createElement(_core.SceneView, (0, _extends2.default)({}, rest, {
          navigation: childNavigation
        })) : null));
      }
    }]);
    return ResourceSavingSceneView;
  }(_react.default.PureComponent);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    innerAttached: {
      flex: 1
    },
    innerDetached: {
      flex: 1,
      top: FAR_FAR_AWAY
    }
  });

  var _default = (0, _reactLifecyclesCompat.polyfill)(ResourceSavingSceneView);

  exports.default = _default;
},386,[1,8,6,19,27,30,20,33,46,2,333,334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.withSafeArea = exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _withOrientation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var X_WIDTH = 375;
  var X_HEIGHT = 812;
  var XSMAX_WIDTH = 414;
  var XSMAX_HEIGHT = 896;
  var PAD_WIDTH = 768;
  var PAD_HEIGHT = 1024;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      D_HEIGHT = _Dimensions$get.height,
      D_WIDTH = _Dimensions$get.width;

  var _NativeModules$Platfo = _reactNative.NativeModules.PlatformConstants,
      PlatformConstants = _NativeModules$Platfo === undefined ? {} : _NativeModules$Platfo;

  var _ref = PlatformConstants.reactNativeVersion || {},
      _ref$minor = _ref.minor,
      minor = _ref$minor === undefined ? 0 : _ref$minor;

  var isIPhoneX = function () {
    if (_reactNative.Platform.OS === 'web') return false;
    return _reactNative.Platform.OS === 'ios' && (D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH || D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT) || D_HEIGHT === XSMAX_HEIGHT && D_WIDTH === XSMAX_WIDTH || D_HEIGHT === XSMAX_WIDTH && D_WIDTH === XSMAX_HEIGHT;
  }();

  var isIPad = function () {
    if (_reactNative.Platform.OS !== 'ios' || isIPhoneX) return false;

    if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
      return false;
    }

    if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
      return false;
    }

    return true;
  }();

  var _customStatusBarHeight = null;

  var statusBarHeight = function statusBarHeight(isLandscape) {
    if (_customStatusBarHeight !== null) {
      return _customStatusBarHeight;
    }

    if (_reactNative.Platform.OS === 'android') {
      if (global.Expo) {
        return global.Expo.Constants.statusBarHeight;
      } else {
        return 0;
      }
    }

    if (isIPhoneX) {
      return isLandscape ? 0 : 44;
    }

    if (isIPad) {
      return 20;
    }

    return isLandscape ? 0 : 20;
  };

  var doubleFromPercentString = function doubleFromPercentString(percent) {
    if (!percent.includes('%')) {
      return 0;
    }

    var dbl = parseFloat(percent) / 100;
    if (isNaN(dbl)) return 0;
    return dbl;
  };

  var SafeView = function (_Component) {
    (0, _inherits2.default)(SafeView, _Component);

    function SafeView() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, SafeView);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SafeView)).call.apply(_getPrototypeOf2, [this].concat(_args)));
      _this.state = {
        touchesTop: true,
        touchesBottom: true,
        touchesLeft: true,
        touchesRight: true,
        orientation: null,
        viewWidth: 0,
        viewHeight: 0
      };

      _this._onLayout = function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (!_this._isMounted) return;
        if (!_this.view) return;
        var isLandscape = _this.props.isLandscape;
        var orientation = _this.state.orientation;
        var newOrientation = isLandscape ? 'landscape' : 'portrait';

        if (orientation && orientation === newOrientation) {
          return;
        }

        var WIDTH = isLandscape ? X_HEIGHT : X_WIDTH;
        var HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT;

        _this.view._component.measureInWindow(function (winX, winY, winWidth, winHeight) {
          var _this$props;

          if (!_this.view) {
            return;
          }

          var realY = winY;
          var realX = winX;

          if (realY >= HEIGHT) {
            realY = realY % HEIGHT;
          } else if (realY < 0) {
            realY = realY % HEIGHT + HEIGHT;
          }

          if (realX >= WIDTH) {
            realX = realX % WIDTH;
          } else if (realX < 0) {
            realX = realX % WIDTH + WIDTH;
          }

          var touchesTop = realY === 0;
          var touchesBottom = realY + winHeight >= HEIGHT;
          var touchesLeft = realX === 0;
          var touchesRight = realX + winWidth >= WIDTH;

          _this.setState({
            touchesTop: touchesTop,
            touchesBottom: touchesBottom,
            touchesLeft: touchesLeft,
            touchesRight: touchesRight,
            orientation: newOrientation,
            viewWidth: winWidth,
            viewHeight: winHeight
          });

          if (_this.props.onLayout) (_this$props = _this.props).onLayout.apply(_this$props, args);
        });
      };

      _this._getSafeAreaStyle = function () {
        var _this$state = _this.state,
            touchesTop = _this$state.touchesTop,
            touchesBottom = _this$state.touchesBottom,
            touchesLeft = _this$state.touchesLeft,
            touchesRight = _this$state.touchesRight;
        var _this$props2 = _this.props,
            forceInset = _this$props2.forceInset,
            isLandscape = _this$props2.isLandscape;

        var _this$_getViewStyles = _this._getViewStyles(),
            paddingTop = _this$_getViewStyles.paddingTop,
            paddingBottom = _this$_getViewStyles.paddingBottom,
            paddingLeft = _this$_getViewStyles.paddingLeft,
            paddingRight = _this$_getViewStyles.paddingRight,
            viewStyle = _this$_getViewStyles.viewStyle;

        var style = (0, _objectSpread2.default)({}, viewStyle, {
          paddingTop: touchesTop ? _this._getInset('top') : 0,
          paddingBottom: touchesBottom ? _this._getInset('bottom') : 0,
          paddingLeft: touchesLeft ? _this._getInset('left') : 0,
          paddingRight: touchesRight ? _this._getInset('right') : 0
        });

        if (forceInset) {
          Object.keys(forceInset).forEach(function (key) {
            var inset = forceInset[key];

            if (inset === 'always') {
              inset = _this._getInset(key);
            }

            if (inset === 'never') {
              inset = 0;
            }

            switch (key) {
              case 'horizontal':
                {
                  style.paddingLeft = inset;
                  style.paddingRight = inset;
                  break;
                }

              case 'vertical':
                {
                  style.paddingTop = inset;
                  style.paddingBottom = inset;
                  break;
                }

              case 'left':
              case 'right':
              case 'top':
              case 'bottom':
                {
                  var padding = "padding" + key[0].toUpperCase() + key.slice(1);
                  style[padding] = inset;
                  break;
                }
            }
          });
        }

        if (style.height && typeof style.height === 'number') {
          style.height += style.paddingTop + style.paddingBottom;
        }

        if (style.width && typeof style.width === 'number') {
          style.width += style.paddingLeft + style.paddingRight;
        }

        style.paddingTop = Math.max(style.paddingTop, paddingTop);
        style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);
        style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);
        style.paddingRight = Math.max(style.paddingRight, paddingRight);
        return style;
      };

      _this._getViewStyles = function () {
        var viewWidth = _this.state.viewWidth;

        var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(_this.props.style || {}),
            _StyleSheet$flatten$p = _StyleSheet$flatten.padding,
            padding = _StyleSheet$flatten$p === undefined ? 0 : _StyleSheet$flatten$p,
            _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,
            paddingVertical = _StyleSheet$flatten$p2 === undefined ? padding : _StyleSheet$flatten$p2,
            _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,
            paddingHorizontal = _StyleSheet$flatten$p3 === undefined ? padding : _StyleSheet$flatten$p3,
            _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,
            paddingTop = _StyleSheet$flatten$p4 === undefined ? paddingVertical : _StyleSheet$flatten$p4,
            _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,
            paddingBottom = _StyleSheet$flatten$p5 === undefined ? paddingVertical : _StyleSheet$flatten$p5,
            _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,
            paddingLeft = _StyleSheet$flatten$p6 === undefined ? paddingHorizontal : _StyleSheet$flatten$p6,
            _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,
            paddingRight = _StyleSheet$flatten$p7 === undefined ? paddingHorizontal : _StyleSheet$flatten$p7,
            viewStyle = (0, _objectWithoutProperties2.default)(_StyleSheet$flatten, ["padding", "paddingVertical", "paddingHorizontal", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"]);

        if (typeof paddingTop !== 'number') {
          paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
        }

        if (typeof paddingBottom !== 'number') {
          paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
        }

        if (typeof paddingLeft !== 'number') {
          paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
        }

        if (typeof paddingRight !== 'number') {
          paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
        }

        return {
          paddingTop: paddingTop,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          paddingRight: paddingRight,
          viewStyle: viewStyle
        };
      };

      _this._getInset = function (key) {
        var isLandscape = _this.props.isLandscape;

        switch (key) {
          case 'horizontal':
          case 'right':
          case 'left':
            {
              return isLandscape ? isIPhoneX ? 44 : 0 : 0;
            }

          case 'vertical':
          case 'top':
            {
              return statusBarHeight(isLandscape);
            }

          case 'bottom':
            {
              return isIPhoneX ? isLandscape ? 24 : 34 : 0;
            }
        }
      };

      return _this;
    }

    (0, _createClass2.default)(SafeView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this._isMounted = true;

        _reactNative.InteractionManager.runAfterInteractions(function () {
          _this2._onLayout();
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        this._onLayout();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props3 = this.props,
            _this$props3$forceIns = _this$props3.forceInset,
            forceInset = _this$props3$forceIns === undefined ? false : _this$props3$forceIns,
            isLandscape = _this$props3.isLandscape,
            style = _this$props3.style,
            props = (0, _objectWithoutProperties2.default)(_this$props3, ["forceInset", "isLandscape", "style"]);

        var safeAreaStyle = this._getSafeAreaStyle();

        return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
          ref: function ref(c) {
            return _this3.view = c;
          },
          pointerEvents: "box-none"
        }, props, {
          onLayout: this._onLayout,
          style: safeAreaStyle
        }));
      }
    }]);
    return SafeView;
  }(_react.Component);

  SafeView.setStatusBarHeight = function (height) {
    _customStatusBarHeight = height;
  };

  var SafeAreaView = (0, _withOrientation.default)(SafeView);
  var _default = SafeAreaView;
  exports.default = _default;

  var withSafeArea = function withSafeArea() {
    var forceInset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return function (WrappedComponent) {
      var withSafeArea = function (_Component2) {
        (0, _inherits2.default)(withSafeArea, _Component2);

        function withSafeArea() {
          (0, _classCallCheck2.default)(this, withSafeArea);
          return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(withSafeArea).apply(this, arguments));
        }

        (0, _createClass2.default)(withSafeArea, [{
          key: "render",
          value: function render() {
            return _react.default.createElement(SafeAreaView, {
              style: {
                flex: 1
              },
              forceInset: forceInset
            }, _react.default.createElement(WrappedComponent, this.props));
          }
        }]);
        return withSafeArea;
      }(_react.Component);

      return (0, _hoistNonReactStatics.default)(withSafeArea, WrappedComponent);
    };
  };

  exports.withSafeArea = withSafeArea;
},387,[361,1,8,6,43,19,20,27,30,33,46,2,388,389]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }

      return targetComponent;
    }

    return targetComponent;
  }

  module.exports = hoistNonReactStatics;
},388,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.isOrientationLandscape = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };

  exports.isOrientationLandscape = isOrientationLandscape;

  function _default(WrappedComponent) {
    var withOrientation = function (_React$Component) {
      (0, _inherits2.default)(withOrientation, _React$Component);

      function withOrientation() {
        var _this;

        (0, _classCallCheck2.default)(this, withOrientation);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(withOrientation).call(this));

        _this.handleOrientationChange = function (_ref2) {
          var window = _ref2.window;
          var isLandscape = isOrientationLandscape(window);

          _this.setState({
            isLandscape: isLandscape
          });
        };

        var _isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));

        _this.state = {
          isLandscape: _isLandscape
        };
        return _this;
      }

      (0, _createClass2.default)(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (typeof _reactNative.Dimensions.addEventListener === 'function') {
            _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (typeof _reactNative.Dimensions.removeEventListener === 'function') {
            _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
          }
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(WrappedComponent, (0, _extends2.default)({}, this.props, this.state));
        }
      }]);
      return withOrientation;
    }(React.Component);

    return (0, _hoistNonReactStatics.default)(withOrientation, WrappedComponent);
  }
},389,[361,1,8,19,20,27,30,33,46,2,388]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _reactNativeGestureHandler = _$$_REQUIRE(_dependencyMap[4]);

  var _createNavigationAwareScrollable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var WrappedScrollView = (0, _createNavigationAwareScrollable.default)(_reactNativeGestureHandler.ScrollView);

  var WrappedFlatList = _react.default.forwardRef(function (props, ref) {
    return _react.default.createElement(_reactNative.FlatList, (0, _extends2.default)({
      ref: ref
    }, props, {
      renderScrollComponent: function renderScrollComponent(props) {
        return _react.default.createElement(WrappedScrollView, props);
      }
    }));
  });

  var WrappedSectionList = _react.default.forwardRef(function (props, ref) {
    return _react.default.createElement(_reactNative.SectionList, (0, _extends2.default)({
      ref: ref
    }, props, {
      renderScrollComponent: function renderScrollComponent(props) {
        return _react.default.createElement(WrappedScrollView, props);
      }
    }));
  });

  module.exports = {
    ScrollView: WrappedScrollView,
    FlatList: WrappedFlatList,
    SectionList: WrappedSectionList
  };
},390,[1,8,46,2,391,381]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    Swipeable: true,
    DrawerLayout: true
  };
  Object.defineProperty(exports, "Swipeable", {
    enumerable: true,
    get: function get() {
      return _Swipeable.default;
    }
  });
  Object.defineProperty(exports, "DrawerLayout", {
    enumerable: true,
    get: function get() {
      return _DrawerLayout.default;
    }
  });

  var _Swipeable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _DrawerLayout = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[3]);

  Object.keys(_GestureHandler).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _GestureHandler[key];
      }
    });
  });

  var _touchables = _$$_REQUIRE(_dependencyMap[4]);

  Object.keys(_touchables).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _touchables[key];
      }
    });
  });
},391,[1,392,402,393,404]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[11]);

  var DRAG_TOSS = 0.05;

  if (!Math.sign) {
    Math.sign = function (x) {
      return Number(x > 0) - Number(x < 0) || +x;
    };
  }

  var Swipeable = function (_Component) {
    (0, _inherits2.default)(Swipeable, _Component);

    function Swipeable(_props) {
      var _this;

      (0, _classCallCheck2.default)(this, Swipeable);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Swipeable).call(this, _props));

      _this._updateAnimatedEvent = function (props, state) {
        var friction = props.friction,
            overshootFriction = props.overshootFriction,
            useNativeAnimations = props.useNativeAnimations;
        var dragX = state.dragX,
            rowTranslation = state.rowTranslation,
            _state$leftWidth = state.leftWidth,
            leftWidth = _state$leftWidth === undefined ? 0 : _state$leftWidth,
            _state$rowWidth = state.rowWidth,
            rowWidth = _state$rowWidth === undefined ? 0 : _state$rowWidth;
        var _state$rightOffset = state.rightOffset,
            rightOffset = _state$rightOffset === undefined ? rowWidth : _state$rightOffset;
        var rightWidth = Math.max(0, rowWidth - rightOffset);
        var _props$overshootLeft = props.overshootLeft,
            overshootLeft = _props$overshootLeft === undefined ? leftWidth > 0 : _props$overshootLeft,
            _props$overshootRight = props.overshootRight,
            overshootRight = _props$overshootRight === undefined ? rightWidth > 0 : _props$overshootRight;

        var transX = _reactNative.Animated.add(rowTranslation, dragX.interpolate({
          inputRange: [0, friction],
          outputRange: [0, 1]
        })).interpolate({
          inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],
          outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]
        });

        _this._transX = transX;
        _this._showLeftAction = leftWidth > 0 ? transX.interpolate({
          inputRange: [-1, 0, leftWidth],
          outputRange: [0, 0, 1]
        }) : new _reactNative.Animated.Value(0);
        _this._leftActionTranslate = _this._showLeftAction.interpolate({
          inputRange: [0, Number.MIN_VALUE],
          outputRange: [-10000, 0],
          extrapolate: 'clamp'
        });
        _this._showRightAction = rightWidth > 0 ? transX.interpolate({
          inputRange: [-rightWidth, 0, 1],
          outputRange: [1, 0, 0]
        }) : new _reactNative.Animated.Value(0);
        _this._rightActionTranslate = _this._showRightAction.interpolate({
          inputRange: [0, Number.MIN_VALUE],
          outputRange: [-10000, 0],
          extrapolate: 'clamp'
        });
      };

      _this._onTapHandlerStateChange = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        if (nativeEvent.oldState === _GestureHandler.State.ACTIVE) {
          _this.close();
        }
      };

      _this._onHandlerStateChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;

        if (nativeEvent.oldState === _GestureHandler.State.ACTIVE) {
          _this._handleRelease(nativeEvent);
        }
      };

      _this._handleRelease = function (nativeEvent) {
        var velocityX = nativeEvent.velocityX,
            dragX = nativeEvent.translationX;
        var _this$state = _this.state,
            _this$state$leftWidth = _this$state.leftWidth,
            leftWidth = _this$state$leftWidth === undefined ? 0 : _this$state$leftWidth,
            _this$state$rowWidth = _this$state.rowWidth,
            rowWidth = _this$state$rowWidth === undefined ? 0 : _this$state$rowWidth,
            rowState = _this$state.rowState;
        var _this$state$rightOffs = _this.state.rightOffset,
            rightOffset = _this$state$rightOffs === undefined ? rowWidth : _this$state$rightOffs;
        var rightWidth = rowWidth - rightOffset;
        var _this$props = _this.props,
            friction = _this$props.friction,
            _this$props$leftThres = _this$props.leftThreshold,
            leftThreshold = _this$props$leftThres === undefined ? leftWidth / 2 : _this$props$leftThres,
            _this$props$rightThre = _this$props.rightThreshold,
            rightThreshold = _this$props$rightThre === undefined ? rightWidth / 2 : _this$props$rightThre;
        var startOffsetX = _this._currentOffset() + dragX / friction;
        var translationX = (dragX + DRAG_TOSS * velocityX) / friction;
        var toValue = 0;

        if (rowState === 0) {
          if (translationX > leftThreshold) {
            toValue = leftWidth;
          } else if (translationX < -rightThreshold) {
            toValue = -rightWidth;
          }
        } else if (rowState === 1) {
          if (translationX > -leftThreshold) {
            toValue = leftWidth;
          }
        } else {
          if (translationX < rightThreshold) {
            toValue = -rightWidth;
          }
        }

        _this._animateRow(startOffsetX, toValue, velocityX / friction);
      };

      _this._animateRow = function (fromValue, toValue, velocityX) {
        var _this$state2 = _this.state,
            dragX = _this$state2.dragX,
            rowTranslation = _this$state2.rowTranslation;
        dragX.setValue(0);
        rowTranslation.setValue(fromValue);

        _this.setState({
          rowState: Math.sign(toValue)
        });

        _reactNative.Animated.spring(rowTranslation, (0, _objectSpread2.default)({
          restSpeedThreshold: 1.7,
          restDisplacementThreshold: 0.4,
          velocity: velocityX,
          bounciness: 0,
          toValue: toValue,
          useNativeDriver: _this.props.useNativeAnimations
        }, _this.props.animationOptions)).start(function (_ref3) {
          var finished = _ref3.finished;

          if (finished) {
            if (toValue > 0 && _this.props.onSwipeableLeftOpen) {
              _this.props.onSwipeableLeftOpen();
            } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {
              _this.props.onSwipeableRightOpen();
            }

            if (toValue === 0) {
              _this.props.onSwipeableClose && _this.props.onSwipeableClose();
            } else {
              _this.props.onSwipeableOpen && _this.props.onSwipeableOpen();
            }
          }
        });

        if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {
          _this.props.onSwipeableLeftWillOpen();
        } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {
          _this.props.onSwipeableRightWillOpen();
        }

        if (toValue === 0) {
          _this.props.onSwipeableWillClose && _this.props.onSwipeableWillClose();
        } else {
          _this.props.onSwipeableWillOpen && _this.props.onSwipeableWillOpen();
        }
      };

      _this._onRowLayout = function (_ref4) {
        var nativeEvent = _ref4.nativeEvent;

        _this.setState({
          rowWidth: nativeEvent.layout.width
        });
      };

      _this._currentOffset = function () {
        var _this$state3 = _this.state,
            _this$state3$leftWidt = _this$state3.leftWidth,
            leftWidth = _this$state3$leftWidt === undefined ? 0 : _this$state3$leftWidt,
            _this$state3$rowWidth = _this$state3.rowWidth,
            rowWidth = _this$state3$rowWidth === undefined ? 0 : _this$state3$rowWidth,
            rowState = _this$state3.rowState;
        var _this$state$rightOffs2 = _this.state.rightOffset,
            rightOffset = _this$state$rightOffs2 === undefined ? rowWidth : _this$state$rightOffs2;
        var rightWidth = rowWidth - rightOffset;

        if (rowState === 1) {
          return leftWidth;
        } else if (rowState === -1) {
          return -rightWidth;
        }

        return 0;
      };

      _this.close = function () {
        _this._animateRow(_this._currentOffset(), 0);
      };

      _this.openLeft = function () {
        var _this$state$leftWidth2 = _this.state.leftWidth,
            leftWidth = _this$state$leftWidth2 === undefined ? 0 : _this$state$leftWidth2;

        _this._animateRow(_this._currentOffset(), leftWidth);
      };

      _this.openRight = function () {
        var _this$state$rowWidth2 = _this.state.rowWidth,
            rowWidth = _this$state$rowWidth2 === undefined ? 0 : _this$state$rowWidth2;
        var _this$state$rightOffs3 = _this.state.rightOffset,
            rightOffset = _this$state$rightOffs3 === undefined ? rowWidth : _this$state$rightOffs3;
        var rightWidth = rowWidth - rightOffset;

        _this._animateRow(_this._currentOffset(), -rightWidth);
      };

      var _dragX = new _reactNative.Animated.Value(0);

      _this.state = {
        dragX: _dragX,
        rowTranslation: new _reactNative.Animated.Value(0),
        rowState: 0,
        leftWidth: undefined,
        rightOffset: undefined,
        rowWidth: undefined
      };

      _this._updateAnimatedEvent(_props, _this.state);

      _this._onGestureEvent = _reactNative.Animated.event([{
        nativeEvent: {
          translationX: _dragX
        }
      }], {
        useNativeDriver: _props.useNativeAnimations
      });
      return _this;
    }

    (0, _createClass2.default)(Swipeable, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate(props, state) {
        if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {
          this._updateAnimatedEvent(props, state);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var rowState = this.state.rowState;
        var _this$props2 = this.props,
            children = _this$props2.children,
            renderLeftActions = _this$props2.renderLeftActions,
            renderRightActions = _this$props2.renderRightActions;

        var left = renderLeftActions && _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.leftActions, {
            transform: [{
              translateX: this._leftActionTranslate
            }]
          }]
        }, renderLeftActions(this._showLeftAction, this._transX), _react.default.createElement(_reactNative.View, {
          onLayout: function onLayout(_ref5) {
            var nativeEvent = _ref5.nativeEvent;
            return _this2.setState({
              leftWidth: nativeEvent.layout.x
            });
          }
        }));

        var right = renderRightActions && _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.rightActions, {
            transform: [{
              translateX: this._rightActionTranslate
            }]
          }]
        }, renderRightActions(this._showRightAction, this._transX), _react.default.createElement(_reactNative.View, {
          onLayout: function onLayout(_ref6) {
            var nativeEvent = _ref6.nativeEvent;
            return _this2.setState({
              rightOffset: nativeEvent.layout.x
            });
          }
        }));

        return _react.default.createElement(_GestureHandler.PanGestureHandler, (0, _extends2.default)({}, this.props, {
          minDeltaX: 10,
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._onHandlerStateChange
        }), _react.default.createElement(_reactNative.Animated.View, {
          onLayout: this._onRowLayout,
          style: [styles.container, this.props.containerStyle]
        }, left, right, _react.default.createElement(_GestureHandler.TapGestureHandler, {
          enabled: rowState !== 0,
          onHandlerStateChange: this._onTapHandlerStateChange
        }, _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: rowState === 0 ? 'auto' : 'box-only',
          style: [{
            transform: [{
              translateX: this._transX
            }]
          }, this.props.childrenContainerStyle]
        }, children))));
      }
    }]);
    return Swipeable;
  }(_react.Component);

  exports.default = Swipeable;
  Swipeable.defaultProps = {
    friction: 1,
    overshootFriction: 1,
    useNativeAnimations: true
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      overflow: 'hidden'
    },
    leftActions: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row'
    }),
    rightActions: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row-reverse'
    })
  });
},392,[361,1,8,43,19,20,27,30,33,46,2,393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "gestureHandlerRootHOC", {
    enumerable: true,
    get: function get() {
      return _gestureHandlerRootHOC.default;
    }
  });
  Object.defineProperty(exports, "Directions", {
    enumerable: true,
    get: function get() {
      return _Directions.default;
    }
  });
  Object.defineProperty(exports, "State", {
    enumerable: true,
    get: function get() {
      return _State.default;
    }
  });
  exports.FlatList = exports.BorderlessButton = exports.RectButton = exports.BaseButton = exports.RawButton = exports.RotationGestureHandler = exports.PinchGestureHandler = exports.PanGestureHandler = exports.LongPressGestureHandler = exports.ForceTouchGestureHandler = exports.FlingGestureHandler = exports.TapGestureHandler = exports.NativeViewGestureHandler = exports.DrawerLayoutAndroid = exports.ViewPagerAndroid = exports.ToolbarAndroid = exports.TextInput = exports.Switch = exports.Slider = exports.ScrollView = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _createHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _GestureHandlerButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _gestureHandlerRootHOC = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _Directions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _State = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _PlatformConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var GestureHandlerPropTypes = {
    id: _propTypes.default.string,
    minPointers: _propTypes.default.number,
    enabled: _propTypes.default.bool,
    waitFor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]))]),
    simultaneousHandlers: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]))]),
    shouldCancelWhenOutside: _propTypes.default.bool,
    hitSlop: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      left: _propTypes.default.number,
      top: _propTypes.default.number,
      right: _propTypes.default.number,
      bottom: _propTypes.default.number,
      vertical: _propTypes.default.number,
      horizontal: _propTypes.default.number,
      width: _propTypes.default.number,
      height: _propTypes.default.number
    })]),
    onGestureEvent: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onHandlerStateChange: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onBegan: _propTypes.default.func,
    onFailed: _propTypes.default.func,
    onCancelled: _propTypes.default.func,
    onActivated: _propTypes.default.func,
    onEnded: _propTypes.default.func
  };
  var NativeViewGestureHandler = (0, _createHandler.default)('NativeViewGestureHandler', (0, _objectSpread2.default)({}, GestureHandlerPropTypes, {
    shouldActivateOnStart: _propTypes.default.bool,
    disallowInterruption: _propTypes.default.bool
  }));
  exports.NativeViewGestureHandler = NativeViewGestureHandler;
  var TapGestureHandler = (0, _createHandler.default)('TapGestureHandler', (0, _objectSpread2.default)({}, GestureHandlerPropTypes, {
    maxDurationMs: _propTypes.default.number,
    maxDelayMs: _propTypes.default.number,
    numberOfTaps: _propTypes.default.number,
    maxDeltaX: _propTypes.default.number,
    maxDeltaY: _propTypes.default.number,
    maxDist: _propTypes.default.number,
    minPointers: _propTypes.default.number
  }), {});
  exports.TapGestureHandler = TapGestureHandler;
  var FlingGestureHandler = (0, _createHandler.default)('FlingGestureHandler', (0, _objectSpread2.default)({}, GestureHandlerPropTypes, {
    numberOfPointers: _propTypes.default.number,
    direction: _propTypes.default.number
  }), {});
  exports.FlingGestureHandler = FlingGestureHandler;

  var ForceTouchFallback = function (_React$Component) {
    (0, _inherits2.default)(ForceTouchFallback, _React$Component);

    function ForceTouchFallback() {
      (0, _classCallCheck2.default)(this, ForceTouchFallback);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(ForceTouchFallback).apply(this, arguments));
    }

    (0, _createClass2.default)(ForceTouchFallback, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        console.warn('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase');
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);
    return ForceTouchFallback;
  }(_react.default.Component);

  var ForceTouchGestureHandler = _PlatformConstants.default.forceTouchAvailable ? (0, _createHandler.default)('ForceTouchGestureHandler', (0, _objectSpread2.default)({}, GestureHandlerPropTypes, {
    minForce: _propTypes.default.number,
    maxForce: _propTypes.default.number,
    feedbackOnActivation: _propTypes.default.bool
  }), {}) : ForceTouchFallback;
  exports.ForceTouchGestureHandler = ForceTouchGestureHandler;
  ForceTouchGestureHandler.forceTouchAvailable = _PlatformConstants.default.forceTouchAvailable || false;
  var LongPressGestureHandler = (0, _createHandler.default)('LongPressGestureHandler', (0, _objectSpread2.default)({}, GestureHandlerPropTypes, {
    minDurationMs: _propTypes.default.number,
    maxDist: _propTypes.default.number
  }), {});
  exports.LongPressGestureHandler = LongPressGestureHandler;

  function transformPanGestureHandlerProps(props) {
    var res = (0, _objectSpread2.default)({}, props);

    if (props.minDeltaX !== undefined) {
      delete res['minDeltaX'];
      res.activeOffsetXStart = -props.minDeltaX;
      res.activeOffsetXEnd = props.minDeltaX;
    }

    if (props.maxDeltaX !== undefined) {
      delete res['maxDeltaX'];
      res.failOffsetXStart = -props.maxDeltaX;
      res.failOffsetXEnd = props.maxDeltaX;
    }

    if (props.minOffsetX !== undefined) {
      delete res['minOffsetX'];

      if (props.minOffsetX < 0) {
        res.activeOffsetXStart = props.minOffsetX;
      } else {
        res.activeOffsetXEnd = props.minOffsetX;
      }
    }

    if (props.minDeltaY !== undefined) {
      delete res['minDeltaY'];
      res.activeOffsetYStart = -props.minDeltaY;
      res.activeOffsetYEnd = props.minDeltaY;
    }

    if (props.maxDeltaY !== undefined) {
      delete res['maxDeltaY'];
      res.failOffsetYStart = -props.maxDeltaY;
      res.failOffsetYEnd = props.maxDeltaY;
    }

    if (props.minOffsetY !== undefined) {
      delete res['minOffsetY'];

      if (props.minOffsetY < 0) {
        res.activeOffsetYStart = props.minOffsetY;
      } else {
        res.activeOffsetYEnd = props.minOffsetY;
      }
    }

    if (props.activeOffsetX !== undefined) {
      delete res['activeOffsetX'];

      if (Array.isArray(props.activeOffsetX)) {
        res.activeOffsetXStart = props.activeOffsetX[0];
        res.activeOffsetXEnd = props.activeOffsetX[1];
      } else if (props.activeOffsetX < 0) {
        res.activeOffsetXStart = props.activeOffsetX;
      } else {
        res.activeOffsetXEnd = props.activeOffsetX;
      }
    }

    if (props.activeOffsetY !== undefined) {
      delete res['activeOffsetY'];

      if (Array.isArray(props.activeOffsetY)) {
        res.activeOffsetYStart = props.activeOffsetY[0];
        res.activeOffsetYEnd = props.activeOffsetY[1];
      } else if (props.activeOffsetY < 0) {
        res.activeOffsetYStart = props.activeOffsetY;
      } else {
        res.activeOffsetYEnd = props.activeOffsetY;
      }
    }

    if (props.failOffsetX !== undefined) {
      delete res['failOffsetX'];

      if (Array.isArray(props.failOffsetX)) {
        res.failOffsetXStart = props.failOffsetX[0];
        res.failOffsetXEnd = props.failOffsetX[1];
      } else if (props.failOffsetX < 0) {
        res.failOffsetXStart = props.failOffsetX;
      } else {
        res.failOffsetXEnd = props.failOffsetX;
      }
    }

    if (props.failOffsetY !== undefined) {
      delete res['failOffsetY'];

      if (Array.isArray(props.failOffsetY)) {
        res.failOffsetYStart = props.failOffsetY[0];
        res.failOffsetYEnd = props.failOffsetY[1];
      } else if (props.failOffsetY < 0) {
        res.failOffsetYStart = props.failOffsetY;
      } else {
        res.failOffsetYEnd = props.failOffsetY;
      }
    }

    return res;
  }

  function managePanProps(props) {
    return transformPanGestureHandlerProps(props);
  }

  var PanGestureHandler = (0, _createHandler.default)('PanGestureHandler', (0, _objectSpread2.default)({}, GestureHandlerPropTypes, {
    activeOffsetY: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    activeOffsetX: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    failOffsetY: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    failOffsetX: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    minDist: _propTypes.default.number,
    minVelocity: _propTypes.default.number,
    minVelocityX: _propTypes.default.number,
    minVelocityY: _propTypes.default.number,
    minPointers: _propTypes.default.number,
    maxPointers: _propTypes.default.number,
    avgTouches: _propTypes.default.bool
  }), {}, managePanProps, {
    activeOffsetYStart: true,
    activeOffsetYEnd: true,
    activeOffsetXStart: true,
    activeOffsetXEnd: true,
    failOffsetYStart: true,
    failOffsetYEnd: true,
    failOffsetXStart: true,
    failOffsetXEnd: true
  });
  exports.PanGestureHandler = PanGestureHandler;
  var PinchGestureHandler = (0, _createHandler.default)('PinchGestureHandler', GestureHandlerPropTypes, {});
  exports.PinchGestureHandler = PinchGestureHandler;
  var RotationGestureHandler = (0, _createHandler.default)('RotationGestureHandler', GestureHandlerPropTypes, {});
  exports.RotationGestureHandler = RotationGestureHandler;
  var NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);
  var NATIVE_WRAPPER_PROPS_FILTER = (0, _objectSpread2.default)({}, NativeViewGestureHandler.propTypes, {
    onGestureHandlerEvent: _propTypes.default.func,
    onGestureHandlerStateChange: _propTypes.default.func
  });

  function createNativeWrapper(Component) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var ComponentWrapper = function (_React$Component2) {
      (0, _inherits2.default)(ComponentWrapper, _React$Component2);

      function ComponentWrapper() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, ComponentWrapper);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ComponentWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));

        _this._refHandler = function (node) {
          var source = node;

          while (source != null) {
            for (var _iterator = Object.getOwnPropertyNames(source), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator" : "@@iterator"]();;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var _methodName = _ref;

              if (!_methodName.startsWith('_') && !_methodName.startsWith('component') && !NATIVE_WRAPPER_BIND_BLACKLIST.has(_methodName) && typeof source[_methodName] === 'function' && _this[_methodName] === undefined) {
                if (source[_methodName].prototype) {
                  _this[_methodName] = source[_methodName].bind(node);
                } else {
                  _this[_methodName] = source[_methodName];
                }
              }
            }

            source = Object.getPrototypeOf(source);
          }
        };

        return _this;
      }

      (0, _createClass2.default)(ComponentWrapper, [{
        key: "render",
        value: function render() {
          var _this2 = this;

          var gestureHandlerProps = Object.keys(this.props).reduce(function (props, key) {
            if (key in NATIVE_WRAPPER_PROPS_FILTER) {
              props[key] = _this2.props[key];
            }

            return props;
          }, (0, _objectSpread2.default)({}, config));
          return _react.default.createElement(NativeViewGestureHandler, gestureHandlerProps, _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {
            ref: this._refHandler
          })));
        }
      }]);
      return ComponentWrapper;
    }(_react.default.Component);

    ComponentWrapper.propTypes = (0, _objectSpread2.default)({}, Component.propTypes);
    return ComponentWrapper;
  }

  var WrappedScrollView = createNativeWrapper(_reactNative.ScrollView, {
    disallowInterruption: true
  });
  exports.ScrollView = WrappedScrollView;
  var WrappedSlider = createNativeWrapper(_reactNative.Slider, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
  });
  exports.Slider = WrappedSlider;
  var WrappedSwitch = createNativeWrapper(_reactNative.Switch, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
  });
  exports.Switch = WrappedSwitch;
  var WrappedTextInput = createNativeWrapper(_reactNative.TextInput);
  exports.TextInput = WrappedTextInput;
  var WrappedToolbarAndroid = createNativeWrapper(_reactNative.ToolbarAndroid);
  exports.ToolbarAndroid = WrappedToolbarAndroid;
  var WrappedViewPagerAndroid = createNativeWrapper(_reactNative.ViewPagerAndroid, {
    disallowInterruption: true
  });
  exports.ViewPagerAndroid = WrappedViewPagerAndroid;
  var WrappedDrawerLayoutAndroid = createNativeWrapper(_reactNative.DrawerLayoutAndroid, {
    disallowInterruption: true
  });
  exports.DrawerLayoutAndroid = WrappedDrawerLayoutAndroid;
  WrappedDrawerLayoutAndroid.positions = _reactNative.DrawerLayoutAndroid.positions;

  _State.default.print = function (state) {
    var keys = Object.keys(_State.default);

    for (var i = 0; i < keys.length; i++) {
      if (state === _State.default[keys[i]]) {
        return keys[i];
      }
    }
  };

  var RawButton = createNativeWrapper(_GestureHandlerButton.default, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: false
  });
  exports.RawButton = RawButton;

  var BaseButton = function (_React$Component3) {
    (0, _inherits2.default)(BaseButton, _React$Component3);

    function BaseButton(props) {
      var _this3;

      (0, _classCallCheck2.default)(this, BaseButton);
      _this3 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(BaseButton).call(this, props));

      _this3._handleEvent = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var state = nativeEvent.state,
            oldState = nativeEvent.oldState,
            pointerInside = nativeEvent.pointerInside;
        var active = pointerInside && state === _State.default.ACTIVE;

        if (active !== _this3._lastActive && _this3.props.onActiveStateChange) {
          _this3.props.onActiveStateChange(active);
        }

        if (oldState === _State.default.ACTIVE && state !== _State.default.CANCELLED && _this3._lastActive && _this3.props.onPress) {
          _this3.props.onPress(active);
        }

        _this3._lastActive = active;
      };

      _this3._onHandlerStateChange = function (e) {
        _this3.props.onHandlerStateChange && _this3.props.onHandlerStateChange(e);

        _this3._handleEvent(e);
      };

      _this3._onGestureEvent = function (e) {
        _this3.props.onGestureEvent && _this3.props.onGestureEvent(e);

        _this3._handleEvent(e);
      };

      _this3._lastActive = false;
      return _this3;
    }

    (0, _createClass2.default)(BaseButton, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            rippleColor = _this$props.rippleColor,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "rippleColor"]);
        return _react.default.createElement(RawButton, (0, _extends2.default)({
          style: [{
            overflow: 'hidden'
          }, style],
          rippleColor: (0, _reactNative.processColor)(rippleColor)
        }, rest, {
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._onHandlerStateChange
        }));
      }
    }]);
    return BaseButton;
  }(_react.default.Component);

  exports.BaseButton = BaseButton;
  BaseButton.propTypes = (0, _objectSpread2.default)({}, RawButton.propTypes, {
    onPress: _propTypes.default.func,
    onActiveStateChange: _propTypes.default.func
  });

  var AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(BaseButton);

  var btnStyles = _reactNative.StyleSheet.create({
    underlay: {
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      top: 0
    }
  });

  var RectButton = function (_React$Component4) {
    (0, _inherits2.default)(RectButton, _React$Component4);

    function RectButton(props) {
      var _this4;

      (0, _classCallCheck2.default)(this, RectButton);
      _this4 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(RectButton).call(this, props));

      _this4._onActiveStateChange = function (active) {
        if (_reactNative.Platform.OS !== 'android') {
          _this4._opacity.setValue(active ? _this4.props.activeOpacity : 0);
        }

        _this4.props.onActiveStateChange && _this4.props.onActiveStateChange(active);
      };

      _this4._opacity = new _reactNative.Animated.Value(0);
      return _this4;
    }

    (0, _createClass2.default)(RectButton, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            children = _this$props2.children,
            rest = (0, _objectWithoutProperties2.default)(_this$props2, ["children"]);
        return _react.default.createElement(BaseButton, (0, _extends2.default)({}, rest, {
          onActiveStateChange: this._onActiveStateChange
        }), _react.default.createElement(_reactNative.Animated.View, {
          style: [btnStyles.underlay, {
            opacity: this._opacity
          }, {
            backgroundColor: this.props.underlayColor
          }]
        }), children);
      }
    }]);
    return RectButton;
  }(_react.default.Component);

  exports.RectButton = RectButton;
  RectButton.propTypes = BaseButton.propTypes;
  RectButton.defaultProps = {
    activeOpacity: 0.105,
    underlayColor: 'black'
  };

  var BorderlessButton = function (_React$Component5) {
    (0, _inherits2.default)(BorderlessButton, _React$Component5);

    function BorderlessButton(props) {
      var _this5;

      (0, _classCallCheck2.default)(this, BorderlessButton);
      _this5 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(BorderlessButton).call(this, props));

      _this5._onActiveStateChange = function (active) {
        if (_reactNative.Platform.OS !== 'android') {
          _this5._opacity.setValue(active ? _this5.props.activeOpacity : 1);
        }

        _this5.props.onActiveStateChange && _this5.props.onActiveStateChange(active);
      };

      _this5._opacity = new _reactNative.Animated.Value(1);
      return _this5;
    }

    (0, _createClass2.default)(BorderlessButton, [{
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            children = _this$props3.children,
            style = _this$props3.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props3, ["children", "style"]);
        return _react.default.createElement(AnimatedBaseButton, (0, _extends2.default)({}, rest, {
          onActiveStateChange: this._onActiveStateChange,
          style: [style, _reactNative.Platform.OS === 'ios' && {
            opacity: this._opacity
          }]
        }), children);
      }
    }]);
    return BorderlessButton;
  }(_react.default.Component);

  exports.BorderlessButton = BorderlessButton;
  BorderlessButton.propTypes = (0, _objectSpread2.default)({}, BaseButton.propTypes, {
    borderless: _propTypes.default.bool
  });
  BorderlessButton.defaultProps = {
    activeOpacity: 0.3,
    borderless: true
  };

  var FlatListWithGHScroll = function FlatListWithGHScroll(props) {
    return _react.default.createElement(_reactNative.FlatList, (0, _extends2.default)({}, props, {
      renderScrollComponent: function renderScrollComponent(props) {
        return _react.default.createElement(WrappedScrollView, props);
      }
    }));
  };

  exports.FlatList = FlatListWithGHScroll;
},393,[1,6,8,19,20,27,30,33,43,46,2,60,394,397,398,400,396,401]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createHandler;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _areEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _State = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _stateToPropMappings;

  var RNGestureHandlerModule = _reactNative.NativeModules.RNGestureHandlerModule,
      UIManager = _reactNative.NativeModules.UIManager;
  var oldSetJSResponder = UIManager.setJSResponder,
      oldClearJSResponder = UIManager.clearJSResponder;

  UIManager.setJSResponder = function (tag, blockNativeResponder) {
    RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);
    oldSetJSResponder(tag, blockNativeResponder);
  };

  UIManager.clearJSResponder = function () {
    RNGestureHandlerModule.handleClearJSResponder();
    oldClearJSResponder();
  };

  UIManager.genericDirectEventTypes = (0, _objectSpread2.default)({}, UIManager.genericDirectEventTypes, {
    onGestureHandlerEvent: {
      registrationName: 'onGestureHandlerEvent'
    },
    onGestureHandlerStateChange: {
      registrationName: 'onGestureHandlerStateChange'
    }
  });
  var handlerTag = 1;
  var handlerIDToTag = {};

  function isConfigParam(param, name) {
    return param !== undefined && typeof param !== 'function' && (typeof param !== 'object' || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';
  }

  function filterConfig(props, validProps) {
    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var res = (0, _objectSpread2.default)({}, defaults);
    Object.keys(validProps).forEach(function (key) {
      var value = props[key];

      if (isConfigParam(value, key)) {
        var _value = props[key];

        if (key === 'simultaneousHandlers' || key === 'waitFor') {
          _value = transformIntoHandlerTags(props[key]);
        } else if (key === 'hitSlop') {
          if (typeof _value !== 'object') {
            _value = {
              top: _value,
              left: _value,
              bottom: _value,
              right: _value
            };
          }
        }

        res[key] = _value;
      }
    });
    return res;
  }

  function transformIntoHandlerTags(handlerIDs) {
    if (!Array.isArray(handlerIDs)) {
      handlerIDs = [handlerIDs];
    }

    return handlerIDs.map(function (handlerID) {
      return handlerIDToTag[handlerID] || handlerID.current && handlerID.current._handlerTag || -1;
    }).filter(function (handlerTag) {
      return handlerTag > 0;
    });
  }

  function hasUnresolvedRefs(props) {
    var extract = function extract(refs) {
      if (!Array.isArray(refs)) {
        return refs && refs.current === null;
      }

      return refs.some(function (r) {
        return r && r.current === null;
      });
    };

    return extract(props['simultaneousHandlers']) || extract(props['waitFor']);
  }

  var stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty2.default)(_stateToPropMappings, _State.default.BEGAN, 'onBegan'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.FAILED, 'onFailed'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.CANCELLED, 'onCancelled'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.ACTIVE, 'onActivated'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.END, 'onEnded'), _stateToPropMappings);

  function createHandler(handlerName) {
    var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var transformProps = arguments.length > 3 ? arguments[3] : undefined;
    var customNativeProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    var Handler = function (_React$Component) {
      (0, _inherits2.default)(Handler, _React$Component);

      function Handler(props) {
        var _this;

        (0, _classCallCheck2.default)(this, Handler);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Handler).call(this, props));

        _this._onGestureHandlerEvent = function (event) {
          if (event.nativeEvent.handlerTag === _this._handlerTag) {
            _this.props.onGestureEvent && _this.props.onGestureEvent(event);
          } else {
            _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);
          }
        };

        _this._onGestureHandlerStateChange = function (event) {
          if (event.nativeEvent.handlerTag === _this._handlerTag) {
            _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);
            var stateEventName = stateToPropMappings[event.nativeEvent.state];

            if (typeof _this.props[stateEventName] === 'function') {
              _this.props[stateEventName](event);
            }
          } else {
            _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);
          }
        };

        _this._refHandler = function (node) {
          _this._viewNode = node;

          var child = _react.default.Children.only(_this.props.children);

          var ref = child.ref;

          if (ref !== null) {
            if (typeof ref === 'function') {
              ref(node);
            } else {
              ref.current = node;
            }
          }
        };

        _this._createGestureHandler = function (newConfig) {
          _this._config = newConfig;
          RNGestureHandlerModule.createGestureHandler(handlerName, _this._handlerTag, newConfig);
        };

        _this._attachGestureHandler = function (newViewTag) {
          _this._viewTag = newViewTag;
          RNGestureHandlerModule.attachGestureHandler(_this._handlerTag, newViewTag);
        };

        _this._updateGestureHandler = function (newConfig) {
          _this._config = newConfig;
          RNGestureHandlerModule.updateGestureHandler(_this._handlerTag, newConfig);
        };

        _this._dropGestureHandler = function () {
          RNGestureHandlerModule.dropGestureHandler(_this._handlerTag);
        };

        _this._handlerTag = handlerTag++;
        _this._config = {};

        if (props.id) {
          if (handlerIDToTag[props.id] !== undefined) {
            throw new Error("Handler with ID \"" + props.id + "\" already registered");
          }

          handlerIDToTag[props.id] = _this._handlerTag;
        }

        return _this;
      }

      (0, _createClass2.default)(Handler, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this._updateEnqueued) {
            clearImmediate(this._updateEnqueued);
          }

          if (this.props.id) {
            delete handlerIDToTag[this.props.id];
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          if (hasUnresolvedRefs(this.props)) {
            this._updateEnqueued = setImmediate(function () {
              _this2._updateEnqueued = null;

              _this2._update();
            });
          }

          this._createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, (0, _objectSpread2.default)({}, this.constructor.propTypes, customNativeProps), config));

          this._attachGestureHandler((0, _reactNative.findNodeHandle)(this._viewNode));
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);

          if (this._viewTag !== viewTag) {
            this._attachGestureHandler(viewTag);
          }

          this._update();
        }
      }, {
        key: "_update",
        value: function _update() {
          var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, (0, _objectSpread2.default)({}, this.constructor.propTypes, customNativeProps), config);

          if (!(0, _areEqual.default)(this._config, newConfig)) {
            this._updateGestureHandler(newConfig);
          }
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(updates) {
          var mergedProps = (0, _objectSpread2.default)({}, this.props, updates);
          var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, (0, _objectSpread2.default)({}, this.constructor.propTypes, customNativeProps), config);

          this._updateGestureHandler(newConfig);
        }
      }, {
        key: "render",
        value: function render() {
          var gestureEventHandler = this._onGestureHandlerEvent;
          var _this$props = this.props,
              onGestureEvent = _this$props.onGestureEvent,
              onGestureHandlerEvent = _this$props.onGestureHandlerEvent;

          if (onGestureEvent && typeof onGestureEvent !== 'function') {
            if (onGestureHandlerEvent) {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }

            gestureEventHandler = this.props.onGestureEvent;
          } else {
            if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }
          }

          var gestureStateEventHandler = this._onGestureHandlerStateChange;
          var _this$props2 = this.props,
              onHandlerStateChange = _this$props2.onHandlerStateChange,
              onGestureHandlerStateChange = _this$props2.onGestureHandlerStateChange;

          if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
            if (onGestureHandlerStateChange) {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }

            gestureStateEventHandler = this.props.onHandlerStateChange;
          } else {
            if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }
          }

          var child = _react.default.Children.only(this.props.children);

          var grandChildren = child.props.children;

          if (_reactNative.Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {
            grandChildren = _react.default.Children.toArray(grandChildren);
            grandChildren.push(_reactNative.Touchable.renderDebugView({
              color: 'mediumspringgreen',
              hitSlop: child.props.hitSlop
            }));
          }

          return _react.default.cloneElement(child, {
            ref: this._refHandler,
            collapsable: false,
            onGestureHandlerEvent: gestureEventHandler,
            onGestureHandlerStateChange: gestureStateEventHandler
          }, grandChildren);
        }
      }]);
      return Handler;
    }(_react.default.Component);

    Handler.displayName = handlerName;
    Handler.propTypes = propTypes;
    return Handler;
  }
},394,[1,19,20,27,30,33,44,43,46,2,395,396]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var aStackPool = [];
  var bStackPool = [];
  /**
   * Checks if two values are equal. Values may be primitives, arrays, or objects.
   * Returns true if both arguments have the same keys and values.
   *
   * @see http://underscorejs.org
   * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
   * @license MIT
   */

  function areEqual(a, b) {
    var aStack = aStackPool.length ? aStackPool.pop() : [];
    var bStack = bStackPool.length ? bStackPool.pop() : [];
    var result = eq(a, b, aStack, bStack);
    aStack.length = 0;
    bStack.length = 0;
    aStackPool.push(aStack);
    bStackPool.push(bStack);
    return result;
  }

  function eq(a, b, aStack, bStack) {
    if (a === b) {
      return a !== 0 || 1 / a == 1 / b;
    }

    if (a == null || b == null) {
      return false;
    }

    if (typeof a != 'object' || typeof b != 'object') {
      return false;
    }

    var objToStr = Object.prototype.toString;
    var className = objToStr.call(a);

    if (className != objToStr.call(b)) {
      return false;
    }

    switch (className) {
      case '[object String]':
        return a == String(b);

      case '[object Number]':
        return isNaN(a) || isNaN(b) ? false : a == Number(b);

      case '[object Date]':
      case '[object Boolean]':
        return +a == +b;

      case '[object RegExp]':
        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    }

    var length = aStack.length;

    while (length--) {
      if (aStack[length] == a) {
        return bStack[length] == b;
      }
    }

    aStack.push(a);
    bStack.push(b);
    var size = 0;

    if (className === '[object Array]') {
      size = a.length;

      if (size !== b.length) {
        return false;
      }

      while (size--) {
        if (!eq(a[size], b[size], aStack, bStack)) {
          return false;
        }
      }
    } else {
      if (a.constructor !== b.constructor) {
        return false;
      }

      if (a.hasOwnProperty('valueOf') && b.hasOwnProperty('valueOf')) {
        return a.valueOf() == b.valueOf();
      }

      var keys = Object.keys(a);

      if (keys.length != Object.keys(b).length) {
        return false;
      }

      for (var i = 0; i < keys.length; i++) {
        if (!eq(a[keys[i]], b[keys[i]], aStack, bStack)) {
          return false;
        }
      }
    }

    aStack.pop();
    bStack.pop();
    return true;
  }

  module.exports = areEqual;
},395,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    UNDETERMINED: 0,
    FAILED: 1,
    BEGAN: 2,
    CANCELLED: 3,
    ACTIVE: 4,
    END: 5
  };
  exports.default = _default;
},396,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var RNGestureHandlerButton = (0, _reactNative.requireNativeComponent)('RNGestureHandlerButton', null);
  var _default = RNGestureHandlerButton;
  exports.default = _default;
},397,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = gestureHandlerRootHOC;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var iface = {
    name: 'GestureHandlerRootView',
    propTypes: (0, _objectSpread2.default)({}, _reactNative.ViewPropTypes)
  };
  var GestureHandlerRootView = (0, _reactNative.requireNativeComponent)('GestureHandlerRootView', iface);

  function gestureHandlerRootHOC(Component) {
    var containerStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    var Wrapper = function (_React$Component) {
      (0, _inherits2.default)(Wrapper, _React$Component);

      function Wrapper() {
        (0, _classCallCheck2.default)(this, Wrapper);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Wrapper).apply(this, arguments));
      }

      (0, _createClass2.default)(Wrapper, [{
        key: "render",
        value: function render() {
          return _react.default.createElement(GestureHandlerRootView, {
            style: [styles.container, containerStyles]
          }, _react.default.createElement(Component, this.props));
        }
      }]);
      return Wrapper;
    }(_react.default.Component);

    (0, _hoistNonReactStatics.default)(Wrapper, Component);
    return Wrapper;
  }

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},398,[1,19,20,27,30,33,43,46,2,399]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }

      return targetComponent;
    }

    return targetComponent;
  }

  module.exports = hoistNonReactStatics;
},399,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var RNGestureHandlerModule = _reactNative.NativeModules.RNGestureHandlerModule;
  var _default = RNGestureHandlerModule.Direction;
  exports.default = _default;
},400,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.PlatformConstants;
  exports.default = _default;
},401,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[11]);

  var DRAG_TOSS = 0.05;
  var IDLE = 'Idle';
  var DRAGGING = 'Dragging';
  var SETTLING = 'Settling';

  var DrawerLayout = function (_Component) {
    (0, _inherits2.default)(DrawerLayout, _Component);

    function DrawerLayout(_props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, DrawerLayout);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerLayout).call(this, _props, context));
      _this._accessibilityIsModalView = _react.default.createRef();
      _this._pointerEventsView = _react.default.createRef();
      _this._panGestureHandler = _react.default.createRef();
      _this._drawerShown = false;

      _this._updateAnimatedEvent = function (props, state) {
        var drawerPosition = props.drawerPosition,
            drawerWidth = props.drawerWidth,
            drawerType = props.drawerType;
        var dragXValue = state.dragX,
            touchXValue = state.touchX,
            drawerTranslation = state.drawerTranslation,
            containerWidth = state.containerWidth;
        var dragX = dragXValue;
        var touchX = touchXValue;

        if (drawerPosition !== 'left') {
          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);
          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));
          touchXValue.setValue(containerWidth);
        } else {
          touchXValue.setValue(0);
        }

        var translationX = dragX;

        if (drawerType === 'front') {
          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));

          var dragOffsetFromOnStartPosition = startPositionX.interpolate({
            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],
            outputRange: [0, 0, 1]
          });
          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);
        }

        _this._openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({
          inputRange: [0, drawerWidth],
          outputRange: [0, 1],
          extrapolate: 'clamp'
        });
        _this._onGestureEvent = _reactNative.Animated.event([{
          nativeEvent: {
            translationX: dragXValue,
            x: touchXValue
          }
        }], {
          useNativeDriver: props.useNativeAnimations
        });
      };

      _this._handleContainerLayout = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        _this.setState({
          containerWidth: nativeEvent.layout.width
        });
      };

      _this._emitStateChanged = function (newState, drawerWillShow) {
        _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);
      };

      _this._openingHandlerStateChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;

        if (nativeEvent.oldState === _GestureHandler.State.ACTIVE) {
          _this._handleRelease(nativeEvent);
        } else if (nativeEvent.state === _GestureHandler.State.ACTIVE) {
          _this._emitStateChanged(DRAGGING, false);

          if (_this.props.keyboardDismissMode === 'on-drag') {
            _reactNative.Keyboard.dismiss();
          }

          if (_this.props.hideStatusBar) {
            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');
          }
        }
      };

      _this._onTapHandlerStateChange = function (_ref3) {
        var nativeEvent = _ref3.nativeEvent;

        if (_this._drawerShown && nativeEvent.oldState === _GestureHandler.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {
          _this.closeDrawer();
        }
      };

      _this._handleRelease = function (nativeEvent) {
        var _this$props = _this.props,
            drawerWidth = _this$props.drawerWidth,
            drawerPosition = _this$props.drawerPosition,
            drawerType = _this$props.drawerType;
        var containerWidth = _this.state.containerWidth;
        var dragX = nativeEvent.translationX,
            velocityX = nativeEvent.velocityX,
            touchX = nativeEvent.x;

        if (drawerPosition !== 'left') {
          dragX = -dragX;
          touchX = containerWidth - touchX;
          velocityX = -velocityX;
        }

        var gestureStartX = touchX - dragX;
        var dragOffsetBasedOnStart = 0;

        if (drawerType === 'front') {
          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;
        }

        var startOffsetX = dragX + dragOffsetBasedOnStart + (_this._drawerShown ? drawerWidth : 0);
        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;
        var shouldOpen = projOffsetX > drawerWidth / 2;

        if (shouldOpen) {
          _this._animateDrawer(startOffsetX, drawerWidth, velocityX);
        } else {
          _this._animateDrawer(startOffsetX, 0, velocityX);
        }
      };

      _this._updateShowing = function (showing) {
        _this._drawerShown = showing;
        _this._accessibilityIsModalView.current && _this._accessibilityIsModalView.current.setNativeProps({
          accessibilityViewIsModal: showing
        });
        _this._pointerEventsView.current && _this._pointerEventsView.current.setNativeProps({
          pointerEvents: showing ? 'auto' : 'none'
        });
        var _this$props2 = _this.props,
            drawerPosition = _this$props2.drawerPosition,
            minSwipeDistance = _this$props2.minSwipeDistance,
            edgeWidth = _this$props2.edgeWidth;
        var fromLeft = drawerPosition === 'left';
        var gestureOrientation = (fromLeft ? 1 : -1) * (_this._drawerShown ? -1 : 1);
        var hitSlop = fromLeft ? {
          left: 0,
          width: showing ? undefined : edgeWidth
        } : {
          right: 0,
          width: showing ? undefined : edgeWidth
        };
        _this._panGestureHandler.current && _this._panGestureHandler.current.setNativeProps({
          hitSlop: hitSlop,
          activeOffsetX: gestureOrientation * minSwipeDistance
        });
      };

      _this._animateDrawer = function (fromValue, toValue, velocity) {
        _this.state.dragX.setValue(0);

        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);

        if (fromValue !== undefined) {
          var nextFramePosition = fromValue;

          if (_this.props.useNativeAnimations) {
            if (fromValue < toValue && velocity > 0) {
              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);
            } else if (fromValue > toValue && velocity < 0) {
              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);
            }
          }

          _this.state.drawerTranslation.setValue(nextFramePosition);
        }

        var willShow = toValue !== 0;

        _this._updateShowing(willShow);

        _this._emitStateChanged(SETTLING, willShow);

        if (_this.props.hideStatusBar) {
          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');
        }

        _reactNative.Animated.spring(_this.state.drawerTranslation, {
          velocity: velocity,
          bounciness: 0,
          toValue: toValue,
          useNativeDriver: _this.props.useNativeAnimations
        }).start(function (_ref4) {
          var finished = _ref4.finished;

          if (finished) {
            _this._emitStateChanged(IDLE, willShow);

            if (willShow) {
              _this.props.onDrawerOpen && _this.props.onDrawerOpen();
            } else {
              _this.props.onDrawerClose && _this.props.onDrawerClose();
            }
          }
        });
      };

      _this.openDrawer = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);

        _this.forceUpdate();
      };

      _this.closeDrawer = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);

        _this.forceUpdate();
      };

      _this._renderOverlay = function () {
        (0, _invariant.default)(_this._openValue, 'should be set');

        var overlayOpacity = _this._openValue.interpolate({
          inputRange: [0, 1],
          outputRange: [0, 0.7],
          extrapolate: 'clamp'
        });

        var dynamicOverlayStyles = {
          opacity: overlayOpacity,
          backgroundColor: _this.props.overlayColor
        };
        return _react.default.createElement(_GestureHandler.TapGestureHandler, {
          onHandlerStateChange: _this._onTapHandlerStateChange
        }, _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: _this._drawerShown ? 'auto' : 'none',
          ref: _this._pointerEventsView,
          style: [styles.overlay, dynamicOverlayStyles]
        }));
      };

      _this._renderDrawer = function () {
        var _this$props3 = _this.props,
            drawerBackgroundColor = _this$props3.drawerBackgroundColor,
            drawerWidth = _this$props3.drawerWidth,
            drawerPosition = _this$props3.drawerPosition,
            drawerType = _this$props3.drawerType,
            drawerContainerStyle = _this$props3.drawerContainerStyle,
            contentContainerStyle = _this$props3.contentContainerStyle;
        var fromLeft = drawerPosition === 'left';
        var drawerSlide = drawerType !== 'back';
        var containerSlide = drawerType !== 'front';
        var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;
        var dynamicDrawerStyles = {
          backgroundColor: drawerBackgroundColor,
          width: drawerWidth
        };
        var openValue = _this._openValue;
        (0, _invariant.default)(openValue, 'should be set');
        var containerStyles;

        if (containerSlide) {
          var containerTranslateX = openValue.interpolate({
            inputRange: [0, 1],
            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],
            extrapolate: 'clamp'
          });
          containerStyles = {
            transform: [{
              translateX: containerTranslateX
            }]
          };
        }

        var drawerTranslateX = 0;

        if (drawerSlide) {
          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;
          drawerTranslateX = openValue.interpolate({
            inputRange: [0, 1],
            outputRange: [closedDrawerOffset, 0],
            extrapolate: 'clamp'
          });
        }

        var drawerStyles = {
          transform: [{
            translateX: drawerTranslateX
          }],
          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'
        };
        return _react.default.createElement(_reactNative.Animated.View, {
          style: styles.main,
          onLayout: _this._handleContainerLayout
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle]
        }, typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()), _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: "box-none",
          ref: _this._accessibilityIsModalView,
          accessibilityViewIsModal: _this._drawerShown,
          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]
        }, _react.default.createElement(_reactNative.View, {
          style: dynamicDrawerStyles
        }, _this.props.renderNavigationView(_this._openValue))));
      };

      _this._setPanGestureRef = function (ref) {
        _this._panGestureHandler.current = ref;
        _this.props.onGestureRef && _this.props.onGestureRef(ref);
      };

      var _dragX = new _reactNative.Animated.Value(0);

      var _touchX = new _reactNative.Animated.Value(0);

      var _drawerTranslation = new _reactNative.Animated.Value(0);

      _this.state = {
        dragX: _dragX,
        touchX: _touchX,
        drawerTranslation: _drawerTranslation,
        containerWidth: 0
      };

      _this._updateAnimatedEvent(_props, _this.state);

      return _this;
    }

    (0, _createClass2.default)(DrawerLayout, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate(props, state) {
        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {
          this._updateAnimatedEvent(props, state);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
            drawerPosition = _this$props4.drawerPosition,
            drawerLockMode = _this$props4.drawerLockMode,
            edgeWidth = _this$props4.edgeWidth,
            minSwipeDistance = _this$props4.minSwipeDistance;
        var fromLeft = drawerPosition === 'left';
        var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);
        var hitSlop = fromLeft ? {
          left: 0,
          width: this._drawerShown ? undefined : edgeWidth
        } : {
          right: 0,
          width: this._drawerShown ? undefined : edgeWidth
        };
        return _react.default.createElement(_GestureHandler.PanGestureHandler, {
          ref: this._setPanGestureRef,
          hitSlop: hitSlop,
          activeOffsetX: gestureOrientation * minSwipeDistance,
          failOffsetY: [-15, 15],
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._openingHandlerStateChange,
          enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'
        }, this._renderDrawer());
      }
    }]);
    return DrawerLayout;
  }(_react.Component);

  exports.default = DrawerLayout;
  DrawerLayout.defaultProps = {
    drawerWidth: 200,
    drawerPosition: 'left',
    useNativeAnimations: true,
    drawerType: 'front',
    edgeWidth: 20,
    minSwipeDistance: 3,
    overlayColor: 'black',
    drawerLockMode: 'unlocked'
  };
  DrawerLayout.positions = {
    Left: 'left',
    Right: 'right'
  };

  var styles = _reactNative.StyleSheet.create({
    drawerContainer: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1001,
      flexDirection: 'row'
    }),
    containerInFront: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1002
    }),
    containerOnBack: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject),
    main: {
      flex: 1,
      zIndex: 0,
      overflow: 'hidden'
    },
    overlay: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1000
    })
  });
},402,[361,1,43,19,20,27,30,33,46,403,2,393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},403,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "TouchableNativeFeedback", {
    enumerable: true,
    get: function get() {
      return _TouchableNativeFeedback.default;
    }
  });
  Object.defineProperty(exports, "TouchableWithoutFeedback", {
    enumerable: true,
    get: function get() {
      return _TouchableWithoutFeedback.default;
    }
  });
  Object.defineProperty(exports, "TouchableOpacity", {
    enumerable: true,
    get: function get() {
      return _TouchableOpacity.default;
    }
  });
  Object.defineProperty(exports, "TouchableHighlight", {
    enumerable: true,
    get: function get() {
      return _TouchableHighlight.default;
    }
  });

  var _TouchableNativeFeedback = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _TouchableWithoutFeedback = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _TouchableOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _TouchableHighlight = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
},404,[1,405,407,408,409]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _GenericTouchable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var TouchableNativeFeedback = function (_Component) {
    (0, _inherits2.default)(TouchableNativeFeedback, _Component);

    function TouchableNativeFeedback() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TouchableNativeFeedback);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TouchableNativeFeedback)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.getExtraButtonProps = function () {
        var extraProps = {};
        var background = _this.props.background;

        if (background) {
          if (background.type === 'Ripple') {
            extraProps['borderless'] = background.borderless;
            extraProps['rippleColor'] = background.color;
          } else if (background.type === 'SelectableBackgroundBorderless') {
            extraProps['borderless'] = true;
          }
        }

        extraProps['foreground'] = _this.props.useForeground;
        return extraProps;
      };

      return _this;
    }

    (0, _createClass2.default)(TouchableNativeFeedback, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            _this$props$style = _this$props.style,
            style = _this$props$style === undefined ? {} : _this$props$style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);
        return _react.default.createElement(_GenericTouchable.default, (0, _extends2.default)({}, rest, {
          style: style,
          extraButtonProps: this.getExtraButtonProps()
        }));
      }
    }]);
    return TouchableNativeFeedback;
  }(_react.Component);

  exports.default = TouchableNativeFeedback;

  TouchableNativeFeedback.SelectableBackground = function () {
    return {
      type: 'SelectableBackground'
    };
  };

  TouchableNativeFeedback.SelectableBackgroundBorderless = function () {
    return {
      type: 'SelectableBackgroundBorderless'
    };
  };

  TouchableNativeFeedback.Ripple = function (color, borderless) {
    return {
      type: 'Ripple',
      color: color,
      borderless: borderless
    };
  };

  TouchableNativeFeedback.canUseNativeForeground = function () {
    return Platform.Version >= 23;
  };

  TouchableNativeFeedback.defaultProps = (0, _objectSpread2.default)({}, _GenericTouchable.default.defaultProps, {
    useForeground: true,
    extraButtonProps: {
      rippleColor: null
    }
  });
  TouchableNativeFeedback.propTypes = (0, _objectSpread2.default)({}, _GenericTouchable.default.publicPropTypes, {
    useForeground: _propTypes.default.bool,
    background: _propTypes.default.string,
    style: _propTypes.default.object
  });
},405,[361,1,43,8,6,19,20,27,30,33,406,46,60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.TOUCHABLE_STATE = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[11]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var TOUCHABLE_STATE = {
    UNDETERMINED: 0,
    BEGAN: 1,
    MOVED_OUTSIDE: 2
  };
  exports.TOUCHABLE_STATE = TOUCHABLE_STATE;
  var PublicPropTypes = {
    accessible: _propTypes.default.bool,
    accessibilityLabel: _propTypes.default.node,
    accessibilityHint: _propTypes.default.string,
    hitSlop: _propTypes.default.shape({
      top: _propTypes.default.number,
      left: _propTypes.default.number,
      bottom: _propTypes.default.number,
      right: _propTypes.default.number
    }),
    disabled: _propTypes.default.bool,
    onPress: _propTypes.default.func,
    onPressIn: _propTypes.default.func,
    onPressOut: _propTypes.default.func,
    onLayout: _propTypes.default.func,
    onLongPress: _propTypes.default.func,
    nativeID: _propTypes.default.string,
    testID: _propTypes.default.string,
    delayPressIn: _propTypes.default.number,
    delayPressOut: _propTypes.default.number,
    delayLongPress: _propTypes.default.number
  };
  var InternalPropTypes = {
    extraButtonProps: _propTypes.default.object,
    onStateChange: _propTypes.default.func
  };

  var GenericTouchable = function (_Component) {
    (0, _inherits2.default)(GenericTouchable, _Component);

    function GenericTouchable() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, GenericTouchable);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(GenericTouchable)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.longPressDetected = false;
      _this.pointerInside = true;
      _this.STATE = TOUCHABLE_STATE.UNDETERMINED;

      _this.handlePressIn = function () {
        if (_this.props.delayPressIn) {
          _this.pressInTimeout = setTimeout(function () {
            _this.moveToState(TOUCHABLE_STATE.BEGAN);

            _this.pressInTimeout = null;
          }, _this.props.delayPressIn);
        } else {
          _this.moveToState(TOUCHABLE_STATE.BEGAN);
        }

        if (_this.props.onLongPress) {
          var time = (_this.props.delayPressIn || 0) + (_this.props.delayLongPress || 0);
          _this.longPressTimeout = setTimeout(_this.onLongPressDetected, time);
        }
      };

      _this.handleMoveOutside = function () {
        if (_this.props.delayPressOut) {
          _this.pressOutTimeout = _this.pressOutTimeout || setTimeout(function () {
            _this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);

            _this.pressOutTimeout = null;
          }, _this.props.delayPressOut);
        } else {
          _this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);
        }
      };

      _this.handleGoToUndetermined = function () {
        clearTimeout(_this.pressOutTimeout);

        if (_this.props.delayPressOut) {
          _this.pressOutTimeout = setTimeout(function () {
            if (_this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
              _this.moveToState(TOUCHABLE_STATE.BEGAN);
            }

            _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);

            _this.pressOutTimeout = null;
          }, _this.props.delayPressOut);
        } else {
          if (_this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
            _this.moveToState(TOUCHABLE_STATE.BEGAN);
          }

          _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
        }
      };

      _this.moveToState = function (newState) {
        if (newState === _this.STATE) {
          return;
        }

        if (newState === TOUCHABLE_STATE.BEGAN) {
          _this.props.onPressIn && _this.props.onPressIn();
        } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {
          _this.props.onPressOut && _this.props.onPressOut();
        } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {
          _this.reset();

          if (_this.STATE === TOUCHABLE_STATE.BEGAN) {
            _this.props.onPressOut && _this.props.onPressOut();
          }
        }

        _this.props.onStateChange && _this.props.onStateChange(_this.STATE, newState);
        _this.STATE = newState;
      };

      _this.onGestureEvent = function (_ref) {
        var pointerInside = _ref.nativeEvent.pointerInside;

        if (_this.pointerInside !== pointerInside) {
          if (pointerInside) {
            _this.onMoveIn();
          } else {
            _this.onMoveOut();
          }
        }

        _this.pointerInside = pointerInside;
      };

      _this.onHandlerStateChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var state = nativeEvent.state;

        if (state === _GestureHandler.State.CANCELLED || state === _GestureHandler.State.FAILED) {
          _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
        } else if (state === (_reactNative.Platform.OS === 'ios' ? _GestureHandler.State.ACTIVE : _GestureHandler.State.BEGAN) && _this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
          _this.handlePressIn();
        } else if (state === _GestureHandler.State.END) {
          var shouldCallOnPress = !_this.longPressDetected && _this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && _this.pressOutTimeout === null;

          _this.handleGoToUndetermined();

          if (shouldCallOnPress) {
            _this.props.onPress && _this.props.onPress();
          }
        }
      };

      _this.onLongPressDetected = function () {
        _this.longPressDetected = true;

        _this.props.onLongPress();
      };

      _this.onMoveIn = function () {
        if (_this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {
          _this.moveToState(TOUCHABLE_STATE.BEGAN);
        }
      };

      _this.onMoveOut = function () {
        clearTimeout(_this.longPressTimeout);
        _this.longPressTimeout = null;

        if (_this.STATE === TOUCHABLE_STATE.BEGAN) {
          _this.handleMoveOutside();
        }
      };

      return _this;
    }

    (0, _createClass2.default)(GenericTouchable, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.reset();
      }
    }, {
      key: "reset",
      value: function reset() {
        this.longPressDetected = false;
        this.pointerInside = true;
        clearTimeout(this.pressInTimeout);
        clearTimeout(this.pressOutTimeout);
        clearTimeout(this.longPressTimeout);
        this.pressOutTimeout = null;
        this.longPressTimeout = null;
        this.pressInTimeout = null;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.reset();
      }
    }, {
      key: "render",
      value: function render() {
        var coreProps = {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityStates: this.props.accessibilityStates,
          accessibilityTraits: this.props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop
        };
        return _react.default.createElement(_GestureHandler.BaseButton, (0, _extends2.default)({
          onHandlerStateChange: this.props.disabled || this.onHandlerStateChange,
          onGestureEvent: this.onGestureEvent,
          hitSlop: this.props.hitSlop
        }, this.props.extraButtonProps), _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, coreProps, {
          style: this.props.style
        }), this.props.children));
      }
    }]);
    return GenericTouchable;
  }(_react.Component);

  exports.default = GenericTouchable;
  GenericTouchable.publicPropTypes = PublicPropTypes;
  GenericTouchable.internalPropTypes = InternalPropTypes;
  GenericTouchable.propTypes = (0, _objectSpread2.default)({}, InternalPropTypes, PublicPropTypes);
  GenericTouchable.defaultProps = {
    delayLongPress: 600,
    extraButtonProps: {
      rippleColor: 'transparent'
    }
  };
},406,[361,1,43,8,19,20,27,30,33,46,2,393,60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _GenericTouchable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var TouchableWithoutFeedback = function TouchableWithoutFeedback(props) {
    return _react.default.createElement(_GenericTouchable.default, props);
  };

  TouchableWithoutFeedback.defaultProps = _GenericTouchable.default.defaultProps;
  TouchableWithoutFeedback.propTypes = _GenericTouchable.default.publicPropTypes;
  var _default = TouchableWithoutFeedback;
  exports.default = _default;
},407,[1,406,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _GenericTouchable = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var TouchableOpacity = function (_Component) {
    (0, _inherits2.default)(TouchableOpacity, _Component);

    function TouchableOpacity() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TouchableOpacity);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TouchableOpacity)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.getChildStyleOpacityWithDefault = function () {
        var childStyle = _reactNative.StyleSheet.flatten(_this.props.style) || {};
        return childStyle.opacity == null ? 1 : childStyle.opacity;
      };

      _this.opacity = new _reactNative.Animated.Value(_this.getChildStyleOpacityWithDefault());

      _this.setOpacityTo = function (value, duration) {
        _reactNative.Animated.timing(_this.opacity, {
          toValue: value,
          duration: duration,
          easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
          useNativeDriver: true
        }).start();
      };

      _this.onStateChange = function (from, to) {
        if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {
          _this.setOpacityTo(_this.props.activeOpacity, 0);
        } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {
          _this.setOpacityTo(_this.getChildStyleOpacityWithDefault(), 150);
        }
      };

      return _this;
    }

    (0, _createClass2.default)(TouchableOpacity, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            _this$props$style = _this$props.style,
            style = _this$props$style === undefined ? {} : _this$props$style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);
        return _react.default.createElement(_GenericTouchable.default, (0, _extends2.default)({}, rest, {
          style: (0, _objectSpread2.default)({}, style, {
            opacity: this.opacity
          }),
          onStateChange: this.onStateChange
        }), this.props.children ? this.props.children : _react.default.createElement(_reactNative.View, null));
      }
    }]);
    return TouchableOpacity;
  }(_react.Component);

  exports.default = TouchableOpacity;
  TouchableOpacity.defaultProps = (0, _objectSpread2.default)({}, _GenericTouchable.default.defaultProps, {
    activeOpacity: 0.2
  });
  TouchableOpacity.propTypes = (0, _objectSpread2.default)({}, _GenericTouchable.default.publicPropTypes, {
    style: _propTypes.default.object,
    activeOpacity: _propTypes.default.number
  });
},408,[361,1,8,43,6,19,20,27,30,33,2,406,46,60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _GenericTouchable = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var TouchableHighlight = function (_Component) {
    (0, _inherits2.default)(TouchableHighlight, _Component);

    function TouchableHighlight(props) {
      var _this;

      (0, _classCallCheck2.default)(this, TouchableHighlight);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TouchableHighlight).call(this, props));

      _this.showUnderlay = function () {
        if (!_this.hasPressHandler()) {
          return;
        }

        _this.setState({
          extraChildStyle: {
            opacity: _this.props.activeOpacity
          },
          extraUnderlayStyle: {
            backgroundColor: _this.props.underlayColor
          }
        });

        _this.props.onShowUnderlay && _this.props.onShowUnderlay();
      };

      _this.hasPressHandler = function () {
        return _this.props.onPress || _this.props.onPressIn || _this.props.onPressOut || _this.props.onLongPress;
      };

      _this.hideUnderlay = function () {
        _this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });

        _this.props.onHideUnderlay && _this.props.onHideUnderlay();
      };

      _this.onStateChange = function (from, to) {
        if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {
          _this.showUnderlay();
        } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {
          _this.hideUnderlay();
        }
      };

      _this.state = {
        extraChildStyle: null,
        extraUnderlayStyle: {
          backgroundColor: props.underlayColor
        }
      };
      return _this;
    }

    (0, _createClass2.default)(TouchableHighlight, [{
      key: "renderChildren",
      value: function renderChildren() {
        if (!this.props.children) {
          return _react.default.createElement(_reactNative.View, null);
        }

        var child = _react.default.Children.only(this.props.children);

        return _react.default.cloneElement(child, {
          style: _reactNative.StyleSheet.compose(child.props.style, this.state.extraChildStyle)
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            _this$props$style = _this$props.style,
            style = _this$props$style === undefined ? {} : _this$props$style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);
        var extraUnderlayStyle = this.state.extraUnderlayStyle;
        return _react.default.createElement(_GenericTouchable.default, (0, _extends2.default)({}, rest, {
          style: (0, _objectSpread2.default)({}, style, extraUnderlayStyle),
          onStateChange: this.onStateChange
        }), this.renderChildren());
      }
    }]);
    return TouchableHighlight;
  }(_react.Component);

  exports.default = TouchableHighlight;
  TouchableHighlight.defaultProps = (0, _objectSpread2.default)({}, _GenericTouchable.default.defaultProps, {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  });
  TouchableHighlight.propTypes = (0, _objectSpread2.default)({}, _GenericTouchable.default.publicPropTypes, {
    activeOpacity: _propTypes.default.number,
    underlayColor: _propTypes.default.string,
    style: _propTypes.default.object,
    onShowUnderlay: _propTypes.default.func,
    onHideUnderlay: _propTypes.default.func
  });
},409,[361,1,8,43,6,19,20,27,30,33,46,406,2,60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = {
    get createStackNavigator() {
      return _$$_REQUIRE(_dependencyMap[1]).default;
    },

    get Assets() {
      return _reactNative.Platform.select({
        ios: [_$$_REQUIRE(_dependencyMap[2]), _$$_REQUIRE(_dependencyMap[3])],
        android: [_$$_REQUIRE(_dependencyMap[2])]
      });
    },

    get Header() {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    },

    get HeaderBackButton() {
      return _$$_REQUIRE(_dependencyMap[5]).default;
    },

    get HeaderTitle() {
      return _$$_REQUIRE(_dependencyMap[6]).default;
    },

    get HeaderStyleInterpolator() {
      return _$$_REQUIRE(_dependencyMap[7]).default;
    },

    get StackView() {
      return _$$_REQUIRE(_dependencyMap[8]).default;
    },

    get StackViewCard() {
      return _$$_REQUIRE(_dependencyMap[9]).default;
    },

    get StackViewLayout() {
      return _$$_REQUIRE(_dependencyMap[10]).default;
    },

    get StackViewStyleInterpolator() {
      return _$$_REQUIRE(_dependencyMap[11]).default;
    },

    get StackViewTransitionConfigs() {
      return _$$_REQUIRE(_dependencyMap[12]).default;
    },

    get createPointerEventsContainer() {
      return _$$_REQUIRE(_dependencyMap[13]).default;
    },

    get Transitioner() {
      return _$$_REQUIRE(_dependencyMap[14]).default;
    },

    get ScenesReducer() {
      return _$$_REQUIRE(_dependencyMap[15]).default;
    },

    get StackGestureContext() {
      return _$$_REQUIRE(_dependencyMap[16]).default;
    }

  };
},410,[2,411,423,427,418,420,419,425,412,415,413,429,428,416,433,434,431]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _core = _$$_REQUIRE(_dependencyMap[1]);

  var _native = _$$_REQUIRE(_dependencyMap[2]);

  var _StackView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function createStackNavigator(routeConfigMap) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var router = (0, _core.StackRouter)(routeConfigMap, stackConfig);
    var Navigator = (0, _core.createNavigator)(_StackView.default, router, stackConfig);

    if (!stackConfig.disableKeyboardHandling) {
      Navigator = (0, _native.createKeyboardAwareNavigator)(Navigator, stackConfig);
    }

    return Navigator;
  }

  var _default = createStackNavigator;
  exports.default = _default;
},411,[1,334,331,412]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _core = _$$_REQUIRE(_dependencyMap[9]);

  var _StackViewLayout = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Transitioner = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _StackViewTransitionConfigs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var USE_NATIVE_DRIVER = true;
  var DefaultNavigationConfig = {
    mode: 'card',
    cardShadowEnabled: true,
    cardOverlayEnabled: false
  };

  var StackView = function (_React$Component) {
    (0, _inherits2.default)(StackView, _React$Component);

    function StackView() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, StackView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._configureTransition = function (transitionProps, prevTransitionProps) {
        return (0, _objectSpread2.default)({}, _StackViewTransitionConfigs.default.getTransitionConfig(_this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, _this.props.navigationConfig.mode === 'modal').transitionSpec, {
          useNativeDriver: USE_NATIVE_DRIVER
        });
      };

      _this._getShadowEnabled = function () {
        var navigationConfig = _this.props.navigationConfig;
        return navigationConfig && navigationConfig.hasOwnProperty('cardShadowEnabled') ? navigationConfig.cardShadowEnabled : DefaultNavigationConfig.cardShadowEnabled;
      };

      _this._getCardOverlayEnabled = function () {
        var navigationConfig = _this.props.navigationConfig;
        return navigationConfig && navigationConfig.hasOwnProperty('cardOverlayEnabled') ? navigationConfig.cardOverlayEnabled : DefaultNavigationConfig.cardOverlayEnabled;
      };

      _this._render = function (transitionProps, lastTransitionProps) {
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            navigationConfig = _this$props.navigationConfig;
        return _react.default.createElement(_StackViewLayout.default, (0, _extends2.default)({}, navigationConfig, {
          shadowEnabled: _this._getShadowEnabled(),
          cardOverlayEnabled: _this._getCardOverlayEnabled(),
          onGestureBegin: _this.props.onGestureBegin,
          onGestureCanceled: _this.props.onGestureCanceled,
          onGestureEnd: _this.props.onGestureEnd,
          screenProps: screenProps,
          descriptors: _this.props.descriptors,
          transitionProps: transitionProps,
          lastTransitionProps: lastTransitionProps
        }));
      };

      return _this;
    }

    (0, _createClass2.default)(StackView, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react.default.createElement(_Transitioner.default, {
          render: this._render,
          configureTransition: this._configureTransition,
          screenProps: this.props.screenProps,
          navigation: this.props.navigation,
          descriptors: this.props.descriptors,
          onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,
          onTransitionEnd: function onTransitionEnd(transition, lastTransition) {
            var _this2$props = _this2.props,
                navigationConfig = _this2$props.navigationConfig,
                navigation = _this2$props.navigation;
            var onTransitionEnd = _this2.props.onTransitionEnd || navigationConfig.onTransitionEnd;
            var transitionDestKey = transition.scene.route.key;
            var isCurrentKey = navigation.state.routes[navigation.state.index].key === transitionDestKey;

            if (transition.navigation.state.isTransitioning && isCurrentKey) {
              navigation.dispatch(_core.StackActions.completeTransition({
                key: navigation.state.key,
                toChildKey: transitionDestKey
              }));
            }

            onTransitionEnd && onTransitionEnd(transition, lastTransition);
          }
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var navigation = this.props.navigation;

        if (navigation.state.isTransitioning) {
          navigation.dispatch(_core.StackActions.completeTransition({
            key: navigation.state.key
          }));
        }
      }
    }]);
    return StackView;
  }(_react.default.Component);

  var _default = StackView;
  exports.default = _default;
},412,[1,8,43,19,20,27,30,33,46,334,413,433,428]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _core = _$$_REQUIRE(_dependencyMap[11]);

  var _native = _$$_REQUIRE(_dependencyMap[12]);

  var _reactNativeScreens = _$$_REQUIRE(_dependencyMap[13]);

  var _reactNativeGestureHandler = _$$_REQUIRE(_dependencyMap[14]);

  var _StackViewCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Header = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _StackViewTransitionConfigs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _HeaderStyleInterpolator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _StackGestureContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _clamp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _ReactNativeFeatures = _$$_REQUIRE(_dependencyMap[21]);

  var IPHONE_XS_HEIGHT = 812;
  var IPHONE_XR_HEIGHT = 896;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      WINDOW_WIDTH = _Dimensions$get.width,
      WINDOW_HEIGHT = _Dimensions$get.height;

  var IS_IPHONE_X = _reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && !_reactNative.Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);

  var EaseInOut = _reactNative.Easing.inOut(_reactNative.Easing.ease);

  var HEADER_LAYOUT_PRESET = ['center', 'left'];
  var HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];
  var HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];
  var ANIMATION_DURATION = 500;
  var POSITION_THRESHOLD = 0.5;
  var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;
  var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;
  var USE_NATIVE_DRIVER = true;

  var getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {
    if (_reactNative.Platform.OS === 'ios') {
      if (isLandscape && !_reactNative.Platform.isPad) {
        return 32;
      } else if (IS_IPHONE_X) {
        return 88;
      } else {
        return 64;
      }
    } else {
      return 56;
    }
  };

  var StackViewLayout = function (_React$Component) {
    (0, _inherits2.default)(StackViewLayout, _React$Component);

    function StackViewLayout(props) {
      var _this;

      (0, _classCallCheck2.default)(this, StackViewLayout);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StackViewLayout).call(this, props));
      _this._gestureStartValue = 0;
      _this._immediateIndex = null;

      _this._onFloatingHeaderLayout = function (e) {
        _this.setState({
          floatingHeaderHeight: e.nativeEvent.layout.height
        });
      };

      _this._getGestureResponseDistance = function () {
        var scene = _this.props.transitionProps.scene;
        var options = scene.descriptor.options;
        var _options$gestureRespo = options.gestureResponseDistance,
            userGestureResponseDistance = _options$gestureRespo === undefined ? {} : _options$gestureRespo;
        return _this._isModal() ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;
      };

      _this._gestureActivationCriteria = function () {
        var layout = _this.props.transitionProps.layout;

        var gestureResponseDistance = _this._getGestureResponseDistance();

        var isMotionInverted = _this._isMotionInverted();

        if (_this._isMotionVertical()) {
          var height = layout.height.__getValue();

          return {
            maxDeltaX: 15,
            minOffsetY: isMotionInverted ? -5 : 5,
            hitSlop: isMotionInverted ? {
              top: -height + GESTURE_RESPONSE_DISTANCE_VERTICAL
            } : {
              bottom: -height + GESTURE_RESPONSE_DISTANCE_VERTICAL
            }
          };
        } else {
          var width = layout.width.__getValue();

          var hitSlop = -width + gestureResponseDistance;
          return {
            minOffsetX: isMotionInverted ? -5 : 5,
            maxDeltaY: 20,
            hitSlop: isMotionInverted ? {
              left: hitSlop
            } : {
              right: hitSlop
            }
          };
        }
      };

      _this._handlePanGestureEvent = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        if (_this._isMotionVertical()) {
          _this._handleVerticalPan(nativeEvent);
        } else {
          _this._handleHorizontalPan(nativeEvent);
        }
      };

      _this._isMotionVertical = function () {
        return _this._isModal();
      };

      _this._isModal = function () {
        return _this.props.mode === 'modal';
      };

      _this._isMotionInverted = function () {
        var scene = _this.props.transitionProps.scene;
        var options = scene.descriptor.options;
        var gestureDirection = options.gestureDirection;

        if (_this._isModal()) {
          return gestureDirection === 'inverted';
        } else {
          return typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;
        }
      };

      _this._handleHorizontalPan = function (nativeEvent) {
        var value = _this._computeHorizontalGestureValue(nativeEvent);

        _this.props.transitionProps.position.setValue(Math.max(0, value));
      };

      _this._computeHorizontalGestureValue = function (_ref2) {
        var translationX = _ref2.translationX;
        var _this$props$transitio = _this.props.transitionProps,
            navigation = _this$props$transitio.navigation,
            layout = _this$props$transitio.layout;
        var index = navigation.state.index;

        var distance = layout.width.__getValue();

        var x = _this._isMotionInverted() ? -1 * translationX : translationX;
        var value = index - x / distance;
        return (0, _clamp.default)(index - 1, value, index);
      };

      _this._computeVerticalGestureValue = function (_ref3) {
        var translationY = _ref3.translationY;
        var _this$props$transitio2 = _this.props.transitionProps,
            navigation = _this$props$transitio2.navigation,
            layout = _this$props$transitio2.layout;
        var index = navigation.state.index;

        var distance = layout.height.__getValue();

        var y = _this._isMotionInverted() ? -1 * translationY : translationY;
        var value = index - y / distance;
        return (0, _clamp.default)(index - 1, value, index);
      };

      _this._handlePanGestureStateChange = function (_ref4) {
        var nativeEvent = _ref4.nativeEvent;

        if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
          if (!_this.state.gesturePosition) {
            return;
          }

          if (_this._isMotionVertical()) {
            _this._handleReleaseVertical(nativeEvent);
          } else {
            _this._handleReleaseHorizontal(nativeEvent);
          }
        } else if (nativeEvent.state === _reactNativeGestureHandler.State.ACTIVE) {
          if (_this._isMotionVertical()) {
            _this._handleActivateGestureVertical(nativeEvent);
          } else {
            _this._handleActivateGestureHorizontal(nativeEvent);
          }
        }
      };

      _this._maybeCancelGesture = function () {
        if (_this.state.gesturePosition) {
          _this.setState({
            gesturePosition: null
          });
        }
      };

      _this._handleActivateGestureHorizontal = function () {
        var index = _this.props.transitionProps.navigation.state.index;

        if (_this._isMotionInverted()) {
          _this.setState({
            gesturePosition: _reactNative.Animated.add(index, _reactNative.Animated.divide(_this.gestureX, _this.props.transitionProps.layout.width)).interpolate({
              inputRange: [index - 1, index],
              outputRange: [index - 1, index],
              extrapolate: 'clamp'
            })
          });
        } else {
          _this.setState({
            gesturePosition: _reactNative.Animated.add(index, _reactNative.Animated.multiply(-1, _reactNative.Animated.divide(_this.gestureX, _this.props.transitionProps.layout.width))).interpolate({
              inputRange: [index - 1, index],
              outputRange: [index - 1, index],
              extrapolate: 'clamp'
            })
          });
        }
      };

      _this._handleActivateGestureVertical = function () {
        var index = _this.props.transitionProps.navigation.state.index;

        if (_this._isMotionInverted()) {
          _this.setState({
            gesturePosition: _reactNative.Animated.add(index, _reactNative.Animated.divide(_this.gestureY, _this.props.transitionProps.layout.height)).interpolate({
              inputRange: [index - 1, index],
              outputRange: [index - 1, index],
              extrapolate: 'clamp'
            })
          });
        } else {
          _this.setState({
            gesturePosition: _reactNative.Animated.add(index, _reactNative.Animated.multiply(-1, _reactNative.Animated.divide(_this.gestureY, _this.props.transitionProps.layout.height))).interpolate({
              inputRange: [index - 1, index],
              outputRange: [index - 1, index],
              extrapolate: 'clamp'
            })
          });
        }
      };

      _this._handleReleaseHorizontal = function (nativeEvent) {
        var _this$props$transitio3 = _this.props.transitionProps,
            navigation = _this$props$transitio3.navigation,
            position = _this$props$transitio3.position,
            layout = _this$props$transitio3.layout;
        var index = navigation.state.index;
        var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;

        var distance = layout.width.__getValue();

        var movementDirection = _this._isMotionInverted() ? -1 : 1;
        var movedDistance = movementDirection * nativeEvent.translationX;
        var gestureVelocity = movementDirection * nativeEvent.velocityX;
        var defaultVelocity = distance / ANIMATION_DURATION;
        var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);
        var resetDuration = _this._isMotionInverted() ? (distance - movedDistance) / velocity : movedDistance / velocity;
        var goBackDuration = _this._isMotionInverted() ? movedDistance / velocity : (distance - movedDistance) / velocity;

        var value = _this._computeHorizontalGestureValue(nativeEvent);

        position.setValue(value);

        _this.setState({
          gesturePosition: null
        }, function () {
          if (gestureVelocity < -50) {
            _this.props.onGestureCanceled && _this.props.onGestureCanceled();

            _this._reset(immediateIndex, resetDuration);

            return;
          }

          if (gestureVelocity > 50) {
            _this.props.onGestureFinish && _this.props.onGestureFinish();

            _this._goBack(immediateIndex, goBackDuration);

            return;
          }

          if (value <= index - POSITION_THRESHOLD) {
            _this.props.onGestureFinish && _this.props.onGestureFinish();

            _this._goBack(immediateIndex, goBackDuration);
          } else {
            _this.props.onGestureCanceled && _this.props.onGestureCanceled();

            _this._reset(immediateIndex, resetDuration);
          }
        });
      };

      _this._handleReleaseVertical = function (nativeEvent) {
        var _this$props$transitio4 = _this.props.transitionProps,
            navigation = _this$props$transitio4.navigation,
            position = _this$props$transitio4.position,
            layout = _this$props$transitio4.layout;
        var index = navigation.state.index;
        var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;

        var distance = layout.height.__getValue();

        var isMotionInverted = _this._isMotionInverted();

        var movementDirection = isMotionInverted ? -1 : 1;
        var movedDistance = movementDirection * nativeEvent.translationY;
        var gestureVelocity = movementDirection * nativeEvent.velocityY;
        var defaultVelocity = distance / ANIMATION_DURATION;
        var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);
        var resetDuration = isMotionInverted ? (distance - movedDistance) / velocity : movedDistance / velocity;
        var goBackDuration = isMotionInverted ? movedDistance / velocity : (distance - movedDistance) / velocity;

        var value = _this._computeVerticalGestureValue(nativeEvent);

        position.setValue(value);

        _this.setState({
          gesturePosition: null
        }, function () {
          if (gestureVelocity < -50) {
            _this.props.onGestureCanceled && _this.props.onGestureCanceled();

            _this._reset(immediateIndex, resetDuration);

            return;
          }

          if (gestureVelocity > 50) {
            _this.props.onGestureFinish && _this.props.onGestureFinish();

            _this._goBack(immediateIndex, goBackDuration);

            return;
          }

          if (value <= index - POSITION_THRESHOLD) {
            _this.props.onGestureFinish && _this.props.onGestureFinish();

            _this._goBack(immediateIndex, goBackDuration);
          } else {
            _this.props.onGestureCanceled && _this.props.onGestureCanceled();

            _this._reset(immediateIndex, resetDuration);
          }
        });
      };

      _this._getTransitionConfig = function () {
        return _StackViewTransitionConfigs.default.getTransitionConfig(_this.props.transitionConfig, (0, _objectSpread2.default)({}, _this.props.transitionProps, {
          position: _this._getPosition()
        }), _this.props.lastTransitionProps, _this._isModal());
      };

      _this._getPosition = function () {
        if (!_this.state.gesturePosition) {
          return _this.props.transitionProps.position;
        } else {
          var gesturePosition = _this.state.gesturePosition;

          var staticPosition = _reactNative.Animated.add(_this.props.transitionProps.position, _reactNative.Animated.multiply(-1, _this.props.transitionProps.position));

          return _reactNative.Animated.add(gesturePosition, staticPosition);
        }
      };

      _this._renderCard = function (scene) {
        var _this$_getTransitionC = _this._getTransitionConfig(),
            screenInterpolator = _this$_getTransitionC.screenInterpolator;

        var style = screenInterpolator && screenInterpolator((0, _objectSpread2.default)({}, _this.props.transitionProps, {
          shadowEnabled: _this.props.shadowEnabled,
          cardOverlayEnabled: _this.props.cardOverlayEnabled,
          position: _this._getPosition(),
          scene: scene
        }));
        var options = scene.descriptor.options;
        var hasHeader = options.header !== null;

        var headerMode = _this._getHeaderMode();

        var paddingTop = 0;

        if (hasHeader && headerMode === 'float' && !options.headerTransparent) {
          paddingTop = _this.state.floatingHeaderHeight;
        }

        return _react.default.createElement(_StackViewCard.default, (0, _extends2.default)({}, _this.props.transitionProps, {
          key: "card_" + scene.key,
          position: _this._getPosition(),
          realPosition: _this.props.transitionProps.position,
          animatedStyle: style,
          transparent: _this.props.transparentCard,
          style: [{
            paddingTop: paddingTop
          }, _this.props.cardStyle],
          scene: scene
        }), _this._renderInnerScene(scene));
      };

      _this.panGestureRef = _react.default.createRef();
      _this.gestureX = new _reactNative.Animated.Value(0);
      _this.gestureY = new _reactNative.Animated.Value(0);
      _this.state = {
        floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape),
        gesturePosition: null
      };
      return _this;
    }

    (0, _createClass2.default)(StackViewLayout, [{
      key: "_renderHeader",
      value: function _renderHeader(scene, headerMode) {
        var options = scene.descriptor.options;
        var header = options.header;

        if (header === null && headerMode === 'screen') {
          return null;
        }

        if (_react.default.isValidElement(header)) {
          return header;
        }

        var renderHeader = header || function (props) {
          return _react.default.createElement(_Header.default, props);
        };

        var _this$_getTransitionC2 = this._getTransitionConfig(),
            headerLeftInterpolator = _this$_getTransitionC2.headerLeftInterpolator,
            headerTitleInterpolator = _this$_getTransitionC2.headerTitleInterpolator,
            headerRightInterpolator = _this$_getTransitionC2.headerRightInterpolator,
            headerBackgroundInterpolator = _this$_getTransitionC2.headerBackgroundInterpolator;

        var backgroundTransitionPresetInterpolator = this._getHeaderBackgroundTransitionPreset();

        if (backgroundTransitionPresetInterpolator) {
          headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;
        }

        var _this$props = this.props,
            transitionProps = _this$props.transitionProps,
            passProps = (0, _objectWithoutProperties2.default)(_this$props, ["transitionProps"]);
        return _react.default.createElement(_core.NavigationProvider, {
          value: scene.descriptor.navigation
        }, renderHeader((0, _objectSpread2.default)({}, passProps, transitionProps, {
          position: this._getPosition(),
          scene: scene,
          mode: headerMode,
          transitionPreset: this._getHeaderTransitionPreset(),
          layoutPreset: this._getHeaderLayoutPreset(),
          backTitleVisible: this._getHeaderBackTitleVisible(),
          leftInterpolator: headerLeftInterpolator,
          titleInterpolator: headerTitleInterpolator,
          rightInterpolator: headerRightInterpolator,
          backgroundInterpolator: headerBackgroundInterpolator
        })));
      }
    }, {
      key: "_reset",
      value: function _reset(resetToIndex, duration) {
        if (_reactNative.Platform.OS === 'ios' && (0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {
          _reactNative.Animated.spring(this.props.transitionProps.position, {
            toValue: resetToIndex,
            stiffness: 6000,
            damping: 100,
            mass: 3,
            overshootClamping: true,
            restDisplacementThreshold: 0.01,
            restSpeedThreshold: 0.01,
            useNativeDriver: USE_NATIVE_DRIVER
          }).start();
        } else {
          _reactNative.Animated.timing(this.props.transitionProps.position, {
            toValue: resetToIndex,
            duration: duration,
            easing: EaseInOut,
            useNativeDriver: USE_NATIVE_DRIVER
          }).start();
        }
      }
    }, {
      key: "_goBack",
      value: function _goBack(backFromIndex, duration) {
        var _this2 = this;

        var _this$props$transitio5 = this.props.transitionProps,
            navigation = _this$props$transitio5.navigation,
            position = _this$props$transitio5.position,
            scenes = _this$props$transitio5.scenes;
        var toValue = Math.max(backFromIndex - 1, 0);
        this._immediateIndex = toValue;

        var onCompleteAnimation = function onCompleteAnimation() {
          _this2._immediateIndex = null;
          var backFromScene = scenes.find(function (s) {
            return s.index === toValue + 1;
          });

          if (backFromScene) {
            navigation.dispatch(_core.NavigationActions.back({
              key: backFromScene.route.key,
              immediate: true
            }));
            navigation.dispatch(_core.StackActions.completeTransition());
          }
        };

        if (_reactNative.Platform.OS === 'ios' && (0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {
          _reactNative.Animated.spring(position, {
            toValue: toValue,
            stiffness: 7000,
            damping: 300,
            mass: 3,
            overshootClamping: true,
            restDisplacementThreshold: 0.01,
            restSpeedThreshold: 0.01,
            useNativeDriver: USE_NATIVE_DRIVER
          }).start(onCompleteAnimation);
        } else {
          _reactNative.Animated.timing(position, {
            toValue: toValue,
            duration: duration,
            easing: EaseInOut,
            useNativeDriver: USE_NATIVE_DRIVER
          }).start(onCompleteAnimation);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var floatingHeader = null;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'float') {
          var _scene = this.props.transitionProps.scene;
          floatingHeader = _react.default.createElement(_reactNative.View, {
            style: styles.floatingHeader,
            pointerEvents: "box-none",
            onLayout: this._onFloatingHeaderLayout
          }, this._renderHeader(_scene, headerMode));
        }

        var _this$props$transitio6 = this.props.transitionProps,
            navigation = _this$props$transitio6.navigation,
            scene = _this$props$transitio6.scene,
            scenes = _this$props$transitio6.scenes;
        var options = scene.descriptor.options;
        var index = navigation.state.index;
        var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';
        var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];
        return _react.default.createElement(_reactNativeGestureHandler.PanGestureHandler, (0, _extends2.default)({}, this._gestureActivationCriteria(), {
          ref: this.panGestureRef,
          onGestureEvent: _reactNative.Animated.event([{
            nativeEvent: {
              translationX: this.gestureX,
              translationY: this.gestureY
            }
          }], {
            useNativeDriver: USE_NATIVE_DRIVER
          }),
          onHandlerStateChange: this._handlePanGestureStateChange,
          enabled: index > 0 && gesturesEnabled
        }), _react.default.createElement(_reactNative.Animated.View, {
          style: containerStyle
        }, _react.default.createElement(_StackGestureContext.default.Provider, {
          value: this.panGestureRef
        }, _react.default.createElement(_reactNativeScreens.ScreenContainer, {
          style: styles.scenes
        }, scenes.map(function (s) {
          return _this3._renderCard(s);
        })), floatingHeader)));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevState = prevProps.transitionProps.navigation.state;
        var state = this.props.transitionProps.navigation.state;

        if (prevState.index !== state.index) {
          this._maybeCancelGesture();
        }
      }
    }, {
      key: "_getHeaderMode",
      value: function _getHeaderMode() {
        if (this.props.headerMode) {
          return this.props.headerMode;
        }

        if (_reactNative.Platform.OS === 'android' || this.props.mode === 'modal') {
          return 'screen';
        }

        return 'float';
      }
    }, {
      key: "_getHeaderBackgroundTransitionPreset",
      value: function _getHeaderBackgroundTransitionPreset() {
        var headerBackgroundTransitionPreset = this.props.headerBackgroundTransitionPreset;

        if (headerBackgroundTransitionPreset) {
          if (HEADER_BACKGROUND_TRANSITION_PRESET.includes(headerBackgroundTransitionPreset)) {
            if (headerBackgroundTransitionPreset === 'fade') {
              return _HeaderStyleInterpolator.default.forBackgroundWithFade;
            } else if (headerBackgroundTransitionPreset === 'translate') {
              return _HeaderStyleInterpolator.default.forBackgroundWithTranslation;
            } else if (headerBackgroundTransitionPreset === 'toggle') {
              return _HeaderStyleInterpolator.default.forBackgroundWithInactiveHidden;
            }
          } else {}
        }

        return null;
      }
    }, {
      key: "_getHeaderLayoutPreset",
      value: function _getHeaderLayoutPreset() {
        var headerLayoutPreset = this.props.headerLayoutPreset;

        if (headerLayoutPreset) {
          if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {
            return headerLayoutPreset;
          }
        }

        if (_reactNative.Platform.OS === 'android') {
          return 'left';
        } else {
          return 'center';
        }
      }
    }, {
      key: "_getHeaderTransitionPreset",
      value: function _getHeaderTransitionPreset() {
        if (_reactNative.Platform.OS === 'android' || this._getHeaderMode() === 'screen') {
          return 'fade-in-place';
        }

        var headerTransitionPreset = this.props.headerTransitionPreset;

        if (headerTransitionPreset) {
          if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {
            return headerTransitionPreset;
          }
        }

        return 'fade-in-place';
      }
    }, {
      key: "_getHeaderBackTitleVisible",
      value: function _getHeaderBackTitleVisible() {
        var headerBackTitleVisible = this.props.headerBackTitleVisible;

        var layoutPreset = this._getHeaderLayoutPreset();

        var enabledByDefault = !(layoutPreset === 'left' || _reactNative.Platform.OS === 'android');
        return typeof headerBackTitleVisible === 'boolean' ? headerBackTitleVisible : enabledByDefault;
      }
    }, {
      key: "_renderInnerScene",
      value: function _renderInnerScene(scene) {
        var _scene$descriptor = scene.descriptor,
            navigation = _scene$descriptor.navigation,
            getComponent = _scene$descriptor.getComponent;
        var SceneComponent = getComponent();
        var screenProps = this.props.screenProps;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'screen') {
          return _react.default.createElement(_reactNative.View, {
            style: styles.container
          }, _react.default.createElement(_reactNative.View, {
            style: styles.scenes
          }, _react.default.createElement(_core.SceneView, {
            screenProps: screenProps,
            navigation: navigation,
            component: SceneComponent
          })), this._renderHeader(scene, headerMode));
        }

        return _react.default.createElement(_core.SceneView, {
          screenProps: screenProps,
          navigation: navigation,
          component: SceneComponent
        });
      }
    }]);
    return StackViewLayout;
  }(_react.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'column-reverse',
      overflow: 'hidden'
    },
    scenes: {
      flex: 1
    },
    floatingHeader: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });

  var _default = (0, _native.withOrientation)(StackViewLayout);

  exports.default = _default;
},413,[1,6,8,43,19,20,27,30,33,46,2,334,331,414,391,415,418,428,425,431,432,430]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useScreens = useScreens;
  exports.screensEnabled = screensEnabled;
  exports.ScreenContainer = exports.Screen = exports.NativeScreenContainer = exports.NativeScreen = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var USE_SCREENS = false;

  var getViewManagerConfigCompat = function getViewManagerConfigCompat(name) {
    return typeof _reactNative.UIManager.getViewManagerConfig !== 'undefined' ? _reactNative.UIManager.getViewManagerConfig(name) : _reactNative.UIManager[name];
  };

  function useScreens() {
    var shouldUseScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    USE_SCREENS = shouldUseScreens;

    if (USE_SCREENS && !getViewManagerConfigCompat('RNSScreen')) {
      console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");
    }
  }

  function screensEnabled() {
    return USE_SCREENS;
  }

  var NativeScreen = (0, _reactNative.requireNativeComponent)('RNSScreen', null);
  exports.NativeScreen = NativeScreen;

  var AnimatedNativeScreen = _reactNative.Animated.createAnimatedComponent(NativeScreen);

  var NativeScreenContainer = (0, _reactNative.requireNativeComponent)('RNSScreenContainer', null);
  exports.NativeScreenContainer = NativeScreenContainer;

  var Screen = function (_React$Component) {
    (0, _inherits2.default)(Screen, _React$Component);

    function Screen() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Screen);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Screen)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setRef = function (ref) {
        _this._ref = ref;
        _this.props.onComponentRef && _this.props.onComponentRef(ref);
      };

      return _this;
    }

    (0, _createClass2.default)(Screen, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this._ref.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        if (!USE_SCREENS) {
          var _this$props = this.props,
              active = _this$props.active,
              onComponentRef = _this$props.onComponentRef,
              props = (0, _objectWithoutProperties2.default)(_this$props, ["active", "onComponentRef"]);
          return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, props, {
            ref: this.setRef
          }));
        } else {
          var _this$props2 = this.props,
              style = _this$props2.style,
              children = _this$props2.children,
              rest = (0, _objectWithoutProperties2.default)(_this$props2, ["style", "children"]);
          return _react.default.createElement(AnimatedNativeScreen, (0, _extends2.default)({}, rest, {
            ref: this.setRef,
            style: _reactNative.StyleSheet.absoluteFill
          }), _react.default.createElement(_reactNative.Animated.View, {
            style: style
          }, children));
        }
      }
    }]);
    return Screen;
  }(_react.default.Component);

  exports.Screen = Screen;

  var ScreenContainer = function (_React$Component2) {
    (0, _inherits2.default)(ScreenContainer, _React$Component2);

    function ScreenContainer() {
      (0, _classCallCheck2.default)(this, ScreenContainer);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(ScreenContainer).apply(this, arguments));
    }

    (0, _createClass2.default)(ScreenContainer, [{
      key: "render",
      value: function render() {
        if (!USE_SCREENS) {
          return _react.default.createElement(_reactNative.View, this.props);
        } else {
          return _react.default.createElement(NativeScreenContainer, this.props);
        }
      }
    }]);
    return ScreenContainer;
  }(_react.default.Component);

  exports.ScreenContainer = ScreenContainer;
},414,[1,8,6,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeScreens = _$$_REQUIRE(_dependencyMap[11]);

  var _createPointerEventsContainer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var EPS = 1e-5;

  function getAccessibilityProps(isActive) {
    if (_reactNative.Platform.OS === 'ios') {
      return {
        accessibilityElementsHidden: !isActive
      };
    } else if (_reactNative.Platform.OS === 'android') {
      return {
        importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'
      };
    } else {
      return null;
    }
  }

  var Card = function (_React$Component) {
    (0, _inherits2.default)(Card, _React$Component);

    function Card() {
      (0, _classCallCheck2.default)(this, Card);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Card).apply(this, arguments));
    }

    (0, _createClass2.default)(Card, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            animatedStyle = _this$props.animatedStyle,
            children = _this$props.children,
            pointerEvents = _this$props.pointerEvents,
            style = _this$props.style,
            position = _this$props.position,
            transparent = _this$props.transparent,
            _this$props$scene = _this$props.scene,
            index = _this$props$scene.index,
            isActive = _this$props$scene.isActive;
        var active = transparent || isActive ? 1 : position.interpolate({
          inputRange: [index, index + 1 - EPS, index + 1],
          outputRange: [1, 1, 0],
          extrapolate: 'clamp'
        });
        var shadowOpacity = animatedStyle.shadowOpacity,
            overlayOpacity = animatedStyle.overlayOpacity,
            containerAnimatedStyle = (0, _objectWithoutProperties2.default)(animatedStyle, ["shadowOpacity", "overlayOpacity"]);
        return _react.default.createElement(_reactNativeScreens.Screen, {
          pointerEvents: pointerEvents,
          onComponentRef: this.props.onComponentRef,
          style: [_reactNative.StyleSheet.absoluteFill, containerAnimatedStyle, style],
          active: active
        }, shadowOpacity ? _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.shadow, {
            shadowOpacity: shadowOpacity
          }],
          pointerEvents: "none"
        }) : null, _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, getAccessibilityProps(isActive), {
          style: [transparent ? styles.transparent : styles.card]
        }), children), overlayOpacity ? _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: "none",
          style: [styles.overlay, {
            opacity: overlayOpacity
          }]
        }) : null);
      }
    }]);
    return Card;
  }(_react.default.Component);

  var styles = _reactNative.StyleSheet.create({
    card: {
      flex: 1,
      backgroundColor: '#fff'
    },
    overlay: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      backgroundColor: '#000'
    }),
    shadow: {
      top: 0,
      left: 0,
      bottom: 0,
      width: 3,
      position: 'absolute',
      backgroundColor: '#fff',
      shadowOffset: {
        width: -1,
        height: 1
      },
      shadowRadius: 5,
      shadowColor: '#000'
    },
    transparent: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      backgroundColor: 'transparent'
    })
  });

  var _default = (0, _createPointerEventsContainer.default)(Card);

  exports.default = _default;
},415,[1,43,8,6,19,20,27,30,33,46,2,414,416]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createPointerEventsContainer;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var MIN_POSITION_OFFSET = 0.01;

  function createPointerEventsContainer(Component) {
    var Container = function (_React$Component) {
      (0, _inherits2.default)(Container, _React$Component);

      function Container(props, context) {
        var _this;

        (0, _classCallCheck2.default)(this, Container);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Container).call(this, props, context));

        _this._onComponentRef = function (component) {
          _this._component = component;

          if (component) {
            (0, _invariant.default)(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
          }
        };

        _this._onPositionChange = function () {
          if (_this._component) {
            var pointerEvents = _this._computePointerEvents();

            if (_this._pointerEvents !== pointerEvents) {
              _this._pointerEvents = pointerEvents;

              _this._component.setNativeProps({
                pointerEvents: pointerEvents
              });
            }
          }
        };

        _this._pointerEvents = _this._computePointerEvents();
        return _this;
      }

      (0, _createClass2.default)(Container, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._positionListener && this._positionListener.remove();
        }
      }, {
        key: "render",
        value: function render() {
          this._bindPosition();

          this._pointerEvents = this._computePointerEvents();
          return _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {
            pointerEvents: this._pointerEvents,
            onComponentRef: this._onComponentRef
          }));
        }
      }, {
        key: "_bindPosition",
        value: function _bindPosition() {
          this._positionListener && this._positionListener.remove();
          this._positionListener = new AnimatedValueSubscription(this.props.realPosition, this._onPositionChange);
        }
      }, {
        key: "_computePointerEvents",
        value: function _computePointerEvents() {
          var _this$props = this.props,
              navigation = _this$props.navigation,
              realPosition = _this$props.realPosition,
              scene = _this$props.scene;

          if (scene.isStale || navigation.state.index !== scene.index) {
            return scene.index > navigation.state.index ? 'box-only' : 'none';
          }

          var offset = realPosition.__getAnimatedValue() - navigation.state.index;

          if (Math.abs(offset) > MIN_POSITION_OFFSET) {
            return 'box-only';
          }

          return 'auto';
        }
      }]);
      return Container;
    }(_react.default.Component);

    return Container;
  }

  var AnimatedValueSubscription = function () {
    function AnimatedValueSubscription(value, callback) {
      (0, _classCallCheck2.default)(this, AnimatedValueSubscription);
      this._value = value;
      this._token = value.addListener(callback);
    }

    (0, _createClass2.default)(AnimatedValueSubscription, [{
      key: "remove",
      value: function remove() {
        this._value.removeListener(this._token);
      }
    }]);
    return AnimatedValueSubscription;
  }();
},416,[1,8,19,20,27,30,33,46,417]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = invariant;

  function invariant(condition, format, a, b, c, d, e, f) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }
},417,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _native = _$$_REQUIRE(_dependencyMap[12]);

  var _HeaderTitle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _HeaderBackButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _ModularHeaderBackButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _HeaderStyleInterpolator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
  var STATUSBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 20 : 0;
  var TITLE_OFFSET_CENTER_ALIGN = _reactNative.Platform.OS === 'ios' ? 70 : 56;
  var TITLE_OFFSET_LEFT_ALIGN = _reactNative.Platform.OS === 'ios' ? 20 : 56;

  var getTitleOffsets = function getTitleOffsets(layoutPreset, forceBackTitle, hasLeftComponent, hasRightComponent) {
    if (layoutPreset === 'left') {
      var style = {
        left: TITLE_OFFSET_LEFT_ALIGN,
        right: TITLE_OFFSET_LEFT_ALIGN
      };

      if (!hasLeftComponent) {
        style.left = 0;
      }

      if (!hasRightComponent) {
        style.right = 0;
      }

      return style;
    } else if (layoutPreset === 'center') {
      var _style = {
        left: TITLE_OFFSET_CENTER_ALIGN,
        right: TITLE_OFFSET_CENTER_ALIGN
      };

      if (!hasLeftComponent && !hasRightComponent) {
        _style.left = 0;
        _style.right = 0;
      }

      return _style;
    }
  };

  var getAppBarHeight = function getAppBarHeight(isLandscape) {
    return _reactNative.Platform.OS === 'ios' ? isLandscape && !_reactNative.Platform.isPad ? 32 : 44 : 56;
  };

  var Header = function (_React$PureComponent) {
    (0, _inherits2.default)(Header, _React$PureComponent);

    function Header() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Header);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Header)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        widths: {}
      };

      _this._renderTitleComponent = function (props) {
        var layoutPreset = _this.props.layoutPreset;
        var options = props.scene.descriptor.options;
        var headerTitle = options.headerTitle;

        if (_react.default.isValidElement(headerTitle)) {
          return headerTitle;
        }

        var titleString = _this._getHeaderTitleString(props.scene);

        var titleStyle = options.headerTitleStyle;
        var color = options.headerTintColor;
        var allowFontScaling = options.headerTitleAllowFontScaling;
        var onLayout = layoutPreset === 'center' ? function (e) {
          _this.setState({
            widths: (0, _objectSpread3.default)({}, _this.state.widths, (0, _defineProperty2.default)({}, props.scene.key, e.nativeEvent.layout.width))
          });
        } : undefined;
        var HeaderTitleComponent = headerTitle && typeof headerTitle !== 'string' ? headerTitle : _HeaderTitle.default;
        return _react.default.createElement(HeaderTitleComponent, {
          onLayout: onLayout,
          allowFontScaling: allowFontScaling == null ? true : allowFontScaling,
          style: [color ? {
            color: color
          } : null, layoutPreset === 'center' ? {
            textAlign: 'center'
          } : {
            textAlign: 'left'
          }, titleStyle]
        }, titleString);
      };

      _this._renderLeftComponent = function (props) {
        var options = props.scene.descriptor.options;

        if (_react.default.isValidElement(options.headerLeft) || options.headerLeft === null) {
          return options.headerLeft;
        }

        if (!options.headerLeft && props.scene.index === 0) {
          return;
        }

        var backButtonTitle = _this._getBackButtonTitleString(props.scene);

        var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);

        var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;
        var RenderedLeftComponent = options.headerLeft || _HeaderBackButton.default;

        var goBack = function goBack() {
          requestAnimationFrame(function () {
            props.scene.descriptor.navigation.goBack(props.scene.descriptor.key);
          });
        };

        return _react.default.createElement(RenderedLeftComponent, {
          onPress: goBack,
          pressColorAndroid: options.headerPressColorAndroid,
          tintColor: options.headerTintColor,
          backImage: options.headerBackImage,
          title: backButtonTitle,
          truncatedTitle: truncatedBackButtonTitle,
          backTitleVisible: _this.props.backTitleVisible,
          titleStyle: options.headerBackTitleStyle,
          layoutPreset: _this.props.layoutPreset,
          width: width,
          scene: props.scene
        });
      };

      _this._renderModularLeftComponent = function (props, ButtonContainerComponent, LabelContainerComponent) {
        var _props$scene$descript = props.scene.descriptor,
            options = _props$scene$descript.options,
            navigation = _props$scene$descript.navigation;

        var backButtonTitle = _this._getBackButtonTitleString(props.scene);

        var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);

        var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;

        var goBack = function goBack() {
          requestAnimationFrame(function () {
            navigation.goBack(props.scene.descriptor.key);
          });
        };

        return _react.default.createElement(_ModularHeaderBackButton.default, {
          onPress: goBack,
          ButtonContainerComponent: ButtonContainerComponent,
          LabelContainerComponent: LabelContainerComponent,
          backTitleVisible: _this.props.backTitleVisible,
          pressColorAndroid: options.headerPressColorAndroid,
          tintColor: options.headerTintColor,
          backImage: options.headerBackImage,
          title: backButtonTitle,
          truncatedTitle: truncatedBackButtonTitle,
          titleStyle: options.headerBackTitleStyle,
          width: width
        });
      };

      _this._renderRightComponent = function (props) {
        var headerRight = props.scene.descriptor.options.headerRight;
        return headerRight || null;
      };

      return _this;
    }

    (0, _createClass2.default)(Header, [{
      key: "_getHeaderTitleString",
      value: function _getHeaderTitleString(scene) {
        var options = scene.descriptor.options;

        if (typeof options.headerTitle === 'string') {
          return options.headerTitle;
        }

        if (options.title && typeof options.title !== 'string' && false) {
          throw new Error("Invalid title for route \"" + scene.route.routeName + "\" - title must be string or null, instead it was of type " + typeof options.title);
        }

        return options.title;
      }
    }, {
      key: "_getLastScene",
      value: function _getLastScene(scene) {
        return this.props.scenes.find(function (s) {
          return s.index === scene.index - 1;
        });
      }
    }, {
      key: "_getBackButtonTitleString",
      value: function _getBackButtonTitleString(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        var headerBackTitle = lastScene.descriptor.options.headerBackTitle;

        if (headerBackTitle || headerBackTitle === null) {
          return headerBackTitle;
        }

        return this._getHeaderTitleString(lastScene);
      }
    }, {
      key: "_getTruncatedBackButtonTitle",
      value: function _getTruncatedBackButtonTitle(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        return lastScene.descriptor.options.headerTruncatedBackTitle;
      }
    }, {
      key: "_renderLeft",
      value: function _renderLeft(props) {
        var options = props.scene.descriptor.options;
        var transitionPreset = this.props.transitionPreset;
        var style = props.style;

        if (options.headerLeftContainerStyle) {
          style = [style, options.headerLeftContainerStyle];
        }

        if (transitionPreset !== 'uikit' || options.headerBackImage || options.headerLeft || options.headerLeft === null) {
          return this._renderSubView((0, _objectSpread3.default)({}, props, {
            style: style
          }), 'left', this._renderLeftComponent, this.props.leftInterpolator);
        } else {
          return this._renderModularSubView((0, _objectSpread3.default)({}, props, {
            style: style
          }), 'left', this._renderModularLeftComponent, this.props.leftLabelInterpolator, this.props.leftButtonInterpolator);
        }
      }
    }, {
      key: "_renderTitle",
      value: function _renderTitle(props, options) {
        var _this$props = this.props,
            layoutPreset = _this$props.layoutPreset,
            transitionPreset = _this$props.transitionPreset;
        var style = [{
          justifyContent: layoutPreset === 'center' ? 'center' : 'flex-start'
        }, getTitleOffsets(layoutPreset, false, options.hasLeftComponent, options.hasRightComponent), options.headerTitleContainerStyle];
        return this._renderSubView((0, _objectSpread3.default)({}, props, {
          style: style
        }), 'title', this._renderTitleComponent, transitionPreset === 'uikit' ? this.props.titleFromLeftInterpolator : this.props.titleInterpolator);
      }
    }, {
      key: "_renderRight",
      value: function _renderRight(props) {
        var options = props.scene.descriptor.options;
        var style = props.style;

        if (options.headerRightContainerStyle) {
          style = [style, options.headerRightContainerStyle];
        }

        return this._renderSubView((0, _objectSpread3.default)({}, props, {
          style: style
        }), 'right', this._renderRightComponent, this.props.rightInterpolator);
      }
    }, {
      key: "_renderBackground",
      value: function _renderBackground(props) {
        var _props$scene = props.scene,
            index = _props$scene.index,
            options = _props$scene.descriptor.options;
        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        return this._renderSubView((0, _objectSpread3.default)({}, props, {
          style: _reactNative.StyleSheet.absoluteFill
        }), 'background', function () {
          return options.headerBackground;
        }, this.props.backgroundInterpolator);
      }
    }, {
      key: "_renderModularSubView",
      value: function _renderModularSubView(props, name, renderer, labelStyleInterpolator, buttonStyleInterpolator) {
        var _this2 = this;

        var scene = props.scene;
        var index = scene.index,
            isStale = scene.isStale,
            key = scene.key;

        if (index === 0) {
          return;
        }

        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        var ButtonContainer = function ButtonContainer(_ref) {
          var children = _ref.children;
          return _react.default.createElement(_reactNative.Animated.View, {
            style: [buttonStyleInterpolator((0, _objectSpread3.default)({}, _this2.props, props))]
          }, children);
        };

        var LabelContainer = function LabelContainer(_ref2) {
          var children = _ref2.children;
          return _react.default.createElement(_reactNative.Animated.View, {
            style: [labelStyleInterpolator((0, _objectSpread3.default)({}, _this2.props, props))]
          }, children);
        };

        var subView = renderer(props, ButtonContainer, LabelContainer);

        if (subView === null) {
          return subView;
        }

        var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
        return _react.default.createElement(_reactNative.View, {
          key: name + "_" + key,
          pointerEvents: pointerEvents,
          style: [styles.item, styles[name], props.style]
        }, subView);
      }
    }, {
      key: "_renderSubView",
      value: function _renderSubView(props, name, renderer, styleInterpolator) {
        var scene = props.scene;
        var index = scene.index,
            isStale = scene.isStale,
            key = scene.key;
        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        var subView = renderer(props);

        if (subView == null) {
          return null;
        }

        var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
        return _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: pointerEvents,
          key: name + "_" + key,
          style: [styles.item, styles[name], props.style, styleInterpolator((0, _objectSpread3.default)({}, this.props, props))]
        }, subView);
      }
    }, {
      key: "_renderHeader",
      value: function _renderHeader(props) {
        var options = props.scene.descriptor.options;

        if (options.header === null) {
          return null;
        }

        var left = this._renderLeft(props);

        var right = this._renderRight(props);

        var title = this._renderTitle(props, {
          hasLeftComponent: !!left,
          hasRightComponent: !!right,
          headerTitleContainerStyle: options.headerTitleContainerStyle
        });

        var transitionPreset = this.props.transitionPreset;
        var wrapperProps = {
          style: styles.header,
          key: "scene_" + props.scene.key
        };

        if (options.headerLeft || options.headerBackImage || _reactNative.Platform.OS !== 'ios' || transitionPreset !== 'uikit') {
          return _react.default.createElement(_reactNative.View, wrapperProps, title, left, right);
        } else {
          return _react.default.createElement(_reactNative.MaskedViewIOS, (0, _extends2.default)({}, wrapperProps, {
            maskElement: _react.default.createElement(_reactNative.View, {
              style: styles.iconMaskContainer
            }, _react.default.createElement(_reactNative.Image, {
              source: _$$_REQUIRE(_dependencyMap[17]),
              style: styles.iconMask
            }), _react.default.createElement(_reactNative.View, {
              style: styles.iconMaskFillerRect
            }))
          }), title, left, right);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var appBar;
        var background;
        var _this$props2 = this.props,
            mode = _this$props2.mode,
            scene = _this$props2.scene,
            isLandscape = _this$props2.isLandscape;

        if (mode === 'float') {
          var scenesByIndex = {};
          this.props.scenes.forEach(function (scene) {
            scenesByIndex[scene.index] = scene;
          });
          var scenesProps = Object.values(scenesByIndex).map(function (scene) {
            return {
              position: _this3.props.position,
              scene: scene
            };
          });
          appBar = scenesProps.map(this._renderHeader, this);
          background = scenesProps.map(this._renderBackground, this);
        } else {
          var headerProps = {
            position: new _reactNative.Animated.Value(this.props.scene.index),
            scene: this.props.scene
          };
          appBar = this._renderHeader(headerProps);
          background = this._renderBackground(headerProps);
        }

        var options = scene.descriptor.options;
        var _options$headerStyle = options.headerStyle,
            headerStyle = _options$headerStyle === undefined ? {} : _options$headerStyle;

        var headerStyleObj = _reactNative.StyleSheet.flatten(headerStyle);

        var appBarHeight = getAppBarHeight(isLandscape);
        var alignItems = headerStyleObj.alignItems,
            justifyContent = headerStyleObj.justifyContent,
            flex = headerStyleObj.flex,
            flexDirection = headerStyleObj.flexDirection,
            flexGrow = headerStyleObj.flexGrow,
            flexShrink = headerStyleObj.flexShrink,
            flexBasis = headerStyleObj.flexBasis,
            flexWrap = headerStyleObj.flexWrap,
            position = headerStyleObj.position,
            padding = headerStyleObj.padding,
            paddingHorizontal = headerStyleObj.paddingHorizontal,
            paddingRight = headerStyleObj.paddingRight,
            paddingLeft = headerStyleObj.paddingLeft,
            top = headerStyleObj.top,
            right = headerStyleObj.right,
            bottom = headerStyleObj.bottom,
            left = headerStyleObj.left,
            safeHeaderStyle = (0, _objectWithoutProperties2.default)(headerStyleObj, ["alignItems", "justifyContent", "flex", "flexDirection", "flexGrow", "flexShrink", "flexBasis", "flexWrap", "position", "padding", "paddingHorizontal", "paddingRight", "paddingLeft", "top", "right", "bottom", "left"]);
        var containerStyles = [options.headerTransparent ? styles.transparentContainer : styles.container, {
          height: appBarHeight
        }, safeHeaderStyle];
        var headerForceInset = options.headerForceInset;
        var forceInset = headerForceInset || {
          top: 'always',
          bottom: 'never',
          horizontal: 'always'
        };
        return _react.default.createElement(_reactNative.Animated.View, {
          style: [this.props.layoutInterpolator(this.props), _reactNative.Platform.OS === 'ios' && !options.headerTransparent ? {
            backgroundColor: safeHeaderStyle.backgroundColor || DEFAULT_BACKGROUND_COLOR
          } : null]
        }, _react.default.createElement(_native.SafeAreaView, {
          forceInset: forceInset,
          style: containerStyles
        }, background, _react.default.createElement(_reactNative.View, {
          style: styles.flexOne
        }, appBar)));
      }
    }], [{
      key: "HEIGHT",
      get: function get() {
        return APPBAR_HEIGHT + STATUSBAR_HEIGHT;
      }
    }]);
    return Header;
  }(_react.default.PureComponent);

  Header.defaultProps = {
    layoutInterpolator: _HeaderStyleInterpolator.default.forLayout,
    leftInterpolator: _HeaderStyleInterpolator.default.forLeft,
    leftButtonInterpolator: _HeaderStyleInterpolator.default.forLeftButton,
    leftLabelInterpolator: _HeaderStyleInterpolator.default.forLeftLabel,
    titleFromLeftInterpolator: _HeaderStyleInterpolator.default.forCenterFromLeft,
    titleInterpolator: _HeaderStyleInterpolator.default.forCenter,
    rightInterpolator: _HeaderStyleInterpolator.default.forRight,
    backgroundInterpolator: _HeaderStyleInterpolator.default.forBackground
  };
  var platformContainerStyles;

  if (_reactNative.Platform.OS === 'ios') {
    platformContainerStyles = {
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      borderBottomColor: '#A7A7AA'
    };
  } else {
    platformContainerStyles = {
      elevation: 4
    };
  }

  var DEFAULT_BACKGROUND_COLOR = '#FFF';

  var styles = _reactNative.StyleSheet.create({
    container: (0, _objectSpread3.default)({
      backgroundColor: DEFAULT_BACKGROUND_COLOR
    }, platformContainerStyles),
    transparentContainer: (0, _objectSpread3.default)({
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0
    }, platformContainerStyles, {
      borderBottomWidth: 0,
      borderBottomColor: 'transparent',
      elevation: 0
    }),
    header: (0, _objectSpread3.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row'
    }),
    item: {
      backgroundColor: 'transparent'
    },
    iconMaskContainer: {
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'center'
    },
    iconMaskFillerRect: {
      flex: 1,
      backgroundColor: '#d8d8d8',
      marginLeft: -5
    },
    iconMask: {
      height: 23,
      width: 14.5,
      marginLeft: 8.5,
      marginTop: -2.5,
      alignSelf: 'center',
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    title: {
      bottom: 0,
      top: 0,
      position: 'absolute',
      alignItems: 'center',
      flexDirection: 'row'
    },
    left: {
      left: 0,
      bottom: 0,
      top: 0,
      position: 'absolute',
      alignItems: 'center',
      flexDirection: 'row'
    },
    right: {
      right: 0,
      bottom: 0,
      top: 0,
      position: 'absolute',
      flexDirection: 'row',
      alignItems: 'center'
    },
    flexOne: {
      flex: 1
    }
  });

  var _default = (0, _native.withOrientation)(Header);

  exports.default = _default;
},418,[1,6,8,44,43,19,20,27,30,33,46,2,331,419,420,424,425,427]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedText = _reactNative.Animated.Text;

  var HeaderTitle = function HeaderTitle(_ref) {
    var style = _ref.style,
        rest = (0, _objectWithoutProperties2.default)(_ref, ["style"]);
    return _react.default.createElement(AnimatedText, (0, _extends2.default)({
      numberOfLines: 1
    }, rest, {
      style: [styles.title, style],
      accessibilityTraits: "header",
      accessible: false
    }));
  };

  var styles = _reactNative.StyleSheet.create({
    title: {
      fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20,
      fontWeight: _reactNative.Platform.OS === 'ios' ? '600' : '500',
      color: 'rgba(0, 0, 0, .9)',
      marginHorizontal: 16
    }
  });

  var _default = HeaderTitle;
  exports.default = _default;
},419,[1,8,6,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _TouchableItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _backIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var HeaderBackButton = function (_React$PureComponent) {
    (0, _inherits2.default)(HeaderBackButton, _React$PureComponent);

    function HeaderBackButton() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, HeaderBackButton);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HeaderBackButton)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {};

      _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      };

      _this._getTitleText = function () {
        var _this$props = _this.props,
            width = _this$props.width,
            title = _this$props.title,
            truncatedTitle = _this$props.truncatedTitle;
        var initialTextWidth = _this.state.initialTextWidth;

        if (title === null) {
          return null;
        } else if (!title) {
          return truncatedTitle;
        } else if (initialTextWidth && width && initialTextWidth > width) {
          return truncatedTitle;
        } else {
          return title;
        }
      };

      return _this;
    }

    (0, _createClass2.default)(HeaderBackButton, [{
      key: "_renderBackImage",
      value: function _renderBackImage() {
        var _this$props2 = this.props,
            backImage = _this$props2.backImage,
            backTitleVisible = _this$props2.backTitleVisible,
            tintColor = _this$props2.tintColor;

        var title = this._getTitleText();

        var BackImage;
        var props;

        if (_react.default.isValidElement(backImage)) {
          return backImage;
        } else if (backImage) {
          BackImage = backImage;
          props = {
            tintColor: tintColor,
            title: title
          };
        } else {
          BackImage = _reactNative.Image;
          props = {
            style: [styles.icon, !!backTitleVisible && styles.iconWithTitle, !!tintColor && {
              tintColor: tintColor
            }],
            source: _backIcon.default
          };
        }

        return _react.default.createElement(BackImage, (0, _extends2.default)({}, props, {
          fadeDuration: 0
        }));
      }
    }, {
      key: "_maybeRenderTitle",
      value: function _maybeRenderTitle() {
        var _this$props3 = this.props,
            backTitleVisible = _this$props3.backTitleVisible,
            titleStyle = _this$props3.titleStyle,
            tintColor = _this$props3.tintColor;

        var backTitleText = this._getTitleText();

        if (!backTitleVisible || backTitleText === null) {
          return null;
        }

        return _react.default.createElement(_reactNative.Text, {
          accessible: false,
          onLayout: this._onTextLayout,
          style: [styles.title, !!tintColor && {
            color: tintColor
          }, titleStyle],
          numberOfLines: 1
        }, this._getTitleText());
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
            onPress = _this$props4.onPress,
            pressColorAndroid = _this$props4.pressColorAndroid,
            title = _this$props4.title;

        var button = _react.default.createElement(_TouchableItem.default, {
          accessible: true,
          accessibilityComponentType: "button",
          accessibilityLabel: title ? title + ", back" : 'Go back',
          accessibilityTraits: "button",
          testID: "header-back",
          delayPressIn: 0,
          onPress: onPress,
          pressColor: pressColorAndroid,
          style: styles.container,
          borderless: true
        }, _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, this._renderBackImage(), this._maybeRenderTitle()));

        if (_reactNative.Platform.OS === 'android') {
          return _react.default.createElement(_reactNative.View, {
            style: styles.androidButtonWrapper
          }, button);
        } else {
          return button;
        }
      }
    }]);
    return HeaderBackButton;
  }(_react.default.PureComponent);

  HeaderBackButton.defaultProps = {
    pressColorAndroid: 'rgba(0, 0, 0, .32)',
    tintColor: _reactNative.Platform.select({
      ios: '#037aff'
    }),
    truncatedTitle: 'Back'
  };

  var styles = _reactNative.StyleSheet.create({
    androidButtonWrapper: {
      margin: 13,
      backgroundColor: 'transparent'
    },
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: _reactNative.Platform.OS === 'ios' ? {
      backgroundColor: 'transparent',
      height: 21,
      width: 13,
      marginLeft: 9,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    } : {
      height: 24,
      width: 24,
      margin: 3,
      resizeMode: 'contain',
      backgroundColor: 'transparent',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: _reactNative.Platform.OS === 'ios' ? {
      marginRight: 6
    } : {}
  });

  var _default = HeaderBackButton;
  exports.default = _default;
},420,[1,8,19,20,27,30,33,46,2,421,423]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _BorderlessButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var ANDROID_VERSION_LOLLIPOP = 21;

  var TouchableItem = function (_React$Component) {
    (0, _inherits2.default)(TouchableItem, _React$Component);

    function TouchableItem() {
      (0, _classCallCheck2.default)(this, TouchableItem);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TouchableItem).apply(this, arguments));
    }

    (0, _createClass2.default)(TouchableItem, [{
      key: "render",
      value: function render() {
        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {
          var _this$props = this.props,
              style = _this$props.style,
              rest = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);
          return _react.default.createElement(_reactNative.TouchableNativeFeedback, (0, _extends2.default)({}, rest, {
            style: null,
            background: _reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)
          }), _react.default.createElement(_reactNative.View, {
            style: style
          }, _react.default.Children.only(this.props.children)));
        } else if (_reactNative.Platform.OS === 'ios') {
          return _react.default.createElement(_BorderlessButton.default, (0, _extends2.default)({
            hitSlop: {
              top: 10,
              bottom: 10,
              right: 10,
              left: 10
            },
            disallowInterruption: true
          }, this.props), this.props.children);
        } else {
          return _react.default.createElement(_reactNative.TouchableOpacity, this.props, this.props.children);
        }
      }
    }]);
    return TouchableItem;
  }(_react.default.Component);

  exports.default = TouchableItem;
  TouchableItem.defaultProps = {
    borderless: false,
    pressColor: 'rgba(0, 0, 0, .32)'
  };
},421,[1,8,6,19,20,27,30,33,46,2,422]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _reactNativeGestureHandler = _$$_REQUIRE(_dependencyMap[12]);

  var AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(_reactNativeGestureHandler.BaseButton);

  var BorderlessButton = function (_React$Component) {
    (0, _inherits2.default)(BorderlessButton, _React$Component);

    function BorderlessButton(props) {
      var _this;

      (0, _classCallCheck2.default)(this, BorderlessButton);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BorderlessButton).call(this, props));

      _this._onActiveStateChange = function (active) {
        if (_reactNative.Platform.OS !== 'android') {
          _reactNative.Animated.spring(_this._opacity, {
            stiffness: 1000,
            damping: 500,
            mass: 3,
            overshootClamping: true,
            restDisplacementThreshold: 0.01,
            restSpeedThreshold: 0.01,
            toValue: active ? _this.props.activeOpacity : 1,
            useNativeDriver: true
          }).start();
        }

        _this.props.onActiveStateChange && _this.props.onActiveStateChange(active);
      };

      _this._opacity = new _reactNative.Animated.Value(1);
      return _this;
    }

    (0, _createClass2.default)(BorderlessButton, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            style = _this$props.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "style"]);
        return _react.default.createElement(AnimatedBaseButton, (0, _extends2.default)({}, rest, {
          onActiveStateChange: this._onActiveStateChange,
          style: [style, _reactNative.Platform.OS === 'ios' && {
            opacity: this._opacity
          }]
        }), children);
      }
    }]);
    return BorderlessButton;
  }(_react.default.Component);

  exports.default = BorderlessButton;
  BorderlessButton.propTypes = (0, _objectSpread2.default)({}, _reactNativeGestureHandler.BaseButton.propTypes, {
    borderless: _propTypes.default.bool
  });
  BorderlessButton.defaultProps = {
    activeOpacity: 0.3,
    borderless: true
  };
},422,[1,43,8,6,19,20,27,30,33,46,60,2,391]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-navigation-stack/src/views/assets",
    "width": 24,
    "height": 24,
    "scales": [1, 1.5, 2, 3, 4],
    "hash": "a364dc7a784101f7c8f6791c7b4514ce",
    "name": "back-icon",
    "type": "png"
  });
},423,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _TouchableItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _backIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var ModularHeaderBackButton = function (_React$PureComponent) {
    (0, _inherits2.default)(ModularHeaderBackButton, _React$PureComponent);

    function ModularHeaderBackButton() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ModularHeaderBackButton);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ModularHeaderBackButton)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {};

      _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      };

      _this._getTitleText = function () {
        var _this$props = _this.props,
            width = _this$props.width,
            title = _this$props.title,
            truncatedTitle = _this$props.truncatedTitle;
        var initialTextWidth = _this.state.initialTextWidth;

        if (title === null) {
          return null;
        } else if (!title) {
          return truncatedTitle;
        } else if (initialTextWidth && width && initialTextWidth > width) {
          return truncatedTitle;
        } else {
          return title.length > 8 ? truncatedTitle : title;
        }
      };

      return _this;
    }

    (0, _createClass2.default)(ModularHeaderBackButton, [{
      key: "_renderBackImage",
      value: function _renderBackImage() {
        var _this$props2 = this.props,
            backImage = _this$props2.backImage,
            backTitleVisible = _this$props2.backTitleVisible,
            tintColor = _this$props2.tintColor;
        var BackImage;
        var props;

        if (_react.default.isValidElement(backImage)) {
          return backImage;
        } else if (backImage) {
          BackImage = backImage;
          props = {
            tintColor: tintColor
          };
        } else {
          BackImage = _reactNative.Image;
          props = {
            style: [styles.icon, !!backTitleVisible && styles.iconWithTitle, !!tintColor && {
              tintColor: tintColor
            }],
            source: _backIcon.default
          };
        }

        return _react.default.createElement(BackImage, props);
      }
    }, {
      key: "_maybeRenderTitle",
      value: function _maybeRenderTitle() {
        var _this$props3 = this.props,
            backTitleVisible = _this$props3.backTitleVisible,
            titleStyle = _this$props3.titleStyle,
            tintColor = _this$props3.tintColor;

        var backTitleText = this._getTitleText();

        if (!backTitleVisible || backTitleText === null) {
          return null;
        }

        var LabelContainerComponent = this.props.LabelContainerComponent;
        return _react.default.createElement(LabelContainerComponent, null, _react.default.createElement(_reactNative.Text, {
          accessible: false,
          onLayout: this._onTextLayout,
          style: [styles.title, !!tintColor && {
            color: tintColor
          }, titleStyle],
          numberOfLines: 1
        }, this._getTitleText()));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
            onPress = _this$props4.onPress,
            title = _this$props4.title;
        var ButtonContainerComponent = this.props.ButtonContainerComponent;
        return _react.default.createElement(_TouchableItem.default, {
          accessibilityComponentType: "button",
          accessibilityLabel: title ? title + ", back" : 'Go back',
          accessibilityTraits: "button",
          testID: "header-back",
          delayPressIn: 0,
          onPress: onPress,
          style: styles.container,
          borderless: true
        }, _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(ButtonContainerComponent, null, this._renderBackImage()), this._maybeRenderTitle()));
      }
    }]);
    return ModularHeaderBackButton;
  }(_react.default.PureComponent);

  ModularHeaderBackButton.defaultProps = {
    tintColor: '#037aff',
    truncatedTitle: 'Back'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent',
      marginBottom: 1,
      overflow: 'visible'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: {
      height: 21,
      width: 12,
      marginLeft: 9,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: {
      marginRight: 3
    }
  });

  var _default = ModularHeaderBackButton;
  exports.default = _default;
},424,[1,19,20,27,30,33,46,2,421,423]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _getSceneIndicesForInterpolationInputRange = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function hasHeader(scene) {
    if (!scene) {
      return true;
    }

    var descriptor = scene.descriptor;
    return descriptor.options.header !== null;
  }

  var crossFadeInterpolation = function crossFadeInterpolation(scenes, first, index, last) {
    return {
      inputRange: [first, first + 0.001, index - 0.9, index - 0.2, index, last - 0.001, last],
      outputRange: [0, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0.3 : 1, hasHeader(scenes[index]) ? 1 : 0, hasHeader(scenes[last]) ? 0 : 1, 0],
      extrapolate: 'clamp'
    };
  };

  function isGoingBack(scenes) {
    var lastSceneIndexInScenes = scenes.length - 1;
    return !scenes[lastSceneIndexInScenes].isActive;
  }

  function forLayout(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene,
        scenes = props.scenes,
        mode = props.mode;

    if (mode !== 'float') {
      return {};
    }

    var isBack = isGoingBack(scenes);
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {};
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;

    var width = layout.initWidth || _reactNative.Dimensions.get('window').width;

    if (isBack && !hasHeader(scenes[index]) && !hasHeader(scenes[last]) || !isBack && !hasHeader(scenes[first]) && !hasHeader(scenes[index])) {
      return {
        transform: [{
          translateX: width
        }]
      };
    }

    var rtlMult = _reactNative.I18nManager.isRTL ? -1 : 1;
    var translateX = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [rtlMult * (hasHeader(scenes[first]) ? 0 : width), rtlMult * (hasHeader(scenes[index]) ? 0 : isBack ? width : -width), rtlMult * (hasHeader(scenes[last]) ? 0 : -width)],
      extrapolate: 'clamp'
    });
    return {
      transform: [{
        translateX: translateX
      }]
    };
  }

  function forLeft(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(scenes, first, index, last))
    };
  }

  function forCenter(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(scenes, first, index, last))
    };
  }

  function forRight(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(scenes, first, index, last))
    };
  }

  function forLeftButton(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, first + 0.001, first + Math.abs(index - first) / 2, index, last - Math.abs(last - index) / 2, last - 0.001, last];
    var outputRange = [0, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0.3 : 1, hasHeader(scenes[index]) ? 1 : 0, hasHeader(scenes[last]) ? 0.3 : 1, hasHeader(scenes[last]) ? 0 : 1, 0];
    return {
      opacity: position.interpolate({
        inputRange: inputRange,
        outputRange: outputRange,
        extrapolate: 'clamp'
      })
    };
  }

  var LEFT_LABEL_OFFSET = _reactNative.Dimensions.get('window').width / 2 - 70 - 25;

  function forLeftLabel(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var offset = LEFT_LABEL_OFFSET;
    return {
      opacity: position.interpolate({
        inputRange: [first, first + 0.001, index - 0.35, index, index + 0.5, last - 0.001, last],
        outputRange: [0, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[index]) ? 1 : 0, hasHeader(scenes[last]) ? 0.5 : 1, hasHeader(scenes[last]) ? 0 : 1, 0],
        extrapolate: 'clamp'
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, first + 0.001, index, last - 0.001, last],
          outputRange: _reactNative.I18nManager.isRTL ? [-offset * 1.5, hasHeader(scenes[first]) ? -offset * 1.5 : 0, 0, hasHeader(scenes[last]) ? offset : 0, offset] : [offset, hasHeader(scenes[first]) ? offset : 0, 0, hasHeader(scenes[last]) ? -offset * 1.5 : 0, -offset * 1.5],
          extrapolate: 'clamp'
        })
      }]
    };
  }

  var TITLE_OFFSET_IOS = _reactNative.Dimensions.get('window').width / 2 - 70 + 25;

  function forCenterFromLeft(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var offset = TITLE_OFFSET_IOS;
    return {
      opacity: position.interpolate({
        inputRange: [first, first + 0.001, index - 0.5, index, index + 0.7, last - 0.001, last],
        outputRange: [0, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[first]) ? 0 : 1, hasHeader(scenes[index]) ? 1 : 0, hasHeader(scenes[last]) ? 0 : 1, hasHeader(scenes[last]) ? 0 : 1, 0],
        extrapolate: 'clamp'
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, first + 0.001, index, last - 0.001, last],
          outputRange: _reactNative.I18nManager.isRTL ? [-offset, hasHeader(scenes[first]) ? -offset : 0, 0, hasHeader(scenes[last]) ? offset : 0, offset] : [offset, hasHeader(scenes[first]) ? offset : 0, 0, hasHeader(scenes[last]) ? -offset : 0, -offset],
          extrapolate: 'clamp'
        })
      }]
    };
  }

  function forBackgroundWithFade(props) {
    var position = props.position,
        scene = props.scene;
    var sceneRange = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!sceneRange) return {
      opacity: 0
    };
    return {
      opacity: position.interpolate({
        inputRange: [sceneRange.first, scene.index, sceneRange.last],
        outputRange: [0, 1, 0],
        extrapolate: 'clamp'
      })
    };
  }

  var VISIBLE = {
    opacity: 1
  };
  var HIDDEN = {
    opacity: 0
  };

  function forBackgroundWithInactiveHidden(_ref) {
    var navigation = _ref.navigation,
        scene = _ref.scene;
    return navigation.state.index === scene.index ? VISIBLE : HIDDEN;
  }

  var BACKGROUND_OFFSET = _reactNative.Dimensions.get('window').width;

  function forBackgroundWithTranslation(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var offset = BACKGROUND_OFFSET;
    var outputRange = [offset, 0, -offset];
    return {
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, index, last],
          outputRange: _reactNative.I18nManager.isRTL ? outputRange.reverse() : outputRange,
          extrapolate: 'clamp'
        })
      }]
    };
  }

  var forBackground = forBackgroundWithInactiveHidden;
  var _default = {
    forLayout: forLayout,
    forLeft: forLeft,
    forLeftButton: forLeftButton,
    forLeftLabel: forLeftLabel,
    forCenterFromLeft: forCenterFromLeft,
    forCenter: forCenter,
    forRight: forRight,
    forBackground: forBackground,
    forBackgroundWithInactiveHidden: forBackgroundWithInactiveHidden,
    forBackgroundWithFade: forBackgroundWithFade,
    forBackgroundWithTranslation: forBackgroundWithTranslation
  };
  exports.default = _default;
},425,[1,2,426]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  function getSceneIndicesForInterpolationInputRange(props) {
    var scene = props.scene,
        scenes = props.scenes;
    var index = scene.index;
    var lastSceneIndexInScenes = scenes.length - 1;
    var isBack = !scenes[lastSceneIndexInScenes].isActive;

    if (isBack) {
      var currentSceneIndexInScenes = scenes.findIndex(function (item) {
        return item === scene;
      });
      var targetSceneIndexInScenes = scenes.findIndex(function (item) {
        return item.isActive;
      });
      var targetSceneIndex = scenes[targetSceneIndexInScenes].index;
      var lastSceneIndex = scenes[lastSceneIndexInScenes].index;

      if (index !== targetSceneIndex && currentSceneIndexInScenes === lastSceneIndexInScenes) {
        return {
          first: Math.min(targetSceneIndex, index - 1),
          last: index + 1
        };
      } else if (index === targetSceneIndex && currentSceneIndexInScenes === targetSceneIndexInScenes) {
        return {
          first: index - 1,
          last: Math.max(lastSceneIndex, index + 1)
        };
      } else if (index === targetSceneIndex || currentSceneIndexInScenes > targetSceneIndexInScenes) {
        return null;
      } else {
        return {
          first: index - 1,
          last: index + 1
        };
      }
    } else {
      return {
        first: index - 1,
        last: index + 1
      };
    }
  }

  var _default = getSceneIndicesForInterpolationInputRange;
  exports.default = _default;
},426,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-navigation-stack/src/views/assets",
    "width": 50,
    "height": 85,
    "scales": [1],
    "hash": "6165c9d7a2e729ba57b23dd93add5366",
    "name": "back-icon-mask",
    "type": "png"
  });
},427,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _StackViewStyleInterpolator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ReactNativeFeatures = _$$_REQUIRE(_dependencyMap[4]);

  var IOSTransitionSpec;

  if ((0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {
    IOSTransitionSpec = {
      timing: _reactNative.Animated.spring,
      stiffness: 1000,
      damping: 500,
      mass: 3,
      overshootClamping: true,
      restDisplacementThreshold: 0.01,
      restSpeedThreshold: 0.01
    };
  } else {
    IOSTransitionSpec = {
      duration: 500,
      easing: _reactNative.Easing.bezier(0.2833, 0.99, 0.31833, 0.99),
      timing: _reactNative.Animated.timing
    };
  }

  var SlideFromRightIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _StackViewStyleInterpolator.default.forHorizontal,
    containerStyle: {
      backgroundColor: '#eee'
    }
  };
  var ModalSlideFromBottomIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _StackViewStyleInterpolator.default.forVertical,
    containerStyle: {
      backgroundColor: '#eee'
    }
  };
  var FadeInFromBottomAndroid = {
    transitionSpec: {
      duration: 350,
      easing: _reactNative.Easing.out(_reactNative.Easing.poly(5)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _StackViewStyleInterpolator.default.forFadeFromBottomAndroid
  };
  var FadeOutToBottomAndroid = {
    transitionSpec: {
      duration: 150,
      easing: _reactNative.Easing.in(_reactNative.Easing.linear),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _StackViewStyleInterpolator.default.forFadeToBottomAndroid
  };

  function defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {
    if (_reactNative.Platform.OS === 'android') {
      if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {
        return FadeOutToBottomAndroid;
      }

      return FadeInFromBottomAndroid;
    }

    if (isModal) {
      return ModalSlideFromBottomIOS;
    }

    return SlideFromRightIOS;
  }

  function getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {
    var defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);

    if (transitionConfigurer) {
      return (0, _objectSpread2.default)({}, defaultConfig, transitionConfigurer(transitionProps, prevTransitionProps, isModal));
    }

    return defaultConfig;
  }

  var _default = {
    defaultTransitionConfig: defaultTransitionConfig,
    getTransitionConfig: getTransitionConfig,
    SlideFromRightIOS: SlideFromRightIOS,
    ModalSlideFromBottomIOS: ModalSlideFromBottomIOS,
    FadeInFromBottomAndroid: FadeInFromBottomAndroid,
    FadeOutToBottomAndroid: FadeOutToBottomAndroid
  };
  exports.default = _default;
},428,[1,43,2,429,430]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _getSceneIndicesForInterpolationInputRange = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var EPS = 1e-5;

  function forInitial(props) {
    var navigation = props.navigation,
        scene = props.scene;
    var focused = navigation.state.index === scene.index;
    var opacity = focused ? 1 : 0;
    var translate = focused ? 0 : 1000000;
    return {
      opacity: opacity,
      transform: [{
        translateX: translate
      }, {
        translateY: translate
      }]
    };
  }

  function forHorizontal(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var width = layout.initWidth;
    var translateX = position.interpolate({
      inputRange: [first, index, last],
      outputRange: _reactNative.I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3],
      extrapolate: 'clamp'
    });
    var shadowOpacity = props.shadowEnabled ? position.interpolate({
      inputRange: [first, index, last],
      outputRange: [0, 0.7, 0],
      extrapolate: 'clamp'
    }) : null;
    var overlayOpacity = props.cardOverlayEnabled ? position.interpolate({
      inputRange: [index, last - 0.5, last, last + EPS],
      outputRange: [0, 0.07, 0.07, 0],
      extrapolate: 'clamp'
    }) : null;
    return {
      transform: [{
        translateX: translateX
      }],
      overlayOpacity: overlayOpacity,
      shadowOpacity: shadowOpacity
    };
  }

  function forVertical(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var height = layout.initHeight;
    var translateY = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [height, 0, 0],
      extrapolate: 'clamp'
    });
    return {
      transform: [{
        translateY: translateY
      }]
    };
  }

  function forFadeFromBottomAndroid(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.5, first + 0.9, index, last],
      outputRange: [0, 0.25, 0.7, 1, 0],
      extrapolate: 'clamp'
    });
    var height = layout.initHeight;
    var maxTranslation = height * 0.08;
    var translateY = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [maxTranslation, 0, 0],
      extrapolate: 'clamp'
    });
    return {
      opacity: opacity,
      transform: [{
        translateY: translateY
      }]
    };
  }

  function forFadeToBottomAndroid(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index, last];
    var opacity = position.interpolate({
      inputRange: inputRange,
      outputRange: [0, 1, 0],
      extrapolate: 'clamp'
    });
    var height = layout.initHeight;
    var maxTranslation = height * 0.08;
    var translateY = position.interpolate({
      inputRange: inputRange,
      outputRange: [maxTranslation, 0, 0],
      extrapolate: 'clamp'
    });
    return {
      opacity: opacity,
      transform: [{
        translateY: translateY
      }]
    };
  }

  function forFade(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [0, 1, 1],
      extrapolate: 'clamp'
    });
    return {
      opacity: opacity
    };
  }

  var _default = {
    forHorizontal: forHorizontal,
    forVertical: forVertical,
    forFadeFromBottomAndroid: forFadeFromBottomAndroid,
    forFadeToBottomAndroid: forFadeToBottomAndroid,
    forFade: forFade
  };
  exports.default = _default;
},429,[1,2,426]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.supportsImprovedSpringAnimation = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var PlatformConstants = _reactNative.NativeModules.PlatformConstants;

  var supportsImprovedSpringAnimation = function supportsImprovedSpringAnimation() {
    if (PlatformConstants && PlatformConstants.reactNativeVersion) {
      var _PlatformConstants$re = PlatformConstants.reactNativeVersion,
          major = _PlatformConstants$re.major,
          minor = _PlatformConstants$re.minor;
      return minor >= 50 || major === 0 && minor === 0;
    }

    return false;
  };

  exports.supportsImprovedSpringAnimation = supportsImprovedSpringAnimation;
},430,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _react.default.createContext(null);

  exports.default = _default;
},431,[1,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = clamp;

  function clamp(min, value, max) {
    if (value < min) {
      return min;
    }

    if (value > max) {
      return max;
    }

    return value;
  }
},432,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _ScenesReducer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var DefaultTransitionSpec = {
    duration: 250,
    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
    timing: _reactNative.Animated.timing
  };

  var Transitioner = function (_React$Component) {
    (0, _inherits2.default)(Transitioner, _React$Component);

    function Transitioner(_props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, Transitioner);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Transitioner).call(this, _props, context));

      _this._computeScenes = function (props, nextProps) {
        var nextScenes = (0, _ScenesReducer.default)(_this.state.scenes, nextProps.navigation.state, props.navigation.state, nextProps.descriptors);

        if (!nextProps.navigation.state.isTransitioning) {
          nextScenes = filterStale(nextScenes);
        }

        if (nextProps.screenProps !== _this.props.screenProps) {
          _this.setState({
            nextScenes: nextScenes
          });
        }

        if (nextScenes === _this.state.scenes) {
          return;
        }

        return nextScenes;
      };

      _this._onLayout = function (event) {
        var _event$nativeEvent$la = event.nativeEvent.layout,
            height = _event$nativeEvent$la.height,
            width = _event$nativeEvent$la.width;

        if (_this.state.layout.initWidth === width && _this.state.layout.initHeight === height) {
          return;
        }

        var layout = (0, _objectSpread2.default)({}, _this.state.layout, {
          initHeight: height,
          initWidth: width,
          isMeasured: true
        });
        layout.height.setValue(height);
        layout.width.setValue(width);
        var nextState = (0, _objectSpread2.default)({}, _this.state, {
          layout: layout
        });
        _this._transitionProps = buildTransitionProps(_this.props, nextState);

        _this.setState(nextState);
      };

      _this._onTransitionEnd = function () {
        if (!_this._isMounted) {
          return;
        }

        var prevTransitionProps = _this._prevTransitionProps;
        _this._prevTransitionProps = null;
        var scenes = filterStale(_this.state.scenes);
        var nextState = (0, _objectSpread2.default)({}, _this.state, {
          scenes: scenes
        });
        _this._transitionProps = buildTransitionProps(_this.props, nextState);

        _this.setState(nextState, function _callee() {
          var result, prevProps;
          return _regenerator.default.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!_this.props.onTransitionEnd) {
                    _context.next = 5;
                    break;
                  }

                  result = _this.props.onTransitionEnd(_this._transitionProps, prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 5;
                  return _regenerator.default.awrap(result);

                case 5:
                  if (_this._queuedTransition) {
                    prevProps = _this._queuedTransition.prevProps;
                    _this._queuedTransition = null;

                    _this._startTransition(prevProps, _this.props);
                  } else {
                    _this._isTransitionRunning = false;
                  }

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          });
        });
      };

      var _layout = {
        height: new _reactNative.Animated.Value(0),
        initHeight: 0,
        initWidth: 0,
        isMeasured: false,
        width: new _reactNative.Animated.Value(0)
      };
      var position = new _reactNative.Animated.Value(_this.props.navigation.state.index);
      _this._positionListener = position.addListener(function () {});
      _this.state = {
        layout: _layout,
        position: position,
        scenes: (0, _ScenesReducer.default)([], _this.props.navigation.state, null, _this.props.descriptors)
      };
      _this._prevTransitionProps = null;
      _this._transitionProps = buildTransitionProps(_props, _this.state);
      _this._isMounted = false;
      _this._isTransitionRunning = false;
      _this._queuedTransition = null;
      return _this;
    }

    (0, _createClass2.default)(Transitioner, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
        this._positionListener && this.state.position.removeListener(this._positionListener);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this._isTransitionRunning) {
          if (!this._queuedTransition) {
            this._queuedTransition = {
              prevProps: this.props
            };
          }

          return;
        }

        this._startTransition(this.props, nextProps);
      }
    }, {
      key: "_startTransition",
      value: function _startTransition(props, nextProps) {
        var _this2 = this;

        var indexHasChanged = props.navigation.state.index !== nextProps.navigation.state.index;

        var nextScenes = this._computeScenes(props, nextProps);

        if (!nextScenes) {
          this._prevTransitionProps = this._transitionProps;

          this._onTransitionEnd();

          return;
        }

        var nextState = (0, _objectSpread2.default)({}, this.state, {
          scenes: nextScenes
        });
        var position = nextState.position;
        var toValue = nextProps.navigation.state.index;
        this._prevTransitionProps = this._transitionProps;
        this._transitionProps = buildTransitionProps(nextProps, nextState);
        var isTransitioning = this._transitionProps.navigation.state.isTransitioning;

        if (!isTransitioning || !indexHasChanged) {
          this.setState(nextState, function _callee2() {
            var result;
            return _regenerator.default.async(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (!nextProps.onTransitionStart) {
                      _context2.next = 5;
                      break;
                    }

                    result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);

                    if (!(result instanceof Promise)) {
                      _context2.next = 5;
                      break;
                    }

                    _context2.next = 5;
                    return _regenerator.default.awrap(result);

                  case 5:
                    indexHasChanged && position.setValue(toValue);

                    _this2._onTransitionEnd();

                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            });
          });
        } else if (isTransitioning) {
          this._isTransitionRunning = true;
          this.setState(nextState, function _callee3() {
            var result;
            return _regenerator.default.async(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!nextProps.onTransitionStart) {
                      _context3.next = 5;
                      break;
                    }

                    result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);

                    if (!(result instanceof Promise)) {
                      _context3.next = 5;
                      break;
                    }

                    _context3.next = 5;
                    return _regenerator.default.awrap(result);

                  case 5:
                  case "end":
                    return _context3.stop();
                }
              }
            });
          });
          var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;
          var transitionSpec = (0, _objectSpread2.default)({}, DefaultTransitionSpec, transitionUserSpec);
          var timing = transitionSpec.timing;
          delete transitionSpec.timing;
          var positionHasChanged = position.__getValue() !== toValue;

          if (indexHasChanged && positionHasChanged) {
            timing(position, (0, _objectSpread2.default)({}, transitionSpec, {
              toValue: nextProps.navigation.state.index
            })).start(this._onTransitionEnd);
          } else {
            this._onTransitionEnd();
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          onLayout: this._onLayout,
          style: styles.main
        }, this.props.render(this._transitionProps, this._prevTransitionProps));
      }
    }]);
    return Transitioner;
  }(_react.default.Component);

  function buildTransitionProps(props, state) {
    var navigation = props.navigation,
        options = props.options;
    var layout = state.layout,
        position = state.position,
        scenes = state.scenes;
    var scene = scenes.find(isSceneActive);
    (0, _invariant.default)(scene, 'Could not find active scene');
    return {
      layout: layout,
      navigation: navigation,
      position: position,
      scenes: scenes,
      scene: scene,
      options: options,
      index: scene.index
    };
  }

  function isSceneNotStale(scene) {
    return !scene.isStale;
  }

  function filterStale(scenes) {
    var filtered = scenes.filter(isSceneNotStale);

    if (filtered.length === scenes.length) {
      return scenes;
    }

    return filtered;
  }

  function isSceneActive(scene) {
    return scene.isActive;
  }

  var styles = _reactNative.StyleSheet.create({
    main: {
      flex: 1
    }
  });

  var _default = Transitioner;
  exports.default = _default;
},433,[1,129,43,19,20,27,30,33,46,2,417,434]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ScenesReducer;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _shallowEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var SCENE_KEY_PREFIX = 'scene_';

  function compareKey(one, two) {
    var delta = one.length - two.length;

    if (delta > 0) {
      return 1;
    }

    if (delta < 0) {
      return -1;
    }

    return one > two ? 1 : -1;
  }

  function compareScenes(one, two) {
    if (one.index > two.index) {
      return 1;
    }

    if (one.index < two.index) {
      return -1;
    }

    return compareKey(one.key, two.key);
  }

  function areScenesShallowEqual(one, two) {
    return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.isActive === two.isActive && areRoutesShallowEqual(one.route, two.route);
  }

  function areRoutesShallowEqual(one, two) {
    if (!one || !two) {
      return one === two;
    }

    if (one.key !== two.key) {
      return false;
    }

    return (0, _shallowEqual.default)(one, two);
  }

  function ScenesReducer(scenes, nextState, prevState, descriptors) {
    scenes.forEach(function (scene) {
      var route = scene.route;

      if (descriptors && descriptors[route.key]) {
        scene.descriptor = descriptors[route.key];
      }
    });

    if (prevState === nextState) {
      return scenes;
    }

    var prevScenes = new Map();
    var freshScenes = new Map();
    var staleScenes = new Map();
    scenes.forEach(function (scene) {
      var key = scene.key;

      if (scene.isStale) {
        staleScenes.set(key, scene);
      }

      prevScenes.set(key, scene);
    });
    var nextKeys = new Set();
    var nextRoutes = nextState.routes;

    if (nextRoutes.length > nextState.index + 1) {
      console.warn('StackRouter provided invalid state, index should always be the top route');
      nextRoutes = nextState.routes.slice(0, nextState.index + 1);
    }

    nextRoutes.forEach(function (route, index) {
      var key = SCENE_KEY_PREFIX + route.key;
      var descriptor = descriptors && descriptors[route.key];
      var scene = {
        index: index,
        isActive: false,
        isStale: false,
        key: key,
        route: route,
        descriptor: descriptor
      };
      (0, _invariant.default)(!nextKeys.has(key), "navigation.state.routes[" + index + "].key \"" + key + "\" conflicts with " + 'another route!');
      nextKeys.add(key);

      if (staleScenes.has(key)) {
        staleScenes.delete(key);
      }

      freshScenes.set(key, scene);
    });

    if (prevState) {
      var prevRoutes = prevState.routes;

      if (prevRoutes.length > prevState.index + 1) {
        console.warn('StackRouter provided invalid state, index should always be the top route');
        prevRoutes = prevRoutes.slice(0, prevState.index + 1);
      }

      prevRoutes.forEach(function (route, index) {
        var key = SCENE_KEY_PREFIX + route.key;

        if (freshScenes.has(key)) {
          return;
        }

        var lastScene = scenes.find(function (scene) {
          return scene.route.key === route.key;
        });
        var descriptor = lastScene ? lastScene.descriptor : descriptors[route.key];

        if (descriptor) {
          staleScenes.set(key, {
            index: index,
            isActive: false,
            isStale: true,
            key: key,
            route: route,
            descriptor: descriptor
          });
        }
      });
    }

    var nextScenes = [];

    var mergeScene = function mergeScene(nextScene) {
      var key = nextScene.key;
      var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;

      if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
        nextScenes.push(prevScene);
      } else {
        nextScenes.push(nextScene);
      }
    };

    staleScenes.forEach(mergeScene);
    freshScenes.forEach(mergeScene);
    nextScenes.sort(compareScenes);
    var activeScenesCount = 0;
    nextScenes.forEach(function (scene, ii) {
      var isActive = !scene.isStale && scene.index === nextState.index;

      if (isActive !== scene.isActive) {
        nextScenes[ii] = (0, _objectSpread2.default)({}, scene, {
          isActive: isActive
        });
      }

      if (isActive) {
        activeScenesCount++;
      }
    });
    (0, _invariant.default)(activeScenesCount === 1, 'there should always be only one scene active, not %s.', activeScenesCount);

    if (nextScenes.length !== scenes.length) {
      return nextScenes;
    }

    if (nextScenes.some(function (scene, index) {
      return !areScenesShallowEqual(scenes[index], scene);
    })) {
      return nextScenes;
    }

    return scenes;
  }
},434,[1,43,417,435]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  var _default = shallowEqual;
  exports.default = _default;
},435,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get createBottomTabNavigator() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    },

    get createMaterialTopTabNavigator() {
      return _$$_REQUIRE(_dependencyMap[1]).default;
    },

    get BottomTabBar() {
      return _$$_REQUIRE(_dependencyMap[2]).default;
    },

    get MaterialTopTabBar() {
      return _$$_REQUIRE(_dependencyMap[3]).default;
    },

    get createTabNavigator() {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    }

  };
},436,[437,443,439,455,438]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[11]);

  var _reactNativeScreens = _$$_REQUIRE(_dependencyMap[12]);

  var _createTabNavigator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _BottomTabBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _ResourceSavingScene = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var TabNavigationView = function (_React$PureComponent) {
    (0, _inherits2.default)(TabNavigationView, _React$PureComponent);

    function TabNavigationView() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TabNavigationView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabNavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        loaded: [_this.props.navigation.state.index]
      };

      _this._renderTabBar = function () {
        var _this$props = _this.props,
            _this$props$tabBarCom = _this$props.tabBarComponent,
            TabBarComponent = _this$props$tabBarCom === undefined ? _BottomTabBar.default : _this$props$tabBarCom,
            tabBarOptions = _this$props.tabBarOptions,
            navigation = _this$props.navigation,
            screenProps = _this$props.screenProps,
            getLabelText = _this$props.getLabelText,
            getAccessibilityLabel = _this$props.getAccessibilityLabel,
            getButtonComponent = _this$props.getButtonComponent,
            getTestID = _this$props.getTestID,
            renderIcon = _this$props.renderIcon,
            onTabPress = _this$props.onTabPress;
        var descriptors = _this.props.descriptors;
        var state = _this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarVisible === false) {
          return null;
        }

        return React.createElement(TabBarComponent, (0, _extends2.default)({}, tabBarOptions, {
          jumpTo: _this._jumpTo,
          navigation: navigation,
          screenProps: screenProps,
          onTabPress: onTabPress,
          getLabelText: getLabelText,
          getButtonComponent: getButtonComponent,
          getAccessibilityLabel: getAccessibilityLabel,
          getTestID: getTestID,
          renderIcon: renderIcon
        }));
      };

      _this._jumpTo = function (key) {
        var _this$props2 = _this.props,
            navigation = _this$props2.navigation,
            onIndexChange = _this$props2.onIndexChange;
        var index = navigation.state.routes.findIndex(function (route) {
          return route.key === key;
        });
        onIndexChange(index);
      };

      return _this;
    }

    (0, _createClass2.default)(TabNavigationView, [{
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            navigation = _this$props3.navigation,
            renderScene = _this$props3.renderScene,
            lazy = _this$props3.lazy;
        var routes = navigation.state.routes;
        var loaded = this.state.loaded;
        return React.createElement(_reactNative.View, {
          style: styles.container
        }, React.createElement(_reactNativeScreens.ScreenContainer, {
          style: styles.pages
        }, routes.map(function (route, index) {
          if (lazy && !loaded.includes(index)) {
            return null;
          }

          var isFocused = navigation.state.index === index;
          return React.createElement(_ResourceSavingScene.default, {
            key: route.key,
            style: [_reactNative.StyleSheet.absoluteFill, {
              opacity: isFocused ? 1 : 0
            }],
            isVisible: isFocused
          }, renderScene({
            route: route
          }));
        })), this._renderTabBar());
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var index = nextProps.navigation.state.index;
        return {
          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [index])
        };
      }
    }]);
    return TabNavigationView;
  }(React.PureComponent);

  TabNavigationView.defaultProps = {
    lazy: true
  };
  (0, _reactLifecyclesCompat.polyfill)(TabNavigationView);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    pages: {
      flex: 1
    }
  });

  var _default = (0, _createTabNavigator.default)(TabNavigationView);

  exports.default = _default;
},437,[361,1,15,8,19,20,27,30,33,46,2,333,414,438,439,442]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createTabNavigator;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _core = _$$_REQUIRE(_dependencyMap[10]);

  function createTabNavigator(TabView) {
    var NavigationView = function (_React$Component) {
      (0, _inherits2.default)(NavigationView, _React$Component);

      function NavigationView() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, NavigationView);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(NavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));

        _this._renderScene = function (_ref) {
          var route = _ref.route;
          var _this$props = _this.props,
              screenProps = _this$props.screenProps,
              descriptors = _this$props.descriptors;
          var descriptor = descriptors[route.key];
          var TabComponent = descriptor.getComponent();
          return React.createElement(_core.SceneView, {
            screenProps: screenProps,
            navigation: descriptor.navigation,
            component: TabComponent
          });
        };

        _this._renderIcon = function (_ref2) {
          var route = _ref2.route,
              _ref2$focused = _ref2.focused,
              focused = _ref2$focused === undefined ? true : _ref2$focused,
              tintColor = _ref2.tintColor,
              _ref2$horizontal = _ref2.horizontal,
              horizontal = _ref2$horizontal === undefined ? false : _ref2$horizontal;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;

          if (options.tabBarIcon) {
            return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
              focused: focused,
              tintColor: tintColor,
              horizontal: horizontal
            }) : options.tabBarIcon;
          }

          return null;
        };

        _this._getButtonComponent = function (_ref3) {
          var route = _ref3.route;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;

          if (options.tabBarButtonComponent) {
            return options.tabBarButtonComponent;
          }

          return null;
        };

        _this._getLabelText = function (_ref4) {
          var route = _ref4.route;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;

          if (options.tabBarLabel) {
            return options.tabBarLabel;
          }

          if (typeof options.title === 'string') {
            return options.title;
          }

          return route.routeName;
        };

        _this._getAccessibilityLabel = function (_ref5) {
          var route = _ref5.route;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;

          if (typeof options.tabBarAccessibilityLabel !== 'undefined') {
            return options.tabBarAccessibilityLabel;
          }

          var label = _this._getLabelText({
            route: route
          });

          if (typeof label === 'string') {
            return label;
          }
        };

        _this._getTestID = function (_ref6) {
          var route = _ref6.route;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var options = descriptor.options;
          return options.tabBarTestID;
        };

        _this._handleTabPress = function (_ref7) {
          var route = _ref7.route;
          _this._isTabPress = true;
          var descriptors = _this.props.descriptors;
          var descriptor = descriptors[route.key];
          var navigation = descriptor.navigation,
              options = descriptor.options;

          var defaultHandler = function defaultHandler() {
            if (navigation.isFocused()) {
              if (route.hasOwnProperty('index') && route.index > 0) {
                navigation.dispatch(_core.StackActions.popToTop({
                  key: route.key
                }));
              } else {
                navigation.emit('refocus');
              }
            } else {
              _this._jumpTo(route.routeName);
            }
          };

          if (options.tabBarOnPress) {
            options.tabBarOnPress({
              navigation: navigation,
              defaultHandler: defaultHandler
            });
          } else {
            defaultHandler();
          }
        };

        _this._handleIndexChange = function (index) {
          if (_this._isTabPress) {
            _this._isTabPress = false;
            return;
          }

          _this._jumpTo(_this.props.navigation.state.routes[index].routeName);
        };

        _this._handleSwipeStart = function () {
          _this.setState({
            isSwiping: true
          });
        };

        _this._handleSwipeEnd = function () {
          _this.setState({
            isSwiping: false
          });
        };

        _this._jumpTo = function (routeName) {
          return _this.props.navigation.dispatch(_core.NavigationActions.navigate({
            routeName: routeName
          }));
        };

        _this._isTabPress = false;
        return _this;
      }

      (0, _createClass2.default)(NavigationView, [{
        key: "render",
        value: function render() {
          var _this$props2 = this.props,
              descriptors = _this$props2.descriptors,
              navigation = _this$props2.navigation,
              screenProps = _this$props2.screenProps;
          var state = navigation.state;
          var route = state.routes[state.index];
          var descriptor = descriptors[route.key];
          var options = (0, _objectSpread2.default)({}, this.props.navigationConfig, descriptor.options);
          return React.createElement(TabView, (0, _extends2.default)({}, options, {
            getLabelText: this._getLabelText,
            getButtonComponent: this._getButtonComponent,
            getAccessibilityLabel: this._getAccessibilityLabel,
            getTestID: this._getTestID,
            renderIcon: this._renderIcon,
            renderScene: this._renderScene,
            onIndexChange: this._handleIndexChange,
            onTabPress: this._handleTabPress,
            navigation: navigation,
            descriptors: descriptors,
            screenProps: screenProps
          }));
        }
      }]);
      return NavigationView;
    }(React.Component);

    return function (routes) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var router = (0, _core.TabRouter)(routes, config);
      return (0, _core.createNavigator)(NavigationView, router, config);
    };
  }
},438,[361,1,8,43,19,20,27,30,33,46,334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _native = _$$_REQUIRE(_dependencyMap[9]);

  var _CrossFadeIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _withDimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var majorVersion = parseInt(_reactNative.Platform.Version, 10);
  var isIos = _reactNative.Platform.OS === 'ios';
  var isIOS11 = majorVersion >= 11 && isIos;
  var DEFAULT_MAX_TAB_ITEM_WIDTH = 125;

  var TouchableWithoutFeedbackWrapper = function (_React$Component) {
    (0, _inherits2.default)(TouchableWithoutFeedbackWrapper, _React$Component);

    function TouchableWithoutFeedbackWrapper() {
      (0, _classCallCheck2.default)(this, TouchableWithoutFeedbackWrapper);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(TouchableWithoutFeedbackWrapper).apply(this, arguments));
    }

    (0, _createClass2.default)(TouchableWithoutFeedbackWrapper, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            onPress = _this$props.onPress,
            testID = _this$props.testID,
            accessibilityLabel = _this$props.accessibilityLabel,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["onPress", "testID", "accessibilityLabel"]);
        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: onPress,
          testID: testID,
          hitSlop: {
            left: 15,
            right: 15,
            top: 5,
            bottom: 5
          },
          accessibilityLabel: accessibilityLabel
        }, _react.default.createElement(_reactNative.View, props));
      }
    }]);
    return TouchableWithoutFeedbackWrapper;
  }(_react.default.Component);

  var TabBarBottom = function (_React$Component2) {
    (0, _inherits2.default)(TabBarBottom, _React$Component2);

    function TabBarBottom() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TabBarBottom);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabBarBottom)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._renderLabel = function (_ref) {
        var route = _ref.route,
            focused = _ref.focused;
        var _this$props2 = _this.props,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            labelStyle = _this$props2.labelStyle,
            showLabel = _this$props2.showLabel,
            showIcon = _this$props2.showIcon,
            allowFontScaling = _this$props2.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var label = _this.props.getLabelText({
          route: route
        });

        var tintColor = focused ? activeTintColor : inactiveTintColor;

        if (typeof label === 'string') {
          return _react.default.createElement(_reactNative.Animated.Text, {
            numberOfLines: 1,
            style: [styles.label, {
              color: tintColor
            }, showIcon && _this._shouldUseHorizontalLabels() ? styles.labelBeside : styles.labelBeneath, labelStyle],
            allowFontScaling: allowFontScaling
          }, label);
        }

        if (typeof label === 'function') {
          return label({
            route: route,
            focused: focused,
            tintColor: tintColor
          });
        }

        return label;
      };

      _this._renderIcon = function (_ref2) {
        var route = _ref2.route,
            focused = _ref2.focused;
        var _this$props3 = _this.props,
            navigation = _this$props3.navigation,
            activeTintColor = _this$props3.activeTintColor,
            inactiveTintColor = _this$props3.inactiveTintColor,
            renderIcon = _this$props3.renderIcon,
            showIcon = _this$props3.showIcon,
            showLabel = _this$props3.showLabel;

        if (showIcon === false) {
          return null;
        }

        var horizontal = _this._shouldUseHorizontalLabels();

        var activeOpacity = focused ? 1 : 0;
        var inactiveOpacity = focused ? 0 : 1;
        return _react.default.createElement(_CrossFadeIcon.default, {
          route: route,
          horizontal: horizontal,
          navigation: navigation,
          activeOpacity: activeOpacity,
          inactiveOpacity: inactiveOpacity,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          style: [styles.iconWithExplicitHeight, showLabel === false && !horizontal && styles.iconWithoutLabel, showLabel !== false && !horizontal && styles.iconWithLabel]
        });
      };

      _this._shouldUseHorizontalLabels = function () {
        var routes = _this.props.navigation.state.routes;
        var _this$props4 = _this.props,
            isLandscape = _this$props4.isLandscape,
            dimensions = _this$props4.dimensions,
            adaptive = _this$props4.adaptive,
            tabStyle = _this$props4.tabStyle;

        if (!adaptive) {
          return false;
        }

        if (_reactNative.Platform.isPad) {
          var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;

          var flattenedStyle = _reactNative.StyleSheet.flatten(tabStyle);

          if (flattenedStyle) {
            if (typeof flattenedStyle.width === 'number') {
              maxTabItemWidth = flattenedStyle.width;
            } else if (typeof flattenedStyle.maxWidth === 'number') {
              maxTabItemWidth = flattenedStyle.maxWidth;
            }
          }

          return routes.length * maxTabItemWidth <= dimensions.width;
        } else {
          return isLandscape;
        }
      };

      return _this;
    }

    (0, _createClass2.default)(TabBarBottom, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props5 = this.props,
            navigation = _this$props5.navigation,
            activeBackgroundColor = _this$props5.activeBackgroundColor,
            inactiveBackgroundColor = _this$props5.inactiveBackgroundColor,
            onTabPress = _this$props5.onTabPress,
            safeAreaInset = _this$props5.safeAreaInset,
            style = _this$props5.style,
            tabStyle = _this$props5.tabStyle;
        var routes = navigation.state.routes;
        var tabBarStyle = [styles.tabBar, this._shouldUseHorizontalLabels() && !_reactNative.Platform.isPad ? styles.tabBarCompact : styles.tabBarRegular, style];
        return _react.default.createElement(_native.SafeAreaView, {
          style: tabBarStyle,
          forceInset: safeAreaInset
        }, routes.map(function (route, index) {
          var focused = index === navigation.state.index;
          var scene = {
            route: route,
            focused: focused
          };

          var accessibilityLabel = _this2.props.getAccessibilityLabel({
            route: route
          });

          var testID = _this2.props.getTestID({
            route: route
          });

          var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
          var ButtonComponent = _this2.props.getButtonComponent({
            route: route
          }) || TouchableWithoutFeedbackWrapper;
          return _react.default.createElement(ButtonComponent, {
            key: route.key,
            onPress: function onPress() {
              return onTabPress({
                route: route
              });
            },
            testID: testID,
            accessibilityLabel: accessibilityLabel,
            style: [styles.tab, {
              backgroundColor: backgroundColor
            }, _this2._shouldUseHorizontalLabels() ? styles.tabLandscape : styles.tabPortrait, tabStyle]
          }, _this2._renderIcon(scene), _this2._renderLabel(scene));
        }));
      }
    }]);
    return TabBarBottom;
  }(_react.default.Component);

  TabBarBottom.defaultProps = {
    activeTintColor: '#3478f6',
    activeBackgroundColor: 'transparent',
    inactiveTintColor: '#929292',
    inactiveBackgroundColor: 'transparent',
    showLabel: true,
    showIcon: true,
    allowFontScaling: true,
    adaptive: isIOS11,
    safeAreaInset: {
      bottom: 'always',
      top: 'never'
    }
  };
  var DEFAULT_HEIGHT = 49;
  var COMPACT_HEIGHT = 29;

  var styles = _reactNative.StyleSheet.create({
    tabBar: {
      backgroundColor: '#fff',
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderTopColor: 'rgba(0, 0, 0, .3)',
      flexDirection: 'row'
    },
    tabBarCompact: {
      height: COMPACT_HEIGHT
    },
    tabBarRegular: {
      height: DEFAULT_HEIGHT
    },
    tab: {
      flex: 1,
      alignItems: isIos ? 'center' : 'stretch'
    },
    tabPortrait: {
      justifyContent: 'flex-end',
      flexDirection: 'column'
    },
    tabLandscape: {
      justifyContent: 'center',
      flexDirection: 'row'
    },
    iconWithoutLabel: {
      flex: 1
    },
    iconWithLabel: {
      flex: 1
    },
    iconWithExplicitHeight: {
      height: _reactNative.Platform.isPad ? DEFAULT_HEIGHT : COMPACT_HEIGHT
    },
    label: {
      textAlign: 'center',
      backgroundColor: 'transparent'
    },
    labelBeneath: {
      fontSize: 11,
      marginBottom: 1.5
    },
    labelBeside: {
      fontSize: 12,
      marginLeft: 15
    }
  });

  var _default = (0, _withDimensions.default)(TabBarBottom);

  exports.default = _default;
},439,[1,6,19,20,27,30,33,46,2,331,440,441]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var TabBarIcon = function (_React$Component) {
    (0, _inherits2.default)(TabBarIcon, _React$Component);

    function TabBarIcon() {
      (0, _classCallCheck2.default)(this, TabBarIcon);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TabBarIcon).apply(this, arguments));
    }

    (0, _createClass2.default)(TabBarIcon, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            route = _this$props.route,
            activeOpacity = _this$props.activeOpacity,
            inactiveOpacity = _this$props.inactiveOpacity,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            renderIcon = _this$props.renderIcon,
            horizontal = _this$props.horizontal,
            style = _this$props.style;
        return _react.default.createElement(_reactNative.View, {
          style: style
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.icon, {
            opacity: activeOpacity
          }]
        }, renderIcon({
          route: route,
          focused: true,
          horizontal: horizontal,
          tintColor: activeTintColor
        })), _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.icon, {
            opacity: inactiveOpacity
          }]
        }, renderIcon({
          route: route,
          focused: false,
          horizontal: horizontal,
          tintColor: inactiveTintColor
        })));
      }
    }]);
    return TabBarIcon;
  }(_react.default.Component);

  exports.default = TabBarIcon;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      position: 'absolute',
      alignSelf: 'center',
      alignItems: 'center',
      justifyContent: 'center',
      height: '100%',
      width: '100%',
      minWidth: 25
    }
  });
},440,[1,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = withDimensions;
  exports.isOrientationLandscape = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };

  exports.isOrientationLandscape = isOrientationLandscape;

  function withDimensions(WrappedComponent) {
    var _Dimensions$get = _reactNative.Dimensions.get('window'),
        width = _Dimensions$get.width,
        height = _Dimensions$get.height;

    var EnhancedComponent = function (_React$Component) {
      (0, _inherits2.default)(EnhancedComponent, _React$Component);

      function EnhancedComponent() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, EnhancedComponent);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(EnhancedComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          dimensions: {
            width: width,
            height: height
          },
          isLandscape: isOrientationLandscape({
            width: width,
            height: height
          })
        };

        _this.handleOrientationChange = function (_ref2) {
          var window = _ref2.window;
          var isLandscape = isOrientationLandscape(window);

          _this.setState({
            isLandscape: isLandscape
          });
        };

        return _this;
      }

      (0, _createClass2.default)(EnhancedComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(WrappedComponent, (0, _extends2.default)({}, this.props, this.state));
        }
      }]);
      return EnhancedComponent;
    }(React.Component);

    EnhancedComponent.displayName = "withDimensions(" + WrappedComponent.displayName + ")";
    return (0, _hoistNonReactStatics.default)(EnhancedComponent, WrappedComponent);
  }
},441,[361,1,8,19,20,27,30,33,46,2,399]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeScreens = _$$_REQUIRE(_dependencyMap[11]);

  var FAR_FAR_AWAY = 3000;

  var ResourceSavingScene = function (_React$Component) {
    (0, _inherits2.default)(ResourceSavingScene, _React$Component);

    function ResourceSavingScene() {
      (0, _classCallCheck2.default)(this, ResourceSavingScene);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ResourceSavingScene).apply(this, arguments));
    }

    (0, _createClass2.default)(ResourceSavingScene, [{
      key: "render",
      value: function render() {
        if (_reactNativeScreens.screensEnabled && (0, _reactNativeScreens.screensEnabled)()) {
          var _this$props = this.props,
              _isVisible = _this$props.isVisible,
              _rest = (0, _objectWithoutProperties2.default)(_this$props, ["isVisible"]);

          return React.createElement(_reactNativeScreens.Screen, (0, _extends2.default)({
            active: _isVisible ? 1 : 0
          }, _rest));
        }

        var _this$props2 = this.props,
            isVisible = _this$props2.isVisible,
            children = _this$props2.children,
            style = _this$props2.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props2, ["isVisible", "children", "style"]);
        return React.createElement(_reactNative.View, (0, _extends2.default)({
          style: [styles.container, style],
          collapsable: false,
          removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? !isVisible : true,
          pointerEvents: isVisible ? 'auto' : 'none'
        }, rest), React.createElement(_reactNative.View, {
          style: isVisible ? styles.attached : styles.detached
        }, children));
      }
    }]);
    return ResourceSavingScene;
  }(React.Component);

  exports.default = ResourceSavingScene;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    attached: {
      flex: 1
    },
    detached: {
      flex: 1,
      top: FAR_FAR_AWAY
    }
  });
},442,[361,1,8,6,19,20,27,30,33,46,2,414]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[12]);

  var _reactNativeTabView = _$$_REQUIRE(_dependencyMap[13]);

  var _createTabNavigator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _MaterialTopTabBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _ResourceSavingScene = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var MaterialTabView = function (_React$PureComponent) {
    (0, _inherits2.default)(MaterialTabView, _React$PureComponent);

    function MaterialTabView() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, MaterialTabView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(MaterialTabView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        index: 0,
        isSwiping: false,
        loaded: [_this.props.navigation.state.index],
        transitioningFromIndex: null
      };

      _this._renderIcon = function (_ref) {
        var focused = _ref.focused,
            route = _ref.route,
            tintColor = _ref.tintColor;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarIcon;
        }

        return null;
      };

      _this._renderTabBar = function (props) {
        var state = _this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;
        var _this$props = _this.props,
            _this$props$tabBarCom = _this$props.tabBarComponent,
            TabBarComponent = _this$props$tabBarCom === undefined ? _MaterialTopTabBar.default : _this$props$tabBarCom,
            tabBarPosition = _this$props.tabBarPosition,
            tabBarOptions = _this$props.tabBarOptions;

        if (TabBarComponent === null || !tabBarVisible) {
          return null;
        }

        return React.createElement(TabBarComponent, (0, _extends2.default)({}, tabBarOptions, props, {
          tabBarPosition: tabBarPosition,
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          getLabelText: _this.props.getLabelText,
          getAccessibilityLabel: _this.props.getAccessibilityLabel,
          getTestID: _this.props.getTestID,
          renderIcon: _this._renderIcon,
          onTabPress: _this.props.onTabPress
        }));
      };

      _this._renderPanPager = function (props) {
        return React.createElement(_reactNativeTabView.PagerPan, props);
      };

      _this._handleAnimationEnd = function () {
        var lazy = _this.props.lazy;

        if (lazy) {
          _this.setState({
            transitioningFromIndex: null,
            isSwiping: false
          });
        }
      };

      _this._handleSwipeStart = function () {
        var _this$props2 = _this.props,
            navigation = _this$props2.navigation,
            lazy = _this$props2.lazy;

        if (lazy) {
          _this.setState({
            isSwiping: true,
            loaded: (0, _toConsumableArray2.default)(new Set([].concat((0, _toConsumableArray2.default)(_this.state.loaded), [Math.max(navigation.state.index - 1, 0), Math.min(navigation.state.index + 1, navigation.state.routes.length - 1)])))
          });
        }
      };

      _this._handleIndexChange = function (index) {
        var _this$props3 = _this.props,
            animationEnabled = _this$props3.animationEnabled,
            navigation = _this$props3.navigation,
            onIndexChange = _this$props3.onIndexChange,
            lazy = _this$props3.lazy;

        if (lazy && animationEnabled) {
          _this.setState({
            transitioningFromIndex: navigation.state.index || 0
          });
        }

        onIndexChange(index);
      };

      _this._mustBeVisible = function (_ref2) {
        var index = _ref2.index,
            focused = _ref2.focused;
        var _this$props4 = _this.props,
            animationEnabled = _this$props4.animationEnabled,
            navigation = _this$props4.navigation;
        var _this$state = _this.state,
            isSwiping = _this$state.isSwiping,
            transitioningFromIndex = _this$state.transitioningFromIndex;

        if (isSwiping) {
          var isSibling = navigation.state.index === index - 1 || navigation.state.index === index + 1;

          if (isSibling) {
            return true;
          }
        }

        if (animationEnabled && transitioningFromIndex === index) {
          return true;
        }

        return focused;
      };

      _this._renderScene = function (_ref3) {
        var route = _ref3.route;
        var _this$props5 = _this.props,
            renderScene = _this$props5.renderScene,
            descriptors = _this$props5.descriptors,
            lazy = _this$props5.lazy,
            optimizationsEnabled = _this$props5.optimizationsEnabled;

        if (lazy) {
          var loaded = _this.state.loaded;
          var routes = _this.props.navigation.state.routes;
          var index = routes.findIndex(function (_ref4) {
            var key = _ref4.key;
            return key === route.key;
          });
          var navigation = descriptors[route.key].navigation;

          var mustBeVisible = _this._mustBeVisible({
            index: index,
            focused: navigation.isFocused()
          });

          if (!loaded.includes(index) && !mustBeVisible) {
            return React.createElement(_reactNative.View, null);
          }

          if (optimizationsEnabled) {
            return React.createElement(_ResourceSavingScene.default, {
              isVisible: mustBeVisible
            }, renderScene({
              route: route
            }));
          }
        }

        return renderScene({
          route: route
        });
      };

      return _this;
    }

    (0, _createClass2.default)(MaterialTabView, [{
      key: "render",
      value: function render() {
        var _this$props6 = this.props,
            navigation = _this$props6.navigation,
            animationEnabled = _this$props6.animationEnabled,
            renderScene = _this$props6.renderScene,
            onIndexChange = _this$props6.onIndexChange,
            rest = (0, _objectWithoutProperties2.default)(_this$props6, ["navigation", "animationEnabled", "renderScene", "onIndexChange"]);
        var renderPager;
        var state = this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptors = this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;

        if (typeof swipeEnabled === 'function') {
          swipeEnabled = swipeEnabled(state);
        }

        if (animationEnabled === false && swipeEnabled === false) {
          renderPager = this._renderPanPager;
        }

        return React.createElement(_reactNativeTabView.TabView, (0, _extends2.default)({}, rest, {
          navigationState: navigation.state,
          animationEnabled: animationEnabled,
          swipeEnabled: swipeEnabled,
          onAnimationEnd: this._handleAnimationEnd,
          onIndexChange: this._handleIndexChange,
          onSwipeStart: this._handleSwipeStart,
          renderPager: renderPager,
          renderTabBar: this._renderTabBar,
          renderScene: this._renderScene
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var index = nextProps.navigation.state.index;

        if (prevState.index === index) {
          return null;
        }

        return {
          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [index]),
          index: index
        };
      }
    }]);
    return MaterialTabView;
  }(React.PureComponent);

  MaterialTabView.defaultProps = {
    initialLayout: _reactNative.Platform.select({
      android: {
        width: 1,
        height: 0
      }
    }),
    animationEnabled: true,
    lazy: false,
    optimizationsEnabled: false
  };
  (0, _reactLifecyclesCompat.polyfill)(MaterialTabView);

  var _default = (0, _createTabNavigator.default)(MaterialTabView);

  exports.default = _default;
},443,[361,1,6,15,8,19,20,27,30,33,46,2,333,444,438,455,442]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "TabView", {
    enumerable: true,
    get: function get() {
      return _TabView.default;
    }
  });
  Object.defineProperty(exports, "TabBar", {
    enumerable: true,
    get: function get() {
      return _TabBar.default;
    }
  });
  Object.defineProperty(exports, "PagerDefault", {
    enumerable: true,
    get: function get() {
      return _PagerDefault.default;
    }
  });
  Object.defineProperty(exports, "PagerPan", {
    enumerable: true,
    get: function get() {
      return _PagerPan.default;
    }
  });
  Object.defineProperty(exports, "PagerScroll", {
    enumerable: true,
    get: function get() {
      return _PagerScroll.default;
    }
  });
  Object.defineProperty(exports, "PagerAndroid", {
    enumerable: true,
    get: function get() {
      return _PagerAndroid.default;
    }
  });
  Object.defineProperty(exports, "PagerExperimental", {
    enumerable: true,
    get: function get() {
      return _PagerExperimental.default;
    }
  });
  Object.defineProperty(exports, "SceneMap", {
    enumerable: true,
    get: function get() {
      return _SceneMap.default;
    }
  });

  var _TabView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _TabBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _PagerDefault = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _PagerPan = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _PagerScroll = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _PagerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _PagerExperimental = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _SceneMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
},444,[1,445,446,449,452,451,450,453,454]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _TabBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _PagerDefault = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _PropTypes = _$$_REQUIRE(_dependencyMap[14]);

  var TabView = function (_React$Component) {
    (0, _inherits2.default)(TabView, _React$Component);

    function TabView(_props) {
      var _this;

      (0, _classCallCheck2.default)(this, TabView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TabView).call(this, _props));
      _this._mounted = false;

      _this._renderScene = function (props) {
        return _this.props.renderScene(props);
      };

      _this._shouldRenderScene = function (index) {
        return !_this.state.delayRenderOfNonFocusedTabs || _this.props.navigationState.index === index;
      };

      _this._handleLayout = function (e) {
        var _e$nativeEvent$layout = e.nativeEvent.layout,
            height = _e$nativeEvent$layout.height,
            width = _e$nativeEvent$layout.width;

        if (_this.state.layout.width === width && _this.state.layout.height === height) {
          return;
        }

        _this.state.offsetX.setValue(-_this.props.navigationState.index * width);

        _this.state.layoutXY.setValue({
          x: width || 0.001,
          y: height || 0.001
        });

        _this.setState({
          layout: {
            measured: true,
            height: height,
            width: width
          }
        });
      };

      _this._buildSceneRendererProps = function () {
        return {
          panX: _this.state.panX,
          offsetX: _this.state.offsetX,
          position: _this.state.position,
          layout: _this.state.layout,
          navigationState: _this.props.navigationState,
          jumpTo: _this._jumpTo,
          useNativeDriver: _this.props.useNativeDriver === true
        };
      };

      _this._jumpTo = function (key) {
        if (!_this._mounted) {
          return;
        }

        var _this$props = _this.props,
            canJumpToTab = _this$props.canJumpToTab,
            navigationState = _this$props.navigationState;
        var index = navigationState.routes.findIndex(function (route) {
          return route.key === key;
        });

        if (!canJumpToTab(navigationState.routes[index])) {
          return;
        }

        if (index !== navigationState.index) {
          _this.props.onIndexChange(index);
        }
      };

      var _navigationState = _this.props.navigationState;
      var layout = (0, _objectSpread2.default)({}, _this.props.initialLayout, {
        measured: false
      });
      var panX = new _reactNative.Animated.Value(0);
      var offsetX = new _reactNative.Animated.Value(-_navigationState.index * layout.width);
      var layoutXY = new _reactNative.Animated.ValueXY({
        x: layout.width || 0.001,
        y: layout.height || 0.001
      });

      var position = _reactNative.Animated.multiply(_reactNative.Animated.divide(_reactNative.Animated.add(panX, offsetX), layoutXY.x), -1);

      _this.state = {
        layout: layout,
        layoutXY: layoutXY,
        panX: panX,
        offsetX: offsetX,
        position: position,
        renderUnfocusedScenes: false
      };
      return _this;
    }

    (0, _createClass2.default)(TabView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this._mounted = true;
        setTimeout(function () {
          return _this2.setState({
            renderUnfocusedScenes: true
          });
        }, 0);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props2 = this.props,
            navigationState = _this$props2.navigationState,
            onIndexChange = _this$props2.onIndexChange,
            initialLayout = _this$props2.initialLayout,
            renderScene = _this$props2.renderScene,
            renderPager = _this$props2.renderPager,
            renderTabBar = _this$props2.renderTabBar,
            tabBarPosition = _this$props2.tabBarPosition,
            rest = (0, _objectWithoutProperties2.default)(_this$props2, ["navigationState", "onIndexChange", "initialLayout", "renderScene", "renderPager", "renderTabBar", "tabBarPosition"]);

        var props = this._buildSceneRendererProps();

        return React.createElement(_reactNative.View, {
          collapsable: false,
          style: [styles.container, this.props.style]
        }, tabBarPosition === 'top' && renderTabBar(props), React.createElement(_reactNative.View, {
          onLayout: this._handleLayout,
          style: styles.pager
        }, renderPager((0, _objectSpread2.default)({}, props, rest, {
          panX: this.state.panX,
          offsetX: this.state.offsetX,
          children: navigationState.routes.map(function (route, index) {
            var isFocused = _this3.props.navigationState.index === index;
            var scene;

            if (isFocused || _this3.state.renderUnfocusedScenes) {
              scene = _this3._renderScene((0, _objectSpread2.default)({}, props, {
                route: route
              }));
            } else {
              scene = React.createElement(_reactNative.View, null);
            }

            if (React.isValidElement(scene)) {
              scene = React.cloneElement(scene, {
                key: route.key
              });
            }

            return scene;
          })
        }))), tabBarPosition === 'bottom' && renderTabBar(props));
      }
    }]);
    return TabView;
  }(React.Component);

  exports.default = TabView;
  TabView.propTypes = {
    navigationState: _PropTypes.NavigationStatePropType.isRequired,
    onIndexChange: _propTypes.default.func.isRequired,
    initialLayout: _propTypes.default.shape({
      height: _propTypes.default.number.isRequired,
      width: _propTypes.default.number.isRequired
    }),
    canJumpToTab: _propTypes.default.func.isRequired,
    renderPager: _propTypes.default.func.isRequired,
    renderScene: _propTypes.default.func.isRequired,
    renderTabBar: _propTypes.default.func,
    tabBarPosition: _propTypes.default.oneOf(['top', 'bottom'])
  };
  TabView.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    tabBarPosition: 'top',
    renderTabBar: function renderTabBar(props) {
      return React.createElement(_TabBar.default, props);
    },
    renderPager: function renderPager(props) {
      return React.createElement(_PagerDefault.default, props);
    },
    getTestID: function getTestID(_ref) {
      var route = _ref.route;
      return typeof route.testID === 'string' ? route.testID : undefined;
    },
    initialLayout: {
      height: 0,
      width: 0
    },
    useNativeDriver: false
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    pager: {
      flex: 1
    }
  });
},445,[361,1,6,43,19,20,27,30,33,46,60,2,446,449,448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _TouchableItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _PropTypes = _$$_REQUIRE(_dependencyMap[13]);

  var useNativeDriver = Boolean(_reactNative.NativeModules.NativeAnimatedModule);

  var TabBar = function (_React$Component) {
    (0, _inherits2.default)(TabBar, _React$Component);

    function TabBar(_props) {
      var _this;

      (0, _classCallCheck2.default)(this, TabBar);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TabBar).call(this, _props));
      _this._isIntial = true;
      _this._isManualScroll = false;
      _this._isMomentumScroll = false;

      _this._startTrackingPosition = function () {
        _this._offsetXListener = _this.props.offsetX.addListener(function (_ref) {
          var value = _ref.value;
          _this._lastOffsetX = value;

          _this._handlePosition();
        });
        _this._panXListener = _this.props.panX.addListener(function (_ref2) {
          var value = _ref2.value;
          _this._lastPanX = value;

          _this._handlePosition();
        });
      };

      _this._stopTrackingPosition = function () {
        _this.props.offsetX.removeListener(_this._offsetXListener);

        _this.props.panX.removeListener(_this._panXListener);
      };

      _this._handlePosition = function () {
        var _this$props = _this.props,
            navigationState = _this$props.navigationState,
            layout = _this$props.layout;

        if (layout.width === 0) {
          return;
        }

        var panX = typeof _this._lastPanX === 'number' ? _this._lastPanX : 0;
        var offsetX = typeof _this._lastOffsetX === 'number' ? _this._lastOffsetX : -navigationState.index * layout.width;
        var value = (panX + offsetX) / -(layout.width || 0.001);

        _this._adjustScroll(value);
      };

      _this._renderLabel = function (scene) {
        if (typeof _this.props.renderLabel !== 'undefined') {
          return _this.props.renderLabel(scene);
        }

        var label = _this.props.getLabelText(scene);

        if (typeof label !== 'string') {
          return null;
        }

        return React.createElement(_reactNative.Animated.Text, {
          style: [styles.tabLabel, _this.props.labelStyle]
        }, label);
      };

      _this._renderIndicator = function (props) {
        if (typeof _this.props.renderIndicator !== 'undefined') {
          return _this.props.renderIndicator(props);
        }

        var width = props.width,
            position = props.position,
            navigationState = props.navigationState;

        var translateX = _reactNative.Animated.multiply(_reactNative.Animated.multiply(position.interpolate({
          inputRange: [0, navigationState.routes.length - 1],
          outputRange: [0, navigationState.routes.length - 1],
          extrapolate: 'clamp'
        }), width), _reactNative.I18nManager.isRTL ? -1 : 1);

        return React.createElement(_reactNative.Animated.View, {
          style: [styles.indicator, {
            width: width,
            transform: [{
              translateX: translateX
            }]
          }, _this.props.indicatorStyle]
        });
      };

      _this._getTabWidth = function (props) {
        var layout = props.layout,
            navigationState = props.navigationState,
            tabStyle = props.tabStyle;

        var flattened = _reactNative.StyleSheet.flatten(tabStyle);

        if (flattened) {
          switch (typeof flattened.width) {
            case 'number':
              return flattened.width;

            case 'string':
              if (flattened.width.endsWith('%')) {
                var width = parseFloat(flattened.width);

                if (Number.isFinite(width)) {
                  return layout.width * (width / 100);
                }
              }

          }
        }

        if (props.scrollEnabled) {
          return layout.width / 5 * 2;
        }

        return layout.width / navigationState.routes.length;
      };

      _this._handleTabPress = function (_ref3) {
        var route = _ref3.route;
        _this._pendingIndex = _this.props.navigationState.routes.indexOf(route);

        if (_this.props.onTabPress) {
          _this.props.onTabPress({
            route: route
          });
        }

        _this.props.jumpTo(route.key);
      };

      _this._handleTabLongPress = function (_ref4) {
        var route = _ref4.route;

        if (_this.props.onTabLongPress) {
          _this.props.onTabLongPress({
            route: route
          });
        }
      };

      _this._normalizeScrollValue = function (props, value) {
        var layout = props.layout,
            navigationState = props.navigationState;

        var tabWidth = _this._getTabWidth(props);

        var tabBarWidth = Math.max(tabWidth * navigationState.routes.length, layout.width);
        var maxDistance = tabBarWidth - layout.width;
        return Math.max(Math.min(value, maxDistance), 0);
      };

      _this._getScrollAmount = function (props, i) {
        var layout = props.layout;

        var tabWidth = _this._getTabWidth(props);

        var centerDistance = tabWidth * (i + 0.5);
        var scrollAmount = centerDistance - layout.width / 2;
        return _this._normalizeScrollValue(props, scrollAmount);
      };

      _this._adjustScroll = function (value) {
        if (_this.props.scrollEnabled) {
          global.cancelAnimationFrame(_this._scrollResetCallback);
          _this._scrollView && _this._scrollView.scrollTo({
            x: _this._normalizeScrollValue(_this.props, _this._getScrollAmount(_this.props, value)),
            animated: !_this._isIntial
          });
          _this._isIntial = false;
        }
      };

      _this._resetScroll = function (value) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (_this.props.scrollEnabled) {
          global.cancelAnimationFrame(_this._scrollResetCallback);
          _this._scrollResetCallback = global.requestAnimationFrame(function () {
            _this._scrollView && _this._scrollView.scrollTo({
              x: _this._getScrollAmount(_this.props, value),
              animated: animated
            });
          });
        }
      };

      _this._handleBeginDrag = function () {
        _this._isManualScroll = true;
        _this._isMomentumScroll = false;
      };

      _this._handleEndDrag = function () {
        global.requestAnimationFrame(function () {
          if (_this._isMomentumScroll) {
            return;
          }

          _this._isManualScroll = false;
        });
      };

      _this._handleMomentumScrollBegin = function () {
        _this._isMomentumScroll = true;
      };

      _this._handleMomentumScrollEnd = function () {
        _this._isMomentumScroll = false;
        _this._isManualScroll = false;
      };

      var initialVisibility = 1;

      if (_this.props.scrollEnabled) {
        var tabWidth = _this._getTabWidth(_this.props);

        if (!tabWidth) {
          initialVisibility = 0;
        }
      }

      var initialOffset = _this.props.scrollEnabled && _this.props.layout.width ? {
        x: _this._getScrollAmount(_this.props, _this.props.navigationState.index),
        y: 0
      } : undefined;
      _this.state = {
        visibility: new _reactNative.Animated.Value(initialVisibility),
        scrollAmount: new _reactNative.Animated.Value(0),
        initialOffset: initialOffset
      };
      return _this;
    }

    (0, _createClass2.default)(TabBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.props.scrollEnabled && this._startTrackingPosition();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevTabWidth = this._getTabWidth(prevProps);

        var currentTabWidth = this._getTabWidth(this.props);

        var pendingIndex = typeof this._pendingIndex === 'number' ? this._pendingIndex : this.props.navigationState.index;
        this._pendingIndex = null;

        if (prevTabWidth !== currentTabWidth && currentTabWidth) {
          this.state.visibility.setValue(1);
        }

        if (prevProps.navigationState.routes.length !== this.props.navigationState.routes.length || prevProps.layout.width !== this.props.layout.width) {
          this._resetScroll(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== pendingIndex) {
          this._resetScroll(this.props.navigationState.index);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._stopTrackingPosition();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props2 = this.props,
            position = _this$props2.position,
            navigationState = _this$props2.navigationState,
            scrollEnabled = _this$props2.scrollEnabled,
            bounces = _this$props2.bounces;
        var routes = navigationState.routes;

        var tabWidth = this._getTabWidth(this.props);

        var tabBarWidth = tabWidth * routes.length;
        var inputRange = [-1].concat((0, _toConsumableArray2.default)(routes.map(function (x, i) {
          return i;
        })));

        var translateX = _reactNative.Animated.multiply(this.state.scrollAmount, -1);

        return React.createElement(_reactNative.Animated.View, {
          style: [styles.tabBar, this.props.style]
        }, React.createElement(_reactNative.Animated.View, {
          pointerEvents: "none",
          style: [styles.indicatorContainer, scrollEnabled ? {
            width: tabBarWidth,
            transform: [{
              translateX: translateX
            }]
          } : null]
        }, this._renderIndicator((0, _objectSpread2.default)({}, this.props, {
          width: tabWidth
        }))), React.createElement(_reactNative.View, {
          style: styles.scroll
        }, React.createElement(_reactNative.Animated.ScrollView, {
          horizontal: true,
          keyboardShouldPersistTaps: "handled",
          scrollEnabled: scrollEnabled,
          bounces: bounces,
          alwaysBounceHorizontal: false,
          scrollsToTop: false,
          showsHorizontalScrollIndicator: false,
          automaticallyAdjustContentInsets: false,
          overScrollMode: "never",
          contentContainerStyle: [styles.tabContent, scrollEnabled ? null : styles.container],
          scrollEventThrottle: 1,
          onScroll: _reactNative.Animated.event([{
            nativeEvent: {
              contentOffset: {
                x: this.state.scrollAmount
              }
            }
          }], {
            useNativeDriver: useNativeDriver
          }),
          onScrollBeginDrag: this._handleBeginDrag,
          onScrollEndDrag: this._handleEndDrag,
          onMomentumScrollBegin: this._handleMomentumScrollBegin,
          onMomentumScrollEnd: this._handleMomentumScrollEnd,
          contentOffset: this.state.initialOffset,
          ref: function ref(el) {
            return _this2._scrollView = el && el.getNode();
          }
        }, routes.map(function (route, i) {
          var outputRange = inputRange.map(function (inputIndex) {
            return inputIndex === i ? 1 : 0.7;
          });

          var opacity = _reactNative.Animated.multiply(_this2.state.visibility, position.interpolate({
            inputRange: inputRange,
            outputRange: outputRange
          }));

          var label = _this2._renderLabel({
            route: route
          });

          var icon = _this2.props.renderIcon ? _this2.props.renderIcon({
            route: route
          }) : null;
          var badge = _this2.props.renderBadge ? _this2.props.renderBadge({
            route: route
          }) : null;
          var tabStyle = {};
          tabStyle.opacity = opacity;

          if (icon) {
            if (label) {
              tabStyle.paddingTop = 8;
            } else {
              tabStyle.padding = 12;
            }
          }

          var passedTabStyle = _reactNative.StyleSheet.flatten(_this2.props.tabStyle);

          var isWidthSet = passedTabStyle && typeof passedTabStyle.width !== 'undefined' || scrollEnabled === true;
          var tabContainerStyle = {};

          if (isWidthSet) {
            tabStyle.width = tabWidth;
          }

          if (passedTabStyle && typeof passedTabStyle.flex === 'number') {
            tabContainerStyle.flex = passedTabStyle.flex;
          } else if (!isWidthSet) {
            tabContainerStyle.flex = 1;
          }

          var accessibilityLabel = _this2.props.getAccessibilityLabel({
            route: route
          });

          accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : _this2.props.getLabelText({
            route: route
          });
          var isFocused = i === navigationState.index;
          return React.createElement(_TouchableItem.default, {
            borderless: true,
            key: route.key,
            testID: _this2.props.getTestID({
              route: route
            }),
            accessible: _this2.props.getAccessible({
              route: route
            }),
            accessibilityLabel: accessibilityLabel,
            accessibilityTraits: isFocused ? ['button', 'selected'] : 'button',
            accessibilityComponentType: "button",
            pressColor: _this2.props.pressColor,
            pressOpacity: _this2.props.pressOpacity,
            delayPressIn: 0,
            onPress: function onPress() {
              return _this2._handleTabPress({
                route: route
              });
            },
            onLongPress: function onLongPress() {
              return _this2._handleTabLongPress({
                route: route
              });
            },
            style: tabContainerStyle
          }, React.createElement(_reactNative.View, {
            pointerEvents: "none",
            style: styles.container
          }, React.createElement(_reactNative.Animated.View, {
            style: [styles.tabItem, tabStyle, passedTabStyle, styles.container]
          }, icon, label), badge ? React.createElement(_reactNative.Animated.View, {
            style: [styles.badge, {
              opacity: _this2.state.visibility
            }]
          }, badge) : null));
        }))));
      }
    }]);
    return TabBar;
  }(React.Component);

  exports.default = TabBar;
  TabBar.propTypes = (0, _objectSpread2.default)({}, _PropTypes.SceneRendererPropType, {
    scrollEnabled: _propTypes.default.bool,
    bounces: _propTypes.default.bool,
    pressColor: _TouchableItem.default.propTypes.pressColor,
    pressOpacity: _TouchableItem.default.propTypes.pressOpacity,
    getLabelText: _propTypes.default.func,
    getAccessible: _propTypes.default.func,
    getAccessibilityLabel: _propTypes.default.func,
    getTestID: _propTypes.default.func,
    renderIcon: _propTypes.default.func,
    renderLabel: _propTypes.default.func,
    renderIndicator: _propTypes.default.func,
    onTabPress: _propTypes.default.func,
    onTabLongPress: _propTypes.default.func,
    labelStyle: _propTypes.default.any,
    style: _propTypes.default.any
  });
  TabBar.defaultProps = {
    getLabelText: function getLabelText(_ref5) {
      var route = _ref5.route;
      return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;
    },
    getAccessible: function getAccessible(_ref6) {
      var route = _ref6.route;
      return typeof route.accessible !== 'undefined' ? route.accessible : true;
    },
    getAccessibilityLabel: function getAccessibilityLabel(_ref7) {
      var route = _ref7.route;
      return route.accessibilityLabel;
    },
    getTestID: function getTestID(_ref8) {
      var route = _ref8.route;
      return route.testID;
    }
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    scroll: {
      overflow: _reactNative.Platform.OS === 'web' ? 'auto' : 'scroll'
    },
    tabBar: {
      backgroundColor: '#2196f3',
      elevation: 4,
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      zIndex: _reactNative.Platform.OS === 'android' ? 0 : 1
    },
    tabContent: {
      flexDirection: 'row',
      flexWrap: 'nowrap'
    },
    tabLabel: {
      backgroundColor: 'transparent',
      color: 'white',
      margin: 8
    },
    tabItem: {
      flex: 1,
      padding: 8,
      alignItems: 'center',
      justifyContent: 'center'
    },
    badge: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    indicatorContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    indicator: {
      backgroundColor: '#ffeb3b',
      position: 'absolute',
      left: 0,
      bottom: 0,
      right: 0,
      height: 2
    }
  });
},446,[361,1,43,15,19,20,27,30,33,46,60,2,447,448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var LOLLIPOP = 21;

  var TouchableItem = function (_React$Component) {
    (0, _inherits2.default)(TouchableItem, _React$Component);

    function TouchableItem() {
      (0, _classCallCheck2.default)(this, TouchableItem);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TouchableItem).apply(this, arguments));
    }

    (0, _createClass2.default)(TouchableItem, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            pressOpacity = _this$props.pressOpacity,
            pressColor = _this$props.pressColor,
            borderless = _this$props.borderless,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "pressOpacity", "pressColor", "borderless"]);

        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= LOLLIPOP) {
          return React.createElement(_reactNative.TouchableNativeFeedback, (0, _extends2.default)({}, rest, {
            background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless)
          }), React.createElement(_reactNative.View, {
            style: style
          }, React.Children.only(this.props.children)));
        } else {
          return React.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({}, rest, {
            style: style,
            activeOpacity: pressOpacity
          }), this.props.children);
        }
      }
    }]);
    return TouchableItem;
  }(React.Component);

  exports.default = TouchableItem;
  TouchableItem.propTypes = {
    onPress: _propTypes.default.func.isRequired,
    delayPressIn: _propTypes.default.number,
    borderless: _propTypes.default.bool,
    pressColor: _propTypes.default.string,
    pressOpacity: _propTypes.default.number,
    children: _propTypes.default.node.isRequired
  };
  TouchableItem.defaultProps = {
    pressColor: 'rgba(255, 255, 255, .4)'
  };
},447,[361,1,8,6,19,20,27,30,33,46,60,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PagerRendererPropType = exports.SceneRendererPropType = exports.NavigationStatePropType = exports.NavigationRoutePropType = undefined;

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var NavigationRoutePropType = _propTypes.default.shape({
    title: _propTypes.default.string,
    key: _propTypes.default.string.isRequired
  });

  exports.NavigationRoutePropType = NavigationRoutePropType;

  var NavigationStatePropType = _propTypes.default.shape({
    routes: _propTypes.default.arrayOf(NavigationRoutePropType).isRequired,
    index: _propTypes.default.number.isRequired
  });

  exports.NavigationStatePropType = NavigationStatePropType;
  var SceneRendererPropType = {
    panX: _propTypes.default.object.isRequired,
    offsetX: _propTypes.default.object.isRequired,
    layout: _propTypes.default.shape({
      measured: _propTypes.default.bool.isRequired,
      height: _propTypes.default.number.isRequired,
      width: _propTypes.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    position: _propTypes.default.object.isRequired,
    jumpTo: _propTypes.default.func.isRequired,
    useNativeDriver: _propTypes.default.bool
  };
  exports.SceneRendererPropType = SceneRendererPropType;
  var PagerRendererPropType = {
    layout: _propTypes.default.shape({
      measured: _propTypes.default.bool.isRequired,
      height: _propTypes.default.number.isRequired,
      width: _propTypes.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    panX: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
    offsetX: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
    canJumpToTab: _propTypes.default.func.isRequired,
    jumpTo: _propTypes.default.func.isRequired,
    animationEnabled: _propTypes.default.bool,
    swipeEnabled: _propTypes.default.bool,
    useNativeDriver: _propTypes.default.bool,
    onSwipeStart: _propTypes.default.func,
    onSwipeEnd: _propTypes.default.func,
    onAnimationEnd: _propTypes.default.func,
    children: _propTypes.default.node.isRequired
  };
  exports.PagerRendererPropType = PagerRendererPropType;
},448,[1,60,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var Pager;

  switch (_reactNative.Platform.OS) {
    case 'android':
      Pager = _$$_REQUIRE(_dependencyMap[1]).default;
      break;

    case 'ios':
      Pager = _$$_REQUIRE(_dependencyMap[2]).default;
      break;

    default:
      Pager = _$$_REQUIRE(_dependencyMap[3]).default;
      break;
  }

  var _default = Pager;
  exports.default = _default;
},449,[2,450,451,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _PropTypes = _$$_REQUIRE(_dependencyMap[9]);

  var PagerAndroid = function (_React$Component) {
    (0, _inherits2.default)(PagerAndroid, _React$Component);

    function PagerAndroid(props) {
      var _this;

      (0, _classCallCheck2.default)(this, PagerAndroid);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PagerAndroid).call(this, props));
      _this._isIdle = true;
      _this._currentIndex = 0;

      _this._getPageIndex = function (index) {
        return _reactNative.I18nManager.isRTL ? _this.props.navigationState.routes.length - (index + 1) : index;
      };

      _this._setPage = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var pager = _this._viewPager;

        if (pager) {
          var page = _this._getPageIndex(index);

          if (_this.props.animationEnabled === false || animated === false) {
            pager.setPageWithoutAnimation(page);
          } else {
            pager.setPage(page);
          }
        }
      };

      _this._handlePageChange = function (index, animated) {
        if (_this._isIdle && _this._currentIndex !== index) {
          _this._setPage(index, animated);

          _this._currentIndex = index;
        }
      };

      _this._handlePageScroll = function (e) {
        _this.props.offsetX.setValue(_this._getPageIndex(e.nativeEvent.position) * _this.props.layout.width * -1);

        _this.props.panX.setValue(e.nativeEvent.offset * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));
      };

      _this._handlePageScrollStateChanged = function (e) {
        _this._isIdle = e === 'idle';
        var nextIndex = _this._currentIndex;
        var nextRoute = _this.props.navigationState.routes[nextIndex];

        if (_this.props.canJumpToTab({
          route: nextRoute
        })) {
          _this.props.jumpTo(nextRoute.key);
        } else {
          _this._setPage(_this.props.navigationState.index);

          _this._currentIndex = _this.props.navigationState.index;
        }

        switch (e) {
          case 'dragging':
            _this.props.onSwipeStart && _this.props.onSwipeStart();
            break;

          case 'settling':
            _this.props.onSwipeEnd && _this.props.onSwipeEnd();
            break;

          case 'idle':
            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            break;
        }
      };

      _this._handlePageSelected = function (e) {
        var index = _this._getPageIndex(e.nativeEvent.position);

        _this._currentIndex = index;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    (0, _createClass2.default)(PagerAndroid, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.routes.length !== this.props.navigationState.routes.length || prevProps.layout.width !== this.props.layout.width) {
          this._handlePageChange(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._handlePageChange(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            navigationState = _this$props.navigationState,
            swipeEnabled = _this$props.swipeEnabled,
            keyboardDismissMode = _this$props.keyboardDismissMode;
        var children = _reactNative.I18nManager.isRTL ? React.Children.toArray(this.props.children).reverse() : React.Children.toArray(this.props.children);
        var content = children.map(function (child, i) {
          var route = navigationState.routes[i];
          var focused = i === navigationState.index;
          return React.createElement(_reactNative.View, {
            key: route.key,
            testID: _this2.props.getTestID({
              route: route
            }),
            accessibilityElementsHidden: !focused,
            importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
            style: styles.page
          }, child);
        });

        var initialPage = this._getPageIndex(navigationState.index);

        return React.createElement(_reactNative.ViewPagerAndroid, {
          key: navigationState.routes.length,
          keyboardDismissMode: keyboardDismissMode,
          initialPage: initialPage,
          scrollEnabled: swipeEnabled !== false,
          onPageScroll: this._handlePageScroll,
          onPageScrollStateChanged: this._handlePageScrollStateChanged,
          onPageSelected: this._handlePageSelected,
          style: styles.container,
          ref: function ref(el) {
            return _this2._viewPager = el;
          }
        }, content);
      }
    }]);
    return PagerAndroid;
  }(React.Component);

  exports.default = PagerAndroid;
  PagerAndroid.propTypes = _PropTypes.PagerRendererPropType;
  PagerAndroid.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    keyboardDismissMode: 'on-drag'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexGrow: 1
    },
    page: {
      overflow: 'hidden'
    }
  });
},450,[361,1,19,20,27,30,33,46,2,448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _PropTypes = _$$_REQUIRE(_dependencyMap[9]);

  var PagerScroll = function (_React$Component) {
    (0, _inherits2.default)(PagerScroll, _React$Component);

    function PagerScroll(props) {
      var _this;

      (0, _classCallCheck2.default)(this, PagerScroll);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PagerScroll).call(this, props));
      _this._isIdle = true;
      _this._isInitial = true;

      _this._setInitialPage = function () {
        if (_this.props.layout.width) {
          _this._isInitial = true;

          _this._scrollTo(_this.props.navigationState.index * _this.props.layout.width, false);
        }

        setTimeout(function () {
          _this._isInitial = false;
        }, 50);
      };

      _this._scrollTo = function (x) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (_this._isIdle && _this._scrollView) {
          _this._scrollView.scrollTo({
            x: x,
            animated: animated && _this.props.animationEnabled !== false
          });
        }
      };

      _this._handleMomentumScrollEnd = function (e) {
        var nextIndex = Math.round(e.nativeEvent.contentOffset.x / _this.props.layout.width);
        var nextRoute = _this.props.navigationState.routes[nextIndex];

        if (_this.props.canJumpToTab({
          route: nextRoute
        })) {
          _this.props.jumpTo(nextRoute.key);

          _this.props.onAnimationEnd && _this.props.onAnimationEnd();
        } else {
          global.requestAnimationFrame(function () {
            _this._scrollTo(_this.props.navigationState.index * _this.props.layout.width);
          });
        }
      };

      _this._handleScroll = function (e) {
        if (_this._isInitial || e.nativeEvent.contentSize.width === 0) {
          return;
        }

        var _this$props = _this.props,
            navigationState = _this$props.navigationState,
            layout = _this$props.layout;
        var offset = navigationState.index * layout.width;

        _this.props.offsetX.setValue(-offset);

        _this.props.panX.setValue(offset - e.nativeEvent.contentOffset.x);

        global.cancelAnimationFrame(_this._idleCallback);
        _this._isIdle = false;
        _this._idleCallback = global.requestAnimationFrame(function () {
          _this._isIdle = true;
        });
      };

      var _this$props2 = _this.props,
          _navigationState = _this$props2.navigationState,
          _layout = _this$props2.layout;
      _this.state = {
        initialOffset: {
          x: _navigationState.index * _layout.width,
          y: 0
        }
      };
      return _this;
    }

    (0, _createClass2.default)(PagerScroll, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._setInitialPage();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var amount = this.props.navigationState.index * this.props.layout.width;

        if (prevProps.navigationState.routes.length !== this.props.navigationState.routes.length || prevProps.layout.width !== this.props.layout.width) {
          this._scrollTo(amount, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._scrollTo(amount);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props3 = this.props,
            children = _this$props3.children,
            layout = _this$props3.layout,
            navigationState = _this$props3.navigationState,
            onSwipeStart = _this$props3.onSwipeStart,
            onSwipeEnd = _this$props3.onSwipeEnd;
        return React.createElement(_reactNative.ScrollView, {
          horizontal: true,
          pagingEnabled: true,
          directionalLockEnabled: true,
          keyboardDismissMode: "on-drag",
          keyboardShouldPersistTaps: "always",
          overScrollMode: "never",
          scrollEnabled: this.props.swipeEnabled,
          automaticallyAdjustContentInsets: false,
          bounces: false,
          alwaysBounceHorizontal: false,
          scrollsToTop: false,
          showsHorizontalScrollIndicator: false,
          scrollEventThrottle: 1,
          onScroll: this._handleScroll,
          onScrollBeginDrag: onSwipeStart,
          onScrollEndDrag: onSwipeEnd,
          onMomentumScrollEnd: this._handleMomentumScrollEnd,
          contentOffset: this.state.initialOffset,
          style: styles.container,
          contentContainerStyle: layout.width ? null : styles.container,
          ref: function ref(el) {
            return _this2._scrollView = el;
          }
        }, React.Children.map(children, function (child, i) {
          var route = navigationState.routes[i];
          var focused = i === navigationState.index;
          return React.createElement(_reactNative.View, {
            key: route.key,
            testID: _this2.props.getTestID({
              route: route
            }),
            accessibilityElementsHidden: !focused,
            importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
            style: layout.width ? {
              width: layout.width,
              overflow: 'hidden'
            } : focused ? styles.page : null
          }, focused || layout.width ? child : null);
        }));
      }
    }]);
    return PagerScroll;
  }(React.Component);

  exports.default = PagerScroll;
  PagerScroll.propTypes = _PropTypes.PagerRendererPropType;
  PagerScroll.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},451,[361,1,19,20,27,30,33,46,2,448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _PropTypes = _$$_REQUIRE(_dependencyMap[13]);

  var DEAD_ZONE = 12;
  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 300,
    friction: 35
  };

  var PagerPan = function (_React$Component) {
    (0, _inherits2.default)(PagerPan, _React$Component);

    function PagerPan() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, PagerPan);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PagerPan)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._currentIndex = _this.props.navigationState.index;

      _this._isMovingHorizontally = function (evt, gestureState) {
        return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 2);
      };

      _this._canMoveScreen = function (evt, gestureState) {
        if (_this.props.swipeEnabled === false) {
          return false;
        }

        var routes = _this.props.navigationState.routes;
        return _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && _this._currentIndex > 0 || gestureState.dx <= -12 && _this._currentIndex < routes.length - 1);
      };

      _this._startGesture = function () {
        _this.props.onSwipeStart && _this.props.onSwipeStart();

        _this.props.panX.stopAnimation();
      };

      _this._respondToGesture = function (evt, gestureState) {
        var _this$props$navigatio = _this.props.navigationState,
            routes = _this$props$navigatio.routes,
            index = _this$props$navigatio.index;

        if (gestureState.dx > 0 && index <= 0 || gestureState.dx < 0 && index >= routes.length - 1) {
          return;
        }

        _this.props.panX.setValue(gestureState.dx);
      };

      _this._finishGesture = function (evt, gestureState) {
        var _this$props = _this.props,
            navigationState = _this$props.navigationState,
            layout = _this$props.layout,
            _this$props$swipeDist = _this$props.swipeDistanceThreshold,
            swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist;
        var _this$props$swipeVelo = _this.props.swipeVelocityThreshold,
            swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 0.15 : _this$props$swipeVelo;
        _this.props.onSwipeEnd && _this.props.onSwipeEnd();

        if (_reactNative.Platform.OS === 'android') {
          swipeVelocityThreshold /= 1000000;
        }

        var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : _this._currentIndex;
        var nextIndex = currentIndex;

        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy) && (Math.abs(gestureState.dx) > swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold)) {
          nextIndex = Math.round(Math.min(Math.max(0, currentIndex - gestureState.dx / Math.abs(gestureState.dx)), navigationState.routes.length - 1));
          _this._currentIndex = nextIndex;
        }

        if (!isFinite(nextIndex) || !_this.props.canJumpToTab({
          route: _this.props.navigationState.routes[nextIndex]
        })) {
          nextIndex = currentIndex;
        }

        _this._transitionTo(nextIndex);
      };

      _this._transitionTo = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var offset = -index * _this.props.layout.width;
        var route = _this.props.navigationState.routes[index];

        if (_this.props.animationEnabled === false || animated === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          _this.props.jumpTo(route.key);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = (0, _objectWithoutProperties2.default)(DefaultTransitionSpec, ["timing"]);

        _reactNative.Animated.parallel([timing(_this.props.panX, (0, _objectSpread2.default)({}, transitionConfig, {
          toValue: 0
        })), timing(_this.props.offsetX, (0, _objectSpread2.default)({}, transitionConfig, {
          toValue: offset
        }))]).start(function (_ref) {
          var finished = _ref.finished;

          if (finished) {
            _this.props.jumpTo(route.key);

            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      };

      _this._panResponder = _reactNative.PanResponder.create({
        onMoveShouldSetPanResponder: _this._canMoveScreen,
        onMoveShouldSetPanResponderCapture: _this._canMoveScreen,
        onPanResponderGrant: _this._startGesture,
        onPanResponderMove: _this._respondToGesture,
        onPanResponderTerminate: _this._finishGesture,
        onPanResponderRelease: _this._finishGesture,
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
          return true;
        }
      });
      return _this;
    }

    (0, _createClass2.default)(PagerPan, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this._currentIndex = this.props.navigationState.index;

        if (prevProps.navigationState.routes.length !== this.props.navigationState.routes.length || prevProps.layout.width !== this.props.layout.width) {
          this._transitionTo(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props2 = this.props,
            panX = _this$props2.panX,
            offsetX = _this$props2.offsetX,
            navigationState = _this$props2.navigationState,
            layout = _this$props2.layout,
            children = _this$props2.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.multiply(_reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        }), _reactNative.I18nManager.isRTL ? -1 : 1);

        return React.createElement(_reactNative.Animated.View, (0, _extends2.default)({
          style: [styles.sheet, width ? {
            width: routes.length * width,
            transform: [{
              translateX: translateX
            }]
          } : null]
        }, this._panResponder.panHandlers), React.Children.map(children, function (child, i) {
          var route = navigationState.routes[i];
          var focused = i === navigationState.index;
          return React.createElement(_reactNative.View, {
            key: route.key,
            testID: _this2.props.getTestID({
              route: route
            }),
            style: width ? {
              width: width
            } : focused ? _reactNative.StyleSheet.absoluteFill : null
          }, focused || width ? child : null);
        }));
      }
    }]);
    return PagerPan;
  }(React.Component);

  exports.default = PagerPan;
  PagerPan.propTypes = (0, _objectSpread2.default)({}, _PropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes.default.number,
    swipeVelocityThreshold: _propTypes.default.number
  });
  PagerPan.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    initialLayout: {
      height: 0,
      width: 0
    }
  };

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},452,[361,1,8,43,6,19,20,27,30,33,46,60,2,448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _PropTypes = _$$_REQUIRE(_dependencyMap[12]);

  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 68,
    friction: 12
  };

  var PagerExperimental = function (_React$Component) {
    (0, _inherits2.default)(PagerExperimental, _React$Component);

    function PagerExperimental() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, PagerExperimental);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PagerExperimental)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._handleHandlerStateChange = function (event) {
        var GestureHandler = _this.props.GestureHandler;

        if (event.nativeEvent.state === GestureHandler.State.BEGAN) {
          _this.props.onSwipeStart && _this.props.onSwipeStart();
        } else if (event.nativeEvent.state === GestureHandler.State.END) {
          _this.props.onSwipeEnd && _this.props.onSwipeEnd();
          var _this$props = _this.props,
              navigationState = _this$props.navigationState,
              layout = _this$props.layout,
              _this$props$swipeDist = _this$props.swipeDistanceThreshold,
              swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist,
              _this$props$swipeVelo = _this$props.swipeVelocityThreshold,
              swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 150 : _this$props$swipeVelo;
          var _event$nativeEvent = event.nativeEvent,
              translationX = _event$nativeEvent.translationX,
              translationY = _event$nativeEvent.translationY,
              velocityX = _event$nativeEvent.velocityX,
              velocityY = _event$nativeEvent.velocityY;
          var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;
          var nextIndex = currentIndex;

          if (Math.abs(translationX) > Math.abs(translationY) && Math.abs(velocityX) > Math.abs(velocityY) && (Math.abs(translationX) > swipeDistanceThreshold || Math.abs(velocityX) > swipeVelocityThreshold)) {
            nextIndex = Math.round(Math.min(Math.max(0, currentIndex - translationX / Math.abs(translationX)), navigationState.routes.length - 1));
          }

          if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
            nextIndex = currentIndex;
          }

          _this._transitionTo(nextIndex, velocityX);
        }
      };

      _this._transitionTo = function (index, velocity) {
        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false || animated === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = (0, _objectWithoutProperties2.default)(DefaultTransitionSpec, ["timing"]);
        var useNativeDriver = _this.props.useNativeDriver;

        _reactNative.Animated.parallel([timing(_this.props.panX, (0, _objectSpread2.default)({}, transitionConfig, {
          toValue: 0,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        })), timing(_this.props.offsetX, (0, _objectSpread2.default)({}, transitionConfig, {
          toValue: offset,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        }))]).start(function (_ref) {
          var finished = _ref.finished;

          if (finished) {
            var route = _this.props.navigationState.routes[index];

            _this.props.jumpTo(route.key);

            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      };

      return _this;
    }

    (0, _createClass2.default)(PagerExperimental, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.routes.length !== this.props.navigationState.routes.length || prevProps.layout.width !== this.props.layout.width) {
          this._transitionTo(this.props.navigationState.index, undefined, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index && this.props.navigationState.index !== this._pendingIndex) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props2 = this.props,
            GestureHandler = _this$props2.GestureHandler,
            panX = _this$props2.panX,
            offsetX = _this$props2.offsetX,
            layout = _this$props2.layout,
            navigationState = _this$props2.navigationState,
            swipeEnabled = _this$props2.swipeEnabled,
            children = _this$props2.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);
        var translateX = routes.length > 1 ? _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        }) : 0;
        return React.createElement(GestureHandler.PanGestureHandler, {
          enabled: layout.width !== 0 && swipeEnabled !== false,
          minDeltaX: 10,
          onGestureEvent: _reactNative.Animated.event([{
            nativeEvent: {
              translationX: this.props.panX
            }
          }], {
            useNativeDriver: this.props.useNativeDriver
          }),
          onHandlerStateChange: this._handleHandlerStateChange
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.sheet, width ? {
            width: routes.length * width,
            transform: [{
              translateX: translateX
            }]
          } : null]
        }, React.Children.map(children, function (child, i) {
          var route = navigationState.routes[i];
          var focused = i === navigationState.index;
          return React.createElement(_reactNative.View, {
            key: route.key,
            testID: _this2.props.getTestID({
              route: route
            }),
            accessibilityElementsHidden: !focused,
            importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
            style: width ? {
              width: width
            } : focused ? _reactNative.StyleSheet.absoluteFill : null
          }, focused || width ? child : null);
        })));
      }
    }]);
    return PagerExperimental;
  }(React.Component);

  exports.default = PagerExperimental;
  PagerExperimental.propTypes = (0, _objectSpread2.default)({}, _PropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes.default.number,
    swipeVelocityThreshold: _propTypes.default.number,
    GestureHandler: _propTypes.default.object
  });
  PagerExperimental.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  };

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},453,[361,1,43,6,19,20,27,30,33,46,60,2,448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = SceneMap;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var SceneComponent = function (_React$PureComponent) {
    (0, _inherits2.default)(SceneComponent, _React$PureComponent);

    function SceneComponent() {
      (0, _classCallCheck2.default)(this, SceneComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SceneComponent).apply(this, arguments));
    }

    (0, _createClass2.default)(SceneComponent, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            component = _this$props.component,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["component"]);
        return React.createElement(component, rest);
      }
    }]);
    return SceneComponent;
  }(React.PureComponent);

  function SceneMap(scenes) {
    return function (_ref) {
      var route = _ref.route,
          jumpTo = _ref.jumpTo;
      return React.createElement(SceneComponent, {
        key: route.key,
        component: scenes[route.key],
        route: route,
        jumpTo: jumpTo
      });
    };
  }
},454,[361,1,6,19,20,27,30,33,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _reactNativeTabView = _$$_REQUIRE(_dependencyMap[12]);

  var _CrossFadeIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var TabBarTop = function (_React$PureComponent) {
    (0, _inherits2.default)(TabBarTop, _React$PureComponent);

    function TabBarTop() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TabBarTop);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabBarTop)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._renderLabel = function (_ref) {
        var route = _ref.route;
        var _this$props = _this.props,
            position = _this$props.position,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            showLabel = _this$props.showLabel,
            upperCaseLabel = _this$props.upperCaseLabel,
            labelStyle = _this$props.labelStyle,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var routes = navigation.state.routes;
        var index = routes.indexOf(route);
        var focused = index === navigation.state.index;
        var inputRange = [-1].concat((0, _toConsumableArray2.default)(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabelText({
          route: route
        });

        if (typeof label === 'string') {
          return React.createElement(_reactNative.Animated.Text, {
            style: [styles.label, {
              color: color
            }, labelStyle],
            allowFontScaling: allowFontScaling
          }, upperCaseLabel ? label.toUpperCase() : label);
        }

        if (typeof label === 'function') {
          return label({
            focused: focused,
            tintColor: tintColor
          });
        }

        return label;
      };

      _this._renderIcon = function (_ref2) {
        var route = _ref2.route;
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            iconStyle = _this$props2.iconStyle;

        if (showIcon === false) {
          return null;
        }

        var index = navigation.state.routes.indexOf(route);
        var inputRange = [-1].concat((0, _toConsumableArray2.default)(navigation.state.routes.map(function (x, i) {
          return i;
        })));
        var activeOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 1 : 0;
          })
        });
        var inactiveOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 0 : 1;
          })
        });
        return React.createElement(_CrossFadeIcon.default, {
          route: route,
          navigation: navigation,
          activeOpacity: activeOpacity,
          inactiveOpacity: inactiveOpacity,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          style: [styles.icon, iconStyle]
        });
      };

      return _this;
    }

    (0, _createClass2.default)(TabBarTop, [{
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            navigation = _this$props3.navigation,
            renderIcon = _this$props3.renderIcon,
            getLabelText = _this$props3.getLabelText,
            rest = (0, _objectWithoutProperties2.default)(_this$props3, ["navigation", "renderIcon", "getLabelText"]);
        return React.createElement(_reactNativeTabView.TabBar, (0, _extends2.default)({}, rest, {
          navigationState: navigation.state,
          renderIcon: this._renderIcon,
          renderLabel: this._renderLabel
        }));
      }
    }]);
    return TabBarTop;
  }(React.PureComponent);

  exports.default = TabBarTop;
  TabBarTop.defaultProps = {
    activeTintColor: '#fff',
    inactiveTintColor: '#fff',
    showIcon: false,
    showLabel: true,
    upperCaseLabel: true,
    allowFontScaling: true
  };

  var styles = _reactNative.StyleSheet.create({
    icon: {
      height: 24,
      width: 24
    },
    label: {
      textAlign: 'center',
      fontSize: 13,
      margin: 8,
      backgroundColor: 'transparent'
    }
  });
},455,[361,1,8,6,15,19,20,27,30,33,46,2,444,440]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get createDrawerNavigator() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    },

    get DrawerRouter() {
      return _$$_REQUIRE(_dependencyMap[1]).default;
    },

    get DrawerActions() {
      return _$$_REQUIRE(_dependencyMap[2]).default;
    },

    get DrawerNavigatorItems() {
      return _$$_REQUIRE(_dependencyMap[3]).default;
    },

    get DrawerSidebar() {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    },

    get DrawerView() {
      return _$$_REQUIRE(_dependencyMap[5]).default;
    },

    get DrawerGestureContext() {
      return _$$_REQUIRE(_dependencyMap[6]).default;
    }

  };
},456,[457,458,459,466,463,460,464]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _core = _$$_REQUIRE(_dependencyMap[4]);

  var _native = _$$_REQUIRE(_dependencyMap[5]);

  var _DrawerRouter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _DrawerView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _DrawerNavigatorItems = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var defaultContentComponent = function defaultContentComponent(props) {
    return _react.default.createElement(_reactNative.ScrollView, {
      alwaysBounceVertical: false
    }, _react.default.createElement(_native.SafeAreaView, {
      forceInset: {
        top: 'always',
        horizontal: 'never'
      }
    }, _react.default.createElement(_DrawerNavigatorItems.default, props)));
  };

  var DefaultDrawerConfig = {
    drawerWidth: function drawerWidth() {
      var _Dimensions$get = _reactNative.Dimensions.get('window'),
          height = _Dimensions$get.height,
          width = _Dimensions$get.width;

      var smallerAxisSize = Math.min(height, width);
      var isLandscape = width > height;
      var isTablet = smallerAxisSize >= 600;
      var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
      var maxWidth = isTablet ? 320 : 280;
      return Math.min(smallerAxisSize - appBarHeight, maxWidth);
    },
    contentComponent: defaultContentComponent,
    drawerPosition: 'left',
    keyboardDismissMode: 'on-drag',
    drawerBackgroundColor: 'white',
    useNativeAnimations: true,
    drawerType: 'front',
    hideStatusBar: false,
    statusBarAnimation: 'slide',
    overlayColor: 'black'
  };

  var DrawerNavigator = function DrawerNavigator(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mergedConfig = (0, _objectSpread2.default)({}, DefaultDrawerConfig, config);
    var drawerRouter = (0, _DrawerRouter.default)(routeConfigs, mergedConfig);
    var navigator = (0, _core.createNavigator)(_DrawerView.default, drawerRouter, mergedConfig);
    return navigator;
  };

  var _default = DrawerNavigator;
  exports.default = _default;
},457,[1,43,46,2,334,331,458,460,466]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _core = _$$_REQUIRE(_dependencyMap[2]);

  var _DrawerActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function withDefaultValue(obj, key, defaultValue) {
    if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {
      return obj;
    }

    obj[key] = defaultValue;
    return obj;
  }

  var getActiveRouteKey = function getActiveRouteKey(route) {
    if (route.routes && route.routes[route.index]) {
      return getActiveRouteKey(route.routes[route.index]);
    }

    return route.key;
  };

  var _default = function _default(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    config = (0, _objectSpread2.default)({}, config);
    config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);
    config = withDefaultValue(config, 'backBehavior', 'initialRoute');
    var switchRouter = (0, _core.SwitchRouter)(routeConfigs, config);

    var __id = -1;

    var genId = function genId() {
      __id++;
      return __id;
    };

    return (0, _objectSpread2.default)({}, switchRouter, {
      getActionCreators: function getActionCreators(route, navStateKey) {
        return (0, _objectSpread2.default)({
          openDrawer: function openDrawer() {
            return _DrawerActions.default.openDrawer({
              key: navStateKey
            });
          },
          closeDrawer: function closeDrawer() {
            return _DrawerActions.default.closeDrawer({
              key: navStateKey
            });
          },
          toggleDrawer: function toggleDrawer() {
            return _DrawerActions.default.toggleDrawer({
              key: navStateKey
            });
          }
        }, switchRouter.getActionCreators(route, navStateKey));
      },
      getStateForAction: function getStateForAction(action, state) {
        if (!state) {
          return (0, _objectSpread2.default)({}, switchRouter.getStateForAction(action, undefined), {
            isDrawerOpen: false,
            isDrawerIdle: true,
            drawerMovementDirection: null,
            openId: genId(),
            closeId: genId(),
            toggleId: genId()
          });
        }

        var isRouterTargeted = action.key == null || action.key === state.key;

        if (isRouterTargeted) {
          if (action.type === _DrawerActions.default.DRAWER_CLOSED) {
            return (0, _objectSpread2.default)({}, state, {
              isDrawerOpen: false,
              isDrawerIdle: true,
              drawerMovementDirection: null
            });
          }

          if (action.type === _DrawerActions.default.DRAWER_OPENED) {
            return (0, _objectSpread2.default)({}, state, {
              isDrawerOpen: true,
              isDrawerIdle: true,
              drawerMovementDirection: null
            });
          }

          if (action.type === _DrawerActions.default.CLOSE_DRAWER) {
            return (0, _objectSpread2.default)({}, state, {
              closeId: genId()
            });
          }

          if (action.type === _DrawerActions.default.MARK_DRAWER_SETTLING) {
            return (0, _objectSpread2.default)({}, state, {
              isDrawerIdle: false,
              drawerMovementDirection: action.willShow ? 'opening' : 'closing'
            });
          }

          if (action.type === _DrawerActions.default.MARK_DRAWER_ACTIVE) {
            return (0, _objectSpread2.default)({}, state, {
              isDrawerIdle: false,
              drawerMovementDirection: null
            });
          }

          if (action.type === _DrawerActions.default.MARK_DRAWER_IDLE) {
            return (0, _objectSpread2.default)({}, state, {
              isDrawerIdle: true,
              drawerMovementDirection: null
            });
          }

          if (action.type === _core.NavigationActions.BACK && (state.isDrawerOpen || !state.isDrawerIdle) && state.drawerMovementDirection !== 'closing') {
            return (0, _objectSpread2.default)({}, state, {
              closeId: genId()
            });
          }

          if (action.type === _DrawerActions.default.OPEN_DRAWER) {
            return (0, _objectSpread2.default)({}, state, {
              openId: genId()
            });
          }

          if (action.type === _DrawerActions.default.TOGGLE_DRAWER) {
            return (0, _objectSpread2.default)({}, state, {
              toggleId: genId()
            });
          }
        }

        var switchedState = switchRouter.getStateForAction(action, state);

        if (switchedState === null) {
          return null;
        }

        if (switchedState !== state) {
          if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && (state.isDrawerOpen || state.drawerMovementDirection !== 'closing')) {
            return (0, _objectSpread2.default)({}, switchedState, {
              closeId: genId()
            });
          }

          return switchedState;
        }

        return state;
      }
    });
  };

  exports.default = _default;
},458,[1,43,334,459]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var OPEN_DRAWER = 'Navigation/OPEN_DRAWER';
  var CLOSE_DRAWER = 'Navigation/CLOSE_DRAWER';
  var TOGGLE_DRAWER = 'Navigation/TOGGLE_DRAWER';
  var DRAWER_OPENED = 'Navigation/DRAWER_OPENED';
  var DRAWER_CLOSED = 'Navigation/DRAWER_CLOSED';
  var MARK_DRAWER_ACTIVE = 'Navigation/MARK_DRAWER_ACTIVE';
  var MARK_DRAWER_SETTLING = 'Navigation/MARK_DRAWER_SETTLING';
  var MARK_DRAWER_IDLE = 'Navigation/MARK_DRAWER_IDLE';

  var openDrawer = function openDrawer(payload) {
    return (0, _objectSpread2.default)({
      type: OPEN_DRAWER
    }, payload);
  };

  var closeDrawer = function closeDrawer(payload) {
    return (0, _objectSpread2.default)({
      type: CLOSE_DRAWER
    }, payload);
  };

  var markDrawerActive = function markDrawerActive(payload) {
    return (0, _objectSpread2.default)({
      type: MARK_DRAWER_ACTIVE
    }, payload);
  };

  var markDrawerIdle = function markDrawerIdle(payload) {
    return (0, _objectSpread2.default)({
      type: MARK_DRAWER_IDLE
    }, payload);
  };

  var markDrawerSettling = function markDrawerSettling(payload) {
    return (0, _objectSpread2.default)({
      type: MARK_DRAWER_SETTLING
    }, payload);
  };

  var toggleDrawer = function toggleDrawer(payload) {
    return (0, _objectSpread2.default)({
      type: TOGGLE_DRAWER
    }, payload);
  };

  var _default = {
    OPEN_DRAWER: OPEN_DRAWER,
    CLOSE_DRAWER: CLOSE_DRAWER,
    TOGGLE_DRAWER: TOGGLE_DRAWER,
    DRAWER_OPENED: DRAWER_OPENED,
    DRAWER_CLOSED: DRAWER_CLOSED,
    MARK_DRAWER_ACTIVE: MARK_DRAWER_ACTIVE,
    MARK_DRAWER_IDLE: MARK_DRAWER_IDLE,
    MARK_DRAWER_SETTLING: MARK_DRAWER_SETTLING,
    openDrawer: openDrawer,
    closeDrawer: closeDrawer,
    toggleDrawer: toggleDrawer,
    markDrawerIdle: markDrawerIdle,
    markDrawerActive: markDrawerActive,
    markDrawerSettling: markDrawerSettling
  };
  exports.default = _default;
},459,[1,43]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _core = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeScreens = _$$_REQUIRE(_dependencyMap[11]);

  var _DrawerActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _DrawerLayout = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _DrawerSidebar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _DrawerGestureContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _ResourceSavingScene = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var DrawerView = function (_React$PureComponent) {
    (0, _inherits2.default)(DrawerView, _React$PureComponent);

    function DrawerView() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, DrawerView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DrawerView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        loaded: [_this.props.navigation.state.index],
        drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth
      };
      _this.drawerGestureRef = _react.default.createRef();

      _this._handleDrawerStateChange = function (newState, willShow) {
        if (newState === 'Idle') {
          if (!_this.props.navigation.state.isDrawerIdle) {
            _this.props.navigation.dispatch({
              type: _DrawerActions.default.MARK_DRAWER_IDLE,
              key: _this.props.navigation.state.key
            });
          }
        } else if (newState === 'Settling') {
          _this.props.navigation.dispatch({
            type: _DrawerActions.default.MARK_DRAWER_SETTLING,
            key: _this.props.navigation.state.key,
            willShow: willShow
          });
        } else {
          if (_this.props.navigation.state.isDrawerIdle) {
            _this.props.navigation.dispatch({
              type: _DrawerActions.default.MARK_DRAWER_ACTIVE,
              key: _this.props.navigation.state.key
            });
          }
        }
      };

      _this._handleDrawerOpen = function () {
        _this.props.navigation.dispatch({
          type: _DrawerActions.default.DRAWER_OPENED,
          key: _this.props.navigation.state.key
        });
      };

      _this._handleDrawerClose = function () {
        _this.props.navigation.dispatch({
          type: _DrawerActions.default.DRAWER_CLOSED,
          key: _this.props.navigation.state.key
        });
      };

      _this._updateWidth = function () {
        var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;

        if (_this.state.drawerWidth !== drawerWidth) {
          _this.setState({
            drawerWidth: drawerWidth
          });
        }
      };

      _this._renderNavigationView = function () {
        return _react.default.createElement(_DrawerGestureContext.default.Provider, {
          value: _this.drawerGestureRef
        }, _react.default.createElement(_DrawerSidebar.default, (0, _extends2.default)({
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          descriptors: _this.props.descriptors,
          contentComponent: _this.props.navigationConfig.contentComponent,
          contentOptions: _this.props.navigationConfig.contentOptions,
          drawerPosition: _this.props.navigationConfig.drawerPosition,
          style: _this.props.navigationConfig.style
        }, _this.props.navigationConfig)));
      };

      _this._renderContent = function () {
        var _this$props = _this.props,
            lazy = _this$props.lazy,
            navigation = _this$props.navigation;
        var loaded = _this.state.loaded;
        var routes = navigation.state.routes;

        if (_this.props.navigationConfig.unmountInactiveRoutes) {
          var activeKey = navigation.state.routes[navigation.state.index].key;
          var descriptor = _this.props.descriptors[activeKey];
          return _react.default.createElement(_core.SceneView, {
            navigation: descriptor.navigation,
            screenProps: _this.props.screenProps,
            component: descriptor.getComponent()
          });
        } else {
          return _react.default.createElement(_reactNativeScreens.ScreenContainer, {
            style: styles.pages
          }, routes.map(function (route, index) {
            if (lazy && !loaded.includes(index)) {
              return null;
            }

            var isFocused = navigation.state.index === index;
            var descriptor = _this.props.descriptors[route.key];
            return _react.default.createElement(_ResourceSavingScene.default, {
              key: route.key,
              style: [_reactNative.StyleSheet.absoluteFill, {
                opacity: isFocused ? 1 : 0
              }],
              isVisible: isFocused
            }, _react.default.createElement(_core.SceneView, {
              navigation: descriptor.navigation,
              screenProps: _this.props.screenProps,
              component: descriptor.getComponent()
            }));
          }));
        }
      };

      return _this;
    }

    (0, _createClass2.default)(DrawerView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        _reactNative.Dimensions.addEventListener('change', this._updateWidth);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this2 = this;

        var _this$props$navigatio = this.props.navigation.state,
            openId = _this$props$navigatio.openId,
            closeId = _this$props$navigatio.closeId,
            toggleId = _this$props$navigatio.toggleId,
            isDrawerOpen = _this$props$navigatio.isDrawerOpen;
        var _prevProps$navigation = prevProps.navigation.state,
            prevOpenId = _prevProps$navigation.openId,
            prevCloseId = _prevProps$navigation.closeId,
            prevToggleId = _prevProps$navigation.toggleId;
        var prevIds = [prevOpenId, prevCloseId, prevToggleId];
        var changedIds = [openId, closeId, toggleId].filter(function (id) {
          return !prevIds.includes(id);
        }).sort(function (a, b) {
          return a > b;
        });
        changedIds.forEach(function (id) {
          if (id === openId) {
            _this2._drawer.openDrawer();
          } else if (id === closeId) {
            _this2._drawer.closeDrawer();
          } else if (id === toggleId) {
            if (isDrawerOpen) {
              _this2._drawer.closeDrawer();
            } else {
              _this2._drawer.openDrawer();
            }
          }
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.Dimensions.removeEventListener('change', this._updateWidth);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var navigation = this.props.navigation;
        var activeKey = navigation.state.routes[navigation.state.index].key;
        var drawerLockMode = this.props.descriptors[activeKey].options.drawerLockMode;
        return _react.default.createElement(_DrawerLayout.default, {
          ref: function ref(c) {
            _this3._drawer = c;
          },
          gestureRef: this.drawerGestureRef,
          drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,
          drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,
          keyboardDismissMode: this.props.navigationConfig.keyboardDismissMode,
          drawerWidth: this.state.drawerWidth,
          onDrawerOpen: this._handleDrawerOpen,
          onDrawerClose: this._handleDrawerClose,
          onDrawerStateChanged: this._handleDrawerStateChange,
          useNativeAnimations: this.props.navigationConfig.useNativeAnimations,
          renderNavigationView: this._renderNavigationView,
          drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? _DrawerLayout.default.positions.Right : _DrawerLayout.default.positions.Left,
          drawerType: this.props.navigationConfig.drawerType,
          edgeWidth: this.props.navigationConfig.edgeWidth,
          hideStatusBar: this.props.navigationConfig.hideStatusBar,
          statusBarAnimation: this.props.navigationConfig.statusBarAnimation,
          minSwipeDistance: this.props.navigationConfig.minSwipeDistance,
          overlayColor: this.props.navigationConfig.overlayColor,
          contentContainerStyle: this.props.navigationConfig.contentContainerStyle
        }, _react.default.createElement(_DrawerGestureContext.default.Provider, {
          value: this.drawerGestureRef
        }, this._renderContent()));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var index = nextProps.navigation.state.index;
        return {
          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [index])
        };
      }
    }]);
    return DrawerView;
  }(_react.default.PureComponent);

  exports.default = DrawerView;
  DrawerView.defaultProps = {
    lazy: true
  };

  var styles = _reactNative.StyleSheet.create({
    pages: {
      flex: 1
    }
  });
},460,[1,15,8,19,20,27,30,33,46,2,334,414,459,461,463,464,465]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _AnimatedEvent = _$$_REQUIRE(_dependencyMap[11]);

  var _reactNativeGestureHandler = _$$_REQUIRE(_dependencyMap[12]);

  var DRAG_TOSS = 0.05;
  var IDLE = 'Idle';
  var DRAGGING = 'Dragging';
  var SETTLING = 'Settling';

  var DrawerLayout = function (_Component) {
    (0, _inherits2.default)(DrawerLayout, _Component);

    function DrawerLayout(_props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, DrawerLayout);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerLayout).call(this, _props, context));

      _this._updateAnimatedEvent = function (props, state) {
        var drawerPosition = props.drawerPosition,
            drawerWidth = props.drawerWidth,
            drawerType = props.drawerType;
        var dragXValue = state.dragX,
            touchXValue = state.touchX,
            drawerTranslation = state.drawerTranslation,
            containerWidth = state.containerWidth;
        var dragX = dragXValue;
        var touchX = touchXValue;

        if (drawerPosition !== 'left') {
          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);
          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));
          touchXValue.setValue(containerWidth);
        } else {
          touchXValue.setValue(0);
        }

        var translationX = dragX;

        if (drawerType === 'front') {
          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));

          var dragOffsetFromOnStartPosition = startPositionX.interpolate({
            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],
            outputRange: [0, 0, 1]
          });
          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);
        }

        _this._openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({
          inputRange: [0, drawerWidth],
          outputRange: [0, 1],
          extrapolate: 'clamp'
        });
        _this._onGestureEvent = _reactNative.Animated.event([{
          nativeEvent: {
            translationX: dragXValue,
            x: touchXValue
          }
        }], {
          useNativeDriver: props.useNativeAnimations
        });
      };

      _this._handleContainerLayout = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        _this.setState({
          containerWidth: nativeEvent.layout.width
        });
      };

      _this._emitStateChanged = function (newState, drawerWillShow) {
        _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);
      };

      _this._openingHandlerStateChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;

        if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
          _this._handleRelease(nativeEvent);
        } else if (nativeEvent.state === _reactNativeGestureHandler.State.ACTIVE) {
          _this._emitStateChanged(DRAGGING, false);

          if (_this.props.keyboardDismissMode === 'on-drag') {
            _reactNative.Keyboard.dismiss();
          }

          if (_this.props.hideStatusBar) {
            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');
          }
        }
      };

      _this._onTapHandlerStateChange = function (_ref3) {
        var nativeEvent = _ref3.nativeEvent;

        if (_this.state.drawerShown && nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
          _this.closeDrawer();
        }
      };

      _this._handleRelease = function (nativeEvent) {
        var _this$props = _this.props,
            drawerWidth = _this$props.drawerWidth,
            drawerPosition = _this$props.drawerPosition,
            drawerType = _this$props.drawerType;
        var _this$state = _this.state,
            drawerShown = _this$state.drawerShown,
            containerWidth = _this$state.containerWidth;
        var dragX = nativeEvent.translationX,
            velocityX = nativeEvent.velocityX,
            touchX = nativeEvent.x;

        if (drawerPosition !== 'left') {
          dragX = -dragX;
          touchX = containerWidth - touchX;
          velocityX = -velocityX;
        }

        var gestureStartX = touchX - dragX;
        var dragOffsetBasedOnStart = 0;

        if (drawerType === 'front') {
          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;
        }

        var startOffsetX = dragX + dragOffsetBasedOnStart + (drawerShown ? drawerWidth : 0);
        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;
        var shouldOpen = projOffsetX > drawerWidth / 2;

        if (shouldOpen) {
          _this._animateDrawer({
            fromValue: startOffsetX,
            toValue: drawerWidth,
            velocity: velocityX
          });
        } else {
          _this._animateDrawer({
            fromValue: startOffsetX,
            toValue: 0,
            velocity: velocityX
          });
        }
      };

      _this._animateDrawer = function (_ref4) {
        var fromValue = _ref4.fromValue,
            toValue = _ref4.toValue,
            velocity = _ref4.velocity;

        _this.state.dragX.setValue(0);

        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);

        if (typeof fromValue === 'number') {
          _this.state.drawerTranslation.setValue(fromValue);
        }

        var willShow = toValue !== 0;

        _this.setState({
          drawerShown: willShow
        });

        _this._emitStateChanged(SETTLING, willShow);

        if (_this.props.hideStatusBar) {
          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');
        }

        _reactNative.Animated.spring(_this.state.drawerTranslation, {
          velocity: velocity,
          bounciness: 0,
          toValue: toValue,
          useNativeDriver: _this.props.useNativeAnimations
        }).start(function (_ref5) {
          var finished = _ref5.finished;

          if (finished) {
            _this._emitStateChanged(IDLE, willShow);

            if (willShow) {
              _this.props.onDrawerOpen && _this.props.onDrawerOpen();
            } else {
              _this.props.onDrawerClose && _this.props.onDrawerClose();
            }
          }
        });
      };

      _this.openDrawer = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this._animateDrawer({
          toValue: _this.props.drawerWidth,
          velocity: options.velocity ? options.velocity : 0
        });
      };

      _this.closeDrawer = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this._animateDrawer({
          toValue: 0,
          velocity: options.velocity ? options.velocity : 0
        });
      };

      _this._renderOverlay = function () {
        (0, _invariant.default)(_this._openValue, 'should be set');

        var overlayOpacity = _this._openValue.interpolate({
          inputRange: [0, 1],
          outputRange: [0, 0.7],
          extrapolate: 'clamp'
        });

        var dynamicOverlayStyles = {
          opacity: overlayOpacity,
          backgroundColor: _this.props.overlayColor
        };
        return _react.default.createElement(_reactNativeGestureHandler.TapGestureHandler, {
          onHandlerStateChange: _this._onTapHandlerStateChange
        }, _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: _this.state.drawerShown ? 'auto' : 'none',
          style: [styles.overlay, dynamicOverlayStyles]
        }));
      };

      _this._renderDrawer = function () {
        var drawerShown = _this.state.drawerShown;
        var _this$props2 = _this.props,
            drawerBackgroundColor = _this$props2.drawerBackgroundColor,
            drawerWidth = _this$props2.drawerWidth,
            drawerPosition = _this$props2.drawerPosition,
            drawerType = _this$props2.drawerType,
            contentContainerStyle = _this$props2.contentContainerStyle;
        var fromLeft = drawerPosition === 'left';
        var drawerSlide = drawerType !== 'back';
        var containerSlide = drawerType !== 'front';
        var dynamicDrawerStyles = {
          backgroundColor: drawerBackgroundColor,
          width: drawerWidth
        };
        var openValue = _this._openValue;
        (0, _invariant.default)(openValue, 'should be set');
        var containerStyles;

        if (containerSlide) {
          var containerTranslateX = openValue.interpolate({
            inputRange: [0, 1],
            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],
            extrapolate: 'clamp'
          });
          containerStyles = {
            transform: [{
              translateX: containerTranslateX
            }]
          };
        }

        var drawerTranslateX = 0;

        if (drawerSlide) {
          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;
          drawerTranslateX = openValue.interpolate({
            inputRange: [0, 1],
            outputRange: [closedDrawerOffset, 0],
            extrapolate: 'clamp'
          });
        }

        var drawerStyles = {
          transform: [{
            translateX: drawerTranslateX
          }],
          flexDirection: fromLeft ? 'row' : 'row-reverse'
        };
        return _react.default.createElement(_reactNative.Animated.View, {
          style: styles.main,
          onLayout: _this._handleContainerLayout
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle]
        }, typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()), _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: "box-none",
          accessibilityViewIsModal: drawerShown,
          style: [styles.drawerContainer, drawerStyles]
        }, _react.default.createElement(_reactNative.View, {
          style: [styles.drawer, dynamicDrawerStyles]
        }, _this.props.renderNavigationView(_this._openValue))));
      };

      var _dragX = new _reactNative.Animated.Value(0);

      var _touchX = new _reactNative.Animated.Value(0);

      var _drawerTranslation = new _reactNative.Animated.Value(0);

      _this.state = {
        dragX: _dragX,
        touchX: _touchX,
        drawerTranslation: _drawerTranslation,
        drawerShown: false,
        containerWidth: 0
      };

      _this._updateAnimatedEvent(_props, _this.state);

      return _this;
    }

    (0, _createClass2.default)(DrawerLayout, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate(props, state) {
        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {
          this._updateAnimatedEvent(props, state);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state2 = this.state,
            drawerShown = _this$state2.drawerShown,
            containerWidth = _this$state2.containerWidth;
        var _this$props3 = this.props,
            drawerPosition = _this$props3.drawerPosition,
            drawerType = _this$props3.drawerType,
            edgeWidth = _this$props3.edgeWidth,
            minSwipeDistance = _this$props3.minSwipeDistance;
        var fromLeft = drawerPosition === 'left';
        var gestureOrientation = (fromLeft ? 1 : -1) * (drawerShown ? -1 : 1);
        var hitSlop = fromLeft ? {
          right: drawerShown ? 0 : edgeWidth - containerWidth
        } : {
          left: drawerShown ? 0 : edgeWidth - containerWidth
        };
        return _react.default.createElement(_reactNativeGestureHandler.PanGestureHandler, {
          hitSlop: hitSlop,
          minOffsetX: gestureOrientation * minSwipeDistance,
          maxDeltaY: 15,
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._openingHandlerStateChange,
          ref: this.props.gestureRef
        }, this._renderDrawer());
      }
    }]);
    return DrawerLayout;
  }(_react.Component);

  exports.default = DrawerLayout;
  DrawerLayout.defaultProps = {
    drawerWidth: 200,
    drawerPosition: 'left',
    useNativeAnimations: true,
    drawerType: 'front',
    edgeWidth: 20,
    minSwipeDistance: 3,
    overlayColor: 'black'
  };
  DrawerLayout.positions = {
    Left: 'left',
    Right: 'right'
  };

  var styles = _reactNative.StyleSheet.create({
    drawer: {
      flex: 0
    },
    drawerContainer: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1001,
      flexDirection: 'row'
    }),
    containerInFront: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1002
    }),
    containerOnBack: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject),
    main: {
      flex: 1,
      zIndex: 0,
      overflow: 'hidden'
    },
    overlay: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1000
    })
  });
},461,[361,1,43,19,20,27,30,33,46,2,462,193,391]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = invariant;

  function invariant(condition, format, a, b, c, d, e, f) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }
},462,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _core = _$$_REQUIRE(_dependencyMap[9]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var DrawerSidebar = function (_React$PureComponent) {
    (0, _inherits2.default)(DrawerSidebar, _React$PureComponent);

    function DrawerSidebar() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, DrawerSidebar);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DrawerSidebar)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._getScreenOptions = function (routeKey) {
        var descriptor = _this.props.descriptors[routeKey];
        (0, _invariant.default)(descriptor.options, 'Cannot access screen descriptor options from drawer sidebar');
        return descriptor.options;
      };

      _this._getLabel = function (_ref) {
        var focused = _ref.focused,
            tintColor = _ref.tintColor,
            route = _ref.route;

        var _this$_getScreenOptio = _this._getScreenOptions(route.key),
            drawerLabel = _this$_getScreenOptio.drawerLabel,
            title = _this$_getScreenOptio.title;

        if (drawerLabel) {
          return typeof drawerLabel === 'function' ? drawerLabel({
            tintColor: tintColor,
            focused: focused
          }) : drawerLabel;
        }

        if (typeof title === 'string') {
          return title;
        }

        return route.routeName;
      };

      _this._renderIcon = function (_ref2) {
        var focused = _ref2.focused,
            tintColor = _ref2.tintColor,
            route = _ref2.route;

        var _this$_getScreenOptio2 = _this._getScreenOptions(route.key),
            drawerIcon = _this$_getScreenOptio2.drawerIcon;

        if (drawerIcon) {
          return typeof drawerIcon === 'function' ? drawerIcon({
            tintColor: tintColor,
            focused: focused
          }) : drawerIcon;
        }

        return null;
      };

      _this._onItemPress = function (_ref3) {
        var route = _ref3.route,
            focused = _ref3.focused;

        if (focused) {
          _this.props.navigation.closeDrawer();
        } else {
          _this.props.navigation.dispatch(_core.NavigationActions.navigate({
            routeName: route.routeName
          }));
        }
      };

      return _this;
    }

    (0, _createClass2.default)(DrawerSidebar, [{
      key: "render",
      value: function render() {
        var ContentComponent = this.props.contentComponent;

        if (!ContentComponent) {
          return null;
        }

        var state = this.props.navigation.state;
        (0, _invariant.default)(typeof state.index === 'number', 'should be set');
        return _react.default.createElement(_reactNative.View, {
          style: [styles.container, this.props.style]
        }, _react.default.createElement(ContentComponent, (0, _extends2.default)({}, this.props.contentOptions, {
          navigation: this.props.navigation,
          descriptors: this.props.descriptors,
          items: state.routes,
          activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,
          screenProps: this.props.screenProps,
          getLabel: this._getLabel,
          renderIcon: this._renderIcon,
          onItemPress: this._onItemPress,
          drawerPosition: this.props.drawerPosition
        })));
      }
    }]);
    return DrawerSidebar;
  }(_react.default.PureComponent);

  var _default = DrawerSidebar;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},463,[1,8,19,20,27,30,33,46,2,334,462]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _react.default.createContext(null);

  exports.default = _default;
},464,[1,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeScreens = _$$_REQUIRE(_dependencyMap[11]);

  var FAR_FAR_AWAY = 3000;

  var ResourceSavingScene = function (_React$Component) {
    (0, _inherits2.default)(ResourceSavingScene, _React$Component);

    function ResourceSavingScene() {
      (0, _classCallCheck2.default)(this, ResourceSavingScene);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ResourceSavingScene).apply(this, arguments));
    }

    (0, _createClass2.default)(ResourceSavingScene, [{
      key: "render",
      value: function render() {
        if (_reactNativeScreens.screensEnabled && (0, _reactNativeScreens.screensEnabled)()) {
          var _this$props = this.props,
              _isVisible = _this$props.isVisible,
              _rest = (0, _objectWithoutProperties2.default)(_this$props, ["isVisible"]);

          return React.createElement(_reactNativeScreens.Screen, (0, _extends2.default)({
            active: _isVisible ? 1 : 0
          }, _rest));
        }

        var _this$props2 = this.props,
            isVisible = _this$props2.isVisible,
            children = _this$props2.children,
            style = _this$props2.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props2, ["isVisible", "children", "style"]);
        return React.createElement(_reactNative.View, (0, _extends2.default)({
          style: [styles.container, style],
          collapsable: false,
          removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? !isVisible : true,
          pointerEvents: isVisible ? 'auto' : 'none'
        }, rest), React.createElement(_reactNative.View, {
          style: isVisible ? styles.attached : styles.detached
        }, children));
      }
    }]);
    return ResourceSavingScene;
  }(React.Component);

  exports.default = ResourceSavingScene;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    attached: {
      flex: 1
    },
    detached: {
      flex: 1,
      top: FAR_FAR_AWAY
    }
  });
},465,[361,1,8,6,19,20,27,30,33,46,2,414]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _native = _$$_REQUIRE(_dependencyMap[4]);

  var _TouchableItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {
    var items = _ref.items,
        activeItemKey = _ref.activeItemKey,
        activeTintColor = _ref.activeTintColor,
        activeBackgroundColor = _ref.activeBackgroundColor,
        inactiveTintColor = _ref.inactiveTintColor,
        inactiveBackgroundColor = _ref.inactiveBackgroundColor,
        getLabel = _ref.getLabel,
        renderIcon = _ref.renderIcon,
        onItemPress = _ref.onItemPress,
        itemsContainerStyle = _ref.itemsContainerStyle,
        itemStyle = _ref.itemStyle,
        labelStyle = _ref.labelStyle,
        activeLabelStyle = _ref.activeLabelStyle,
        inactiveLabelStyle = _ref.inactiveLabelStyle,
        iconContainerStyle = _ref.iconContainerStyle,
        drawerPosition = _ref.drawerPosition;
    return _react.default.createElement(_reactNative.View, {
      style: [styles.container, itemsContainerStyle]
    }, items.map(function (route, index) {
      var _ref2;

      var focused = activeItemKey === route.key;
      var color = focused ? activeTintColor : inactiveTintColor;
      var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
      var scene = {
        route: route,
        index: index,
        focused: focused,
        tintColor: color
      };
      var icon = renderIcon(scene);
      var label = getLabel(scene);
      var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;
      return _react.default.createElement(_TouchableItem.default, {
        key: route.key,
        onPress: function onPress() {
          onItemPress({
            route: route,
            focused: focused
          });
        },
        delayPressIn: 0
      }, _react.default.createElement(_native.SafeAreaView, {
        style: {
          backgroundColor: backgroundColor
        },
        forceInset: (_ref2 = {}, (0, _defineProperty2.default)(_ref2, drawerPosition, 'always'), (0, _defineProperty2.default)(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), (0, _defineProperty2.default)(_ref2, "vertical", 'never'), _ref2)
      }, _react.default.createElement(_reactNative.View, {
        style: [styles.item, itemStyle]
      }, icon ? _react.default.createElement(_reactNative.View, {
        style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]
      }, icon) : null, typeof label === 'string' ? _react.default.createElement(_reactNative.Text, {
        style: [styles.label, {
          color: color
        }, labelStyle, extraLabelStyle]
      }, label) : label)));
    }));
  };

  DrawerNavigatorItems.defaultProps = {
    activeTintColor: '#2196f3',
    activeBackgroundColor: 'rgba(0, 0, 0, .04)',
    inactiveTintColor: 'rgba(0, 0, 0, .87)',
    inactiveBackgroundColor: 'transparent'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingVertical: 4
    },
    item: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    icon: {
      marginHorizontal: 16,
      width: 24,
      alignItems: 'center'
    },
    inactiveIcon: {
      opacity: 0.62
    },
    label: {
      margin: 16,
      fontWeight: 'bold'
    }
  });

  var _default = DrawerNavigatorItems;
  exports.default = _default;
},466,[1,44,46,2,331,467]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var ANDROID_VERSION_LOLLIPOP = 21;

  var TouchableItem = function (_React$Component) {
    (0, _inherits2.default)(TouchableItem, _React$Component);

    function TouchableItem() {
      (0, _classCallCheck2.default)(this, TouchableItem);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TouchableItem).apply(this, arguments));
    }

    (0, _createClass2.default)(TouchableItem, [{
      key: "render",
      value: function render() {
        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {
          var _this$props = this.props,
              style = _this$props.style,
              rest = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);
          return _react.default.createElement(_reactNative.TouchableNativeFeedback, (0, _extends2.default)({}, rest, {
            style: null,
            background: _reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)
          }), _react.default.createElement(_reactNative.View, {
            style: style
          }, _react.default.Children.only(this.props.children)));
        }

        return _react.default.createElement(_reactNative.TouchableOpacity, this.props, this.props.children);
      }
    }]);
    return TouchableItem;
  }(_react.default.Component);

  exports.default = TouchableItem;
  TouchableItem.defaultProps = {
    borderless: false,
    pressColor: 'rgba(0, 0, 0, .32)'
  };
},467,[1,8,6,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var AuthLoadingScreen = function (_BaseScreen) {
    (0, _inherits2.default)(AuthLoadingScreen, _BaseScreen);

    function AuthLoadingScreen(props) {
      var _this;

      (0, _classCallCheck2.default)(this, AuthLoadingScreen);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AuthLoadingScreen).call(this, props));

      _this._bootstrapAsync = function _callee() {
        var userToken;
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('apikey'));

              case 2:
                userToken = _context.sent;

                _this.props.navigation.navigate(userToken ? 'App' : 'Auth');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        });
      };

      _this._bootstrapAsync();

      return _this;
    }

    (0, _createClass2.default)(AuthLoadingScreen, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.ActivityIndicator, null), _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "default"
        }));
      }
    }]);
    return AuthLoadingScreen;
  }(_BaseScreen2.default);

  var _default = AuthLoadingScreen;
  exports.default = _default;
},468,[1,129,19,20,27,30,33,46,2,469]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var BaseScreen = function (_React$Component) {
    (0, _inherits2.default)(BaseScreen, _React$Component);

    function BaseScreen() {
      (0, _classCallCheck2.default)(this, BaseScreen);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BaseScreen).apply(this, arguments));
    }

    return BaseScreen;
  }(_react.default.Component);

  var _default = BaseScreen;
  exports.default = _default;
},469,[1,19,27,30,33,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _reactNativeStepIndicator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _AmountComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _BillingComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _PaymentComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _colors = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _alerts = _$$_REQUIRE(_dependencyMap[16]);

  var _donate = _$$_REQUIRE(_dependencyMap[17]);

  var _login = _$$_REQUIRE(_dependencyMap[18]);

  var labels = ['Amount', 'Billing Information', 'Payment Information'];

  var DonateScreen = function (_BaseScreen) {
    (0, _inherits2.default)(DonateScreen, _BaseScreen);

    function DonateScreen(props) {
      var _this;

      (0, _classCallCheck2.default)(this, DonateScreen);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DonateScreen).call(this, props));

      _this.donate = function _callee() {
        var amount, dotIndex, email, apiKey, exp, cc, transResp, resp;
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                amount = _this.state.amount.toString();
                dotIndex = amount.indexOf('.');

                if (dotIndex == -1) {
                  amount = amount + '00';
                } else {
                  amount = amount.substring(0, dotIndex) + amount.substring(dotIndex + 1, dotIndex + 3);
                }

                _context.next = 6;
                return _regenerator.default.awrap((0, _login.getStoredEmail)());

              case 6:
                email = _context.sent;
                _context.next = 9;
                return _regenerator.default.awrap((0, _login.getStoredApiKey)());

              case 9:
                apiKey = _context.sent;
                exp = _this.state.exp;
                exp = exp.substring(0, 2) + exp.substring(3);
                cc = _this.state.cc;
                cc = cc.replace(/\s+/g, '');
                tcInfo = {
                  'name': _this.state.cardholder,
                  'cc': cc,
                  'exp': exp,
                  'amount': amount,
                  'email': email,
                  'apikey': apiKey
                };
                _context.next = 17;
                return _regenerator.default.awrap((0, _donate.TCSinglePayment)(tcInfo));

              case 17:
                transResp = _context.sent;

                if (!(transResp.status != 'approved')) {
                  _context.next = 22;
                  break;
                }

                (0, _alerts.okAlert)('Error: Transaction not approved', 'Try again');
                _context.next = 33;
                break;

              case 22:
                _context.next = 24;
                return _regenerator.default.awrap((0, _donate.TCGetBillingID)(tcInfo));

              case 24:
                resp = _context.sent;
                _context.next = 27;
                return _regenerator.default.awrap((0, _donate.storeBillingID)(resp.billingid));

              case 27:
                _context.next = 29;
                return _regenerator.default.awrap((0, _donate.storeLastFour)(tcInfo['cc'].slice(8, 12)));

              case 29:
                _context.next = 31;
                return _regenerator.default.awrap((0, _donate.storeCardholder)(_this.state.cardholder));

              case 31:
                (0, _alerts.okAlert)('Success! Transaction ID: ' + transResp.transid);

                _this.props.navigation.navigate('DonateSuccess');

              case 33:
                _context.next = 38;
                break;

              case 35:
                _context.prev = 35;
                _context.t0 = _context["catch"](0);
                (0, _alerts.okAlert)('Donate failed', 'Try again');

              case 38:
              case "end":
                return _context.stop();
            }
          }
        }, null, null, [[0, 35]]);
      };

      _this.handleChange = function (target, text) {
        _this.setState((0, _defineProperty2.default)({}, target, text));
      };

      _this.handleCreditCardChange = function (form) {
        console.log(form);

        _this.setState({
          'cc': form.values.number,
          'exp': form.values.expiry,
          'securityCode': form.values.cvc,
          'cardholder': form.values.name,
          'valid_cc': form.valid
        });
      };

      _this.onPageChange = function (position) {
        _this.setState({
          currentPosition: position
        });
      };

      _this.state = {
        amount: '',
        savedCC: false,
        loadingCC: true,
        currentPosition: 0,
        address: '',
        city: '',
        country: '',
        stateProvince: '',
        postalCode: '',
        cardholder: '',
        cc: '',
        exp: '',
        securityCode: '',
        valid_cc: false
      };
      return _this;
    }

    (0, _createClass2.default)(DonateScreen, [{
      key: "renderStepComponent",
      value: function renderStepComponent() {
        if (this.state.currentPosition == 0) {
          return _react.default.createElement(_AmountComponent.default, {
            handleChange: this.handleChange,
            changePage: this.onPageChange,
            styles: styles,
            amount: this.state.amount
          });
        } else if (this.state.currentPosition == 1) {
          return _react.default.createElement(_BillingComponent.default, {
            handleChange: this.handleChange,
            changePage: this.onPageChange,
            styles: styles,
            props: this.state
          });
        } else if (this.state.currentPosition == 2) {
          return _react.default.createElement(_PaymentComponent.default, {
            handleChange: this.handleCreditCardChange,
            changePage: this.onPageChange,
            styles: styles,
            amount: this.state.amount,
            disabledButton: this.state.valid_cc,
            donate: this.donate
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: _reactNative.Keyboard.dismiss,
          accessible: false
        }, _react.default.createElement(_reactNative.KeyboardAvoidingView, {
          style: {
            flex: 1,
            marginTop: 10
          },
          behavior: _reactNative.Platform.OS == 'ios' ? 'padding' : null
        }, _react.default.createElement(_reactNativeStepIndicator.default, {
          currentPosition: this.state.currentPosition,
          labels: labels,
          stepCount: 3,
          onPress: this.onPageChange
        }), this.renderStepComponent()));
      }
    }]);
    return DonateScreen;
  }(_BaseScreen2.default);

  var styles = _reactNative.StyleSheet.create({
    donationButton: {
      position: 'absolute',
      bottom: 5,
      left: 0,
      right: 0,
      backgroundColor: '#27ae60'
    },
    disabledDonationButton: {
      position: 'absolute',
      bottom: 5,
      left: 0,
      right: 0,
      backgroundColor: '#27ae60',
      opacity: .25
    },
    donationButtonContent: {
      height: 50
    },
    donationButtonText: {
      color: _colors.default.textLight,
      fontSize: 18
    },
    container: {
      flex: 1,
      marginLeft: 12,
      marginRight: 12,
      marginTop: 15
    }
  });

  var _default = DonateScreen;
  exports.default = _default;
},470,[1,44,129,19,20,27,30,33,46,2,471,475,788,789,469,787,857,858,859]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var STEP_STATUS = {
    CURRENT: 'current',
    FINISHED: 'finished',
    UNFINISHED: 'unfinished'
  };

  var StepIndicator = function (_PureComponent) {
    (0, _inherits2.default)(StepIndicator, _PureComponent);

    function StepIndicator(props) {
      var _this;

      (0, _classCallCheck2.default)(this, StepIndicator);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StepIndicator).call(this, props));

      _this.renderProgressBarBackground = function () {
        var _this$props = _this.props,
            stepCount = _this$props.stepCount,
            direction = _this$props.direction;
        var progressBarBackgroundStyle;

        if (direction === 'vertical') {
          progressBarBackgroundStyle = {
            backgroundColor: _this.state.customStyles.separatorUnFinishedColor,
            position: 'absolute',
            left: (_this.state.width - _this.state.customStyles.separatorStrokeWidth) / 2,
            top: _this.state.height / (2 * stepCount),
            bottom: _this.state.height / (2 * stepCount),
            width: _this.state.customStyles.separatorStrokeWidth
          };
        } else {
          progressBarBackgroundStyle = {
            backgroundColor: _this.state.customStyles.separatorUnFinishedColor,
            position: 'absolute',
            top: (_this.state.height - _this.state.customStyles.separatorStrokeWidth) / 2,
            left: _this.state.width / (2 * stepCount),
            right: _this.state.width / (2 * stepCount),
            height: _this.state.customStyles.separatorStrokeWidth
          };
        }

        return _react.default.createElement(_reactNative.View, {
          onLayout: function onLayout(event) {
            if (direction === 'vertical') {
              _this.setState({
                progressBarSize: event.nativeEvent.layout.height
              }, function () {
                _this.onCurrentPositionChanged(_this.props.currentPosition);
              });
            } else {
              _this.setState({
                progressBarSize: event.nativeEvent.layout.width
              }, function () {
                _this.onCurrentPositionChanged(_this.props.currentPosition);
              });
            }
          },
          style: progressBarBackgroundStyle
        });
      };

      _this.renderProgressBar = function () {
        var _this$props2 = _this.props,
            stepCount = _this$props2.stepCount,
            direction = _this$props2.direction;
        var progressBarStyle;

        if (direction === 'vertical') {
          progressBarStyle = {
            backgroundColor: _this.state.customStyles.separatorFinishedColor,
            position: 'absolute',
            left: (_this.state.width - _this.state.customStyles.separatorStrokeWidth) / 2,
            top: _this.state.height / (2 * stepCount),
            bottom: _this.state.height / (2 * stepCount),
            width: _this.state.customStyles.separatorStrokeWidth,
            height: _this.progressAnim
          };
        } else {
          progressBarStyle = {
            backgroundColor: _this.state.customStyles.separatorFinishedColor,
            position: 'absolute',
            top: (_this.state.height - _this.state.customStyles.separatorStrokeWidth) / 2,
            left: _this.state.width / (2 * stepCount),
            right: _this.state.width / (2 * stepCount),
            height: _this.state.customStyles.separatorStrokeWidth,
            width: _this.progressAnim
          };
        }

        return _react.default.createElement(_reactNative.Animated.View, {
          style: progressBarStyle
        });
      };

      _this.renderStepIndicator = function () {
        var steps = [];
        var _this$props3 = _this.props,
            labels = _this$props3.labels,
            stepCount = _this$props3.stepCount,
            direction = _this$props3.direction;

        var _loop = function _loop(position) {
          steps.push(_react.default.createElement(_reactNative.TouchableWithoutFeedback, {
            key: position,
            onPress: function onPress() {
              return _this.stepPressed(position);
            }
          }, _react.default.createElement(_reactNative.View, {
            style: [styles.stepContainer, direction === 'vertical' ? {
              flexDirection: 'column'
            } : {
              flexDirection: 'row'
            }]
          }, _this.renderStep(position))));
        };

        for (var position = 0; position < stepCount; position++) {
          _loop(position);
        }

        return _react.default.createElement(_reactNative.View, {
          onLayout: function onLayout(event) {
            return _this.setState({
              width: event.nativeEvent.layout.width,
              height: event.nativeEvent.layout.height
            });
          },
          style: [styles.stepIndicatorContainer, direction === 'vertical' ? {
            flexDirection: 'column',
            width: _this.state.customStyles.currentStepIndicatorSize
          } : {
            flexDirection: 'row',
            height: _this.state.customStyles.currentStepIndicatorSize
          }]
        }, steps);
      };

      _this.renderStepLabels = function () {
        var _this$props4 = _this.props,
            labels = _this$props4.labels,
            direction = _this$props4.direction,
            currentPosition = _this$props4.currentPosition;
        var labelViews = labels.map(function (label, index) {
          var selectedStepLabelStyle = index === currentPosition ? {
            color: _this.state.customStyles.currentStepLabelColor
          } : {
            color: _this.state.customStyles.labelColor
          };
          return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
            style: styles.stepLabelItem,
            key: index,
            onPress: function onPress() {
              return _this.stepPressed(index);
            }
          }, _react.default.createElement(_reactNative.View, {
            style: styles.stepLabelItem
          }, _react.default.createElement(_reactNative.Text, {
            style: [styles.stepLabel, selectedStepLabelStyle, {
              fontSize: _this.state.customStyles.labelSize
            }]
          }, label)));
        });
        return _react.default.createElement(_reactNative.View, {
          style: [styles.stepLabelsContainer, direction === 'vertical' ? {
            flexDirection: 'column',
            paddingHorizontal: 4
          } : {
            flexDirection: 'row',
            paddingVertical: 4
          }]
        }, labelViews);
      };

      _this.renderStep = function (position) {
        var _this$props5 = _this.props,
            currentPosition = _this$props5.currentPosition,
            stepCount = _this$props5.stepCount,
            direction = _this$props5.direction,
            renderStepIndicator = _this$props5.renderStepIndicator;
        var stepStyle;
        var indicatorLabelStyle;
        var separatorStyle = direction === 'vertical' ? {
          width: _this.state.customStyles.separatorStrokeWidth,
          zIndex: 10
        } : {
          height: _this.state.customStyles.separatorStrokeWidth
        };

        switch (_this.getStepStatus(position)) {
          case STEP_STATUS.CURRENT:
            {
              stepStyle = {
                backgroundColor: _this.state.customStyles.stepIndicatorCurrentColor,
                borderWidth: _this.state.customStyles.currentStepStrokeWidth,
                borderColor: _this.state.customStyles.stepStrokeCurrentColor,
                height: _this.sizeAnim,
                width: _this.sizeAnim,
                borderRadius: _this.borderRadiusAnim
              };
              indicatorLabelStyle = {
                fontSize: _this.state.customStyles.currentStepIndicatorLabelFontSize,
                color: _this.state.customStyles.stepIndicatorLabelCurrentColor
              };
              break;
            }

          case STEP_STATUS.FINISHED:
            {
              stepStyle = {
                backgroundColor: _this.state.customStyles.stepIndicatorFinishedColor,
                borderWidth: _this.state.customStyles.stepStrokeWidth,
                borderColor: _this.state.customStyles.stepStrokeFinishedColor,
                height: _this.state.customStyles.stepIndicatorSize,
                width: _this.state.customStyles.stepIndicatorSize,
                borderRadius: _this.state.customStyles.stepIndicatorSize / 2
              };
              indicatorLabelStyle = {
                fontSize: _this.state.customStyles.stepIndicatorLabelFontSize,
                color: _this.state.customStyles.stepIndicatorLabelFinishedColor
              };
              break;
            }

          case STEP_STATUS.UNFINISHED:
            {
              stepStyle = {
                backgroundColor: _this.state.customStyles.stepIndicatorUnFinishedColor,
                borderWidth: _this.state.customStyles.stepStrokeWidth,
                borderColor: _this.state.customStyles.stepStrokeUnFinishedColor,
                height: _this.state.customStyles.stepIndicatorSize,
                width: _this.state.customStyles.stepIndicatorSize,
                borderRadius: _this.state.customStyles.stepIndicatorSize / 2
              };
              indicatorLabelStyle = {
                overflow: 'hidden',
                fontSize: _this.state.customStyles.stepIndicatorLabelFontSize,
                color: _this.state.customStyles.stepIndicatorLabelUnFinishedColor
              };
              break;
            }

          default:
        }

        return _react.default.createElement(_reactNative.Animated.View, {
          key: 'step-indicator',
          style: [styles.step, stepStyle]
        }, renderStepIndicator ? renderStepIndicator({
          position: position,
          stepStatus: _this.getStepStatus(position)
        }) : _react.default.createElement(_reactNative.Text, {
          style: indicatorLabelStyle
        }, position + 1));
      };

      _this.getStepStatus = function (stepPosition) {
        var currentPosition = _this.props.currentPosition;

        if (stepPosition === currentPosition) {
          return STEP_STATUS.CURRENT;
        } else if (stepPosition < currentPosition) {
          return STEP_STATUS.FINISHED;
        } else {
          return STEP_STATUS.UNFINISHED;
        }
      };

      _this.onCurrentPositionChanged = function (position) {
        var stepCount = _this.props.stepCount;

        if (position > stepCount - 1) {
          position = stepCount - 1;
        }

        var animateToPosition = _this.state.progressBarSize / (stepCount - 1) * position;

        _this.sizeAnim.setValue(_this.state.customStyles.stepIndicatorSize);

        _this.borderRadiusAnim.setValue(_this.state.customStyles.stepIndicatorSize / 2);

        _reactNative.Animated.sequence([_reactNative.Animated.timing(_this.progressAnim, {
          toValue: animateToPosition,
          duration: 200
        }), _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.sizeAnim, {
          toValue: _this.state.customStyles.currentStepIndicatorSize,
          duration: 100
        }), _reactNative.Animated.timing(_this.borderRadiusAnim, {
          toValue: _this.state.customStyles.currentStepIndicatorSize / 2,
          duration: 100
        })])]).start();
      };

      var defaultStyles = {
        stepIndicatorSize: 30,
        currentStepIndicatorSize: 40,
        separatorStrokeWidth: 3,
        currentStepStrokeWidth: 5,
        stepStrokeWidth: 0,
        stepStrokeCurrentColor: '#4aae4f',
        stepStrokeFinishedColor: '#4aae4f',
        stepStrokeUnFinishedColor: '#4aae4f',
        separatorFinishedColor: '#4aae4f',
        separatorUnFinishedColor: '#a4d4a5',
        stepIndicatorFinishedColor: '#4aae4f',
        stepIndicatorUnFinishedColor: '#a4d4a5',
        stepIndicatorCurrentColor: '#ffffff',
        stepIndicatorLabelFontSize: 15,
        currentStepIndicatorLabelFontSize: 15,
        stepIndicatorLabelCurrentColor: '#000000',
        stepIndicatorLabelFinishedColor: '#ffffff',
        stepIndicatorLabelUnFinishedColor: 'rgba(255,255,255,0.5)',
        labelColor: '#000000',
        labelSize: 13,
        currentStepLabelColor: '#4aae4f'
      };
      var customStyles = (0, _extends2.default)(defaultStyles, props.customStyles);
      _this.state = {
        width: 0,
        height: 0,
        progressBarSize: 0,
        customStyles: customStyles
      };
      _this.progressAnim = new _reactNative.Animated.Value(0);
      _this.sizeAnim = new _reactNative.Animated.Value(_this.state.customStyles.stepIndicatorSize);
      _this.borderRadiusAnim = new _reactNative.Animated.Value(_this.state.customStyles.stepIndicatorSize / 2);
      return _this;
    }

    (0, _createClass2.default)(StepIndicator, [{
      key: "stepPressed",
      value: function stepPressed(position) {
        if (this.props.onPress) {
          this.props.onPress(position);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props6 = this.props,
            labels = _this$props6.labels,
            direction = _this$props6.direction;
        return _react.default.createElement(_reactNative.View, {
          style: [styles.container, direction === 'vertical' ? {
            flexDirection: 'row',
            flex: 1
          } : {
            flexDirection: 'column'
          }]
        }, this.state.width !== 0 && this.renderProgressBarBackground(), this.state.width !== 0 && this.renderProgressBar(), this.renderStepIndicator(), labels && this.renderStepLabels());
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (nextProps.customStyles !== this.props.customStyles) {
          this.setState(function (state) {
            return {
              customStyles: (0, _extends2.default)(state.customStyles, nextProps.customStyles)
            };
          });
        }

        if (nextProps.currentPosition !== this.props.currentPosition) {
          this.onCurrentPositionChanged(nextProps.currentPosition);
        }
      }
    }]);
    return StepIndicator;
  }(_react.PureComponent);

  exports.default = StepIndicator;

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: 'transparent'
    },
    stepIndicatorContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around',
      backgroundColor: 'transparent'
    },
    stepLabelsContainer: {
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    step: {
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 2
    },
    stepContainer: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center'
    },
    stepLabel: {
      fontSize: 12,
      textAlign: 'center',
      fontWeight: '500'
    },
    stepLabelItem: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center'
    }
  });

  StepIndicator.propTypes = {
    currentPosition: _propTypes.default.number,
    stepCount: _propTypes.default.number,
    customStyles: _propTypes.default.object,
    direction: _propTypes.default.oneOf(['vertical', 'horizontal']),
    labels: _propTypes.default.array,
    onPress: _propTypes.default.func,
    renderStepIndicator: _propTypes.default.func
  };
  StepIndicator.defaultProps = {
    currentPosition: 0,
    stepCount: 5,
    customStyles: {},
    direction: 'horizontal'
  };
},471,[361,1,8,19,20,27,30,33,46,472,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  {
    module.exports = _$$_REQUIRE(_dependencyMap[0])();
  }
},472,[473]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = _$$_REQUIRE(_dependencyMap[0]);

  function emptyFunction() {}

  function emptyFunctionWithReset() {}

  emptyFunctionWithReset.resetWarningCache = emptyFunction;

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},473,[474]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},474,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _reactNativePaper = _$$_REQUIRE(_dependencyMap[8]);

  var _strings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _colors = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var AmountComponent = function (_React$Component) {
    (0, _inherits2.default)(AmountComponent, _React$Component);

    function AmountComponent(props) {
      (0, _classCallCheck2.default)(this, AmountComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AmountComponent).call(this, props));
    }

    (0, _createClass2.default)(AmountComponent, [{
      key: "renderMoneyButton",
      value: function renderMoneyButton(val) {
        var _this = this;

        var renderVal = '$' + val;
        return _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1
          }
        }, _react.default.createElement(_reactNativePaper.Button, {
          style: styles.moneyButton,
          mode: "outlined",
          compact: true,
          onPress: function onPress(_) {
            return _this.props.handleChange('amount', val);
          }
        }, _react.default.createElement(_reactNative.Text, null, renderVal)));
      }
    }, {
      key: "renderMoneyValue",
      value: function renderMoneyValue() {
        if (this.props.amount == '') {
          return;
        } else {
          return '$' + this.props.amount;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react.default.createElement(_reactNative.View, {
          style: this.props.styles.container
        }, _react.default.createElement(_reactNative.Text, {
          style: {
            fontWeight: 'bold',
            fontSize: 20,
            color: _colors.default.textHeader
          }
        }, _strings.default.donations.donationHeader), _react.default.createElement(_reactNative.Text, null, _strings.default.donations.donationBody), _react.default.createElement(_reactNativePaper.TextInput, {
          style: {
            backgroundColor: _colors.default.backgroundWhite
          },
          label: "Amount",
          value: this.renderMoneyValue(),
          keyboardType: "numeric",
          returnKeyType: "done",
          onChangeText: function onChangeText(val) {
            if (val[0] == '$') {
              _this2.props.handleChange('amount', val.substr(1));
            } else {
              _this2.props.handleChange('amount', val);
            }
          }
        }), _react.default.createElement(_reactNative.View, {
          style: styles.buttonRow
        }, this.renderMoneyButton(10), this.renderMoneyButton(100), this.renderMoneyButton(250)), _react.default.createElement(_reactNative.View, {
          style: styles.buttonRow
        }, this.renderMoneyButton(500), this.renderMoneyButton(1000), this.renderMoneyButton(2500)), _react.default.createElement(_reactNativePaper.Button, {
          style: this.props.amount == '' ? this.props.styles.disabledDonationButton : this.props.styles.donationButton,
          contentStyle: this.props.styles.donationButtonContent,
          onPress: function onPress(_) {
            return _this2.props.changePage(1);
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: this.props.styles.donationButtonText
        }, "Continue")));
      }
    }]);
    return AmountComponent;
  }(_react.default.Component);

  var styles = _reactNative.StyleSheet.create({
    buttonRow: {
      flexDirection: 'row',
      justifyContent: 'space-evenly',
      marginLeft: 10,
      marginRight: 10,
      marginTop: 20
    },
    moneyButton: {
      marginLeft: 3,
      marginRight: 3
    }
  });

  var _default = AmountComponent;
  exports.default = _default;
},475,[1,19,20,27,30,33,46,2,476,786,787]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "withTheme", {
    enumerable: true,
    get: function get() {
      return _theming.withTheme;
    }
  });
  Object.defineProperty(exports, "ThemeProvider", {
    enumerable: true,
    get: function get() {
      return _theming.ThemeProvider;
    }
  });
  Object.defineProperty(exports, "Provider", {
    enumerable: true,
    get: function get() {
      return _Provider.default;
    }
  });
  Object.defineProperty(exports, "DefaultTheme", {
    enumerable: true,
    get: function get() {
      return _DefaultTheme.default;
    }
  });
  Object.defineProperty(exports, "DarkTheme", {
    enumerable: true,
    get: function get() {
      return _DarkTheme.default;
    }
  });
  Object.defineProperty(exports, "Badge", {
    enumerable: true,
    get: function get() {
      return _Badge.default;
    }
  });
  Object.defineProperty(exports, "ActivityIndicator", {
    enumerable: true,
    get: function get() {
      return _ActivityIndicator.default;
    }
  });
  Object.defineProperty(exports, "Banner", {
    enumerable: true,
    get: function get() {
      return _Banner.default;
    }
  });
  Object.defineProperty(exports, "BottomNavigation", {
    enumerable: true,
    get: function get() {
      return _BottomNavigation.default;
    }
  });
  Object.defineProperty(exports, "Button", {
    enumerable: true,
    get: function get() {
      return _Button.default;
    }
  });
  Object.defineProperty(exports, "Card", {
    enumerable: true,
    get: function get() {
      return _Card.default;
    }
  });
  Object.defineProperty(exports, "Checkbox", {
    enumerable: true,
    get: function get() {
      return _Checkbox.default;
    }
  });
  Object.defineProperty(exports, "Chip", {
    enumerable: true,
    get: function get() {
      return _Chip.default;
    }
  });
  Object.defineProperty(exports, "DataTable", {
    enumerable: true,
    get: function get() {
      return _DataTable.default;
    }
  });
  Object.defineProperty(exports, "Dialog", {
    enumerable: true,
    get: function get() {
      return _Dialog.default;
    }
  });
  Object.defineProperty(exports, "Divider", {
    enumerable: true,
    get: function get() {
      return _Divider.default;
    }
  });
  Object.defineProperty(exports, "FAB", {
    enumerable: true,
    get: function get() {
      return _FAB.default;
    }
  });
  Object.defineProperty(exports, "HelperText", {
    enumerable: true,
    get: function get() {
      return _HelperText.default;
    }
  });
  Object.defineProperty(exports, "IconButton", {
    enumerable: true,
    get: function get() {
      return _IconButton.default;
    }
  });
  Object.defineProperty(exports, "Modal", {
    enumerable: true,
    get: function get() {
      return _Modal.default;
    }
  });
  Object.defineProperty(exports, "Portal", {
    enumerable: true,
    get: function get() {
      return _Portal.default;
    }
  });
  Object.defineProperty(exports, "ProgressBar", {
    enumerable: true,
    get: function get() {
      return _ProgressBar.default;
    }
  });
  Object.defineProperty(exports, "RadioButton", {
    enumerable: true,
    get: function get() {
      return _RadioButton.default;
    }
  });
  Object.defineProperty(exports, "Searchbar", {
    enumerable: true,
    get: function get() {
      return _Searchbar.default;
    }
  });
  Object.defineProperty(exports, "Snackbar", {
    enumerable: true,
    get: function get() {
      return _Snackbar.default;
    }
  });
  Object.defineProperty(exports, "Surface", {
    enumerable: true,
    get: function get() {
      return _Surface.default;
    }
  });
  Object.defineProperty(exports, "Switch", {
    enumerable: true,
    get: function get() {
      return _Switch.default;
    }
  });
  Object.defineProperty(exports, "Appbar", {
    enumerable: true,
    get: function get() {
      return _Appbar.default;
    }
  });
  Object.defineProperty(exports, "TouchableRipple", {
    enumerable: true,
    get: function get() {
      return _TouchableRipple.default;
    }
  });
  Object.defineProperty(exports, "TextInput", {
    enumerable: true,
    get: function get() {
      return _TextInput.default;
    }
  });
  Object.defineProperty(exports, "ToggleButton", {
    enumerable: true,
    get: function get() {
      return _ToggleButton.default;
    }
  });
  Object.defineProperty(exports, "Caption", {
    enumerable: true,
    get: function get() {
      return _Caption.default;
    }
  });
  Object.defineProperty(exports, "Headline", {
    enumerable: true,
    get: function get() {
      return _Headline.default;
    }
  });
  Object.defineProperty(exports, "Paragraph", {
    enumerable: true,
    get: function get() {
      return _Paragraph.default;
    }
  });
  Object.defineProperty(exports, "Subheading", {
    enumerable: true,
    get: function get() {
      return _Subheading.default;
    }
  });
  Object.defineProperty(exports, "Title", {
    enumerable: true,
    get: function get() {
      return _Title.default;
    }
  });
  Object.defineProperty(exports, "Text", {
    enumerable: true,
    get: function get() {
      return _Text.default;
    }
  });
  exports.Drawer = exports.List = exports.Avatar = exports.Colors = undefined;

  var Colors = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  exports.Colors = Colors;

  var _theming = _$$_REQUIRE(_dependencyMap[3]);

  var _Provider = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _DefaultTheme = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _DarkTheme = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var Avatar = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  exports.Avatar = Avatar;

  var List = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  exports.List = List;

  var Drawer = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  exports.Drawer = Drawer;

  var _Badge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _ActivityIndicator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Banner = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _BottomNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Button = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _Card = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Checkbox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _Chip = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _DataTable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _Dialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _Divider = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _FAB = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _HelperText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _IconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _Modal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _Portal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var _ProgressBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[26]));

  var _RadioButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[27]));

  var _Searchbar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[28]));

  var _Snackbar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[29]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[30]));

  var _Switch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[31]));

  var _Appbar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[32]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[33]));

  var _TextInput = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[34]));

  var _ToggleButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[35]));

  var _Caption = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[36]));

  var _Headline = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[37]));

  var _Paragraph = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[38]));

  var _Subheading = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[39]));

  var _Title = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[40]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[41]));
},476,[1,361,477,478,496,485,501,502,714,721,725,726,727,731,730,734,742,745,746,754,724,760,762,751,755,497,763,765,769,770,728,771,772,716,778,781,739,783,784,785,741,713]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cyan100 = exports.cyan50 = exports.lightBlueA700 = exports.lightBlueA400 = exports.lightBlueA200 = exports.lightBlueA100 = exports.lightBlue900 = exports.lightBlue800 = exports.lightBlue700 = exports.lightBlue600 = exports.lightBlue500 = exports.lightBlue400 = exports.lightBlue300 = exports.lightBlue200 = exports.lightBlue100 = exports.lightBlue50 = exports.blueA700 = exports.blueA400 = exports.blueA200 = exports.blueA100 = exports.blue900 = exports.blue800 = exports.blue700 = exports.blue600 = exports.blue500 = exports.blue400 = exports.blue300 = exports.blue200 = exports.blue100 = exports.blue50 = exports.indigoA700 = exports.indigoA400 = exports.indigoA200 = exports.indigoA100 = exports.indigo900 = exports.indigo800 = exports.indigo700 = exports.indigo600 = exports.indigo500 = exports.indigo400 = exports.indigo300 = exports.indigo200 = exports.indigo100 = exports.indigo50 = exports.deepPurpleA700 = exports.deepPurpleA400 = exports.deepPurpleA200 = exports.deepPurpleA100 = exports.deepPurple900 = exports.deepPurple800 = exports.deepPurple700 = exports.deepPurple600 = exports.deepPurple500 = exports.deepPurple400 = exports.deepPurple300 = exports.deepPurple200 = exports.deepPurple100 = exports.deepPurple50 = exports.purpleA700 = exports.purpleA400 = exports.purpleA200 = exports.purpleA100 = exports.purple900 = exports.purple800 = exports.purple700 = exports.purple600 = exports.purple500 = exports.purple400 = exports.purple300 = exports.purple200 = exports.purple100 = exports.purple50 = exports.pinkA700 = exports.pinkA400 = exports.pinkA200 = exports.pinkA100 = exports.pink900 = exports.pink800 = exports.pink700 = exports.pink600 = exports.pink500 = exports.pink400 = exports.pink300 = exports.pink200 = exports.pink100 = exports.pink50 = exports.redA700 = exports.redA400 = exports.redA200 = exports.redA100 = exports.red900 = exports.red800 = exports.red700 = exports.red600 = exports.red500 = exports.red400 = exports.red300 = exports.red200 = exports.red100 = exports.red50 = undefined;
  exports.orange300 = exports.orange200 = exports.orange100 = exports.orange50 = exports.amberA700 = exports.amberA400 = exports.amberA200 = exports.amberA100 = exports.amber900 = exports.amber800 = exports.amber700 = exports.amber600 = exports.amber500 = exports.amber400 = exports.amber300 = exports.amber200 = exports.amber100 = exports.amber50 = exports.yellowA700 = exports.yellowA400 = exports.yellowA200 = exports.yellowA100 = exports.yellow900 = exports.yellow800 = exports.yellow700 = exports.yellow600 = exports.yellow500 = exports.yellow400 = exports.yellow300 = exports.yellow200 = exports.yellow100 = exports.yellow50 = exports.limeA700 = exports.limeA400 = exports.limeA200 = exports.limeA100 = exports.lime900 = exports.lime800 = exports.lime700 = exports.lime600 = exports.lime500 = exports.lime400 = exports.lime300 = exports.lime200 = exports.lime100 = exports.lime50 = exports.lightGreenA700 = exports.lightGreenA400 = exports.lightGreenA200 = exports.lightGreenA100 = exports.lightGreen900 = exports.lightGreen800 = exports.lightGreen700 = exports.lightGreen600 = exports.lightGreen500 = exports.lightGreen400 = exports.lightGreen300 = exports.lightGreen200 = exports.lightGreen100 = exports.lightGreen50 = exports.greenA700 = exports.greenA400 = exports.greenA200 = exports.greenA100 = exports.green900 = exports.green800 = exports.green700 = exports.green600 = exports.green500 = exports.green400 = exports.green300 = exports.green200 = exports.green100 = exports.green50 = exports.tealA700 = exports.tealA400 = exports.tealA200 = exports.tealA100 = exports.teal900 = exports.teal800 = exports.teal700 = exports.teal600 = exports.teal500 = exports.teal400 = exports.teal300 = exports.teal200 = exports.teal100 = exports.teal50 = exports.cyanA700 = exports.cyanA400 = exports.cyanA200 = exports.cyanA100 = exports.cyan900 = exports.cyan800 = exports.cyan700 = exports.cyan600 = exports.cyan500 = exports.cyan400 = exports.cyan300 = exports.cyan200 = undefined;
  exports.white = exports.black = exports.grey900 = exports.grey800 = exports.grey700 = exports.grey600 = exports.grey500 = exports.grey400 = exports.grey300 = exports.grey200 = exports.grey100 = exports.grey50 = exports.blueGrey900 = exports.blueGrey800 = exports.blueGrey700 = exports.blueGrey600 = exports.blueGrey500 = exports.blueGrey400 = exports.blueGrey300 = exports.blueGrey200 = exports.blueGrey100 = exports.blueGrey50 = exports.brown900 = exports.brown800 = exports.brown700 = exports.brown600 = exports.brown500 = exports.brown400 = exports.brown300 = exports.brown200 = exports.brown100 = exports.brown50 = exports.deepOrangeA700 = exports.deepOrangeA400 = exports.deepOrangeA200 = exports.deepOrangeA100 = exports.deepOrange900 = exports.deepOrange800 = exports.deepOrange700 = exports.deepOrange600 = exports.deepOrange500 = exports.deepOrange400 = exports.deepOrange300 = exports.deepOrange200 = exports.deepOrange100 = exports.deepOrange50 = exports.orangeA700 = exports.orangeA400 = exports.orangeA200 = exports.orangeA100 = exports.orange900 = exports.orange800 = exports.orange700 = exports.orange600 = exports.orange500 = exports.orange400 = undefined;
  var red50 = '#ffebee';
  exports.red50 = red50;
  var red100 = '#ffcdd2';
  exports.red100 = red100;
  var red200 = '#ef9a9a';
  exports.red200 = red200;
  var red300 = '#e57373';
  exports.red300 = red300;
  var red400 = '#ef5350';
  exports.red400 = red400;
  var red500 = '#f44336';
  exports.red500 = red500;
  var red600 = '#e53935';
  exports.red600 = red600;
  var red700 = '#d32f2f';
  exports.red700 = red700;
  var red800 = '#c62828';
  exports.red800 = red800;
  var red900 = '#b71c1c';
  exports.red900 = red900;
  var redA100 = '#ff8a80';
  exports.redA100 = redA100;
  var redA200 = '#ff5252';
  exports.redA200 = redA200;
  var redA400 = '#ff1744';
  exports.redA400 = redA400;
  var redA700 = '#d50000';
  exports.redA700 = redA700;
  var pink50 = '#fce4ec';
  exports.pink50 = pink50;
  var pink100 = '#f8bbd0';
  exports.pink100 = pink100;
  var pink200 = '#f48fb1';
  exports.pink200 = pink200;
  var pink300 = '#f06292';
  exports.pink300 = pink300;
  var pink400 = '#ec407a';
  exports.pink400 = pink400;
  var pink500 = '#e91e63';
  exports.pink500 = pink500;
  var pink600 = '#d81b60';
  exports.pink600 = pink600;
  var pink700 = '#c2185b';
  exports.pink700 = pink700;
  var pink800 = '#ad1457';
  exports.pink800 = pink800;
  var pink900 = '#880e4f';
  exports.pink900 = pink900;
  var pinkA100 = '#ff80ab';
  exports.pinkA100 = pinkA100;
  var pinkA200 = '#ff4081';
  exports.pinkA200 = pinkA200;
  var pinkA400 = '#f50057';
  exports.pinkA400 = pinkA400;
  var pinkA700 = '#c51162';
  exports.pinkA700 = pinkA700;
  var purple50 = '#f3e5f5';
  exports.purple50 = purple50;
  var purple100 = '#e1bee7';
  exports.purple100 = purple100;
  var purple200 = '#ce93d8';
  exports.purple200 = purple200;
  var purple300 = '#ba68c8';
  exports.purple300 = purple300;
  var purple400 = '#ab47bc';
  exports.purple400 = purple400;
  var purple500 = '#9c27b0';
  exports.purple500 = purple500;
  var purple600 = '#8e24aa';
  exports.purple600 = purple600;
  var purple700 = '#7b1fa2';
  exports.purple700 = purple700;
  var purple800 = '#6a1b9a';
  exports.purple800 = purple800;
  var purple900 = '#4a148c';
  exports.purple900 = purple900;
  var purpleA100 = '#ea80fc';
  exports.purpleA100 = purpleA100;
  var purpleA200 = '#e040fb';
  exports.purpleA200 = purpleA200;
  var purpleA400 = '#d500f9';
  exports.purpleA400 = purpleA400;
  var purpleA700 = '#aa00ff';
  exports.purpleA700 = purpleA700;
  var deepPurple50 = '#ede7f6';
  exports.deepPurple50 = deepPurple50;
  var deepPurple100 = '#d1c4e9';
  exports.deepPurple100 = deepPurple100;
  var deepPurple200 = '#b39ddb';
  exports.deepPurple200 = deepPurple200;
  var deepPurple300 = '#9575cd';
  exports.deepPurple300 = deepPurple300;
  var deepPurple400 = '#7e57c2';
  exports.deepPurple400 = deepPurple400;
  var deepPurple500 = '#673ab7';
  exports.deepPurple500 = deepPurple500;
  var deepPurple600 = '#5e35b1';
  exports.deepPurple600 = deepPurple600;
  var deepPurple700 = '#512da8';
  exports.deepPurple700 = deepPurple700;
  var deepPurple800 = '#4527a0';
  exports.deepPurple800 = deepPurple800;
  var deepPurple900 = '#311b92';
  exports.deepPurple900 = deepPurple900;
  var deepPurpleA100 = '#b388ff';
  exports.deepPurpleA100 = deepPurpleA100;
  var deepPurpleA200 = '#7c4dff';
  exports.deepPurpleA200 = deepPurpleA200;
  var deepPurpleA400 = '#651fff';
  exports.deepPurpleA400 = deepPurpleA400;
  var deepPurpleA700 = '#6200ea';
  exports.deepPurpleA700 = deepPurpleA700;
  var indigo50 = '#e8eaf6';
  exports.indigo50 = indigo50;
  var indigo100 = '#c5cae9';
  exports.indigo100 = indigo100;
  var indigo200 = '#9fa8da';
  exports.indigo200 = indigo200;
  var indigo300 = '#7986cb';
  exports.indigo300 = indigo300;
  var indigo400 = '#5c6bc0';
  exports.indigo400 = indigo400;
  var indigo500 = '#3f51b5';
  exports.indigo500 = indigo500;
  var indigo600 = '#3949ab';
  exports.indigo600 = indigo600;
  var indigo700 = '#303f9f';
  exports.indigo700 = indigo700;
  var indigo800 = '#283593';
  exports.indigo800 = indigo800;
  var indigo900 = '#1a237e';
  exports.indigo900 = indigo900;
  var indigoA100 = '#8c9eff';
  exports.indigoA100 = indigoA100;
  var indigoA200 = '#536dfe';
  exports.indigoA200 = indigoA200;
  var indigoA400 = '#3d5afe';
  exports.indigoA400 = indigoA400;
  var indigoA700 = '#304ffe';
  exports.indigoA700 = indigoA700;
  var blue50 = '#e3f2fd';
  exports.blue50 = blue50;
  var blue100 = '#bbdefb';
  exports.blue100 = blue100;
  var blue200 = '#90caf9';
  exports.blue200 = blue200;
  var blue300 = '#64b5f6';
  exports.blue300 = blue300;
  var blue400 = '#42a5f5';
  exports.blue400 = blue400;
  var blue500 = '#2196f3';
  exports.blue500 = blue500;
  var blue600 = '#1e88e5';
  exports.blue600 = blue600;
  var blue700 = '#1976d2';
  exports.blue700 = blue700;
  var blue800 = '#1565c0';
  exports.blue800 = blue800;
  var blue900 = '#0d47a1';
  exports.blue900 = blue900;
  var blueA100 = '#82b1ff';
  exports.blueA100 = blueA100;
  var blueA200 = '#448aff';
  exports.blueA200 = blueA200;
  var blueA400 = '#2979ff';
  exports.blueA400 = blueA400;
  var blueA700 = '#2962ff';
  exports.blueA700 = blueA700;
  var lightBlue50 = '#e1f5fe';
  exports.lightBlue50 = lightBlue50;
  var lightBlue100 = '#b3e5fc';
  exports.lightBlue100 = lightBlue100;
  var lightBlue200 = '#81d4fa';
  exports.lightBlue200 = lightBlue200;
  var lightBlue300 = '#4fc3f7';
  exports.lightBlue300 = lightBlue300;
  var lightBlue400 = '#29b6f6';
  exports.lightBlue400 = lightBlue400;
  var lightBlue500 = '#03a9f4';
  exports.lightBlue500 = lightBlue500;
  var lightBlue600 = '#039be5';
  exports.lightBlue600 = lightBlue600;
  var lightBlue700 = '#0288d1';
  exports.lightBlue700 = lightBlue700;
  var lightBlue800 = '#0277bd';
  exports.lightBlue800 = lightBlue800;
  var lightBlue900 = '#01579b';
  exports.lightBlue900 = lightBlue900;
  var lightBlueA100 = '#80d8ff';
  exports.lightBlueA100 = lightBlueA100;
  var lightBlueA200 = '#40c4ff';
  exports.lightBlueA200 = lightBlueA200;
  var lightBlueA400 = '#00b0ff';
  exports.lightBlueA400 = lightBlueA400;
  var lightBlueA700 = '#0091ea';
  exports.lightBlueA700 = lightBlueA700;
  var cyan50 = '#e0f7fa';
  exports.cyan50 = cyan50;
  var cyan100 = '#b2ebf2';
  exports.cyan100 = cyan100;
  var cyan200 = '#80deea';
  exports.cyan200 = cyan200;
  var cyan300 = '#4dd0e1';
  exports.cyan300 = cyan300;
  var cyan400 = '#26c6da';
  exports.cyan400 = cyan400;
  var cyan500 = '#00bcd4';
  exports.cyan500 = cyan500;
  var cyan600 = '#00acc1';
  exports.cyan600 = cyan600;
  var cyan700 = '#0097a7';
  exports.cyan700 = cyan700;
  var cyan800 = '#00838f';
  exports.cyan800 = cyan800;
  var cyan900 = '#006064';
  exports.cyan900 = cyan900;
  var cyanA100 = '#84ffff';
  exports.cyanA100 = cyanA100;
  var cyanA200 = '#18ffff';
  exports.cyanA200 = cyanA200;
  var cyanA400 = '#00e5ff';
  exports.cyanA400 = cyanA400;
  var cyanA700 = '#00b8d4';
  exports.cyanA700 = cyanA700;
  var teal50 = '#e0f2f1';
  exports.teal50 = teal50;
  var teal100 = '#b2dfdb';
  exports.teal100 = teal100;
  var teal200 = '#80cbc4';
  exports.teal200 = teal200;
  var teal300 = '#4db6ac';
  exports.teal300 = teal300;
  var teal400 = '#26a69a';
  exports.teal400 = teal400;
  var teal500 = '#009688';
  exports.teal500 = teal500;
  var teal600 = '#00897b';
  exports.teal600 = teal600;
  var teal700 = '#00796b';
  exports.teal700 = teal700;
  var teal800 = '#00695c';
  exports.teal800 = teal800;
  var teal900 = '#004d40';
  exports.teal900 = teal900;
  var tealA100 = '#a7ffeb';
  exports.tealA100 = tealA100;
  var tealA200 = '#64ffda';
  exports.tealA200 = tealA200;
  var tealA400 = '#1de9b6';
  exports.tealA400 = tealA400;
  var tealA700 = '#00bfa5';
  exports.tealA700 = tealA700;
  var green50 = '#e8f5e9';
  exports.green50 = green50;
  var green100 = '#c8e6c9';
  exports.green100 = green100;
  var green200 = '#a5d6a7';
  exports.green200 = green200;
  var green300 = '#81c784';
  exports.green300 = green300;
  var green400 = '#66bb6a';
  exports.green400 = green400;
  var green500 = '#4caf50';
  exports.green500 = green500;
  var green600 = '#43a047';
  exports.green600 = green600;
  var green700 = '#388e3c';
  exports.green700 = green700;
  var green800 = '#2e7d32';
  exports.green800 = green800;
  var green900 = '#1b5e20';
  exports.green900 = green900;
  var greenA100 = '#b9f6ca';
  exports.greenA100 = greenA100;
  var greenA200 = '#69f0ae';
  exports.greenA200 = greenA200;
  var greenA400 = '#00e676';
  exports.greenA400 = greenA400;
  var greenA700 = '#00c853';
  exports.greenA700 = greenA700;
  var lightGreen50 = '#f1f8e9';
  exports.lightGreen50 = lightGreen50;
  var lightGreen100 = '#dcedc8';
  exports.lightGreen100 = lightGreen100;
  var lightGreen200 = '#c5e1a5';
  exports.lightGreen200 = lightGreen200;
  var lightGreen300 = '#aed581';
  exports.lightGreen300 = lightGreen300;
  var lightGreen400 = '#9ccc65';
  exports.lightGreen400 = lightGreen400;
  var lightGreen500 = '#8bc34a';
  exports.lightGreen500 = lightGreen500;
  var lightGreen600 = '#7cb342';
  exports.lightGreen600 = lightGreen600;
  var lightGreen700 = '#689f38';
  exports.lightGreen700 = lightGreen700;
  var lightGreen800 = '#558b2f';
  exports.lightGreen800 = lightGreen800;
  var lightGreen900 = '#33691e';
  exports.lightGreen900 = lightGreen900;
  var lightGreenA100 = '#ccff90';
  exports.lightGreenA100 = lightGreenA100;
  var lightGreenA200 = '#b2ff59';
  exports.lightGreenA200 = lightGreenA200;
  var lightGreenA400 = '#76ff03';
  exports.lightGreenA400 = lightGreenA400;
  var lightGreenA700 = '#64dd17';
  exports.lightGreenA700 = lightGreenA700;
  var lime50 = '#f9fbe7';
  exports.lime50 = lime50;
  var lime100 = '#f0f4c3';
  exports.lime100 = lime100;
  var lime200 = '#e6ee9c';
  exports.lime200 = lime200;
  var lime300 = '#dce775';
  exports.lime300 = lime300;
  var lime400 = '#d4e157';
  exports.lime400 = lime400;
  var lime500 = '#cddc39';
  exports.lime500 = lime500;
  var lime600 = '#c0ca33';
  exports.lime600 = lime600;
  var lime700 = '#afb42b';
  exports.lime700 = lime700;
  var lime800 = '#9e9d24';
  exports.lime800 = lime800;
  var lime900 = '#827717';
  exports.lime900 = lime900;
  var limeA100 = '#f4ff81';
  exports.limeA100 = limeA100;
  var limeA200 = '#eeff41';
  exports.limeA200 = limeA200;
  var limeA400 = '#c6ff00';
  exports.limeA400 = limeA400;
  var limeA700 = '#aeea00';
  exports.limeA700 = limeA700;
  var yellow50 = '#fffde7';
  exports.yellow50 = yellow50;
  var yellow100 = '#fff9c4';
  exports.yellow100 = yellow100;
  var yellow200 = '#fff59d';
  exports.yellow200 = yellow200;
  var yellow300 = '#fff176';
  exports.yellow300 = yellow300;
  var yellow400 = '#ffee58';
  exports.yellow400 = yellow400;
  var yellow500 = '#ffeb3b';
  exports.yellow500 = yellow500;
  var yellow600 = '#fdd835';
  exports.yellow600 = yellow600;
  var yellow700 = '#fbc02d';
  exports.yellow700 = yellow700;
  var yellow800 = '#f9a825';
  exports.yellow800 = yellow800;
  var yellow900 = '#f57f17';
  exports.yellow900 = yellow900;
  var yellowA100 = '#ffff8d';
  exports.yellowA100 = yellowA100;
  var yellowA200 = '#ffff00';
  exports.yellowA200 = yellowA200;
  var yellowA400 = '#ffea00';
  exports.yellowA400 = yellowA400;
  var yellowA700 = '#ffd600';
  exports.yellowA700 = yellowA700;
  var amber50 = '#fff8e1';
  exports.amber50 = amber50;
  var amber100 = '#ffecb3';
  exports.amber100 = amber100;
  var amber200 = '#ffe082';
  exports.amber200 = amber200;
  var amber300 = '#ffd54f';
  exports.amber300 = amber300;
  var amber400 = '#ffca28';
  exports.amber400 = amber400;
  var amber500 = '#ffc107';
  exports.amber500 = amber500;
  var amber600 = '#ffb300';
  exports.amber600 = amber600;
  var amber700 = '#ffa000';
  exports.amber700 = amber700;
  var amber800 = '#ff8f00';
  exports.amber800 = amber800;
  var amber900 = '#ff6f00';
  exports.amber900 = amber900;
  var amberA100 = '#ffe57f';
  exports.amberA100 = amberA100;
  var amberA200 = '#ffd740';
  exports.amberA200 = amberA200;
  var amberA400 = '#ffc400';
  exports.amberA400 = amberA400;
  var amberA700 = '#ffab00';
  exports.amberA700 = amberA700;
  var orange50 = '#fff3e0';
  exports.orange50 = orange50;
  var orange100 = '#ffe0b2';
  exports.orange100 = orange100;
  var orange200 = '#ffcc80';
  exports.orange200 = orange200;
  var orange300 = '#ffb74d';
  exports.orange300 = orange300;
  var orange400 = '#ffa726';
  exports.orange400 = orange400;
  var orange500 = '#ff9800';
  exports.orange500 = orange500;
  var orange600 = '#fb8c00';
  exports.orange600 = orange600;
  var orange700 = '#f57c00';
  exports.orange700 = orange700;
  var orange800 = '#ef6c00';
  exports.orange800 = orange800;
  var orange900 = '#e65100';
  exports.orange900 = orange900;
  var orangeA100 = '#ffd180';
  exports.orangeA100 = orangeA100;
  var orangeA200 = '#ffab40';
  exports.orangeA200 = orangeA200;
  var orangeA400 = '#ff9100';
  exports.orangeA400 = orangeA400;
  var orangeA700 = '#ff6d00';
  exports.orangeA700 = orangeA700;
  var deepOrange50 = '#fbe9e7';
  exports.deepOrange50 = deepOrange50;
  var deepOrange100 = '#ffccbc';
  exports.deepOrange100 = deepOrange100;
  var deepOrange200 = '#ffab91';
  exports.deepOrange200 = deepOrange200;
  var deepOrange300 = '#ff8a65';
  exports.deepOrange300 = deepOrange300;
  var deepOrange400 = '#ff7043';
  exports.deepOrange400 = deepOrange400;
  var deepOrange500 = '#ff5722';
  exports.deepOrange500 = deepOrange500;
  var deepOrange600 = '#f4511e';
  exports.deepOrange600 = deepOrange600;
  var deepOrange700 = '#e64a19';
  exports.deepOrange700 = deepOrange700;
  var deepOrange800 = '#d84315';
  exports.deepOrange800 = deepOrange800;
  var deepOrange900 = '#bf360c';
  exports.deepOrange900 = deepOrange900;
  var deepOrangeA100 = '#ff9e80';
  exports.deepOrangeA100 = deepOrangeA100;
  var deepOrangeA200 = '#ff6e40';
  exports.deepOrangeA200 = deepOrangeA200;
  var deepOrangeA400 = '#ff3d00';
  exports.deepOrangeA400 = deepOrangeA400;
  var deepOrangeA700 = '#dd2c00';
  exports.deepOrangeA700 = deepOrangeA700;
  var brown50 = '#efebe9';
  exports.brown50 = brown50;
  var brown100 = '#d7ccc8';
  exports.brown100 = brown100;
  var brown200 = '#bcaaa4';
  exports.brown200 = brown200;
  var brown300 = '#a1887f';
  exports.brown300 = brown300;
  var brown400 = '#8d6e63';
  exports.brown400 = brown400;
  var brown500 = '#795548';
  exports.brown500 = brown500;
  var brown600 = '#6d4c41';
  exports.brown600 = brown600;
  var brown700 = '#5d4037';
  exports.brown700 = brown700;
  var brown800 = '#4e342e';
  exports.brown800 = brown800;
  var brown900 = '#3e2723';
  exports.brown900 = brown900;
  var blueGrey50 = '#eceff1';
  exports.blueGrey50 = blueGrey50;
  var blueGrey100 = '#cfd8dc';
  exports.blueGrey100 = blueGrey100;
  var blueGrey200 = '#b0bec5';
  exports.blueGrey200 = blueGrey200;
  var blueGrey300 = '#90a4ae';
  exports.blueGrey300 = blueGrey300;
  var blueGrey400 = '#78909c';
  exports.blueGrey400 = blueGrey400;
  var blueGrey500 = '#607d8b';
  exports.blueGrey500 = blueGrey500;
  var blueGrey600 = '#546e7a';
  exports.blueGrey600 = blueGrey600;
  var blueGrey700 = '#455a64';
  exports.blueGrey700 = blueGrey700;
  var blueGrey800 = '#37474f';
  exports.blueGrey800 = blueGrey800;
  var blueGrey900 = '#263238';
  exports.blueGrey900 = blueGrey900;
  var grey50 = '#fafafa';
  exports.grey50 = grey50;
  var grey100 = '#f5f5f5';
  exports.grey100 = grey100;
  var grey200 = '#eeeeee';
  exports.grey200 = grey200;
  var grey300 = '#e0e0e0';
  exports.grey300 = grey300;
  var grey400 = '#bdbdbd';
  exports.grey400 = grey400;
  var grey500 = '#9e9e9e';
  exports.grey500 = grey500;
  var grey600 = '#757575';
  exports.grey600 = grey600;
  var grey700 = '#616161';
  exports.grey700 = grey700;
  var grey800 = '#424242';
  exports.grey800 = grey800;
  var grey900 = '#212121';
  exports.grey900 = grey900;
  var black = '#000000';
  exports.black = black;
  var white = '#ffffff';
  exports.white = white;
},477,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.withTheme = exports.ThemeProvider = undefined;

  var _reactThemeProvider = _$$_REQUIRE(_dependencyMap[1]);

  var _DefaultTheme = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createTheming = (0, _reactThemeProvider.createTheming)(_DefaultTheme.default),
      ThemeProvider = _createTheming.ThemeProvider,
      withTheme = _createTheming.withTheme;

  exports.withTheme = withTheme;
  exports.ThemeProvider = ThemeProvider;
},478,[1,479,485]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createTheming = exports.withTheme = exports.ThemeProvider = undefined;

  var _createTheming2 = _$$_REQUIRE(_dependencyMap[0]);

  var _createTheming3 = _interopRequireDefault(_createTheming2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _createTheming = (0, _createTheming3.default)({}),
      ThemeProvider = _createTheming.ThemeProvider,
      withTheme = _createTheming.withTheme;

  exports.ThemeProvider = ThemeProvider;
  exports.withTheme = withTheme;
  exports.createTheming = _createTheming3.default;
},479,[480]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createTheming;

  var _createReactContext = _$$_REQUIRE(_dependencyMap[0]);

  var _createReactContext2 = _interopRequireDefault(_createReactContext);

  var _createThemeProvider = _$$_REQUIRE(_dependencyMap[1]);

  var _createThemeProvider2 = _interopRequireDefault(_createThemeProvider);

  var _createWithTheme = _$$_REQUIRE(_dependencyMap[2]);

  var _createWithTheme2 = _interopRequireDefault(_createWithTheme);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function createTheming(defaultTheme) {
    var ThemeContext = (0, _createReactContext2.default)(defaultTheme);
    var ThemeProvider = (0, _createThemeProvider2.default)(defaultTheme, ThemeContext);
    var withTheme = (0, _createWithTheme2.default)(ThemeProvider, ThemeContext);
    return {
      ThemeProvider: ThemeProvider,
      withTheme: withTheme
    };
  }
},480,[346,481,482]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = _$$_REQUIRE(_dependencyMap[0]);

  var React = _interopRequireWildcard(_react);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function createThemeProvider(defaultTheme, ThemeContext) {
    var _class, _temp;

    return _temp = _class = function (_React$PureComponent) {
      _inherits(ThemeProvider, _React$PureComponent);

      function ThemeProvider() {
        _classCallCheck(this, ThemeProvider);

        return _possibleConstructorReturn(this, (ThemeProvider.__proto__ || Object.getPrototypeOf(ThemeProvider)).apply(this, arguments));
      }

      _createClass(ThemeProvider, [{
        key: 'render',
        value: function render() {
          return React.createElement(ThemeContext.Provider, {
            value: this.props.theme
          }, this.props.children);
        }
      }]);

      return ThemeProvider;
    }(React.PureComponent), _class.defaultProps = {
      theme: defaultTheme
    }, _temp;
  }

  exports.default = createThemeProvider;
},481,[46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react = _$$_REQUIRE(_dependencyMap[0]);

  var React = _interopRequireWildcard(_react);

  var _deepmerge = _$$_REQUIRE(_dependencyMap[1]);

  var _deepmerge2 = _interopRequireDefault(_deepmerge);

  var _hoistNonReactStatics = _$$_REQUIRE(_dependencyMap[2]);

  var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

  var _utils = _$$_REQUIRE(_dependencyMap[3]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var isClassComponent = function isClassComponent(Component) {
    return Boolean(Component.prototype && Component.prototype.isReactComponent);
  };

  var createWithTheme = function createWithTheme(ThemeProvider, ThemeContext) {
    return function withTheme(Comp) {
      var ThemedComponent = function (_React$Component) {
        _inherits(ThemedComponent, _React$Component);

        function ThemedComponent() {
          var _ref;

          var _temp, _this, _ret;

          _classCallCheck(this, ThemedComponent);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ThemedComponent.__proto__ || Object.getPrototypeOf(ThemedComponent)).call.apply(_ref, [this].concat(args))), _this), _this._merge = function (a, b) {
            var previous = _this._previous;

            if (previous && previous.a === a && previous.b === b) {
              return previous.result;
            }

            var result = a && b ? (0, _deepmerge2.default)(a, b) : a || b;
            _this._previous = {
              a: a,
              b: b,
              result: result
            };
            return result;
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(ThemedComponent, [{
          key: 'render',
          value: function render() {
            var _this2 = this;

            var _props = this.props,
                forwardedRef = _props.forwardedRef,
                rest = _objectWithoutProperties(_props, ['forwardedRef']);

            return React.createElement(ThemeContext.Consumer, null, function (theme) {
              var merged = _this2._merge(theme, _this2.props.theme);

              var element = undefined;

              if (isClassComponent(Comp)) {
                element = React.createElement(Comp, _extends({}, rest, {
                  ref: function ref(c) {
                    _this2._root = c;
                  },
                  theme: merged
                }));
              } else {
                element = React.createElement(Comp, _extends({}, rest, {
                  theme: merged
                }));
              }

              if (merged !== _this2.props.theme) {
                return React.createElement(ThemeProvider, {
                  theme: merged
                }, element);
              }

              return element;
            });
          }
        }]);

        return ThemedComponent;
      }(React.Component);

      ThemedComponent.displayName = 'withTheme(' + (Comp.displayName || Comp.name) + ')';
      var ComponentWithMethods = ThemedComponent;

      if (isClassComponent(Comp)) {
        ComponentWithMethods.prototype.getWrappedInstance = function getWrappedInstance() {
          return this._root.getWrappedInstance ? this._root.getWrappedInstance() : this._root;
        };

        ComponentWithMethods = (0, _utils.copyRefs)(ComponentWithMethods, Comp);
      }

      (0, _hoistNonReactStatics2.default)(ComponentWithMethods, Comp);
      return ComponentWithMethods;
    };
  };

  exports.default = createWithTheme;
},482,[46,483,399,484]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.deepmerge = factory();
  })(this, function () {
    'use strict';

    var isMergeableObject = function isMergeableObject(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };

    function isNonNullObject(value) {
      return !!value && typeof value === 'object';
    }

    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
    }

    var canUseSymbol = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.for : "@@for");
    var REACT_ELEMENT_TYPE = canUseSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.element') : 0xeac7;

    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }

    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }

    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function (element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }

    function mergeObject(target, source, options) {
      var destination = {};

      if (options.isMergeableObject(target)) {
        Object.keys(target).forEach(function (key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }

      Object.keys(source).forEach(function (key) {
        if (!options.isMergeableObject(source[key]) || !target[key]) {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        } else {
          destination[key] = deepmerge(target[key], source[key], options);
        }
      });
      return destination;
    }

    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }

    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error('first argument should be an array');
      }

      return array.reduce(function (prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };

    var deepmerge_1 = deepmerge;
    return deepmerge_1;
  });
},483,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.copyRefs = copyRefs;

  var _react = _$$_REQUIRE(_dependencyMap[0]);

  var React = _interopRequireWildcard(_react);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var REACT_METHODS = ['autobind', 'childContextTypes', 'componentDidMount', 'componentDidUpdate', 'componentWillMount', 'componentWillReceiveProps', 'componentWillUnmount', 'componentWillUpdate', 'contextTypes', 'displayName', 'getChildContext', 'getDefaultProps', 'getDOMNode', 'getInitialState', 'mixins', 'propTypes', 'render', 'replaceProps', 'setProps', 'shouldComponentUpdate', 'statics', 'updateComponent'];

  function copyRefs(TargetComponent, SourceComponent) {
    if (!SourceComponent.prototype) {
      return TargetComponent;
    }

    Object.getOwnPropertyNames(SourceComponent.prototype).filter(function (prop) {
      return !(REACT_METHODS.includes(prop) || prop in React.Component.prototype || prop in TargetComponent.prototype || prop.startsWith('_'));
    }).forEach(function (prop) {
      if (typeof SourceComponent.prototype[prop] === 'function') {
        TargetComponent.prototype[prop] = function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return SourceComponent.prototype[prop].apply(this.getWrappedInstance(), args);
        };
      } else {
        Object.defineProperty(TargetComponent.prototype, prop, {
          get: function get() {
            return this.getWrappedInstance()[prop];
          },
          set: function set(value) {
            this.getWrappedInstance()[prop] = value;
          }
        });
      }
    });
    return TargetComponent;
  }
},484,[46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _colors = _$$_REQUIRE(_dependencyMap[2]);

  var _fonts = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _default = {
    dark: false,
    roundness: 4,
    colors: {
      primary: '#6200ee',
      accent: '#03dac4',
      background: '#f6f6f6',
      surface: _colors.white,
      error: '#B00020',
      text: _colors.black,
      disabled: (0, _color.default)(_colors.black).alpha(0.26).rgb().string(),
      placeholder: (0, _color.default)(_colors.black).alpha(0.54).rgb().string(),
      backdrop: (0, _color.default)(_colors.black).alpha(0.5).rgb().string(),
      notification: _colors.pinkA400
    },
    fonts: _fonts.default
  };
  exports.default = _default;
},485,[1,486,477,495]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var colorString = _$$_REQUIRE(_dependencyMap[0]);

  var convert = _$$_REQUIRE(_dependencyMap[1]);

  var _slice = [].slice;
  var skippedModels = ['keyword', 'gray', 'hex'];
  var hashedModelKeys = {};
  Object.keys(convert).forEach(function (model) {
    hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
  });
  var limiters = {};

  function Color(obj, model) {
    if (!(this instanceof Color)) {
      return new Color(obj, model);
    }

    if (model && model in skippedModels) {
      model = null;
    }

    if (model && !(model in convert)) {
      throw new Error('Unknown model: ' + model);
    }

    var i;
    var channels;

    if (!obj) {
      this.model = 'rgb';
      this.color = [0, 0, 0];
      this.valpha = 1;
    } else if (obj instanceof Color) {
      this.model = obj.model;
      this.color = obj.color.slice();
      this.valpha = obj.valpha;
    } else if (typeof obj === 'string') {
      var result = colorString.get(obj);

      if (result === null) {
        throw new Error('Unable to parse color from string: ' + obj);
      }

      this.model = result.model;
      channels = convert[this.model].channels;
      this.color = result.value.slice(0, channels);
      this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
    } else if (obj.length) {
      this.model = model || 'rgb';
      channels = convert[this.model].channels;

      var newArr = _slice.call(obj, 0, channels);

      this.color = zeroArray(newArr, channels);
      this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
    } else if (typeof obj === 'number') {
      obj &= 0xFFFFFF;
      this.model = 'rgb';
      this.color = [obj >> 16 & 0xFF, obj >> 8 & 0xFF, obj & 0xFF];
      this.valpha = 1;
    } else {
      this.valpha = 1;
      var keys = Object.keys(obj);

      if ('alpha' in obj) {
        keys.splice(keys.indexOf('alpha'), 1);
        this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
      }

      var hashedKeys = keys.sort().join('');

      if (!(hashedKeys in hashedModelKeys)) {
        throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
      }

      this.model = hashedModelKeys[hashedKeys];
      var labels = convert[this.model].labels;
      var color = [];

      for (i = 0; i < labels.length; i++) {
        color.push(obj[labels[i]]);
      }

      this.color = zeroArray(color);
    }

    if (limiters[this.model]) {
      channels = convert[this.model].channels;

      for (i = 0; i < channels; i++) {
        var limit = limiters[this.model][i];

        if (limit) {
          this.color[i] = limit(this.color[i]);
        }
      }
    }

    this.valpha = Math.max(0, Math.min(1, this.valpha));

    if (Object.freeze) {
      Object.freeze(this);
    }
  }

  Color.prototype = {
    toString: function toString() {
      return this.string();
    },
    toJSON: function toJSON() {
      return this[this.model]();
    },
    string: function string(places) {
      var self = this.model in colorString.to ? this : this.rgb();
      self = self.round(typeof places === 'number' ? places : 1);
      var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
      return colorString.to[self.model](args);
    },
    percentString: function percentString(places) {
      var self = this.rgb().round(typeof places === 'number' ? places : 1);
      var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
      return colorString.to.rgb.percent(args);
    },
    array: function array() {
      return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
    },
    object: function object() {
      var result = {};
      var channels = convert[this.model].channels;
      var labels = convert[this.model].labels;

      for (var i = 0; i < channels; i++) {
        result[labels[i]] = this.color[i];
      }

      if (this.valpha !== 1) {
        result.alpha = this.valpha;
      }

      return result;
    },
    unitArray: function unitArray() {
      var rgb = this.rgb().color;
      rgb[0] /= 255;
      rgb[1] /= 255;
      rgb[2] /= 255;

      if (this.valpha !== 1) {
        rgb.push(this.valpha);
      }

      return rgb;
    },
    unitObject: function unitObject() {
      var rgb = this.rgb().object();
      rgb.r /= 255;
      rgb.g /= 255;
      rgb.b /= 255;

      if (this.valpha !== 1) {
        rgb.alpha = this.valpha;
      }

      return rgb;
    },
    round: function round(places) {
      places = Math.max(places || 0, 0);
      return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
    },
    alpha: function alpha(val) {
      if (arguments.length) {
        return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
      }

      return this.valpha;
    },
    red: getset('rgb', 0, maxfn(255)),
    green: getset('rgb', 1, maxfn(255)),
    blue: getset('rgb', 2, maxfn(255)),
    hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) {
      return (val % 360 + 360) % 360;
    }),
    saturationl: getset('hsl', 1, maxfn(100)),
    lightness: getset('hsl', 2, maxfn(100)),
    saturationv: getset('hsv', 1, maxfn(100)),
    value: getset('hsv', 2, maxfn(100)),
    chroma: getset('hcg', 1, maxfn(100)),
    gray: getset('hcg', 2, maxfn(100)),
    white: getset('hwb', 1, maxfn(100)),
    wblack: getset('hwb', 2, maxfn(100)),
    cyan: getset('cmyk', 0, maxfn(100)),
    magenta: getset('cmyk', 1, maxfn(100)),
    yellow: getset('cmyk', 2, maxfn(100)),
    black: getset('cmyk', 3, maxfn(100)),
    x: getset('xyz', 0, maxfn(100)),
    y: getset('xyz', 1, maxfn(100)),
    z: getset('xyz', 2, maxfn(100)),
    l: getset('lab', 0, maxfn(100)),
    a: getset('lab', 1),
    b: getset('lab', 2),
    keyword: function keyword(val) {
      if (arguments.length) {
        return new Color(val);
      }

      return convert[this.model].keyword(this.color);
    },
    hex: function hex(val) {
      if (arguments.length) {
        return new Color(val);
      }

      return colorString.to.hex(this.rgb().round().color);
    },
    rgbNumber: function rgbNumber() {
      var rgb = this.rgb().color;
      return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;
    },
    luminosity: function luminosity() {
      var rgb = this.rgb().color;
      var lum = [];

      for (var i = 0; i < rgb.length; i++) {
        var chan = rgb[i] / 255;
        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
      }

      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    },
    contrast: function contrast(color2) {
      var lum1 = this.luminosity();
      var lum2 = color2.luminosity();

      if (lum1 > lum2) {
        return (lum1 + 0.05) / (lum2 + 0.05);
      }

      return (lum2 + 0.05) / (lum1 + 0.05);
    },
    level: function level(color2) {
      var contrastRatio = this.contrast(color2);

      if (contrastRatio >= 7.1) {
        return 'AAA';
      }

      return contrastRatio >= 4.5 ? 'AA' : '';
    },
    dark: function dark() {
      var rgb = this.rgb().color;
      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
      return yiq < 128;
    },
    light: function light() {
      return !this.dark();
    },
    negate: function negate() {
      var rgb = this.rgb();

      for (var i = 0; i < 3; i++) {
        rgb.color[i] = 255 - rgb.color[i];
      }

      return rgb;
    },
    lighten: function lighten(ratio) {
      var hsl = this.hsl();
      hsl.color[2] += hsl.color[2] * ratio;
      return hsl;
    },
    darken: function darken(ratio) {
      var hsl = this.hsl();
      hsl.color[2] -= hsl.color[2] * ratio;
      return hsl;
    },
    saturate: function saturate(ratio) {
      var hsl = this.hsl();
      hsl.color[1] += hsl.color[1] * ratio;
      return hsl;
    },
    desaturate: function desaturate(ratio) {
      var hsl = this.hsl();
      hsl.color[1] -= hsl.color[1] * ratio;
      return hsl;
    },
    whiten: function whiten(ratio) {
      var hwb = this.hwb();
      hwb.color[1] += hwb.color[1] * ratio;
      return hwb;
    },
    blacken: function blacken(ratio) {
      var hwb = this.hwb();
      hwb.color[2] += hwb.color[2] * ratio;
      return hwb;
    },
    grayscale: function grayscale() {
      var rgb = this.rgb().color;
      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
      return Color.rgb(val, val, val);
    },
    fade: function fade(ratio) {
      return this.alpha(this.valpha - this.valpha * ratio);
    },
    opaquer: function opaquer(ratio) {
      return this.alpha(this.valpha + this.valpha * ratio);
    },
    rotate: function rotate(degrees) {
      var hsl = this.hsl();
      var hue = hsl.color[0];
      hue = (hue + degrees) % 360;
      hue = hue < 0 ? 360 + hue : hue;
      hsl.color[0] = hue;
      return hsl;
    },
    mix: function mix(mixinColor, weight) {
      var color1 = mixinColor.rgb();
      var color2 = this.rgb();
      var p = weight === undefined ? 0.5 : weight;
      var w = 2 * p - 1;
      var a = color1.alpha() - color2.alpha();
      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
      var w2 = 1 - w1;
      return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
    }
  };
  Object.keys(convert).forEach(function (model) {
    if (skippedModels.indexOf(model) !== -1) {
      return;
    }

    var channels = convert[model].channels;

    Color.prototype[model] = function () {
      if (this.model === model) {
        return new Color(this);
      }

      if (arguments.length) {
        return new Color(arguments, model);
      }

      var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
      return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
    };

    Color[model] = function (color) {
      if (typeof color === 'number') {
        color = zeroArray(_slice.call(arguments), channels);
      }

      return new Color(color, model);
    };
  });

  function roundTo(num, places) {
    return Number(num.toFixed(places));
  }

  function roundToPlace(places) {
    return function (num) {
      return roundTo(num, places);
    };
  }

  function getset(model, channel, modifier) {
    model = Array.isArray(model) ? model : [model];
    model.forEach(function (m) {
      (limiters[m] || (limiters[m] = []))[channel] = modifier;
    });
    model = model[0];
    return function (val) {
      var result;

      if (arguments.length) {
        if (modifier) {
          val = modifier(val);
        }

        result = this[model]();
        result.color[channel] = val;
        return result;
      }

      result = this[model]().color[channel];

      if (modifier) {
        result = modifier(result);
      }

      return result;
    };
  }

  function maxfn(max) {
    return function (v) {
      return Math.max(0, Math.min(max, v));
    };
  }

  function assertArray(val) {
    return Array.isArray(val) ? val : [val];
  }

  function zeroArray(arr, length) {
    for (var i = 0; i < length; i++) {
      if (typeof arr[i] !== 'number') {
        arr[i] = 0;
      }
    }

    return arr;
  }

  module.exports = Color;
},486,[487,491]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var colorNames = _$$_REQUIRE(_dependencyMap[0]);

  var swizzle = _$$_REQUIRE(_dependencyMap[1]);

  var reverseNames = {};

  for (var name in colorNames) {
    if (colorNames.hasOwnProperty(name)) {
      reverseNames[colorNames[name]] = name;
    }
  }

  var cs = module.exports = {
    to: {},
    get: {}
  };

  cs.get = function (string) {
    var prefix = string.substring(0, 3).toLowerCase();
    var val;
    var model;

    switch (prefix) {
      case 'hsl':
        val = cs.get.hsl(string);
        model = 'hsl';
        break;

      case 'hwb':
        val = cs.get.hwb(string);
        model = 'hwb';
        break;

      default:
        val = cs.get.rgb(string);
        model = 'rgb';
        break;
    }

    if (!val) {
      return null;
    }

    return {
      model: model,
      value: val
    };
  };

  cs.get.rgb = function (string) {
    if (!string) {
      return null;
    }

    var abbr = /^#([a-f0-9]{3,4})$/i;
    var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var keyword = /(\D+)/;
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;

    if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];

      for (i = 0; i < 3; i++) {
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];

      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16);
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0);
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(keyword)) {
      if (match[1] === 'transparent') {
        return [0, 0, 0, 0];
      }

      rgb = colorNames[match[1]];

      if (!rgb) {
        return null;
      }

      rgb[3] = 1;
      return rgb;
    } else {
      return null;
    }

    for (i = 0; i < 3; i++) {
      rgb[i] = clamp(rgb[i], 0, 255);
    }

    rgb[3] = clamp(rgb[3], 0, 1);
    return rgb;
  };

  cs.get.hsl = function (string) {
    if (!string) {
      return null;
    }

    var hsl = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var match = string.match(hsl);

    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) + 360) % 360;
      var s = clamp(parseFloat(match[2]), 0, 100);
      var l = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
    }

    return null;
  };

  cs.get.hwb = function (string) {
    if (!string) {
      return null;
    }

    var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var match = string.match(hwb);

    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var w = clamp(parseFloat(match[2]), 0, 100);
      var b = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
    }

    return null;
  };

  cs.to.hex = function () {
    var rgba = swizzle(arguments);
    return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');
  };

  cs.to.rgb = function () {
    var rgba = swizzle(arguments);
    return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
  };

  cs.to.rgb.percent = function () {
    var rgba = swizzle(arguments);
    var r = Math.round(rgba[0] / 255 * 100);
    var g = Math.round(rgba[1] / 255 * 100);
    var b = Math.round(rgba[2] / 255 * 100);
    return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
  };

  cs.to.hsl = function () {
    var hsla = swizzle(arguments);
    return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
  };

  cs.to.hwb = function () {
    var hwba = swizzle(arguments);
    var a = '';

    if (hwba.length >= 4 && hwba[3] !== 1) {
      a = ', ' + hwba[3];
    }

    return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
  };

  cs.to.keyword = function (rgb) {
    return reverseNames[rgb.slice(0, 3)];
  };

  function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
  }

  function hexDouble(num) {
    var str = num.toString(16).toUpperCase();
    return str.length < 2 ? '0' + str : str;
  }
},487,[488,489]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
},488,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isArrayish = _$$_REQUIRE(_dependencyMap[0]);

  var concat = Array.prototype.concat;
  var slice = Array.prototype.slice;

  var swizzle = module.exports = function swizzle(args) {
    var results = [];

    for (var i = 0, len = args.length; i < len; i++) {
      var arg = args[i];

      if (isArrayish(arg)) {
        results = concat.call(results, slice.call(arg));
      } else {
        results.push(arg);
      }
    }

    return results;
  };

  swizzle.wrap = function (fn) {
    return function () {
      return fn(swizzle(arguments));
    };
  };
},489,[490]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = function isArrayish(obj) {
    if (!obj || typeof obj === 'string') {
      return false;
    }

    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
  };
},490,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var conversions = _$$_REQUIRE(_dependencyMap[0]);

  var route = _$$_REQUIRE(_dependencyMap[1]);

  var convert = {};
  var models = Object.keys(conversions);

  function wrapRaw(fn) {
    var wrappedFn = function wrappedFn(args) {
      if (args === undefined || args === null) {
        return args;
      }

      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }

      return fn(args);
    };

    if ('conversion' in fn) {
      wrappedFn.conversion = fn.conversion;
    }

    return wrappedFn;
  }

  function wrapRounded(fn) {
    var wrappedFn = function wrappedFn(args) {
      if (args === undefined || args === null) {
        return args;
      }

      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }

      var result = fn(args);

      if (typeof result === 'object') {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }

      return result;
    };

    if ('conversion' in fn) {
      wrappedFn.conversion = fn.conversion;
    }

    return wrappedFn;
  }

  models.forEach(function (fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], 'channels', {
      value: conversions[fromModel].channels
    });
    Object.defineProperty(convert[fromModel], 'labels', {
      value: conversions[fromModel].labels
    });
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function (toModel) {
      var fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module.exports = convert;
},491,[492,494]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var cssKeywords = _$$_REQUIRE(_dependencyMap[0]);

  var reverseKeywords = {};

  for (var key in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
  }

  var convert = module.exports = {
    rgb: {
      channels: 3,
      labels: 'rgb'
    },
    hsl: {
      channels: 3,
      labels: 'hsl'
    },
    hsv: {
      channels: 3,
      labels: 'hsv'
    },
    hwb: {
      channels: 3,
      labels: 'hwb'
    },
    cmyk: {
      channels: 4,
      labels: 'cmyk'
    },
    xyz: {
      channels: 3,
      labels: 'xyz'
    },
    lab: {
      channels: 3,
      labels: 'lab'
    },
    lch: {
      channels: 3,
      labels: 'lch'
    },
    hex: {
      channels: 1,
      labels: ['hex']
    },
    keyword: {
      channels: 1,
      labels: ['keyword']
    },
    ansi16: {
      channels: 1,
      labels: ['ansi16']
    },
    ansi256: {
      channels: 1,
      labels: ['ansi256']
    },
    hcg: {
      channels: 3,
      labels: ['h', 'c', 'g']
    },
    apple: {
      channels: 3,
      labels: ['r16', 'g16', 'b16']
    },
    gray: {
      channels: 1,
      labels: ['gray']
    }
  };

  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!('channels' in convert[model])) {
        throw new Error('missing channels property: ' + model);
      }

      if (!('labels' in convert[model])) {
        throw new Error('missing channel labels property: ' + model);
      }

      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error('channel and label counts mismatch: ' + model);
      }

      var channels = convert[model].channels;
      var labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], 'channels', {
        value: channels
      });
      Object.defineProperty(convert[model], 'labels', {
        value: labels
      });
    }
  }

  convert.rgb.hsl = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;

    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }

    h = Math.min(h * 60, 360);

    if (h < 0) {
      h += 360;
    }

    l = (min + max) / 2;

    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }

    return [h, s * 100, l * 100];
  };

  convert.rgb.hsv = function (rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);

    var diffc = function diffc(c) {
      return (v - c) / 6 / diff + 0.5;
    };

    if (diff === 0) {
      h = s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);

      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 0.3333333333333333 + rdif - bdif;
      } else if (b === v) {
        h = 0.6666666666666666 + gdif - rdif;
      }

      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }

    return [h * 360, s * 100, v * 100];
  };

  convert.rgb.hwb = function (rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 0.00392156862745098 * Math.min(r, Math.min(g, b));
    b = 1 - 0.00392156862745098 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };

  convert.rgb.cmyk = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };

  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }

  convert.rgb.keyword = function (rgb) {
    var reversed = reverseKeywords[rgb];

    if (reversed) {
      return reversed;
    }

    var currentClosestDistance = Infinity;
    var currentClosestKeyword;

    for (var keyword in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];
        var distance = comparativeDistance(rgb, value);

        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
    }

    return currentClosestKeyword;
  };

  convert.keyword.rgb = function (keyword) {
    return cssKeywords[keyword];
  };

  convert.rgb.xyz = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };

  convert.rgb.lab = function (rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
    y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
    z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };

  convert.hsl.rgb = function (hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;

    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }

    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }

    t1 = 2 * l - t2;
    rgb = [0, 0, 0];

    for (var i = 0; i < 3; i++) {
      t3 = h + 0.3333333333333333 * -(i - 1);

      if (t3 < 0) {
        t3++;
      }

      if (t3 > 1) {
        t3--;
      }

      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
      } else {
        val = t1;
      }

      rgb[i] = val * 255;
    }

    return rgb;
  };

  convert.hsl.hsv = function (hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };

  convert.hsv.rgb = function (hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;

    switch (hi) {
      case 0:
        return [v, t, p];

      case 1:
        return [q, v, p];

      case 2:
        return [p, v, t];

      case 3:
        return [p, q, v];

      case 4:
        return [t, p, v];

      case 5:
        return [v, p, q];
    }
  };

  convert.hsv.hsl = function (hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };

  convert.hwb.rgb = function (hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;

    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }

    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;

    if ((i & 0x01) !== 0) {
      f = 1 - f;
    }

    n = wh + f * (v - wh);
    var r;
    var g;
    var b;

    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;

      case 1:
        r = n;
        g = v;
        b = wh;
        break;

      case 2:
        r = wh;
        g = v;
        b = n;
        break;

      case 3:
        r = wh;
        g = n;
        b = v;
        break;

      case 4:
        r = n;
        g = wh;
        b = v;
        break;

      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }

    return [r * 255, g * 255, b * 255];
  };

  convert.cmyk.rgb = function (cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };

  convert.xyz.rgb = function (xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.0570;
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 0.4166666666666667) - 0.055 : r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 0.4166666666666667) - 0.055 : g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 0.4166666666666667) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };

  convert.xyz.lab = function (xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
    y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
    z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };

  convert.lab.xyz = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 0.008856 ? y2 : (y - 0.13793103448275862) / 7.787;
    x = x2 > 0.008856 ? x2 : (x - 0.13793103448275862) / 7.787;
    z = z2 > 0.008856 ? z2 : (z - 0.13793103448275862) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };

  convert.lab.lch = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;

    if (h < 0) {
      h += 360;
    }

    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };

  convert.lch.lab = function (lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  };

  convert.rgb.ansi16 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
    value = Math.round(value / 50);

    if (value === 0) {
      return 30;
    }

    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

    if (value === 2) {
      ansi += 60;
    }

    return ansi;
  };

  convert.hsv.ansi16 = function (args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };

  convert.rgb.ansi256 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];

    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }

      if (r > 248) {
        return 231;
      }

      return Math.round((r - 8) / 247 * 24) + 232;
    }

    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };

  convert.ansi16.rgb = function (args) {
    var color = args % 10;

    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }

      color = color / 10.5 * 255;
      return [color, color, color];
    }

    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };

  convert.ansi256.rgb = function (args) {
    if (args >= 232) {
      var c = (args - 232) * 10 + 8;
      return [c, c, c];
    }

    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };

  convert.rgb.hex = function (args) {
    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
  };

  convert.hex.rgb = function (args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

    if (!match) {
      return [0, 0, 0];
    }

    var colorString = match[0];

    if (match[0].length === 3) {
      colorString = colorString.split('').map(function (char) {
        return char + char;
      }).join('');
    }

    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 0xFF;
    var g = integer >> 8 & 0xFF;
    var b = integer & 0xFF;
    return [r, g, b];
  };

  convert.rgb.hcg = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;

    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }

    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }

    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };

  convert.hsl.hcg = function (hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;

    if (l < 0.5) {
      c = 2.0 * s * l;
    } else {
      c = 2.0 * s * (1.0 - l);
    }

    if (c < 1.0) {
      f = (l - 0.5 * c) / (1.0 - c);
    }

    return [hsl[0], c * 100, f * 100];
  };

  convert.hsv.hcg = function (hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;

    if (c < 1.0) {
      f = (v - c) / (1 - c);
    }

    return [hsv[0], c * 100, f * 100];
  };

  convert.hcg.rgb = function (hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;

    if (c === 0.0) {
      return [g * 255, g * 255, g * 255];
    }

    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;

    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;

      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;

      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;

      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;

      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;

      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }

    mg = (1.0 - c) * g;
    return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
  };

  convert.hcg.hsv = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    var f = 0;

    if (v > 0.0) {
      f = c / v;
    }

    return [hcg[0], f * 100, v * 100];
  };

  convert.hcg.hsl = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1.0 - c) + 0.5 * c;
    var s = 0;

    if (l > 0.0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1.0) {
      s = c / (2 * (1 - l));
    }

    return [hcg[0], s * 100, l * 100];
  };

  convert.hcg.hwb = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };

  convert.hwb.hcg = function (hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;

    if (c < 1) {
      g = (v - c) / (1 - c);
    }

    return [hwb[0], c * 100, g * 100];
  };

  convert.apple.rgb = function (apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };

  convert.rgb.apple = function (rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };

  convert.gray.rgb = function (args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };

  convert.gray.hsl = convert.gray.hsv = function (args) {
    return [0, 0, args[0]];
  };

  convert.gray.hwb = function (gray) {
    return [0, 100, gray[0]];
  };

  convert.gray.cmyk = function (gray) {
    return [0, 0, 0, gray[0]];
  };

  convert.gray.lab = function (gray) {
    return [gray[0], 0, 0];
  };

  convert.gray.hex = function (gray) {
    var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
  };

  convert.rgb.gray = function (rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
},492,[493]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
},493,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var conversions = _$$_REQUIRE(_dependencyMap[0]);

  function buildGraph() {
    var graph = {};
    var models = Object.keys(conversions);

    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        distance: -1,
        parent: null
      };
    }

    return graph;
  }

  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel];
    graph[fromModel].distance = 0;

    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions[current]);

      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph[adjacent];

        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }

    return graph;
  }

  function link(from, to) {
    return function (args) {
      return to(from(args));
    };
  }

  function wrapConversion(toModel, graph) {
    var path = [graph[toModel].parent, toModel];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;

    while (graph[cur].parent) {
      path.unshift(graph[cur].parent);
      fn = link(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }

    fn.conversion = path;
    return fn;
  }

  module.exports = function (fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);

    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph[toModel];

      if (node.parent === null) {
        continue;
      }

      conversion[toModel] = wrapConversion(toModel, graph);
    }

    return conversion;
  };
},494,[492]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var fonts = _reactNative.Platform.select({
    web: {
      regular: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
      medium: 'Roboto-Medium, Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
      light: 'Roboto-Light, Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
      thin: 'Roboto-Thin, Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif'
    },
    ios: {
      regular: 'Helvetica Neue',
      medium: 'HelveticaNeue-Medium',
      light: 'HelveticaNeue-Light',
      thin: 'HelveticaNeue-Thin'
    },
    default: {
      regular: 'sans-serif',
      medium: 'sans-serif-medium',
      light: 'sans-serif-light',
      thin: 'sans-serif-thin'
    }
  });

  var _default = fonts;
  exports.default = _default;
},495,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _theming = _$$_REQUIRE(_dependencyMap[8]);

  var _Portal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var Provider = function (_React$Component) {
    (0, _inherits2.default)(Provider, _React$Component);

    function Provider() {
      (0, _classCallCheck2.default)(this, Provider);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Provider).apply(this, arguments));
    }

    (0, _createClass2.default)(Provider, [{
      key: "render",
      value: function render() {
        return React.createElement(_Portal.default.Host, null, React.createElement(_theming.ThemeProvider, {
          theme: this.props.theme
        }, this.props.children));
      }
    }]);
    return Provider;
  }(React.Component);

  exports.default = Provider;
},496,[361,1,19,20,27,30,33,46,478,497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _PortalConsumer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _PortalHost = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _theming = _$$_REQUIRE(_dependencyMap[10]);

  var Portal = function (_React$Component) {
    (0, _inherits2.default)(Portal, _React$Component);

    function Portal() {
      (0, _classCallCheck2.default)(this, Portal);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Portal).apply(this, arguments));
    }

    (0, _createClass2.default)(Portal, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            theme = _this$props.theme;
        return React.createElement(_PortalHost.PortalContext.Consumer, null, function (manager) {
          return React.createElement(_PortalConsumer.default, {
            manager: manager
          }, React.createElement(_theming.ThemeProvider, {
            theme: theme
          }, children));
        });
      }
    }]);
    return Portal;
  }(React.Component);

  Portal.Host = _PortalHost.default;

  var _default = (0, _theming.withTheme)(Portal);

  exports.default = _default;
},497,[361,1,19,20,27,30,33,46,498,499,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var PortalConsumer = function (_React$Component) {
    (0, _inherits2.default)(PortalConsumer, _React$Component);

    function PortalConsumer() {
      (0, _classCallCheck2.default)(this, PortalConsumer);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PortalConsumer).apply(this, arguments));
    }

    (0, _createClass2.default)(PortalConsumer, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        return _regenerator.default.async(function componentDidMount$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.props.manager) {
                  _context.next = 2;
                  break;
                }

                throw new Error("Looks like you forgot to wrap your root component with `Provider` component from `react-native-paper`.\n\nPlease read our getting-started guide and make sure you've followed all the required steps.\n\nhttps://callstack.github.io/react-native-paper/getting-started.html");

              case 2:
                _context.next = 4;
                return _regenerator.default.awrap(Promise.resolve());

              case 4:
                this._key = this.props.manager.mount(this.props.children);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.props.manager.update(this._key, this.props.children);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.manager.unmount(this._key);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return PortalConsumer;
  }(React.Component);

  exports.default = PortalConsumer;
},498,[361,1,129,19,20,27,30,33,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.PortalContext = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _PortalManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _createReactContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var PortalContext = (0, _createReactContext.default)(null);
  exports.PortalContext = PortalContext;

  var PortalHost = function (_React$Component) {
    (0, _inherits2.default)(PortalHost, _React$Component);

    function PortalHost() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, PortalHost);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PortalHost)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._setManager = function (manager) {
        _this._manager = manager;
      };

      _this._mount = function (children) {
        var key = _this._nextKey++;

        if (_this._manager) {
          _this._manager.mount(key, children);
        } else {
          _this._queue.push({
            type: 'mount',
            key: key,
            children: children
          });
        }

        return key;
      };

      _this._update = function (key, children) {
        if (_this._manager) {
          _this._manager.update(key, children);
        } else {
          var op = {
            type: 'mount',
            key: key,
            children: children
          };

          var index = _this._queue.findIndex(function (o) {
            return o.type === 'mount' || o.type === 'update' && o.key === key;
          });

          if (index > -1) {
            _this._queue[index] = op;
          } else {
            _this._queue.push(op);
          }
        }
      };

      _this._unmount = function (key) {
        if (_this._manager) {
          _this._manager.unmount(key);
        } else {
          _this._queue.push({
            type: 'unmount',
            key: key
          });
        }
      };

      _this._nextKey = 0;
      _this._queue = [];
      return _this;
    }

    (0, _createClass2.default)(PortalHost, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var manager = this._manager;
        var queue = this._queue;

        while (queue.length && manager) {
          var action = queue.pop();

          switch (action.type) {
            case 'mount':
              manager.mount(action.key, action.children);
              break;

            case 'update':
              manager.update(action.key, action.children);
              break;

            case 'unmount':
              manager.unmount(action.key);
              break;
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(PortalContext.Provider, {
          value: {
            mount: this._mount,
            update: this._update,
            unmount: this._unmount
          }
        }, React.createElement(_reactNative.View, {
          style: styles.container,
          collapsable: false
        }, this.props.children), React.createElement(_PortalManager.default, {
          ref: this._setManager
        }));
      }
    }]);
    return PortalHost;
  }(React.Component);

  exports.default = PortalHost;
  PortalHost.displayName = 'Portal.Host';

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},499,[361,1,19,20,27,30,33,46,2,500,346]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var PortalManager = function (_React$PureComponent) {
    (0, _inherits2.default)(PortalManager, _React$PureComponent);

    function PortalManager() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, PortalManager);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PortalManager)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        portals: []
      };

      _this.mount = function (key, children) {
        _this.setState(function (state) {
          return {
            portals: [].concat((0, _toConsumableArray2.default)(state.portals), [{
              key: key,
              children: children
            }])
          };
        });
      };

      _this.update = function (key, children) {
        return _this.setState(function (state) {
          return {
            portals: state.portals.map(function (item) {
              if (item.key === key) {
                return (0, _objectSpread2.default)({}, item, {
                  children: children
                });
              }

              return item;
            })
          };
        });
      };

      _this.unmount = function (key) {
        return _this.setState(function (state) {
          return {
            portals: state.portals.filter(function (item) {
              return item.key !== key;
            })
          };
        });
      };

      return _this;
    }

    (0, _createClass2.default)(PortalManager, [{
      key: "render",
      value: function render() {
        return this.state.portals.map(function (_ref) {
          var key = _ref.key,
              children = _ref.children;
          return React.createElement(_reactNative.View, {
            key: key,
            collapsable: false,
            pointerEvents: "box-none",
            style: _reactNative.StyleSheet.absoluteFill
          }, children);
        });
      }
    }]);
    return PortalManager;
  }(React.PureComponent);

  exports.default = PortalManager;
},500,[361,1,43,15,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _DefaultTheme = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _colors = _$$_REQUIRE(_dependencyMap[4]);

  var DarkTheme = (0, _objectSpread2.default)({}, _DefaultTheme.default, {
    dark: true,
    colors: (0, _objectSpread2.default)({}, _DefaultTheme.default.colors, {
      primary: _colors.lightBlue500,
      background: '#242424',
      surface: _colors.grey800,
      error: _colors.redA400,
      text: _colors.white,
      disabled: (0, _color.default)(_colors.white).alpha(0.3).rgb().string(),
      placeholder: (0, _color.default)(_colors.white).alpha(0.54).rgb().string(),
      backdrop: (0, _color.default)(_colors.black).alpha(0.5).rgb().string(),
      notification: _colors.pinkA100
    })
  });
  var _default = DarkTheme;
  exports.default = _default;
},501,[1,43,486,485,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Icon", {
    enumerable: true,
    get: function get() {
      return _AvatarIcon.default;
    }
  });
  Object.defineProperty(exports, "Image", {
    enumerable: true,
    get: function get() {
      return _AvatarImage.default;
    }
  });
  Object.defineProperty(exports, "Text", {
    enumerable: true,
    get: function get() {
      return _AvatarText.default;
    }
  });

  var _AvatarIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _AvatarImage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _AvatarText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
},502,[1,503,711,712]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var _colors = _$$_REQUIRE(_dependencyMap[13]);

  var Avatar = function (_React$Component) {
    (0, _inherits2.default)(Avatar, _React$Component);

    function Avatar() {
      (0, _classCallCheck2.default)(this, Avatar);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Avatar).apply(this, arguments));
    }

    (0, _createClass2.default)(Avatar, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            icon = _this$props.icon,
            size = _this$props.size,
            style = _this$props.style,
            theme = _this$props.theme;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? theme.colors.primary : _ref$backgroundColor,
            restStyle = (0, _objectWithoutProperties2.default)(_ref, ["backgroundColor"]);

        var textColor = this.props.color || ((0, _color.default)(backgroundColor).light() ? 'rgba(0, 0, 0, .54)' : _colors.white);
        return React.createElement(_reactNative.View, {
          style: [{
            width: size,
            height: size,
            borderRadius: size / 2,
            backgroundColor: backgroundColor
          }, styles.container, restStyle]
        }, React.createElement(_Icon.default, {
          source: icon,
          color: textColor,
          size: size * 0.6
        }));
      }
    }]);
    return Avatar;
  }(React.Component);

  Avatar.displayName = 'Avatar.Icon';
  Avatar.defaultProps = {
    size: 64
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      justifyContent: 'center',
      alignItems: 'center'
    }
  });

  var _default = (0, _theming.withTheme)(Avatar);

  exports.default = _default;
},503,[361,1,6,19,20,27,30,33,46,2,486,504,478,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.isEqualIcon = exports.isValidIcon = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var MaterialIcons;

  try {
    MaterialIcons = _$$_REQUIRE(_dependencyMap[6]).default;
  } catch (e) {
    if (global.__expo && global.__expo.Icon && global.__expo.Icon.MaterialIcons) {
      MaterialIcons = global.__expo.Icon.MaterialIcons;
    } else {
      var isErrorLogged = false;

      MaterialIcons = function MaterialIcons(_ref) {
        var name = _ref.name,
            color = _ref.color,
            size = _ref.size,
            rest = (0, _objectWithoutProperties2.default)(_ref, ["name", "color", "size"]);

        if (!isErrorLogged) {
          if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
            console.error(e);
          }

          console.warn("Tried to use the icon '" + name + "' in a component from 'react-native-paper', but 'react-native-vector-icons' could not be loaded.", "To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.");
          isErrorLogged = true;
        }

        return React.createElement(_reactNative.Text, (0, _extends2.default)({}, rest, {
          style: [styles.icon, {
            color: color,
            fontSize: size
          }],
          pointerEvents: "none"
        }), "\u25A1");
      };
    }
  }

  var isImageSource = function isImageSource(source) {
    return typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string' || typeof source === 'number' || _reactNative.Platform.OS === 'web' && typeof source === 'string' && (source.startsWith('data:image') || /\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source));
  };

  var getIconId = function getIconId(source) {
    if (typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string') {
      return source.uri;
    }

    return source;
  };

  var isValidIcon = function isValidIcon(source) {
    return typeof source === 'string' || isImageSource(source);
  };

  exports.isValidIcon = isValidIcon;

  var isEqualIcon = function isEqualIcon(a, b) {
    return a === b || getIconId(a) === getIconId(b);
  };

  exports.isEqualIcon = isEqualIcon;

  var Icon = function Icon(_ref2) {
    var source = _ref2.source,
        color = _ref2.color,
        size = _ref2.size,
        rest = (0, _objectWithoutProperties2.default)(_ref2, ["source", "color", "size"]);
    var direction = typeof source === 'object' && source.direction && source.source ? source.direction === 'auto' ? _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr' : source.direction : null;
    var s = typeof source === 'object' && source.direction && source.source ? source.source : source;
    var accessibilityProps = _reactNative.Platform.OS === 'web' ? {
      role: 'img',
      focusable: false
    } : {
      accessibilityElementsHidden: true,
      importantForAccessibility: 'no-hide-descendants'
    };

    if (isImageSource(s)) {
      return React.createElement(_reactNative.Image, (0, _extends2.default)({}, rest, {
        source: s,
        style: [{
          transform: [{
            scaleX: direction === 'rtl' ? -1 : 1
          }]
        }, {
          width: size,
          height: size,
          tintColor: color,
          resizeMode: 'contain'
        }]
      }, accessibilityProps));
    } else if (typeof s === 'string') {
      return React.createElement(MaterialIcons, (0, _extends2.default)({}, rest, {
        name: s,
        color: color,
        size: size,
        style: [{
          transform: [{
            scaleX: direction === 'rtl' ? -1 : 1
          }]
        }, styles.icon],
        pointerEvents: "none"
      }, accessibilityProps));
    } else if (typeof s === 'function') {
      return s({
        color: color,
        size: size,
        direction: direction
      });
    }

    return null;
  };

  var _default = Icon;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      backgroundColor: 'transparent'
    }
  });
},504,[361,1,8,6,46,2,505]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _MaterialIcons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _MaterialIcons.default;
  exports.default = _default;
},505,[1,506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _MaterialIcons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _MaterialIcons2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _default = (0, _createIconSet.default)(_MaterialIcons2.default, 'material', _MaterialIcons.default);

  exports.default = _default;
},506,[1,507,709,710]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  Object.defineProperty(exports, "DEFAULT_ICON_COLOR", {
    enumerable: true,
    get: function get() {
      return _createIconSet.DEFAULT_ICON_COLOR;
    }
  });
  Object.defineProperty(exports, "DEFAULT_ICON_SIZE", {
    enumerable: true,
    get: function get() {
      return _createIconSet.DEFAULT_ICON_SIZE;
    }
  });

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var Font = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _createIconSet = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

  var _iconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  function _default(glyphMap, fontName, expoAssetId, fontStyle) {
    var _a;

    var font = (0, _defineProperty2.default)({}, fontName, expoAssetId);
    var RNVIconComponent = (0, _createIconSet.default)(glyphMap, fontName, null, fontStyle);
    return _a = function (_React$Component) {
      (0, _inherits2.default)(Icon, _React$Component);

      function Icon() {
        var _this;

        (0, _classCallCheck2.default)(this, Icon);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Icon).apply(this, arguments));
        _this._mounted = false;
        _this.state = {
          fontIsLoaded: Font.isLoaded(fontName)
        };
        return _this;
      }

      (0, _createClass2.default)(Icon, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          return _regenerator.default.async(function componentWillMount$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this._mounted = true;

                  if (this.state.fontIsLoaded) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 4;
                  return _regenerator.default.awrap(Font.loadAsync(font));

                case 4:
                  this._mounted && this.setState({
                    fontIsLoaded: true
                  });

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._mounted = false;
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          if (this._icon) {
            this._icon.setNativeProps(props);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;

          if (!this.state.fontIsLoaded) {
            return _react.default.createElement(_reactNative.Text, null);
          }

          return _react.default.createElement(RNVIconComponent, (0, _extends2.default)({
            ref: function ref(view) {
              _this2._icon = view;
            }
          }, this.props));
        }
      }]);
      return Icon;
    }(_react.default.Component), _a.propTypes = RNVIconComponent.propTypes, _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = (0, _iconButton.default)(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {
      return glyphMap;
    }, _a.getFontFamily = function () {
      return fontName;
    }, _a.loadFont = function () {
      return Font.loadAsync(font);
    }, _a.font = font, _a;
  }
},507,[361,1,8,129,19,20,27,30,33,44,46,2,508,547,549]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.processFontFamily = processFontFamily;
  exports.isLoaded = isLoaded;
  exports.isLoading = isLoading;
  exports.loadAsync = loadAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoAsset = _$$_REQUIRE(_dependencyMap[2]);

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _core = _$$_REQUIRE(_dependencyMap[4]);

  var _ExpoFontLoader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var isWeb = _core.Platform.OS === 'web';
  var loaded = {};
  var loadPromises = {};

  function processFontFamily(name) {
    if (typeof name !== 'string' || _expoConstants.default.systemFonts.includes(name) || name === 'System') {
      return name;
    }

    if (name.includes(_expoConstants.default.sessionId)) {
      return name;
    }

    if (!isLoaded(name)) {
      return 'System';
    }

    return "ExpoFont-" + _getNativeFontName(name);
  }

  function isLoaded(name) {
    return loaded.hasOwnProperty(name);
  }

  function isLoading(name) {
    return loadPromises.hasOwnProperty(name);
  }

  function loadAsync(nameOrMap, source) {
    var fontMap, names, name, asset;
    return _regenerator.default.async(function loadAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof nameOrMap === 'object')) {
              _context2.next = 6;
              break;
            }

            fontMap = nameOrMap;
            names = Object.keys(fontMap);
            _context2.next = 5;
            return _regenerator.default.awrap(Promise.all(names.map(function (name) {
              return loadAsync(name, fontMap[name]);
            })));

          case 5:
            return _context2.abrupt("return");

          case 6:
            name = nameOrMap;

            if (!loaded[name]) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt("return");

          case 9:
            if (!loadPromises[name]) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("return", loadPromises[name]);

          case 11:
            if (source) {
              _context2.next = 13;
              break;
            }

            throw new Error("No source from which to load font \"" + name + "\"");

          case 13:
            asset = _getAssetForSource(source);

            loadPromises[name] = function _callee() {
              return _regenerator.default.async(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      return _regenerator.default.awrap(_loadSingleFontAsync(name, asset));

                    case 3:
                      loaded[name] = true;

                    case 4:
                      _context.prev = 4;
                      delete loadPromises[name];
                      return _context.finish(4);

                    case 7:
                    case "end":
                      return _context.stop();
                  }
                }
              }, null, null, [[0,, 4, 7]]);
            }();

            _context2.next = 17;
            return _regenerator.default.awrap(loadPromises[name]);

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    });
  }

  function _getAssetForSource(source) {
    if (source instanceof _expoAsset.Asset) {
      return source;
    }

    if (!isWeb && typeof source === 'string') {
      throw new Error('Loading fonts from remote URIs is temporarily not supported. Please download the font file and load it using require. See: https://docs.expo.io/versions/latest/guides/using-custom-fonts.html#downloading-the-font');
    }

    if (isWeb || typeof source === 'number') {
      return _expoAsset.Asset.fromModule(source);
    }

    return source;
  }

  function _loadSingleFontAsync(name, asset) {
    return _regenerator.default.async(function _loadSingleFontAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _regenerator.default.awrap(asset.downloadAsync());

          case 2:
            if (asset.downloaded) {
              _context3.next = 4;
              break;
            }

            throw new Error("Failed to download asset for font \"" + name + "\"");

          case 4:
            _context3.next = 6;
            return _regenerator.default.awrap(_ExpoFontLoader.default.loadAsync(_getNativeFontName(name), asset.localUri));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    });
  }

  function _getNativeFontName(name) {
    if (isWeb) {
      return name;
    }

    return _expoConstants.default.sessionId + "-" + name;
  }

  if (module && module.exports) {
    var wasImportWarningShown = false;
    Object.defineProperty(exports, 'Font', {
      get: function get() {
        if (!wasImportWarningShown) {
          console.warn("The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.");
          wasImportWarningShown = true;
        }

        return {
          processFontFamily: processFontFamily,
          isLoaded: isLoaded,
          isLoading: isLoading,
          loadAsync: loadAsync
        };
      }
    });
  }
},508,[1,129,509,532,510,546]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Asset = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _core = _$$_REQUIRE(_dependencyMap[5]);

  var FileSystem = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _AssetRegistry = _$$_REQUIRE(_dependencyMap[8]);

  var _resolveAssetSource2 = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var AssetSources = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var AssetUris = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var EmbeddedAssets = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var ImageAssets = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

  var IS_MANAGED_ENV = !!_expoConstants.default.appOwnership;

  var Asset = function () {
    function Asset(_ref) {
      var name = _ref.name,
          type = _ref.type,
          _ref$hash = _ref.hash,
          hash = _ref$hash === undefined ? null : _ref$hash,
          uri = _ref.uri,
          width = _ref.width,
          height = _ref.height;
      (0, _classCallCheck2.default)(this, Asset);
      this.hash = null;
      this.localUri = null;
      this.width = null;
      this.height = null;
      this.downloading = false;
      this.downloaded = false;
      this._downloadCallbacks = [];
      this.name = name;
      this.type = type;
      this.hash = hash;
      this.uri = uri;

      if (typeof width === 'number') {
        this.width = width;
      }

      if (typeof height === 'number') {
        this.height = height;
      }

      if (IS_MANAGED_ENV && hash) {
        this.localUri = EmbeddedAssets.getEmbeddedAssetUri(hash, type);

        if (this.localUri) {
          this.downloaded = true;
        }
      }
    }

    (0, _createClass2.default)(Asset, [{
      key: "_downloadAsyncWeb",
      value: function _downloadAsyncWeb() {
        var _ref2, width, height, name;

        return _regenerator.default.async(function _downloadAsyncWeb$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!ImageAssets.isImageType(this.type)) {
                  _context.next = 12;
                  break;
                }

                _context.next = 3;
                return _regenerator.default.awrap(ImageAssets.getImageInfoAsync(this.uri));

              case 3:
                _ref2 = _context.sent;
                width = _ref2.width;
                height = _ref2.height;
                name = _ref2.name;
                this.width = width;
                this.height = height;
                this.name = name;
                _context.next = 13;
                break;

              case 12:
                this.name = AssetUris.getFilename(this.uri);

              case 13:
                this.localUri = this.uri;

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "_downloadAsyncManagedEnv",
      value: function _downloadAsyncManagedEnv() {
        var localUri, _ref3, exists, md5, _ref4;

        return _regenerator.default.async(function _downloadAsyncManagedEnv$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                localUri = FileSystem.cacheDirectory + "ExponentAsset-" + this.hash + "." + this.type;
                _context2.next = 3;
                return _regenerator.default.awrap(FileSystem.getInfoAsync(localUri, {
                  md5: true
                }));

              case 3:
                _ref3 = _context2.sent;
                exists = _ref3.exists;
                md5 = _ref3.md5;

                if (!(!exists || md5 !== this.hash)) {
                  _context2.next = 13;
                  break;
                }

                _context2.next = 9;
                return _regenerator.default.awrap(FileSystem.downloadAsync(this.uri, localUri, {
                  md5: true
                }));

              case 9:
                _ref4 = _context2.sent;
                md5 = _ref4.md5;

                if (!(md5 !== this.hash)) {
                  _context2.next = 13;
                  break;
                }

                throw new Error("Downloaded file for asset '" + this.name + "." + this.type + "' " + ("Located at " + this.uri + " ") + "failed MD5 integrity check");

              case 13:
                this.localUri = localUri;

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "_downloadAsyncUnmanagedEnv",
      value: function _downloadAsyncUnmanagedEnv() {
        var localUri;
        return _regenerator.default.async(function _downloadAsyncUnmanagedEnv$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!this.uri.startsWith('file://')) {
                  _context3.next = 3;
                  break;
                }

                this.localUri = this.uri;
                return _context3.abrupt("return");

              case 3:
                localUri = FileSystem.cacheDirectory + "ExponentAsset-" + this.hash + "." + this.type;
                _context3.next = 6;
                return _regenerator.default.awrap(FileSystem.downloadAsync(this.uri, localUri));

              case 6:
                this.localUri = localUri;

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "downloadAsync",
      value: function downloadAsync() {
        var _this = this;

        return _regenerator.default.async(function downloadAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!this.downloaded) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return");

              case 2:
                if (!this.downloading) {
                  _context4.next = 6;
                  break;
                }

                _context4.next = 5;
                return _regenerator.default.awrap(new Promise(function (resolve, reject) {
                  _this._downloadCallbacks.push({
                    resolve: resolve,
                    reject: reject
                  });
                }));

              case 5:
                return _context4.abrupt("return");

              case 6:
                this.downloading = true;
                _context4.prev = 7;

                if (!(_core.Platform.OS === 'web')) {
                  _context4.next = 13;
                  break;
                }

                _context4.next = 11;
                return _regenerator.default.awrap(this._downloadAsyncWeb());

              case 11:
                _context4.next = 20;
                break;

              case 13:
                if (!IS_MANAGED_ENV) {
                  _context4.next = 18;
                  break;
                }

                _context4.next = 16;
                return _regenerator.default.awrap(this._downloadAsyncManagedEnv());

              case 16:
                _context4.next = 20;
                break;

              case 18:
                _context4.next = 20;
                return _regenerator.default.awrap(this._downloadAsyncUnmanagedEnv());

              case 20:
                this.downloaded = true;

                this._downloadCallbacks.forEach(function (_ref5) {
                  var resolve = _ref5.resolve;
                  return resolve();
                });

                _context4.next = 28;
                break;

              case 24:
                _context4.prev = 24;
                _context4.t0 = _context4["catch"](7);

                this._downloadCallbacks.forEach(function (_ref6) {
                  var reject = _ref6.reject;
                  return reject(_context4.t0);
                });

                throw _context4.t0;

              case 28:
                _context4.prev = 28;
                this.downloading = false;
                this._downloadCallbacks = [];
                return _context4.finish(28);

              case 32:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this, [[7, 24, 28, 32]]);
      }
    }], [{
      key: "loadAsync",
      value: function loadAsync(moduleId) {
        var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];
        return Promise.all(moduleIds.map(function (moduleId) {
          return Asset.fromModule(moduleId).downloadAsync();
        }));
      }
    }, {
      key: "fromModule",
      value: function fromModule(virtualAssetModule) {
        if (typeof virtualAssetModule === 'string') {
          return Asset.fromURI(virtualAssetModule);
        }

        var meta = (0, _AssetRegistry.getAssetByID)(virtualAssetModule);

        if (!meta) {
          throw new Error("Module \"" + virtualAssetModule + "\" is missing from the asset registry");
        }

        if (!IS_MANAGED_ENV) {
          var _resolveAssetSource = (0, _resolveAssetSource2.default)(virtualAssetModule),
              uri = _resolveAssetSource.uri;

          var asset = new Asset({
            name: meta.name,
            type: meta.type,
            hash: meta.hash,
            uri: uri,
            width: meta.width,
            height: meta.height
          });

          if (_core.Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {
            asset.localUri = asset.uri;
            asset.downloaded = true;
          }

          Asset.byHash[meta.hash] = asset;
          return asset;
        }

        return Asset.fromMetadata(meta);
      }
    }, {
      key: "fromMetadata",
      value: function fromMetadata(meta) {
        var metaHash = meta.hash;

        if (Asset.byHash[metaHash]) {
          return Asset.byHash[metaHash];
        } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {
          throw new Error('Assets must be initialized with Asset.fromModule');
        }

        var _AssetSources$selectA = AssetSources.selectAssetSource(meta),
            uri = _AssetSources$selectA.uri,
            hash = _AssetSources$selectA.hash;

        var asset = new Asset({
          name: meta.name,
          type: meta.type,
          hash: hash,
          uri: uri,
          width: meta.width,
          height: meta.height
        });
        Asset.byHash[metaHash] = asset;
        return asset;
      }
    }, {
      key: "fromURI",
      value: function fromURI(uri) {
        if (Asset.byUri[uri]) {
          return Asset.byUri[uri];
        }

        var type = '';

        if (uri.indexOf(';base64') > -1) {
          type = uri.split(';')[0].split('/')[1];
        } else {
          var extension = AssetUris.getFileExtension(uri);
          type = extension.startsWith('.') ? extension.substring(1) : extension;
        }

        var asset = new Asset({
          name: '',
          type: type,
          uri: uri
        });
        Asset.byUri[uri] = asset;
        return asset;
      }
    }]);
    return Asset;
  }();

  exports.Asset = Asset;
  Asset.byHash = {};
  Asset.byUri = {};
  (0, _resolveAssetSource2.setCustomSourceTransformer)(function (resolver) {
    try {
      var asset = Asset.fromMetadata(resolver.asset);
      return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);
    } catch (e) {
      return resolver.defaultAsset();
    }
  });
},509,[361,1,129,19,20,510,526,532,535,536,537,543,544,545]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _AdapterProxy = _$$_REQUIRE(_dependencyMap[0]);

  Object.keys(_AdapterProxy).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _AdapterProxy[key];
      }
    });
  });

  var _Errors = _$$_REQUIRE(_dependencyMap[1]);

  Object.keys(_Errors).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Errors[key];
      }
    });
  });
},510,[511,519]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNativeAdapter = _$$_REQUIRE(_dependencyMap[0]);

  Object.keys(_reactNativeAdapter).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _reactNativeAdapter[key];
      }
    });
  });
},511,[512]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "EventEmitter", {
    enumerable: true,
    get: function get() {
      return _EventEmitter.EventEmitter;
    }
  });
  Object.defineProperty(exports, "NativeModulesProxy", {
    enumerable: true,
    get: function get() {
      return _NativeModulesProxy.default;
    }
  });
  Object.defineProperty(exports, "requireNativeViewManager", {
    enumerable: true,
    get: function get() {
      return _NativeViewManagerAdapter.requireNativeViewManager;
    }
  });
  Object.defineProperty(exports, "SyntheticPlatformEmitter", {
    enumerable: true,
    get: function get() {
      return _SyntheticPlatformEmitter.default;
    }
  });
  exports.Platform = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _EventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var _NativeModulesProxy = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _NativeViewManagerAdapter = _$$_REQUIRE(_dependencyMap[4]);

  var _SyntheticPlatformEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var Platform = {
    OS: _reactNative.Platform.OS
  };
  exports.Platform = Platform;
},512,[1,2,513,514,515,518]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EventEmitter = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';

  var EventEmitter = function () {
    function EventEmitter(nativeModule) {
      (0, _classCallCheck2.default)(this, EventEmitter);
      this._listenerCount = 0;
      this._nativeModule = nativeModule;
      this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);
    }

    (0, _createClass2.default)(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventName, listener) {
        var _this = this,
            _subscription;

        if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.startObserving) {
          this._nativeModule.startObserving();
        }

        this._listenerCount++;

        var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);

        var subscription = (_subscription = {}, (0, _defineProperty2.default)(_subscription, nativeEmitterSubscriptionKey, nativeEmitterSubscription), (0, _defineProperty2.default)(_subscription, "remove", function remove() {
          _this.removeSubscription(subscription);
        }), _subscription);
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventName) {
        var removedListenerCount = this._eventEmitter.listeners(eventName).length;

        this._eventEmitter.removeAllListeners(eventName);

        this._listenerCount -= removedListenerCount;
        (0, _invariant.default)(this._listenerCount >= 0, "EventEmitter must have a non-negative number of listeners");

        if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
          this._nativeModule.stopObserving();
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];

        if (!nativeEmitterSubscription) {
          return;
        }

        this._eventEmitter.removeSubscription(nativeEmitterSubscription);

        this._listenerCount--;
        delete subscription[nativeEmitterSubscriptionKey];

        subscription.remove = function () {};

        if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
          this._nativeModule.stopObserving();
        }
      }
    }, {
      key: "emit",
      value: function emit(eventName) {
        var _this$_eventEmitter;

        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));
      }
    }]);
    return EventEmitter;
  }();

  exports.EventEmitter = EventEmitter;
},513,[1,44,19,20,403,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var NativeProxy = _reactNative.NativeModules.NativeUnimoduleProxy;
  var modulesConstantsKey = 'modulesConstants';
  var exportedMethodsKey = 'exportedMethods';
  var NativeModulesProxy = {};

  if (NativeProxy) {
    Object.keys(NativeProxy[exportedMethodsKey]).forEach(function (moduleName) {
      NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};
      NativeProxy[exportedMethodsKey][moduleName].forEach(function (methodInfo) {
        NativeModulesProxy[moduleName][methodInfo.name] = function _callee() {
          var key,
              argumentsCount,
              _len,
              args,
              _key,
              _args = arguments;

          return _regenerator.default.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  key = methodInfo.key, argumentsCount = methodInfo.argumentsCount;

                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  if (!(argumentsCount !== args.length)) {
                    _context.next = 4;
                    break;
                  }

                  throw new Error("Native method " + moduleName + "." + methodInfo.name + " expects " + argumentsCount + " " + (argumentsCount === 1 ? 'argument' : 'arguments') + " but received " + args.length);

                case 4:
                  _context.next = 6;
                  return _regenerator.default.awrap(NativeProxy.callMethod(moduleName, key, args));

                case 6:
                  return _context.abrupt("return", _context.sent);

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          });
        };
      });

      NativeModulesProxy[moduleName].addListener = function () {
        var _NativeModules$UMReac;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return (_NativeModules$UMReac = _reactNative.NativeModules.UMReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$UMReac, [moduleName].concat(args));
      };

      NativeModulesProxy[moduleName].removeListeners = function () {
        var _NativeModules$UMReac2;

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return (_NativeModules$UMReac2 = _reactNative.NativeModules.UMReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$UMReac2, [moduleName].concat(args));
      };
    });
  } else {
    console.warn("The \"UMNativeModulesProxy\" native module is not exported through NativeModules; verify that @unimodules/react-native-adapter's native code is linked properly");
  }

  var _default = NativeModulesProxy;
  exports.default = _default;
},514,[1,129,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.requireNativeViewManager = requireNativeViewManager;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _lodash2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var ViewPropTypesKeys = Object.keys(_reactNative.ViewPropTypes);

  function requireNativeViewManager(viewName) {
    var reactNativeViewName = "ViewManagerAdapter_" + viewName;
    var ReactNativeComponent = (0, _reactNative.requireNativeComponent)(reactNativeViewName);
    var reactNativeUIConfiguration = _reactNative.UIManager[reactNativeViewName] || {
      NativeProps: {},
      directEventTypes: {}
    };
    var reactNativeComponentPropNames = ['children'].concat((0, _toConsumableArray2.default)(ViewPropTypesKeys), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.NativeProps)), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.directEventTypes)));

    function NativeComponentAdapter(props, ref) {
      var nativeProps = (0, _lodash2.default)(props, reactNativeComponentPropNames);
      var proxiedProps = (0, _lodash.default)(props, reactNativeComponentPropNames);
      return _react.default.createElement(ReactNativeComponent, (0, _extends2.default)({}, nativeProps, {
        proxiedProperties: proxiedProps,
        ref: ref
      }));
    }

    NativeComponentAdapter.displayName = "Adapter<" + viewName + ">";
    return _react.default.forwardRef(NativeComponentAdapter);
  }
},515,[1,8,15,516,517,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }

    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  function baseIsNaN(value) {
    return value !== value;
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function cacheHas(cache, key) {
    return cache.has(key);
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Symbol = root.Symbol,
      getPrototype = overArg(Object.getPrototypeOf, Object),
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice,
      spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;
  var nativeGetSymbols = Object.getOwnPropertySymbols,
      nativeMax = Math.max;
  var Map = getNative(root, 'Map'),
      nativeCreate = getNative(Object, 'create');

  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function SetCache(values) {
    var index = -1,
        length = values ? values.length : 0;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function (value, key) {
      return key in object;
    });
  }

  function basePickBy(object, props, predicate) {
    var index = -1,
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index],
          value = object[key];

      if (predicate(value, key)) {
        result[key] = value;
      }
    }

    return result;
  }

  function baseRest(func, start) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };

  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  var omit = baseRest(function (object, props) {
    if (object == null) {
      return {};
    }

    props = arrayMap(baseFlatten(props, 1), toKey);
    return basePick(object, baseDifference(getAllKeysIn(object), props));
  });

  function stubArray() {
    return [];
  }

  module.exports = omit;
},516,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var Symbol = root.Symbol,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;
  var nativeMax = Math.max;

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function (value, key) {
      return key in object;
    });
  }

  function basePickBy(object, props, predicate) {
    var index = -1,
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index],
          value = object[key];

      if (predicate(value, key)) {
        result[key] = value;
      }
    }

    return result;
  }

  function baseRest(func, start) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  var pick = baseRest(function (object, props) {
    return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
  });
  module.exports = pick;
},517,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var SyntheticPlatformEmitter = function () {
    function SyntheticPlatformEmitter() {
      (0, _classCallCheck2.default)(this, SyntheticPlatformEmitter);
      this._emitter = new _EventEmitter.default(_RCTDeviceEventEmitter.default.sharedSubscriber);
    }

    (0, _createClass2.default)(SyntheticPlatformEmitter, [{
      key: "emit",
      value: function emit(eventName, props) {
        this._emitter.emit(eventName, props);
      }
    }]);
    return SyntheticPlatformEmitter;
  }();

  var _default = new SyntheticPlatformEmitter();

  exports.default = _default;
},518,[1,19,20,35,26]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "CodedError", {
    enumerable: true,
    get: function get() {
      return _CodedError2.default;
    }
  });
  Object.defineProperty(exports, "deprecate", {
    enumerable: true,
    get: function get() {
      return _deprecate.default;
    }
  });
  exports.UnavailabilityError = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _AdapterProxy = _$$_REQUIRE(_dependencyMap[5]);

  var _CodedError2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _deprecate = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var UnavailabilityError = function (_CodedError) {
    (0, _inherits2.default)(UnavailabilityError, _CodedError);

    function UnavailabilityError(moduleName, propertyName) {
      (0, _classCallCheck2.default)(this, UnavailabilityError);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UnavailabilityError).call(this, 'ERR_UNAVAILABLE', "The method or property " + moduleName + "." + propertyName + " is not available on " + _AdapterProxy.Platform.OS + ", are you sure you've linked all the native dependencies properly?"));
    }

    return UnavailabilityError;
  }(_CodedError2.default);

  exports.UnavailabilityError = UnavailabilityError;
},519,[1,19,27,30,33,511,520,524]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var CodedError = function (_Error) {
    (0, _inherits2.default)(CodedError, _Error);

    function CodedError(code, message) {
      var _this;

      (0, _classCallCheck2.default)(this, CodedError);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CodedError).call(this, message));
      _this.code = code;
      return _this;
    }

    return CodedError;
  }((0, _wrapNativeSuper2.default)(Error));

  exports.default = CodedError;
},520,[1,19,27,30,33,521]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[1]);

  var isNativeFunction = _$$_REQUIRE(_dependencyMap[2]);

  var construct = _$$_REQUIRE(_dependencyMap[3]);

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  module.exports = _wrapNativeSuper;
},521,[30,34,522,523]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  module.exports = _isNativeFunction;
},522,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      module.exports = _construct = Reflect.construct;
    } else {
      module.exports = _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  module.exports = _construct;
},523,[34]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = deprecate;

  var _compareVersions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _CodedError = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var postedWarnings = {};

  function deprecate(library, deprecatedAPI) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var currentVersion = options.currentVersion,
        versionToRemove = options.versionToRemove,
        replacement = options.replacement;
    var code = codeFromLibrary(library);
    var key = code + ":" + deprecatedAPI + ":" + replacement;

    if (!postedWarnings[key]) {
      postedWarnings[key] = true;
    }

    if (!currentVersion || !versionToRemove || (0, _compareVersions.default)(currentVersion, versionToRemove) >= 0) {
      var _message = "`" + deprecatedAPI + "` has been removed";

      if (versionToRemove) {
        _message = _message + " as of version \"" + versionToRemove + "\"";
      }

      if (replacement && replacement.length) {
        _message = _message + " please migrate to: `" + replacement + "`";
      }

      throw new _CodedError.default("ERR_DEPRECATED_API", prependLibrary(library, _message));
    }

    var message = "`" + deprecatedAPI + "` has been deprecated";

    if (replacement && replacement.length) {
      message = message + " in favor of `" + replacement + "`";
    }

    if (versionToRemove && versionToRemove.length) {
      message = message + " and will be removed in version \"" + versionToRemove + "\"";
    }

    console.warn(prependLibrary(library, message));
  }

  function prependLibrary(library, message) {
    return library + ": " + message;
  }

  function codeFromLibrary(library) {
    var code = library.replace(/[-\.]/g, '_').toUpperCase();
    return code;
  }
},524,[1,525,520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      define([], factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      root.compareVersions = factory();
    }
  })(this, function () {
    var semver = /^v?(?:\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+))?(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;

    function indexOrEnd(str, q) {
      return str.indexOf(q) === -1 ? str.length : str.indexOf(q);
    }

    function split(v) {
      var c = v.replace(/^v/, '').replace(/\+.*$/, '');
      var patchIndex = indexOrEnd(c, '-');
      var arr = c.substring(0, patchIndex).split('.');
      arr.push(c.substring(patchIndex + 1));
      return arr;
    }

    function tryParse(v) {
      return isNaN(Number(v)) ? v : Number(v);
    }

    function validate(version) {
      if (typeof version !== 'string') {
        throw new TypeError('Invalid argument expected string');
      }

      if (!semver.test(version)) {
        throw new Error('Invalid argument not valid semver (\'' + version + '\' received)');
      }
    }

    return function compareVersions(v1, v2) {
      [v1, v2].forEach(validate);
      var s1 = split(v1);
      var s2 = split(v2);

      for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {
        var n1 = parseInt(s1[i] || 0, 10);
        var n2 = parseInt(s2[i] || 0, 10);
        if (n1 > n2) return 1;
        if (n2 > n1) return -1;
      }

      var sp1 = s1[s1.length - 1];
      var sp2 = s2[s2.length - 1];

      if (sp1 && sp2) {
        var p1 = sp1.split('.').map(tryParse);
        var p2 = sp2.split('.').map(tryParse);

        for (i = 0; i < Math.max(p1.length, p2.length); i++) {
          if (p1[i] === undefined || typeof p2[i] === 'string' && typeof p1[i] === 'number') return -1;
          if (p2[i] === undefined || typeof p1[i] === 'string' && typeof p2[i] === 'number') return 1;
          if (p1[i] > p2[i]) return 1;
          if (p2[i] > p1[i]) return -1;
        }
      } else if (sp1 || sp2) {
        return sp1 ? -1 : 1;
      }

      return 0;
    };
  });
},525,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var FileSystem = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  Object.keys(FileSystem).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return FileSystem[key];
      }
    });
  });

  if (module && module.exports) {
    var wasImportWarningShown = false;
    Object.defineProperty(module.exports, 'FileSystem', {
      get: function get() {
        if (!wasImportWarningShown) {
          console.warn("The syntax \"import { FileSystem } from 'expo-file-system'\" is deprecated. Use \"import * as FileSystem from 'expo-file-system'\" or import named exports instead. Support for the old syntax will be removed in SDK 34.");
          wasImportWarningShown = true;
        }

        return FileSystem;
      }
    });
  }
},526,[361,527]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getInfoAsync = getInfoAsync;
  exports.readAsStringAsync = readAsStringAsync;
  exports.writeAsStringAsync = writeAsStringAsync;
  exports.deleteAsync = deleteAsync;
  exports.moveAsync = moveAsync;
  exports.copyAsync = copyAsync;
  exports.makeDirectoryAsync = makeDirectoryAsync;
  exports.readDirectoryAsync = readDirectoryAsync;
  exports.downloadAsync = downloadAsync;
  exports.createDownloadResumable = createDownloadResumable;
  Object.defineProperty(exports, "EncodingType", {
    enumerable: true,
    get: function get() {
      return _FileSystem.EncodingType;
    }
  });
  exports.DownloadResumable = exports.bundleDirectory = exports.bundledAssets = exports.cacheDirectory = exports.documentDirectory = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _core = _$$_REQUIRE(_dependencyMap[4]);

  var _uuidJs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _ExponentFileSystem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _FileSystem = _$$_REQUIRE(_dependencyMap[7]);

  if (!_ExponentFileSystem.default) {
    console.warn("No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?");
  }

  var _unused = new _core.EventEmitter(_ExponentFileSystem.default);

  function normalizeEndingSlash(p) {
    if (p != null) {
      return p.replace(/\/*$/, '') + '/';
    }

    return null;
  }

  var documentDirectory = normalizeEndingSlash(_ExponentFileSystem.default.documentDirectory);
  exports.documentDirectory = documentDirectory;
  var cacheDirectory = normalizeEndingSlash(_ExponentFileSystem.default.cacheDirectory);
  exports.cacheDirectory = cacheDirectory;
  var bundledAssets = _ExponentFileSystem.default.bundledAssets,
      bundleDirectory = _ExponentFileSystem.default.bundleDirectory;
  exports.bundleDirectory = bundleDirectory;
  exports.bundledAssets = bundledAssets;

  function getInfoAsync(fileUri) {
    var options,
        _args = arguments;
    return _regenerator.default.async(function getInfoAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

            if (_ExponentFileSystem.default.getInfoAsync) {
              _context.next = 3;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'getInfoAsync');

          case 3:
            _context.next = 5;
            return _regenerator.default.awrap(_ExponentFileSystem.default.getInfoAsync(fileUri, options));

          case 5:
            return _context.abrupt("return", _context.sent);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    });
  }

  function readAsStringAsync(fileUri, options) {
    return _regenerator.default.async(function readAsStringAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (_ExponentFileSystem.default.readAsStringAsync) {
              _context2.next = 2;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'readAsStringAsync');

          case 2:
            _context2.next = 4;
            return _regenerator.default.awrap(_ExponentFileSystem.default.readAsStringAsync(fileUri, options || {}));

          case 4:
            return _context2.abrupt("return", _context2.sent);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    });
  }

  function writeAsStringAsync(fileUri, contents) {
    var options,
        _args3 = arguments;
    return _regenerator.default.async(function writeAsStringAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};

            if (_ExponentFileSystem.default.writeAsStringAsync) {
              _context3.next = 3;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'writeAsStringAsync');

          case 3:
            _context3.next = 5;
            return _regenerator.default.awrap(_ExponentFileSystem.default.writeAsStringAsync(fileUri, contents, options));

          case 5:
            return _context3.abrupt("return", _context3.sent);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    });
  }

  function deleteAsync(fileUri) {
    var options,
        _args4 = arguments;
    return _regenerator.default.async(function deleteAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};

            if (_ExponentFileSystem.default.deleteAsync) {
              _context4.next = 3;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'deleteAsync');

          case 3:
            _context4.next = 5;
            return _regenerator.default.awrap(_ExponentFileSystem.default.deleteAsync(fileUri, options));

          case 5:
            return _context4.abrupt("return", _context4.sent);

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    });
  }

  function moveAsync(options) {
    return _regenerator.default.async(function moveAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (_ExponentFileSystem.default.moveAsync) {
              _context5.next = 2;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'moveAsync');

          case 2:
            _context5.next = 4;
            return _regenerator.default.awrap(_ExponentFileSystem.default.moveAsync(options));

          case 4:
            return _context5.abrupt("return", _context5.sent);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    });
  }

  function copyAsync(options) {
    return _regenerator.default.async(function copyAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (_ExponentFileSystem.default.copyAsync) {
              _context6.next = 2;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'copyAsync');

          case 2:
            _context6.next = 4;
            return _regenerator.default.awrap(_ExponentFileSystem.default.copyAsync(options));

          case 4:
            return _context6.abrupt("return", _context6.sent);

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    });
  }

  function makeDirectoryAsync(fileUri) {
    var options,
        _args7 = arguments;
    return _regenerator.default.async(function makeDirectoryAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};

            if (_ExponentFileSystem.default.makeDirectoryAsync) {
              _context7.next = 3;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'makeDirectoryAsync');

          case 3:
            _context7.next = 5;
            return _regenerator.default.awrap(_ExponentFileSystem.default.makeDirectoryAsync(fileUri, options));

          case 5:
            return _context7.abrupt("return", _context7.sent);

          case 6:
          case "end":
            return _context7.stop();
        }
      }
    });
  }

  function readDirectoryAsync(fileUri) {
    return _regenerator.default.async(function readDirectoryAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (_ExponentFileSystem.default.readDirectoryAsync) {
              _context8.next = 2;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'readDirectoryAsync');

          case 2:
            _context8.next = 4;
            return _regenerator.default.awrap(_ExponentFileSystem.default.readDirectoryAsync(fileUri, {}));

          case 4:
            return _context8.abrupt("return", _context8.sent);

          case 5:
          case "end":
            return _context8.stop();
        }
      }
    });
  }

  function downloadAsync(uri, fileUri) {
    var options,
        _args9 = arguments;
    return _regenerator.default.async(function downloadAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            options = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};

            if (_ExponentFileSystem.default.downloadAsync) {
              _context9.next = 3;
              break;
            }

            throw new _core.UnavailabilityError('expo-file-system', 'downloadAsync');

          case 3:
            _context9.next = 5;
            return _regenerator.default.awrap(_ExponentFileSystem.default.downloadAsync(uri, fileUri, options));

          case 5:
            return _context9.abrupt("return", _context9.sent);

          case 6:
          case "end":
            return _context9.stop();
        }
      }
    });
  }

  function createDownloadResumable(uri, fileUri, options, callback, resumeData) {
    return new DownloadResumable(uri, fileUri, options, callback, resumeData);
  }

  var DownloadResumable = function () {
    function DownloadResumable(url, fileUri) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : undefined;
      var resumeData = arguments.length > 4 ? arguments[4] : undefined;
      (0, _classCallCheck2.default)(this, DownloadResumable);
      this._uuid = _uuidJs.default.create(4).toString();
      this._url = url;
      this._fileUri = fileUri;
      this._options = options;
      this._resumeData = resumeData;
      this._callback = callback;
      this._subscription = null;
      this._emitter = new _core.EventEmitter(_ExponentFileSystem.default);
    }

    (0, _createClass2.default)(DownloadResumable, [{
      key: "downloadAsync",
      value: function downloadAsync() {
        return _regenerator.default.async(function downloadAsync$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (_ExponentFileSystem.default.downloadResumableStartAsync) {
                  _context10.next = 2;
                  break;
                }

                throw new _core.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');

              case 2:
                this._addSubscription();

                _context10.next = 5;
                return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));

              case 5:
                return _context10.abrupt("return", _context10.sent);

              case 6:
              case "end":
                return _context10.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "pauseAsync",
      value: function pauseAsync() {
        var pauseResult;
        return _regenerator.default.async(function pauseAsync$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (_ExponentFileSystem.default.downloadResumablePauseAsync) {
                  _context11.next = 2;
                  break;
                }

                throw new _core.UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');

              case 2:
                _context11.next = 4;
                return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumablePauseAsync(this._uuid));

              case 4:
                pauseResult = _context11.sent;

                this._removeSubscription();

                if (!pauseResult) {
                  _context11.next = 11;
                  break;
                }

                this._resumeData = pauseResult.resumeData;
                return _context11.abrupt("return", this.savable());

              case 11:
                throw new Error('Unable to generate a savable pause state');

              case 12:
              case "end":
                return _context11.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "resumeAsync",
      value: function resumeAsync() {
        return _regenerator.default.async(function resumeAsync$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (_ExponentFileSystem.default.downloadResumableStartAsync) {
                  _context12.next = 2;
                  break;
                }

                throw new _core.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');

              case 2:
                this._addSubscription();

                _context12.next = 5;
                return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));

              case 5:
                return _context12.abrupt("return", _context12.sent);

              case 6:
              case "end":
                return _context12.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "savable",
      value: function savable() {
        return {
          url: this._url,
          fileUri: this._fileUri,
          options: this._options,
          resumeData: this._resumeData
        };
      }
    }, {
      key: "_addSubscription",
      value: function _addSubscription() {
        var _this = this;

        if (this._subscription) {
          return;
        }

        this._subscription = this._emitter.addListener('Exponent.downloadProgress', function (event) {
          if (event.uuid === _this._uuid) {
            var callback = _this._callback;

            if (callback) {
              callback(event.data);
            }
          }
        });
      }
    }, {
      key: "_removeSubscription",
      value: function _removeSubscription() {
        if (!this._subscription) {
          return;
        }

        this._emitter.removeSubscription(this._subscription);

        this._subscription = null;
      }
    }]);
    return DownloadResumable;
  }();

  exports.DownloadResumable = DownloadResumable;
},527,[1,19,20,129,510,528,529,531]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function UUIDjs() {}

  ;

  UUIDjs.maxFromBits = function (bits) {
    return Math.pow(2, bits);
  };

  UUIDjs.limitUI04 = UUIDjs.maxFromBits(4);
  UUIDjs.limitUI06 = UUIDjs.maxFromBits(6);
  UUIDjs.limitUI08 = UUIDjs.maxFromBits(8);
  UUIDjs.limitUI12 = UUIDjs.maxFromBits(12);
  UUIDjs.limitUI14 = UUIDjs.maxFromBits(14);
  UUIDjs.limitUI16 = UUIDjs.maxFromBits(16);
  UUIDjs.limitUI32 = UUIDjs.maxFromBits(32);
  UUIDjs.limitUI40 = UUIDjs.maxFromBits(40);
  UUIDjs.limitUI48 = UUIDjs.maxFromBits(48);

  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  UUIDjs.randomUI04 = function () {
    return getRandomInt(0, UUIDjs.limitUI04 - 1);
  };

  UUIDjs.randomUI06 = function () {
    return getRandomInt(0, UUIDjs.limitUI06 - 1);
  };

  UUIDjs.randomUI08 = function () {
    return getRandomInt(0, UUIDjs.limitUI08 - 1);
  };

  UUIDjs.randomUI12 = function () {
    return getRandomInt(0, UUIDjs.limitUI12 - 1);
  };

  UUIDjs.randomUI14 = function () {
    return getRandomInt(0, UUIDjs.limitUI14 - 1);
  };

  UUIDjs.randomUI16 = function () {
    return getRandomInt(0, UUIDjs.limitUI16 - 1);
  };

  UUIDjs.randomUI32 = function () {
    return getRandomInt(0, UUIDjs.limitUI32 - 1);
  };

  UUIDjs.randomUI40 = function () {
    return (0 | Math.random() * 1073741824) + (0 | Math.random() * 1024) * 1073741824;
  };

  UUIDjs.randomUI48 = function () {
    return (0 | Math.random() * 1073741824) + (0 | Math.random() * 262144) * 1073741824;
  };

  UUIDjs.paddedString = function (string, length, z) {
    string = String(string);
    z = !z ? '0' : z;
    var i = length - string.length;

    for (; i > 0; i >>>= 1, z += z) {
      if (i & 1) {
        string = z + string;
      }
    }

    return string;
  };

  UUIDjs.prototype.fromParts = function (timeLow, timeMid, timeHiAndVersion, clockSeqHiAndReserved, clockSeqLow, node) {
    this.version = timeHiAndVersion >> 12 & 0xF;
    this.hex = UUIDjs.paddedString(timeLow.toString(16), 8) + '-' + UUIDjs.paddedString(timeMid.toString(16), 4) + '-' + UUIDjs.paddedString(timeHiAndVersion.toString(16), 4) + '-' + UUIDjs.paddedString(clockSeqHiAndReserved.toString(16), 2) + UUIDjs.paddedString(clockSeqLow.toString(16), 2) + '-' + UUIDjs.paddedString(node.toString(16), 12);
    return this;
  };

  UUIDjs.prototype.toString = function () {
    return this.hex;
  };

  UUIDjs.prototype.toURN = function () {
    return 'urn:uuid:' + this.hex;
  };

  UUIDjs.prototype.toBytes = function () {
    var parts = this.hex.split('-');
    var ints = [];
    var intPos = 0;

    for (var i = 0; i < parts.length; i++) {
      for (var j = 0; j < parts[i].length; j += 2) {
        ints[intPos++] = parseInt(parts[i].substr(j, 2), 16);
      }
    }

    return ints;
  };

  UUIDjs.prototype.equals = function (uuid) {
    if (!(uuid instanceof UUID)) {
      return false;
    }

    if (this.hex !== uuid.hex) {
      return false;
    }

    return true;
  };

  UUIDjs.getTimeFieldValues = function (time) {
    var ts = time - Date.UTC(1582, 9, 15);
    var hm = ts / 0x100000000 * 10000 & 0xFFFFFFF;
    return {
      low: (ts & 0xFFFFFFF) * 10000 % 0x100000000,
      mid: hm & 0xFFFF,
      hi: hm >>> 16,
      timestamp: ts
    };
  };

  UUIDjs._create4 = function () {
    return new UUIDjs().fromParts(UUIDjs.randomUI32(), UUIDjs.randomUI16(), 0x4000 | UUIDjs.randomUI12(), 0x80 | UUIDjs.randomUI06(), UUIDjs.randomUI08(), UUIDjs.randomUI48());
  };

  UUIDjs._create1 = function () {
    var now = new Date().getTime();
    var sequence = UUIDjs.randomUI14();
    var node = (UUIDjs.randomUI08() | 1) * 0x10000000000 + UUIDjs.randomUI40();
    var tick = UUIDjs.randomUI04();
    var timestamp = 0;
    var timestampRatio = 0.25;

    if (now != timestamp) {
      if (now < timestamp) {
        sequence++;
      }

      timestamp = now;
      tick = UUIDjs.randomUI04();
    } else if (Math.random() < timestampRatio && tick < 9984) {
      tick += 1 + UUIDjs.randomUI04();
    } else {
      sequence++;
    }

    var tf = UUIDjs.getTimeFieldValues(timestamp);
    var tl = tf.low + tick;
    var thav = tf.hi & 0xFFF | 0x1000;
    sequence &= 0x3FFF;
    var cshar = sequence >>> 8 | 0x80;
    var csl = sequence & 0xFF;
    return new UUIDjs().fromParts(tl, tf.mid, thav, cshar, csl, node);
  };

  UUIDjs.create = function (version) {
    version = version || 4;
    return this['_create' + version]();
  };

  UUIDjs.fromTime = function (time, last) {
    last = !last ? false : last;
    var tf = UUIDjs.getTimeFieldValues(time);
    var tl = tf.low;
    var thav = tf.hi & 0xFFF | 0x1000;

    if (last === false) {
      return new UUIDjs().fromParts(tl, tf.mid, thav, 0, 0, 0);
    } else {
      return new UUIDjs().fromParts(tl, tf.mid, thav, 0x80 | UUIDjs.limitUI06, UUIDjs.limitUI08 - 1, UUIDjs.limitUI48 - 1);
    }
  };

  UUIDjs.firstFromTime = function (time) {
    return UUIDjs.fromTime(time, false);
  };

  UUIDjs.lastFromTime = function (time) {
    return UUIDjs.fromTime(time, true);
  };

  UUIDjs.fromURN = function (strId) {
    var r,
        p = /^(?:urn:uuid:|\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(?:\})?$/i;

    if (r = p.exec(strId)) {
      return new UUIDjs().fromParts(parseInt(r[1], 16), parseInt(r[2], 16), parseInt(r[3], 16), parseInt(r[4], 16), parseInt(r[5], 16), parseInt(r[6], 16));
    }

    return null;
  };

  UUIDjs.fromBytes = function (ints) {
    if (ints.length < 5) {
      return null;
    }

    var str = '';
    var pos = 0;
    var parts = [4, 2, 2, 2, 6];

    for (var i = 0; i < parts.length; i++) {
      for (var j = 0; j < parts[i]; j++) {
        var octet = ints[pos++].toString(16);

        if (octet.length == 1) {
          octet = '0' + octet;
        }

        str += octet;
      }

      if (parts[i] !== 6) {
        str += '-';
      }
    }

    return UUIDjs.fromURN(str);
  };

  UUIDjs.fromBinary = function (binary) {
    var ints = [];

    for (var i = 0; i < binary.length; i++) {
      ints[i] = binary.charCodeAt(i);

      if (ints[i] > 255 || ints[i] < 0) {
        throw new Error('Unexpected byte in binary data.');
      }
    }

    return UUIDjs.fromBytes(ints);
  };

  UUIDjs.new = function () {
    return this.create(4);
  };

  UUIDjs.newTS = function () {
    return this.create(1);
  };

  module.exports = UUIDjs;
},528,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _core = _$$_REQUIRE(_dependencyMap[1]);

  var _ExponentFileSystemShim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var platformModule;

  if (_core.NativeModulesProxy.ExponentFileSystem) {
    platformModule = _core.NativeModulesProxy.ExponentFileSystem;
  } else {
    platformModule = _ExponentFileSystemShim.default;
  }

  var _default = platformModule;
  exports.default = _default;
},529,[1,510,530]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var platformModule = {
    get name() {
      return 'ExponentFileSystem';
    },

    get documentDirectory() {
      return null;
    },

    get cacheDirectory() {
      return null;
    },

    get bundledAssets() {
      return null;
    },

    get bundleDirectory() {
      return null;
    },

    addListener: function addListener(eventName) {},
    removeListeners: function removeListeners(count) {}
  };
  var _default = platformModule;
  exports.default = _default;
},530,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EncodingType = undefined;
  var EncodingType;
  exports.EncodingType = EncodingType;

  (function (EncodingType) {
    EncodingType["UTF8"] = "utf8";
    EncodingType["Base64"] = "base64";
  })(EncodingType || (exports.EncodingType = EncodingType = {}));
},531,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "AppOwnership", {
    enumerable: true,
    get: function get() {
      return _Constants.AppOwnership;
    }
  });
  Object.defineProperty(exports, "UserInterfaceIdiom", {
    enumerable: true,
    get: function get() {
      return _Constants.UserInterfaceIdiom;
    }
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _Constants = _$$_REQUIRE(_dependencyMap[3]);

  var _ExponentConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  if (!_ExponentConstants.default) {
    console.warn("No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?");
  }

  var manifest = null;

  if (_ExponentConstants.default && _ExponentConstants.default.manifest) {
    manifest = _ExponentConstants.default.manifest;

    if (typeof manifest === 'string') {
      manifest = JSON.parse(manifest);
    }
  }

  var _ref = _ExponentConstants.default || {},
      name = _ref.name,
      constants = (0, _objectWithoutProperties2.default)(_ref, ["name"]);

  var _default = (0, _objectSpread2.default)({}, constants, {
    manifest: manifest,
    deviceId: constants.installationId,
    linkingUrl: constants.linkingUri
  });

  exports.default = _default;
},532,[1,43,6,533,534]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UserInterfaceIdiom = exports.AppOwnership = undefined;
  var AppOwnership;
  exports.AppOwnership = AppOwnership;

  (function (AppOwnership) {
    AppOwnership["Standalone"] = "standalone";
    AppOwnership["Expo"] = "expo";
    AppOwnership["Guest"] = "guest";
  })(AppOwnership || (exports.AppOwnership = AppOwnership = {}));

  var UserInterfaceIdiom;
  exports.UserInterfaceIdiom = UserInterfaceIdiom;

  (function (UserInterfaceIdiom) {
    UserInterfaceIdiom["Handset"] = "handset";
    UserInterfaceIdiom["Tablet"] = "tablet";
    UserInterfaceIdiom["Unsupported"] = "unsupported";
  })(UserInterfaceIdiom || (exports.UserInterfaceIdiom = UserInterfaceIdiom = {}));
},533,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _core = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _core.NativeModulesProxy.ExponentConstants;
  exports.default = _default;
},534,[510]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _AssetRegistry = _$$_REQUIRE(_dependencyMap[0]);

  Object.keys(_AssetRegistry).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _AssetRegistry[key];
      }
    });
  });
},535,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;

  var _resolveAssetSource = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  Object.keys(_resolveAssetSource).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _resolveAssetSource[key];
      }
    });
  });
  var _default = _resolveAssetSource.default;
  exports.default = _default;
},536,[361,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.selectAssetSource = selectAssetSource;
  exports.resolveUri = resolveUri;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _core = _$$_REQUIRE(_dependencyMap[3]);

  var _pathBrowserify = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var _urlParse = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AssetSourceResolver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _AssetUris = _$$_REQUIRE(_dependencyMap[8]);

  var assetMapOverride = _expoConstants.default.manifest && _expoConstants.default.manifest.assetMapOverride;
  var manifestBaseUrl = _expoConstants.default.experienceUrl ? (0, _AssetUris.getManifestBaseUrl)(_expoConstants.default.experienceUrl) : null;

  function selectAssetSource(meta) {
    if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {
      meta = (0, _objectSpread2.default)({}, meta, assetMapOverride[meta.hash]);
    }

    var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());

    var index = meta.scales.findIndex(function (s) {
      return s === scale;
    });
    var hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;
    var uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;

    if (uri) {
      return {
        uri: resolveUri(uri),
        hash: hash
      };
    }

    var assetUrlOverride = _expoConstants.default.manifest && _expoConstants.default.manifest.assetUrlOverride;

    if (assetUrlOverride) {
      var _uri = _pathBrowserify.default.join(assetUrlOverride, hash);

      return {
        uri: resolveUri(_uri),
        hash: hash
      };
    }

    var fileScale = scale === 1 ? '' : "@" + scale + "x";
    var fileExtension = meta.type ? "." + encodeURIComponent(meta.type) : '';
    var suffix = "/" + encodeURIComponent(meta.name) + fileScale + fileExtension + "?platform=" + encodeURIComponent(_core.Platform.OS) + "&hash=" + encodeURIComponent(meta.hash);

    if (/^https?:\/\//.test(meta.httpServerLocation)) {
      var _uri2 = meta.httpServerLocation + suffix;

      return {
        uri: _uri2,
        hash: hash
      };
    }

    if (_expoConstants.default.manifest && _expoConstants.default.manifest.developer) {
      var baseUrl = new _urlParse.default(_expoConstants.default.manifest.bundleUrl);
      baseUrl.set('pathname', meta.httpServerLocation + suffix);
      return {
        uri: baseUrl.href,
        hash: hash
      };
    }

    return {
      uri: "https://d1wp6m56sqw74a.cloudfront.net/~assets/" + encodeURIComponent(hash),
      hash: hash
    };
  }

  function resolveUri(uri) {
    if (!manifestBaseUrl) {
      return uri;
    }

    var _ref = new _urlParse.default(uri),
        protocol = _ref.protocol;

    if (protocol !== '') {
      return uri;
    }

    var baseUrl = new _urlParse.default(manifestBaseUrl);
    var resolvedPath = uri.startsWith('/') ? uri : _pathBrowserify.default.join(baseUrl.pathname, uri);
    baseUrl.set('pathname', resolvedPath);
    return baseUrl.href;
  }
},537,[1,43,532,510,538,2,539,542,543]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function assertPath(path) {
    if (typeof path !== 'string') {
      throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
    }
  }

  function normalizeStringPosix(path, allowAboveRoot) {
    var res = '';
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;

    for (var i = 0; i <= path.length; ++i) {
      if (i < path.length) code = path.charCodeAt(i);else if (code === 47) break;else code = 47;

      if (code === 47) {
          if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
            if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                if (res.length > 2) {
                  var lastSlashIndex = res.lastIndexOf('/');

                  if (lastSlashIndex !== res.length - 1) {
                    if (lastSlashIndex === -1) {
                      res = '';
                      lastSegmentLength = 0;
                    } else {
                      res = res.slice(0, lastSlashIndex);
                      lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
                    }

                    lastSlash = i;
                    dots = 0;
                    continue;
                  }
                } else if (res.length === 2 || res.length === 1) {
                  res = '';
                  lastSegmentLength = 0;
                  lastSlash = i;
                  dots = 0;
                  continue;
                }
              }

            if (allowAboveRoot) {
              if (res.length > 0) res += '/..';else res = '..';
              lastSegmentLength = 2;
            }
          } else {
            if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);
            lastSegmentLength = i - lastSlash - 1;
          }

          lastSlash = i;
          dots = 0;
        } else if (code === 46 && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }

    return res;
  }

  function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');

    if (!dir) {
      return base;
    }

    if (dir === pathObject.root) {
      return dir + base;
    }

    return dir + sep + base;
  }

  var posix = {
    resolve: function resolve() {
      var resolvedPath = '';
      var resolvedAbsolute = false;
      var cwd;

      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path;
        if (i >= 0) path = arguments[i];else {
          if (cwd === undefined) cwd = process.cwd();
          path = cwd;
        }
        assertPath(path);

        if (path.length === 0) {
          continue;
        }

        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charCodeAt(0) === 47;
      }

      resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

      if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';
      } else if (resolvedPath.length > 0) {
        return resolvedPath;
      } else {
        return '.';
      }
    },
    normalize: function normalize(path) {
      assertPath(path);
      if (path.length === 0) return '.';
      var isAbsolute = path.charCodeAt(0) === 47;
      var trailingSeparator = path.charCodeAt(path.length - 1) === 47;
      path = normalizeStringPosix(path, !isAbsolute);
      if (path.length === 0 && !isAbsolute) path = '.';
      if (path.length > 0 && trailingSeparator) path += '/';
      if (isAbsolute) return '/' + path;
      return path;
    },
    isAbsolute: function isAbsolute(path) {
      assertPath(path);
      return path.length > 0 && path.charCodeAt(0) === 47;
    },
    join: function join() {
      if (arguments.length === 0) return '.';
      var joined;

      for (var i = 0; i < arguments.length; ++i) {
        var arg = arguments[i];
        assertPath(arg);

        if (arg.length > 0) {
          if (joined === undefined) joined = arg;else joined += '/' + arg;
        }
      }

      if (joined === undefined) return '.';
      return posix.normalize(joined);
    },
    relative: function relative(from, to) {
      assertPath(from);
      assertPath(to);
      if (from === to) return '';
      from = posix.resolve(from);
      to = posix.resolve(to);
      if (from === to) return '';
      var fromStart = 1;

      for (; fromStart < from.length; ++fromStart) {
        if (from.charCodeAt(fromStart) !== 47) break;
      }

      var fromEnd = from.length;
      var fromLen = fromEnd - fromStart;
      var toStart = 1;

      for (; toStart < to.length; ++toStart) {
        if (to.charCodeAt(toStart) !== 47) break;
      }

      var toEnd = to.length;
      var toLen = toEnd - toStart;
      var length = fromLen < toLen ? fromLen : toLen;
      var lastCommonSep = -1;
      var i = 0;

      for (; i <= length; ++i) {
        if (i === length) {
          if (toLen > length) {
            if (to.charCodeAt(toStart + i) === 47) {
                return to.slice(toStart + i + 1);
              } else if (i === 0) {
              return to.slice(toStart + i);
            }
          } else if (fromLen > length) {
            if (from.charCodeAt(fromStart + i) === 47) {
                lastCommonSep = i;
              } else if (i === 0) {
              lastCommonSep = 0;
            }
          }

          break;
        }

        var fromCode = from.charCodeAt(fromStart + i);
        var toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;else if (fromCode === 47) lastCommonSep = i;
      }

      var out = '';

      for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
        if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0) out += '..';else out += '/..';
          }
      }

      if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
      }
    },
    _makeLong: function _makeLong(path) {
      return path;
    },
    dirname: function dirname(path) {
      assertPath(path);
      if (path.length === 0) return '.';
      var code = path.charCodeAt(0);
      var hasRoot = code === 47;
      var end = -1;
      var matchedSlash = true;

      for (var i = path.length - 1; i >= 1; --i) {
        code = path.charCodeAt(i);

        if (code === 47) {
            if (!matchedSlash) {
              end = i;
              break;
            }
          } else {
          matchedSlash = false;
        }
      }

      if (end === -1) return hasRoot ? '/' : '.';
      if (hasRoot && end === 1) return '//';
      return path.slice(0, end);
    },
    basename: function basename(path, ext) {
      if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
      assertPath(path);
      var start = 0;
      var end = -1;
      var matchedSlash = true;
      var i;

      if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return '';
        var extIdx = ext.length - 1;
        var firstNonSlashEnd = -1;

        for (i = path.length - 1; i >= 0; --i) {
          var code = path.charCodeAt(i);

          if (code === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else {
            if (firstNonSlashEnd === -1) {
              matchedSlash = false;
              firstNonSlashEnd = i + 1;
            }

            if (extIdx >= 0) {
              if (code === ext.charCodeAt(extIdx)) {
                if (--extIdx === -1) {
                  end = i;
                }
              } else {
                extIdx = -1;
                end = firstNonSlashEnd;
              }
            }
          }
        }

        if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
        return path.slice(start, end);
      } else {
        for (i = path.length - 1; i >= 0; --i) {
          if (path.charCodeAt(i) === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
        }

        if (end === -1) return '';
        return path.slice(start, end);
      }
    },
    extname: function extname(path) {
      assertPath(path);
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true;
      var preDotState = 0;

      for (var i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);

        if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }

            continue;
          }

        if (end === -1) {
          matchedSlash = false;
          end = i + 1;
        }

        if (code === 46) {
            if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
          } else if (startDot !== -1) {
          preDotState = -1;
        }
      }

      if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return '';
      }

      return path.slice(startDot, end);
    },
    format: function format(pathObject) {
      if (pathObject === null || typeof pathObject !== 'object') {
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
      }

      return _format('/', pathObject);
    },
    parse: function parse(path) {
      assertPath(path);
      var ret = {
        root: '',
        dir: '',
        base: '',
        ext: '',
        name: ''
      };
      if (path.length === 0) return ret;
      var code = path.charCodeAt(0);
      var isAbsolute = code === 47;
      var start;

      if (isAbsolute) {
        ret.root = '/';
        start = 1;
      } else {
        start = 0;
      }

      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true;
      var i = path.length - 1;
      var preDotState = 0;

      for (; i >= start; --i) {
        code = path.charCodeAt(i);

        if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }

            continue;
          }

        if (end === -1) {
          matchedSlash = false;
          end = i + 1;
        }

        if (code === 46) {
            if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
          } else if (startDot !== -1) {
          preDotState = -1;
        }
      }

      if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
          if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
        }
      } else {
        if (startPart === 0 && isAbsolute) {
          ret.name = path.slice(1, startDot);
          ret.base = path.slice(1, end);
        } else {
          ret.name = path.slice(startPart, startDot);
          ret.base = path.slice(startPart, end);
        }

        ret.ext = path.slice(startDot, end);
      }

      if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';
      return ret;
    },
    sep: '/',
    delimiter: ':',
    win32: null,
    posix: null
  };
  posix.posix = posix;
  module.exports = posix;
},538,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var required = _$$_REQUIRE(_dependencyMap[0]),
      qs = _$$_REQUIRE(_dependencyMap[1]),
      protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,
      slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

  var rules = [['#', 'hash'], ['?', 'query'], function sanitize(address) {
    return address.replace('\\', '/');
  }, ['/', 'pathname'], ['@', 'auth', 1], [NaN, 'host', undefined, 1, 1], [/:(\d+)$/, 'port', undefined, 1], [NaN, 'hostname', undefined, 1, 1]];
  var ignore = {
    hash: 1,
    query: 1
  };

  function lolcation(loc) {
    var globalVar;
    if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};
    var location = globalVar.location || {};
    loc = loc || location;
    var finaldestination = {},
        type = typeof loc,
        key;

    if ('blob:' === loc.protocol) {
      finaldestination = new Url(unescape(loc.pathname), {});
    } else if ('string' === type) {
      finaldestination = new Url(loc, {});

      for (key in ignore) {
        delete finaldestination[key];
      }
    } else if ('object' === type) {
      for (key in loc) {
        if (key in ignore) continue;
        finaldestination[key] = loc[key];
      }

      if (finaldestination.slashes === undefined) {
        finaldestination.slashes = slashes.test(loc.href);
      }
    }

    return finaldestination;
  }

  function extractProtocol(address) {
    var match = protocolre.exec(address);
    return {
      protocol: match[1] ? match[1].toLowerCase() : '',
      slashes: !!match[2],
      rest: match[3]
    };
  }

  function resolve(relative, base) {
    var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
        i = path.length,
        last = path[i - 1],
        unshift = false,
        up = 0;

    while (i--) {
      if (path[i] === '.') {
        path.splice(i, 1);
      } else if (path[i] === '..') {
        path.splice(i, 1);
        up++;
      } else if (up) {
        if (i === 0) unshift = true;
        path.splice(i, 1);
        up--;
      }
    }

    if (unshift) path.unshift('');
    if (last === '.' || last === '..') path.push('');
    return path.join('/');
  }

  function Url(address, location, parser) {
    if (!(this instanceof Url)) {
      return new Url(address, location, parser);
    }

    var relative,
        extracted,
        parse,
        instruction,
        index,
        key,
        instructions = rules.slice(),
        type = typeof location,
        url = this,
        i = 0;

    if ('object' !== type && 'string' !== type) {
      parser = location;
      location = null;
    }

    if (parser && 'function' !== typeof parser) parser = qs.parse;
    location = lolcation(location);
    extracted = extractProtocol(address || '');
    relative = !extracted.protocol && !extracted.slashes;
    url.slashes = extracted.slashes || relative && location.slashes;
    url.protocol = extracted.protocol || location.protocol || '';
    address = extracted.rest;
    if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

    for (; i < instructions.length; i++) {
      instruction = instructions[i];

      if (typeof instruction === 'function') {
        address = instruction(address);
        continue;
      }

      parse = instruction[0];
      key = instruction[1];

      if (parse !== parse) {
        url[key] = address;
      } else if ('string' === typeof parse) {
        if (~(index = address.indexOf(parse))) {
          if ('number' === typeof instruction[2]) {
            url[key] = address.slice(0, index);
            address = address.slice(index + instruction[2]);
          } else {
            url[key] = address.slice(index);
            address = address.slice(0, index);
          }
        }
      } else if (index = parse.exec(address)) {
        url[key] = index[1];
        address = address.slice(0, index.index);
      }

      url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : '');
      if (instruction[4]) url[key] = url[key].toLowerCase();
    }

    if (parser) url.query = parser(url.query);

    if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
      url.pathname = resolve(url.pathname, location.pathname);
    }

    if (!required(url.port, url.protocol)) {
      url.host = url.hostname;
      url.port = '';
    }

    url.username = url.password = '';

    if (url.auth) {
      instruction = url.auth.split(':');
      url.username = instruction[0] || '';
      url.password = instruction[1] || '';
    }

    url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
    url.href = url.toString();
  }

  function set(part, value, fn) {
    var url = this;

    switch (part) {
      case 'query':
        if ('string' === typeof value && value.length) {
          value = (fn || qs.parse)(value);
        }

        url[part] = value;
        break;

      case 'port':
        url[part] = value;

        if (!required(value, url.protocol)) {
          url.host = url.hostname;
          url[part] = '';
        } else if (value) {
          url.host = url.hostname + ':' + value;
        }

        break;

      case 'hostname':
        url[part] = value;
        if (url.port) value += ':' + url.port;
        url.host = value;
        break;

      case 'host':
        url[part] = value;

        if (/:\d+$/.test(value)) {
          value = value.split(':');
          url.port = value.pop();
          url.hostname = value.join(':');
        } else {
          url.hostname = value;
          url.port = '';
        }

        break;

      case 'protocol':
        url.protocol = value.toLowerCase();
        url.slashes = !fn;
        break;

      case 'pathname':
      case 'hash':
        if (value) {
          var char = part === 'pathname' ? '/' : '#';
          url[part] = value.charAt(0) !== char ? char + value : value;
        } else {
          url[part] = value;
        }

        break;

      default:
        url[part] = value;
    }

    for (var i = 0; i < rules.length; i++) {
      var ins = rules[i];
      if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
    }

    url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
    url.href = url.toString();
    return url;
  }

  function toString(stringify) {
    if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
    var query,
        url = this,
        protocol = url.protocol;
    if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
    var result = protocol + (url.slashes ? '//' : '');

    if (url.username) {
      result += url.username;
      if (url.password) result += ':' + url.password;
      result += '@';
    }

    result += url.host + url.pathname;
    query = 'object' === typeof url.query ? stringify(url.query) : url.query;
    if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
    if (url.hash) result += url.hash;
    return result;
  }

  Url.prototype = {
    set: set,
    toString: toString
  };
  Url.extractProtocol = extractProtocol;
  Url.location = lolcation;
  Url.qs = qs;
  module.exports = Url;
},539,[540,541]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function required(port, protocol) {
    protocol = protocol.split(':')[0];
    port = +port;
    if (!port) return false;

    switch (protocol) {
      case 'http':
      case 'ws':
        return port !== 80;

      case 'https':
      case 'wss':
        return port !== 443;

      case 'ftp':
        return port !== 21;

      case 'gopher':
        return port !== 70;

      case 'file':
        return false;
    }

    return port !== 0;
  };
},540,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var has = Object.prototype.hasOwnProperty,
      undef;

  function decode(input) {
    return decodeURIComponent(input.replace(/\+/g, ' '));
  }

  function querystring(query) {
    var parser = /([^=?&]+)=?([^&]*)/g,
        result = {},
        part;

    while (part = parser.exec(query)) {
      var key = decode(part[1]),
          value = decode(part[2]);
      if (key in result) continue;
      result[key] = value;
    }

    return result;
  }

  function querystringify(obj, prefix) {
    prefix = prefix || '';
    var pairs = [],
        value,
        key;
    if ('string' !== typeof prefix) prefix = '?';

    for (key in obj) {
      if (has.call(obj, key)) {
        value = obj[key];

        if (!value && (value === null || value === undef || isNaN(value))) {
          value = '';
        }

        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
      }
    }

    return pairs.length ? prefix + pairs.join('&') : '';
  }

  exports.stringify = querystringify;
  exports.parse = querystring;
},541,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;

  var _AssetSourceResolver = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  Object.keys(_AssetSourceResolver).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _AssetSourceResolver[key];
      }
    });
  });
  var _default = _AssetSourceResolver.default;
  exports.default = _default;
},542,[361,155]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getFilename = getFilename;
  exports.getFileExtension = getFileExtension;
  exports.getManifestBaseUrl = getManifestBaseUrl;

  var _urlParse = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function getFilename(url) {
    var _ref = new _urlParse.default(url, {}),
        pathname = _ref.pathname;

    return pathname.substring(pathname.lastIndexOf('/') + 1);
  }

  function getFileExtension(url) {
    var filename = getFilename(url);
    var dotIndex = filename.lastIndexOf('.');
    return dotIndex > 0 ? filename.substring(dotIndex) : '';
  }

  function getManifestBaseUrl(manifestUrl) {
    var urlObject = new _urlParse.default(manifestUrl, {});

    if (urlObject.protocol === 'exp:') {
      urlObject.set('protocol', 'http:');
    } else if (urlObject.protocol === 'exps:') {
      urlObject.set('protocol', 'https:');
    }

    var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);
    urlObject.set('pathname', directory);
    urlObject.set('query', '');
    urlObject.set('hash', '');
    return urlObject.href;
  }
},543,[1,539]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getEmbeddedAssetUri = getEmbeddedAssetUri;

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var FileSystem = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var bundledAssets = new Set(FileSystem.bundledAssets || []);

  function getEmbeddedAssetUri(hash, type) {
    var assetName = "asset_" + hash + (type ? "." + type : '');

    if (_expoConstants.default.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {
      return null;
    }

    return "" + FileSystem.bundleDirectory + assetName;
  }
},544,[361,1,532,526]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isImageType = isImageType;
  exports.getImageInfoAsync = getImageInfoAsync;

  var _AssetUris = _$$_REQUIRE(_dependencyMap[0]);

  function isImageType(type) {
    return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);
  }

  function getImageInfoAsync(url) {
    return new Promise(function (resolve, reject) {
      var img = new Image();
      img.onerror = reject;

      img.onload = function () {
        resolve({
          name: (0, _AssetUris.getFilename)(url),
          width: img.naturalWidth,
          height: img.naturalHeight
        });
      };

      img.src = url;
    });
  }
},545,[543]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _core = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _core.NativeModulesProxy.ExpoFontLoader;
  exports.default = _default;
},546,[510]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconSet;
  exports.DEFAULT_ICON_COLOR = exports.DEFAULT_ICON_SIZE = exports.NativeIconAPI = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _ensureNativeModuleAvailable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _iconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _tabBarItemIos = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _toolbarAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  exports.NativeIconAPI = NativeIconAPI;
  var DEFAULT_ICON_SIZE = 12;
  exports.DEFAULT_ICON_SIZE = DEFAULT_ICON_SIZE;
  var DEFAULT_ICON_COLOR = 'black';
  exports.DEFAULT_ICON_COLOR = DEFAULT_ICON_COLOR;

  function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {
    var fontBasename = fontFile ? fontFile.replace(/\.(otf|ttf)$/, '') : fontFamily;

    var fontReference = _reactNative.Platform.select({
      windows: "Assets/" + fontFile + "#" + fontFamily,
      android: fontBasename,
      web: fontBasename,
      default: fontFamily
    });

    var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));

    var Icon = function (_PureComponent) {
      (0, _inherits2.default)(Icon, _PureComponent);

      function Icon() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, Icon);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Icon)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.root = null;

        _this.handleRef = function (ref) {
          _this.root = ref;
        };

        return _this;
      }

      (0, _createClass2.default)(Icon, [{
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.root) {
            this.root.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
              name = _this$props.name,
              size = _this$props.size,
              color = _this$props.color,
              style = _this$props.style,
              children = _this$props.children,
              props = (0, _objectWithoutProperties2.default)(_this$props, ["name", "size", "color", "style", "children"]);
          var glyph = name ? glyphMap[name] || '?' : '';

          if (typeof glyph === 'number') {
            glyph = String.fromCharCode(glyph);
          }

          var styleDefaults = {
            fontSize: size,
            color: color
          };
          var styleOverrides = {
            fontFamily: fontReference,
            fontWeight: 'normal',
            fontStyle: 'normal'
          };
          props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
          props.ref = this.handleRef;
          return _react.default.createElement(_reactNative.Text, props, glyph, children);
        }
      }]);
      return Icon;
    }(_react.PureComponent);

    Icon.propTypes = {
      allowFontScaling: _propTypes.default.bool,
      name: IconNamePropType,
      size: _propTypes.default.number,
      color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      children: _propTypes.default.node,
      style: _propTypes.default.any
    };
    Icon.defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    };
    var imageSourceCache = {};

    function getImageSource(name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      (0, _ensureNativeModuleAvailable.default)();
      var glyph = glyphMap[name] || '?';

      if (typeof glyph === 'number') {
        glyph = String.fromCharCode(glyph);
      }

      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = glyph + ":" + size + ":" + processedColor;

      var scale = _reactNative.PixelRatio.get();

      return new Promise(function (resolve, reject) {
        var cached = imageSourceCache[cacheKey];

        if (typeof cached !== 'undefined') {
          if (!cached || cached instanceof Error) {
            reject(cached);
          } else {
            resolve({
              uri: cached,
              scale: scale
            });
          }
        } else {
          NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {
            var error = typeof err === 'string' ? new Error(err) : err;
            imageSourceCache[cacheKey] = image || error || false;

            if (!error && image) {
              resolve({
                uri: image,
                scale: scale
              });
            } else {
              reject(error);
            }
          });
        }
      });
    }

    function loadFont() {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;

      if (_reactNative.Platform.OS === 'ios') {
        (0, _ensureNativeModuleAvailable.default)();

        if (!file) {
          return Promise.reject(new Error('Unable to load font, because no file was specified. '));
        }

        return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));
      }

      return Promise.resolve();
    }

    function hasIcon(name) {
      return Object.prototype.hasOwnProperty.call(glyphMap, name);
    }

    function getRawGlyphMap() {
      return glyphMap;
    }

    function getFontFamily() {
      return fontReference;
    }

    Icon.Button = (0, _iconButton.default)(Icon);
    Icon.TabBarItem = (0, _tabBarItemIos.default)(IconNamePropType, getImageSource);
    Icon.TabBarItemIOS = Icon.TabBarItem;
    Icon.ToolbarAndroid = (0, _toolbarAndroid.default)(IconNamePropType, getImageSource);
    Icon.getImageSource = getImageSource;
    Icon.loadFont = loadFont;
    Icon.hasIcon = hasIcon;
    Icon.getRawGlyphMap = getRawGlyphMap;
    Icon.getFontFamily = getFontFamily;
    return Icon;
  }
},547,[361,1,15,6,19,20,27,30,33,46,60,2,548,549,694,708]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ensureNativeModuleAvailable;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;

  function ensureNativeModuleAvailable() {
    if (!NativeIconAPI) {
      if (_reactNative.Platform.OS === 'android') {
        throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');
      }

      throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');
    }
  }
},548,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconButtonComponent;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _isString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _omit = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _pick = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[14]);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      padding: 8
    },
    touchable: {
      overflow: 'hidden'
    },
    icon: {
      marginRight: 10
    },
    text: {
      fontWeight: '600',
      backgroundColor: 'transparent'
    }
  });

  var IOS7_BLUE = '#007AFF';
  var TEXT_PROP_NAMES = ['ellipsizeMode', 'numberOfLines', 'textBreakStrategy', 'selectable', 'suppressHighlighting', 'allowFontScaling', 'adjustsFontSizeToFit', 'minimumFontScale'];
  var TOUCHABLE_PROP_NAMES = ['accessible', 'accessibilityLabel', 'accessibilityHint', 'accessibilityComponentType', 'accessibilityRole', 'accessibilityStates', 'accessibilityTraits', 'onFocus', 'onBlur', 'disabled', 'onPress', 'onPressIn', 'onPressOut', 'onLayout', 'onLongPress', 'nativeID', 'testID', 'delayPressIn', 'delayPressOut', 'delayLongPress', 'activeOpacity', 'underlayColor', 'selectionColor', 'onShowUnderlay', 'onHideUnderlay', 'hasTVPreferredFocus', 'tvParallaxProperties'];

  function createIconButtonComponent(Icon) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      (0, _inherits2.default)(IconButton, _PureComponent);

      function IconButton() {
        (0, _classCallCheck2.default)(this, IconButton);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(IconButton).apply(this, arguments));
      }

      (0, _createClass2.default)(IconButton, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
              style = _this$props.style,
              iconStyle = _this$props.iconStyle,
              children = _this$props.children,
              restProps = (0, _objectWithoutProperties2.default)(_this$props, ["style", "iconStyle", "children"]);
          var iconProps = (0, _pick.default)(restProps, TEXT_PROP_NAMES, 'style', 'name', 'size', 'color');
          var touchableProps = (0, _pick.default)(restProps, TOUCHABLE_PROP_NAMES);
          var props = (0, _omit.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
          iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
          var colorStyle = (0, _pick.default)(this.props, 'color');
          var blockStyle = (0, _pick.default)(this.props, 'backgroundColor', 'borderRadius');
          return _react.default.createElement(_reactNative.TouchableHighlight, (0, _extends2.default)({
            style: [styles.touchable, blockStyle]
          }, touchableProps), _react.default.createElement(_reactNative.View, (0, _extends2.default)({
            style: [styles.container, blockStyle, style]
          }, props), _react.default.createElement(Icon, iconProps), (0, _isString.default)(children) ? _react.default.createElement(_reactNative.Text, {
            style: [styles.text, colorStyle]
          }, children) : children));
        }
      }]);
      return IconButton;
    }(_react.PureComponent), _class.propTypes = {
      backgroundColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      borderRadius: _propTypes.default.number,
      color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      size: _propTypes.default.number,
      iconStyle: _propTypes.default.any,
      style: _propTypes.default.any,
      children: _propTypes.default.node
    }, _class.defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: 'white',
      size: 20
    }, _temp;
  }
},549,[361,1,8,6,19,20,27,30,33,550,559,687,46,60,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isArray = _$$_REQUIRE(_dependencyMap[1]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[2]);

  var stringTag = '[object String]';

  function isString(value) {
    return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
  }

  module.exports = isString;
},550,[551,557,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]),
      getRawTag = _$$_REQUIRE(_dependencyMap[1]),
      objectToString = _$$_REQUIRE(_dependencyMap[2]);

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  module.exports = baseGetTag;
},551,[552,555,556]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]);

  var Symbol = root.Symbol;
  module.exports = Symbol;
},552,[553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var freeGlobal = _$$_REQUIRE(_dependencyMap[0]);

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  module.exports = root;
},553,[554]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  module.exports = freeGlobal;
},554,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  module.exports = getRawTag;
},555,[552]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  module.exports = objectToString;
},556,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArray = Array.isArray;
  module.exports = isArray;
},557,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  module.exports = isObjectLike;
},558,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayMap = _$$_REQUIRE(_dependencyMap[0]),
      baseClone = _$$_REQUIRE(_dependencyMap[1]),
      baseUnset = _$$_REQUIRE(_dependencyMap[2]),
      castPath = _$$_REQUIRE(_dependencyMap[3]),
      copyObject = _$$_REQUIRE(_dependencyMap[4]),
      customOmitClone = _$$_REQUIRE(_dependencyMap[5]),
      flatRest = _$$_REQUIRE(_dependencyMap[6]),
      getAllKeysIn = _$$_REQUIRE(_dependencyMap[7]);

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var omit = flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);

    if (isDeep) {
      result = baseClone(result, 7, customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      baseUnset(result, paths[length]);
    }

    return result;
  });
  module.exports = omit;
},559,[560,561,660,661,605,674,676,640]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  module.exports = arrayMap;
},560,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Stack = _$$_REQUIRE(_dependencyMap[0]),
      arrayEach = _$$_REQUIRE(_dependencyMap[1]),
      assignValue = _$$_REQUIRE(_dependencyMap[2]),
      baseAssign = _$$_REQUIRE(_dependencyMap[3]),
      baseAssignIn = _$$_REQUIRE(_dependencyMap[4]),
      cloneBuffer = _$$_REQUIRE(_dependencyMap[5]),
      copyArray = _$$_REQUIRE(_dependencyMap[6]),
      copySymbols = _$$_REQUIRE(_dependencyMap[7]),
      copySymbolsIn = _$$_REQUIRE(_dependencyMap[8]),
      getAllKeys = _$$_REQUIRE(_dependencyMap[9]),
      getAllKeysIn = _$$_REQUIRE(_dependencyMap[10]),
      getTag = _$$_REQUIRE(_dependencyMap[11]),
      initCloneArray = _$$_REQUIRE(_dependencyMap[12]),
      initCloneByTag = _$$_REQUIRE(_dependencyMap[13]),
      initCloneObject = _$$_REQUIRE(_dependencyMap[14]),
      isArray = _$$_REQUIRE(_dependencyMap[15]),
      isBuffer = _$$_REQUIRE(_dependencyMap[16]),
      isMap = _$$_REQUIRE(_dependencyMap[17]),
      isObject = _$$_REQUIRE(_dependencyMap[18]),
      isSet = _$$_REQUIRE(_dependencyMap[19]),
      keys = _$$_REQUIRE(_dependencyMap[20]);

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject(value)) {
      return value;
    }

    var isArr = isArray(value);

    if (isArr) {
      result = initCloneArray(value);

      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }

      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);

        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = initCloneByTag(value, tag, isDeep);
      }
    }

    stack || (stack = new Stack());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
      return result;
    }

    if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }

      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  module.exports = baseClone;
},561,[562,600,601,604,624,628,629,630,634,638,640,641,646,647,654,557,611,656,580,658,606]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ListCache = _$$_REQUIRE(_dependencyMap[0]),
      stackClear = _$$_REQUIRE(_dependencyMap[1]),
      stackDelete = _$$_REQUIRE(_dependencyMap[2]),
      stackGet = _$$_REQUIRE(_dependencyMap[3]),
      stackHas = _$$_REQUIRE(_dependencyMap[4]),
      stackSet = _$$_REQUIRE(_dependencyMap[5]);

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  module.exports = Stack;
},562,[563,571,572,573,574,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var listCacheClear = _$$_REQUIRE(_dependencyMap[0]),
      listCacheDelete = _$$_REQUIRE(_dependencyMap[1]),
      listCacheGet = _$$_REQUIRE(_dependencyMap[2]),
      listCacheHas = _$$_REQUIRE(_dependencyMap[3]),
      listCacheSet = _$$_REQUIRE(_dependencyMap[4]);

  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  module.exports = ListCache;
},563,[564,565,568,569,570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  module.exports = listCacheClear;
},564,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assocIndexOf = _$$_REQUIRE(_dependencyMap[0]);

  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  module.exports = listCacheDelete;
},565,[566]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var eq = _$$_REQUIRE(_dependencyMap[0]);

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  module.exports = assocIndexOf;
},566,[567]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
},567,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assocIndexOf = _$$_REQUIRE(_dependencyMap[0]);

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;
},568,[566]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assocIndexOf = _$$_REQUIRE(_dependencyMap[0]);

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;
},569,[566]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assocIndexOf = _$$_REQUIRE(_dependencyMap[0]);

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  module.exports = listCacheSet;
},570,[566]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ListCache = _$$_REQUIRE(_dependencyMap[0]);

  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  module.exports = stackClear;
},571,[563]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  module.exports = stackDelete;
},572,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;
},573,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;
},574,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ListCache = _$$_REQUIRE(_dependencyMap[0]),
      Map = _$$_REQUIRE(_dependencyMap[1]),
      MapCache = _$$_REQUIRE(_dependencyMap[2]);

  var LARGE_ARRAY_SIZE = 200;

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache) {
      var pairs = data.__data__;

      if (!Map || pairs.length < 199) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  module.exports = stackSet;
},575,[563,576,585]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var Map = getNative(root, 'Map');
  module.exports = Map;
},576,[577,553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsNative = _$$_REQUIRE(_dependencyMap[0]),
      getValue = _$$_REQUIRE(_dependencyMap[1]);

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;
},577,[578,584]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isFunction = _$$_REQUIRE(_dependencyMap[0]),
      isMasked = _$$_REQUIRE(_dependencyMap[1]),
      isObject = _$$_REQUIRE(_dependencyMap[2]),
      toSource = _$$_REQUIRE(_dependencyMap[3]);

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;
},578,[579,581,580,583]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isObject = _$$_REQUIRE(_dependencyMap[1]);

  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }

    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  module.exports = isFunction;
},579,[551,580]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
},580,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var coreJsData = _$$_REQUIRE(_dependencyMap[0]);

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  module.exports = isMasked;
},581,[582]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]);

  var coreJsData = root['__core-js_shared__'];
  module.exports = coreJsData;
},582,[553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  module.exports = toSource;
},583,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;
},584,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var mapCacheClear = _$$_REQUIRE(_dependencyMap[0]),
      mapCacheDelete = _$$_REQUIRE(_dependencyMap[1]),
      mapCacheGet = _$$_REQUIRE(_dependencyMap[2]),
      mapCacheHas = _$$_REQUIRE(_dependencyMap[3]),
      mapCacheSet = _$$_REQUIRE(_dependencyMap[4]);

  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  module.exports = MapCache;
},585,[586,594,597,598,599]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Hash = _$$_REQUIRE(_dependencyMap[0]),
      ListCache = _$$_REQUIRE(_dependencyMap[1]),
      Map = _$$_REQUIRE(_dependencyMap[2]);

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  module.exports = mapCacheClear;
},586,[587,563,576]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var hashClear = _$$_REQUIRE(_dependencyMap[0]),
      hashDelete = _$$_REQUIRE(_dependencyMap[1]),
      hashGet = _$$_REQUIRE(_dependencyMap[2]),
      hashHas = _$$_REQUIRE(_dependencyMap[3]),
      hashSet = _$$_REQUIRE(_dependencyMap[4]);

  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  module.exports = Hash;
},587,[588,590,591,592,593]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var nativeCreate = _$$_REQUIRE(_dependencyMap[0]);

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  module.exports = hashClear;
},588,[589]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]);

  var nativeCreate = getNative(Object, 'create');
  module.exports = nativeCreate;
},589,[577]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = hashDelete;
},590,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var nativeCreate = _$$_REQUIRE(_dependencyMap[0]);

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;
},591,[589]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var nativeCreate = _$$_REQUIRE(_dependencyMap[0]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;
},592,[589]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var nativeCreate = _$$_REQUIRE(_dependencyMap[0]);

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;
},593,[589]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getMapData = _$$_REQUIRE(_dependencyMap[0]);

  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = mapCacheDelete;
},594,[595]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isKeyable = _$$_REQUIRE(_dependencyMap[0]);

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  module.exports = getMapData;
},595,[596]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
},596,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getMapData = _$$_REQUIRE(_dependencyMap[0]);

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;
},597,[595]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getMapData = _$$_REQUIRE(_dependencyMap[0]);

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;
},598,[595]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getMapData = _$$_REQUIRE(_dependencyMap[0]);

  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  module.exports = mapCacheSet;
},599,[595]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  module.exports = arrayEach;
},600,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseAssignValue = _$$_REQUIRE(_dependencyMap[0]),
      eq = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  module.exports = assignValue;
},601,[602,567]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  module.exports = baseAssignValue;
},602,[603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]);

  var defineProperty = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  module.exports = defineProperty;
},603,[577]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var copyObject = _$$_REQUIRE(_dependencyMap[0]),
      keys = _$$_REQUIRE(_dependencyMap[1]);

  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  module.exports = baseAssign;
},604,[605,606]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assignValue = _$$_REQUIRE(_dependencyMap[0]),
      baseAssignValue = _$$_REQUIRE(_dependencyMap[1]);

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }

    return object;
  }

  module.exports = copyObject;
},605,[601,602]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayLikeKeys = _$$_REQUIRE(_dependencyMap[0]),
      baseKeys = _$$_REQUIRE(_dependencyMap[1]),
      isArrayLike = _$$_REQUIRE(_dependencyMap[2]);

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  module.exports = keys;
},606,[607,619,623]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseTimes = _$$_REQUIRE(_dependencyMap[0]),
      isArguments = _$$_REQUIRE(_dependencyMap[1]),
      isArray = _$$_REQUIRE(_dependencyMap[2]),
      isBuffer = _$$_REQUIRE(_dependencyMap[3]),
      isIndex = _$$_REQUIRE(_dependencyMap[4]),
      isTypedArray = _$$_REQUIRE(_dependencyMap[5]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = arrayLikeKeys;
},607,[608,609,557,611,613,614]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  module.exports = baseTimes;
},608,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsArguments = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var isArguments = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  };
  module.exports = isArguments;
},609,[610,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var argsTag = '[object Arguments]';

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  module.exports = baseIsArguments;
},610,[551,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]),
      stubFalse = _$$_REQUIRE(_dependencyMap[1]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  var isBuffer = nativeIsBuffer || stubFalse;
  module.exports = isBuffer;
},611,[553,612]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;
},612,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
},613,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsTypedArray = _$$_REQUIRE(_dependencyMap[0]),
      baseUnary = _$$_REQUIRE(_dependencyMap[1]),
      nodeUtil = _$$_REQUIRE(_dependencyMap[2]);

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  module.exports = isTypedArray;
},614,[615,617,618]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isLength = _$$_REQUIRE(_dependencyMap[1]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[2]);

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  module.exports = baseIsTypedArray;
},615,[551,616,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
},616,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
},617,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var freeGlobal = _$$_REQUIRE(_dependencyMap[0]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  module.exports = nodeUtil;
},618,[554]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isPrototype = _$$_REQUIRE(_dependencyMap[0]),
      nativeKeys = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeys;
},619,[620,621]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  module.exports = isPrototype;
},620,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var overArg = _$$_REQUIRE(_dependencyMap[0]);

  var nativeKeys = overArg(Object.keys, Object);
  module.exports = nativeKeys;
},621,[622]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
},622,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isFunction = _$$_REQUIRE(_dependencyMap[0]),
      isLength = _$$_REQUIRE(_dependencyMap[1]);

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  module.exports = isArrayLike;
},623,[579,616]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var copyObject = _$$_REQUIRE(_dependencyMap[0]),
      keysIn = _$$_REQUIRE(_dependencyMap[1]);

  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }

  module.exports = baseAssignIn;
},624,[605,625]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayLikeKeys = _$$_REQUIRE(_dependencyMap[0]),
      baseKeysIn = _$$_REQUIRE(_dependencyMap[1]),
      isArrayLike = _$$_REQUIRE(_dependencyMap[2]);

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  module.exports = keysIn;
},625,[607,626,623]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isObject = _$$_REQUIRE(_dependencyMap[0]),
      isPrototype = _$$_REQUIRE(_dependencyMap[1]),
      nativeKeysIn = _$$_REQUIRE(_dependencyMap[2]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeysIn;
},626,[580,620,627]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = nativeKeysIn;
},627,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }

    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
},628,[553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function copyArray(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  module.exports = copyArray;
},629,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var copyObject = _$$_REQUIRE(_dependencyMap[0]),
      getSymbols = _$$_REQUIRE(_dependencyMap[1]);

  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  module.exports = copySymbols;
},630,[605,631]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayFilter = _$$_REQUIRE(_dependencyMap[0]),
      stubArray = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  module.exports = getSymbols;
},631,[632,633]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  module.exports = arrayFilter;
},632,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stubArray() {
    return [];
  }

  module.exports = stubArray;
},633,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var copyObject = _$$_REQUIRE(_dependencyMap[0]),
      getSymbolsIn = _$$_REQUIRE(_dependencyMap[1]);

  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }

  module.exports = copySymbolsIn;
},634,[605,635]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayPush = _$$_REQUIRE(_dependencyMap[0]),
      getPrototype = _$$_REQUIRE(_dependencyMap[1]),
      getSymbols = _$$_REQUIRE(_dependencyMap[2]),
      stubArray = _$$_REQUIRE(_dependencyMap[3]);

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };
  module.exports = getSymbolsIn;
},635,[636,637,631,633]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  module.exports = arrayPush;
},636,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var overArg = _$$_REQUIRE(_dependencyMap[0]);

  var getPrototype = overArg(Object.getPrototypeOf, Object);
  module.exports = getPrototype;
},637,[622]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetAllKeys = _$$_REQUIRE(_dependencyMap[0]),
      getSymbols = _$$_REQUIRE(_dependencyMap[1]),
      keys = _$$_REQUIRE(_dependencyMap[2]);

  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;
},638,[639,631,606]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayPush = _$$_REQUIRE(_dependencyMap[0]),
      isArray = _$$_REQUIRE(_dependencyMap[1]);

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;
},639,[636,557]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetAllKeys = _$$_REQUIRE(_dependencyMap[0]),
      getSymbolsIn = _$$_REQUIRE(_dependencyMap[1]),
      keysIn = _$$_REQUIRE(_dependencyMap[2]);

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  module.exports = getAllKeysIn;
},640,[639,635,625]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var DataView = _$$_REQUIRE(_dependencyMap[0]),
      Map = _$$_REQUIRE(_dependencyMap[1]),
      Promise = _$$_REQUIRE(_dependencyMap[2]),
      Set = _$$_REQUIRE(_dependencyMap[3]),
      WeakMap = _$$_REQUIRE(_dependencyMap[4]),
      baseGetTag = _$$_REQUIRE(_dependencyMap[5]),
      toSource = _$$_REQUIRE(_dependencyMap[6]);

  var mapTag = '[object Map]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      setTag = '[object Set]',
      weakMapTag = '[object WeakMap]';
  var dataViewTag = '[object DataView]';
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);
  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  module.exports = getTag;
},641,[642,576,643,644,645,551,583]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var DataView = getNative(root, 'DataView');
  module.exports = DataView;
},642,[577,553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var Promise = getNative(root, 'Promise');
  module.exports = Promise;
},643,[577,553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var Set = getNative(root, 'Set');
  module.exports = Set;
},644,[577,553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var WeakMap = getNative(root, 'WeakMap');
  module.exports = WeakMap;
},645,[577,553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  module.exports = initCloneArray;
},646,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _$$_REQUIRE(_dependencyMap[0]),
      cloneDataView = _$$_REQUIRE(_dependencyMap[1]),
      cloneRegExp = _$$_REQUIRE(_dependencyMap[2]),
      cloneSymbol = _$$_REQUIRE(_dependencyMap[3]),
      cloneTypedArray = _$$_REQUIRE(_dependencyMap[4]);

  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return new Ctor();

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return new Ctor();

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  module.exports = initCloneByTag;
},647,[648,650,651,652,653]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Uint8Array = _$$_REQUIRE(_dependencyMap[0]);

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  module.exports = cloneArrayBuffer;
},648,[649]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]);

  var Uint8Array = root.Uint8Array;
  module.exports = Uint8Array;
},649,[553]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _$$_REQUIRE(_dependencyMap[0]);

  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  module.exports = cloneDataView;
},650,[648]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var reFlags = /\w*$/;

  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  module.exports = cloneRegExp;
},651,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]);

  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  module.exports = cloneSymbol;
},652,[552]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _$$_REQUIRE(_dependencyMap[0]);

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  module.exports = cloneTypedArray;
},653,[648]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseCreate = _$$_REQUIRE(_dependencyMap[0]),
      getPrototype = _$$_REQUIRE(_dependencyMap[1]),
      isPrototype = _$$_REQUIRE(_dependencyMap[2]);

  function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }

  module.exports = initCloneObject;
},654,[655,637,620]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isObject = _$$_REQUIRE(_dependencyMap[0]);

  var objectCreate = Object.create;

  var baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  module.exports = baseCreate;
},655,[580]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsMap = _$$_REQUIRE(_dependencyMap[0]),
      baseUnary = _$$_REQUIRE(_dependencyMap[1]),
      nodeUtil = _$$_REQUIRE(_dependencyMap[2]);

  var nodeIsMap = nodeUtil && nodeUtil.isMap;
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  module.exports = isMap;
},656,[657,617,618]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getTag = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var mapTag = '[object Map]';

  function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
  }

  module.exports = baseIsMap;
},657,[641,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsSet = _$$_REQUIRE(_dependencyMap[0]),
      baseUnary = _$$_REQUIRE(_dependencyMap[1]),
      nodeUtil = _$$_REQUIRE(_dependencyMap[2]);

  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  module.exports = isSet;
},658,[659,617,618]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getTag = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var setTag = '[object Set]';

  function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
  }

  module.exports = baseIsSet;
},659,[641,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var castPath = _$$_REQUIRE(_dependencyMap[0]),
      last = _$$_REQUIRE(_dependencyMap[1]),
      parent = _$$_REQUIRE(_dependencyMap[2]),
      toKey = _$$_REQUIRE(_dependencyMap[3]);

  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  module.exports = baseUnset;
},660,[661,669,670,672]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArray = _$$_REQUIRE(_dependencyMap[0]),
      isKey = _$$_REQUIRE(_dependencyMap[1]),
      stringToPath = _$$_REQUIRE(_dependencyMap[2]),
      toString = _$$_REQUIRE(_dependencyMap[3]);

  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }

    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  module.exports = castPath;
},661,[557,662,664,667]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArray = _$$_REQUIRE(_dependencyMap[0]),
      isSymbol = _$$_REQUIRE(_dependencyMap[1]);

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value;

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  module.exports = isKey;
},662,[557,663]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var symbolTag = '[object Symbol]';

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }

  module.exports = isSymbol;
},663,[551,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var memoizeCapped = _$$_REQUIRE(_dependencyMap[0]);

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46) {
        result.push('');
      }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  module.exports = stringToPath;
},664,[665]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var memoize = _$$_REQUIRE(_dependencyMap[0]);

  var MAX_MEMOIZE_SIZE = 500;

  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  module.exports = memoizeCapped;
},665,[666]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MapCache = _$$_REQUIRE(_dependencyMap[0]);

  var FUNC_ERROR_TEXT = 'Expected a function';

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;
  module.exports = memoize;
},666,[585]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseToString = _$$_REQUIRE(_dependencyMap[0]);

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;
},667,[668]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]),
      arrayMap = _$$_REQUIRE(_dependencyMap[1]),
      isArray = _$$_REQUIRE(_dependencyMap[2]),
      isSymbol = _$$_REQUIRE(_dependencyMap[3]);

  var INFINITY = 1 / 0;
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isArray(value)) {
      return arrayMap(value, baseToString) + '';
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  module.exports = baseToString;
},668,[552,560,557,663]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  module.exports = last;
},669,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGet = _$$_REQUIRE(_dependencyMap[0]),
      baseSlice = _$$_REQUIRE(_dependencyMap[1]);

  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  module.exports = parent;
},670,[671,673]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var castPath = _$$_REQUIRE(_dependencyMap[0]),
      toKey = _$$_REQUIRE(_dependencyMap[1]);

  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  module.exports = baseGet;
},671,[661,672]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isSymbol = _$$_REQUIRE(_dependencyMap[0]);

  var INFINITY = 1 / 0;

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  module.exports = toKey;
},672,[663]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  module.exports = baseSlice;
},673,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isPlainObject = _$$_REQUIRE(_dependencyMap[0]);

  function customOmitClone(value) {
    return isPlainObject(value) ? undefined : value;
  }

  module.exports = customOmitClone;
},674,[675]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      getPrototype = _$$_REQUIRE(_dependencyMap[1]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[2]);

  var objectTag = '[object Object]';
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);

  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }

    var proto = getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  module.exports = isPlainObject;
},675,[551,637,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var flatten = _$$_REQUIRE(_dependencyMap[0]),
      overRest = _$$_REQUIRE(_dependencyMap[1]),
      setToString = _$$_REQUIRE(_dependencyMap[2]);

  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  module.exports = flatRest;
},676,[677,680,682]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseFlatten = _$$_REQUIRE(_dependencyMap[0]);

  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  module.exports = flatten;
},677,[678]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayPush = _$$_REQUIRE(_dependencyMap[0]),
      isFlattenable = _$$_REQUIRE(_dependencyMap[1]);

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  module.exports = baseFlatten;
},678,[636,679]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]),
      isArguments = _$$_REQUIRE(_dependencyMap[1]),
      isArray = _$$_REQUIRE(_dependencyMap[2]);

  var spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;

  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  module.exports = isFlattenable;
},679,[552,609,557]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var apply = _$$_REQUIRE(_dependencyMap[0]);

  var nativeMax = Math.max;

  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  module.exports = overRest;
},680,[681]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  module.exports = apply;
},681,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseSetToString = _$$_REQUIRE(_dependencyMap[0]),
      shortOut = _$$_REQUIRE(_dependencyMap[1]);

  var setToString = shortOut(baseSetToString);
  module.exports = setToString;
},682,[683,686]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var constant = _$$_REQUIRE(_dependencyMap[0]),
      defineProperty = _$$_REQUIRE(_dependencyMap[1]),
      identity = _$$_REQUIRE(_dependencyMap[2]);

  var baseSetToString = !defineProperty ? identity : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  module.exports = baseSetToString;
},683,[684,603,685]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function constant(value) {
    return function () {
      return value;
    };
  }

  module.exports = constant;
},684,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function identity(value) {
    return value;
  }

  module.exports = identity;
},685,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  var nativeNow = Date.now;

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  module.exports = shortOut;
},686,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var basePick = _$$_REQUIRE(_dependencyMap[0]),
      flatRest = _$$_REQUIRE(_dependencyMap[1]);

  var pick = flatRest(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  module.exports = pick;
},687,[688,676]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var basePickBy = _$$_REQUIRE(_dependencyMap[0]),
      hasIn = _$$_REQUIRE(_dependencyMap[1]);

  function basePick(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }

  module.exports = basePick;
},688,[689,691]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGet = _$$_REQUIRE(_dependencyMap[0]),
      baseSet = _$$_REQUIRE(_dependencyMap[1]),
      castPath = _$$_REQUIRE(_dependencyMap[2]);

  function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = baseGet(object, path);

      if (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }

    return result;
  }

  module.exports = basePickBy;
},689,[671,690,661]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assignValue = _$$_REQUIRE(_dependencyMap[0]),
      castPath = _$$_REQUIRE(_dependencyMap[1]),
      isIndex = _$$_REQUIRE(_dependencyMap[2]),
      isObject = _$$_REQUIRE(_dependencyMap[3]),
      toKey = _$$_REQUIRE(_dependencyMap[4]);

  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }

    path = castPath(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }

      assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  module.exports = baseSet;
},690,[601,661,613,580,672]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseHasIn = _$$_REQUIRE(_dependencyMap[0]),
      hasPath = _$$_REQUIRE(_dependencyMap[1]);

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;
},691,[692,693]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;
},692,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var castPath = _$$_REQUIRE(_dependencyMap[0]),
      isArguments = _$$_REQUIRE(_dependencyMap[1]),
      isArray = _$$_REQUIRE(_dependencyMap[2]),
      isIndex = _$$_REQUIRE(_dependencyMap[3]),
      isLength = _$$_REQUIRE(_dependencyMap[4]),
      toKey = _$$_REQUIRE(_dependencyMap[5]);

  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  module.exports = hasPath;
},693,[661,609,557,613,616,672]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createTabBarItemIOSComponent;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _isEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _pick = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[13]);

  var ICON_PROP_NAMES = ['iconName', 'iconSize', 'iconColor'];
  var SELECTED_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['selectedIconName', 'selectedIconColor']);

  var arePropsEqual = function arePropsEqual(keys) {
    return function (prevProps, nextProps) {
      return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));
    };
  };

  var areIconPropsEqual = arePropsEqual(ICON_PROP_NAMES);
  var areSelectedIconPropsEqual = arePropsEqual(SELECTED_ICON_PROP_NAMES);

  function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      (0, _inherits2.default)(TabBarItemIOS, _PureComponent);

      function TabBarItemIOS() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, TabBarItemIOS);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabBarItemIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          icon: undefined,
          selectedIcon: undefined
        };
        return _this;
      }

      (0, _createClass2.default)(TabBarItemIOS, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateIconSource();
          this.updateSelectedIconSource();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (!areIconPropsEqual(prevProps, this.props)) {
            this.updateIconSource();
          }

          if (!areSelectedIconPropsEqual(prevProps, this.props)) {
            this.updateSelectedIconSource();
          }
        }
      }, {
        key: "updateIconSource",
        value: function updateIconSource() {
          var _this$props, iconName, iconSize, iconColor, icon;

          return _regenerator.default.async(function updateIconSource$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this$props = this.props, iconName = _this$props.iconName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor;

                  if (!iconName) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 4;
                  return _regenerator.default.awrap(getImageSource(iconName, iconSize, iconColor));

                case 4:
                  icon = _context.sent;
                  this.setState({
                    icon: icon
                  });
                  _context.next = 9;
                  break;

                case 8:
                  if (this.state.icon) {
                    this.setState({
                      icon: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "updateSelectedIconSource",
        value: function updateSelectedIconSource() {
          var _this$props2, iconName, iconColor, iconSize, selectedIconName, selectedIconColor, selectedIcon;

          return _regenerator.default.async(function updateSelectedIconSource$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _this$props2 = this.props, iconName = _this$props2.iconName, iconColor = _this$props2.iconColor, iconSize = _this$props2.iconSize, selectedIconName = _this$props2.selectedIconName, selectedIconColor = _this$props2.selectedIconColor;

                  if (!(selectedIconName || selectedIconColor)) {
                    _context2.next = 8;
                    break;
                  }

                  _context2.next = 4;
                  return _regenerator.default.awrap(getImageSource(selectedIconName || iconName, iconSize, selectedIconColor || iconColor));

                case 4:
                  selectedIcon = _context2.sent;
                  this.setState({
                    selectedIcon: selectedIcon
                  });
                  _context2.next = 9;
                  break;

                case 8:
                  if (this.state.selectedIcon) {
                    this.setState({
                      selectedIcon: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement(_reactNative.TabBarIOS.Item, (0, _extends2.default)({}, this.state, this.props));
        }
      }]);
      return TabBarItemIOS;
    }(_react.PureComponent), _class.propTypes = {
      iconName: IconNamePropType.isRequired,
      selectedIconName: IconNamePropType,
      iconSize: _propTypes.default.number,
      iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      selectedIconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    }, _class.defaultProps = {
      iconSize: 30
    }, _temp;
  }
},694,[361,1,8,129,19,20,27,30,33,695,687,46,60,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsEqual = _$$_REQUIRE(_dependencyMap[0]);

  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  module.exports = isEqual;
},695,[696]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsEqualDeep = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  module.exports = baseIsEqual;
},696,[697,558]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Stack = _$$_REQUIRE(_dependencyMap[0]),
      equalArrays = _$$_REQUIRE(_dependencyMap[1]),
      equalByTag = _$$_REQUIRE(_dependencyMap[2]),
      equalObjects = _$$_REQUIRE(_dependencyMap[3]),
      getTag = _$$_REQUIRE(_dependencyMap[4]),
      isArray = _$$_REQUIRE(_dependencyMap[5]),
      isBuffer = _$$_REQUIRE(_dependencyMap[6]),
      isTypedArray = _$$_REQUIRE(_dependencyMap[7]);

  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  module.exports = baseIsEqualDeep;
},697,[562,698,704,707,641,557,611,614]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var SetCache = _$$_REQUIRE(_dependencyMap[0]),
      arraySome = _$$_REQUIRE(_dependencyMap[1]),
      cacheHas = _$$_REQUIRE(_dependencyMap[2]);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  module.exports = equalArrays;
},698,[699,702,703]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MapCache = _$$_REQUIRE(_dependencyMap[0]),
      setCacheAdd = _$$_REQUIRE(_dependencyMap[1]),
      setCacheHas = _$$_REQUIRE(_dependencyMap[2]);

  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  module.exports = SetCache;
},699,[585,700,701]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  module.exports = setCacheAdd;
},700,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;
},701,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  module.exports = arraySome;
},702,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  module.exports = cacheHas;
},703,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]),
      Uint8Array = _$$_REQUIRE(_dependencyMap[1]),
      eq = _$$_REQUIRE(_dependencyMap[2]),
      equalArrays = _$$_REQUIRE(_dependencyMap[3]),
      mapToArray = _$$_REQUIRE(_dependencyMap[4]),
      setToArray = _$$_REQUIRE(_dependencyMap[5]);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  module.exports = equalByTag;
},704,[552,649,567,698,705,706]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
},705,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
},706,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getAllKeys = _$$_REQUIRE(_dependencyMap[0]);

  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  module.exports = equalObjects;
},707,[638]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createToolbarAndroidComponent;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _isEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _pick = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[14]);

  var ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];
  var LOGO_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['logoName']);
  var NAV_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['navIconName']);
  var OVERFLOW_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['overflowIconName']);
  var ACTIONS_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['actions']);

  var arePropsEqual = function arePropsEqual(keys) {
    return function (prevProps, nextProps) {
      return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));
    };
  };

  var areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);
  var areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);
  var areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);
  var areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);

  function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      (0, _inherits2.default)(IconToolbarAndroid, _PureComponent);

      function IconToolbarAndroid() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, IconToolbarAndroid);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(IconToolbarAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          logo: undefined,
          navIcon: undefined,
          overflowIcon: undefined,
          actions: undefined
        };
        return _this;
      }

      (0, _createClass2.default)(IconToolbarAndroid, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateLogoIconSource();
          this.updateNavIconSource();
          this.updateOverflowIconSource();
          this.updateActionIconSources();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (!areLogoIconPropsEqual(prevProps, this.props)) {
            this.updateLogoIconSource();
          }

          if (!areNavIconPropsEqual(prevProps, this.props)) {
            this.updateNavIconSource();
          }

          if (!areOverflowIconPropsEqual(prevProps, this.props)) {
            this.updateOverflowIconSource();
          }

          if (!areActionPropsEqual(prevProps, this.props)) {
            this.updateActionIconSources();
          }
        }
      }, {
        key: "updateLogoIconSource",
        value: function updateLogoIconSource() {
          var _this$props, logoName, iconSize, iconColor, titleColor, logo;

          return _regenerator.default.async(function updateLogoIconSource$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this$props = this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;

                  if (!logoName) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 4;
                  return _regenerator.default.awrap(getImageSource(logoName, iconSize, iconColor || titleColor));

                case 4:
                  logo = _context.sent;
                  this.setState({
                    logo: logo
                  });
                  _context.next = 9;
                  break;

                case 8:
                  if (this.state.logo) {
                    this.setState({
                      logo: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "updateNavIconSource",
        value: function updateNavIconSource() {
          var _this$props2, navIconName, iconSize, iconColor, titleColor, navIcon;

          return _regenerator.default.async(function updateNavIconSource$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _this$props2 = this.props, navIconName = _this$props2.navIconName, iconSize = _this$props2.iconSize, iconColor = _this$props2.iconColor, titleColor = _this$props2.titleColor;

                  if (!navIconName) {
                    _context2.next = 8;
                    break;
                  }

                  _context2.next = 4;
                  return _regenerator.default.awrap(getImageSource(navIconName, iconSize, iconColor || titleColor));

                case 4:
                  navIcon = _context2.sent;
                  this.setState({
                    navIcon: navIcon
                  });
                  _context2.next = 9;
                  break;

                case 8:
                  if (this.state.navIcon) {
                    this.setState({
                      navIcon: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "updateOverflowIconSource",
        value: function updateOverflowIconSource() {
          var _this$props3, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;

          return _regenerator.default.async(function updateOverflowIconSource$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _this$props3 = this.props, overflowIconName = _this$props3.overflowIconName, iconSize = _this$props3.iconSize, iconColor = _this$props3.iconColor, titleColor = _this$props3.titleColor;

                  if (!overflowIconName) {
                    _context3.next = 8;
                    break;
                  }

                  _context3.next = 4;
                  return _regenerator.default.awrap(getImageSource(overflowIconName, iconSize, iconColor || titleColor));

                case 4:
                  overflowIcon = _context3.sent;
                  this.setState({
                    overflowIcon: overflowIcon
                  });
                  _context3.next = 9;
                  break;

                case 8:
                  if (this.state.overflowIcon) {
                    this.setState({
                      overflowIcon: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context3.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "updateActionIconSources",
        value: function updateActionIconSources() {
          var _this$props4, actions, iconSize, iconColor, titleColor, updatedActions;

          return _regenerator.default.async(function updateActionIconSources$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _this$props4 = this.props, actions = _this$props4.actions, iconSize = _this$props4.iconSize, iconColor = _this$props4.iconColor, titleColor = _this$props4.titleColor;
                  _context4.next = 3;
                  return _regenerator.default.awrap(Promise.all((actions || []).map(function (action) {
                    if (action.iconName) {
                      return getImageSource(action.iconName, action.iconSize || iconSize, action.iconColor || iconColor || titleColor).then(function (icon) {
                        return (0, _objectSpread2.default)({}, action, {
                          icon: icon
                        });
                      });
                    }

                    return Promise.resolve(action);
                  })));

                case 3:
                  updatedActions = _context4.sent;
                  this.setState({
                    actions: updatedActions
                  });

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement(_reactNative.ToolbarAndroid, (0, _extends2.default)({}, this.props, this.state));
        }
      }]);
      return IconToolbarAndroid;
    }(_react.PureComponent), _class.propTypes = {
      logoName: IconNamePropType,
      navIconName: IconNamePropType,
      overflowIconName: IconNamePropType,
      actions: _propTypes.default.arrayOf(_propTypes.default.shape({
        title: _propTypes.default.string.isRequired,
        iconName: IconNamePropType,
        iconSize: _propTypes.default.number,
        iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
        show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']),
        showWithText: _propTypes.default.bool
      })),
      iconSize: _propTypes.default.number,
      iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    }, _class.defaultProps = {
      iconSize: 24
    }, _temp;
  }
},708,[361,1,8,43,129,19,20,27,30,33,695,687,46,60,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/Fonts",
    "scales": [1],
    "hash": "a37b0c01c0baf1888ca812cc0508f6e2",
    "name": "MaterialIcons",
    "type": "ttf"
  });
},709,[154]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "3d-rotation": 59469,
  "ac-unit": 60219,
  "access-alarm": 57744,
  "access-alarms": 57745,
  "access-time": 57746,
  "accessibility": 59470,
  "accessible": 59668,
  "account-balance": 59471,
  "account-balance-wallet": 59472,
  "account-box": 59473,
  "account-circle": 59475,
  "adb": 58894,
  "add": 57669,
  "add-a-photo": 58425,
  "add-alarm": 57747,
  "add-alert": 57347,
  "add-box": 57670,
  "add-circle": 57671,
  "add-circle-outline": 57672,
  "add-location": 58727,
  "add-shopping-cart": 59476,
  "add-to-photos": 58269,
  "add-to-queue": 57436,
  "adjust": 58270,
  "airline-seat-flat": 58928,
  "airline-seat-flat-angled": 58929,
  "airline-seat-individual-suite": 58930,
  "airline-seat-legroom-extra": 58931,
  "airline-seat-legroom-normal": 58932,
  "airline-seat-legroom-reduced": 58933,
  "airline-seat-recline-extra": 58934,
  "airline-seat-recline-normal": 58935,
  "airplanemode-active": 57749,
  "airplanemode-inactive": 57748,
  "airplay": 57429,
  "airport-shuttle": 60220,
  "alarm": 59477,
  "alarm-add": 59478,
  "alarm-off": 59479,
  "alarm-on": 59480,
  "album": 57369,
  "all-inclusive": 60221,
  "all-out": 59659,
  "android": 59481,
  "announcement": 59482,
  "apps": 58819,
  "archive": 57673,
  "arrow-back": 58820,
  "arrow-downward": 58843,
  "arrow-drop-down": 58821,
  "arrow-drop-down-circle": 58822,
  "arrow-drop-up": 58823,
  "arrow-forward": 58824,
  "arrow-upward": 58840,
  "art-track": 57440,
  "aspect-ratio": 59483,
  "assessment": 59484,
  "assignment": 59485,
  "assignment-ind": 59486,
  "assignment-late": 59487,
  "assignment-return": 59488,
  "assignment-returned": 59489,
  "assignment-turned-in": 59490,
  "assistant": 58271,
  "assistant-photo": 58272,
  "attach-file": 57894,
  "attach-money": 57895,
  "attachment": 58044,
  "audiotrack": 58273,
  "autorenew": 59491,
  "av-timer": 57371,
  "backspace": 57674,
  "backup": 59492,
  "battery-alert": 57756,
  "battery-charging-full": 57763,
  "battery-full": 57764,
  "battery-std": 57765,
  "battery-unknown": 57766,
  "beach-access": 60222,
  "beenhere": 58669,
  "block": 57675,
  "bluetooth": 57767,
  "bluetooth-audio": 58895,
  "bluetooth-connected": 57768,
  "bluetooth-disabled": 57769,
  "bluetooth-searching": 57770,
  "blur-circular": 58274,
  "blur-linear": 58275,
  "blur-off": 58276,
  "blur-on": 58277,
  "book": 59493,
  "bookmark": 59494,
  "bookmark-border": 59495,
  "border-all": 57896,
  "border-bottom": 57897,
  "border-clear": 57898,
  "border-color": 57899,
  "border-horizontal": 57900,
  "border-inner": 57901,
  "border-left": 57902,
  "border-outer": 57903,
  "border-right": 57904,
  "border-style": 57905,
  "border-top": 57906,
  "border-vertical": 57907,
  "branding-watermark": 57451,
  "brightness-1": 58278,
  "brightness-2": 58279,
  "brightness-3": 58280,
  "brightness-4": 58281,
  "brightness-5": 58282,
  "brightness-6": 58283,
  "brightness-7": 58284,
  "brightness-auto": 57771,
  "brightness-high": 57772,
  "brightness-low": 57773,
  "brightness-medium": 57774,
  "broken-image": 58285,
  "brush": 58286,
  "bubble-chart": 59101,
  "bug-report": 59496,
  "build": 59497,
  "burst-mode": 58428,
  "business": 57519,
  "business-center": 60223,
  "cached": 59498,
  "cake": 59369,
  "call": 57520,
  "call-end": 57521,
  "call-made": 57522,
  "call-merge": 57523,
  "call-missed": 57524,
  "call-missed-outgoing": 57572,
  "call-received": 57525,
  "call-split": 57526,
  "call-to-action": 57452,
  "camera": 58287,
  "camera-alt": 58288,
  "camera-enhance": 59644,
  "camera-front": 58289,
  "camera-rear": 58290,
  "camera-roll": 58291,
  "cancel": 58825,
  "card-giftcard": 59638,
  "card-membership": 59639,
  "card-travel": 59640,
  "casino": 60224,
  "cast": 58119,
  "cast-connected": 58120,
  "center-focus-strong": 58292,
  "center-focus-weak": 58293,
  "change-history": 59499,
  "chat": 57527,
  "chat-bubble": 57546,
  "chat-bubble-outline": 57547,
  "check": 58826,
  "check-box": 59444,
  "check-box-outline-blank": 59445,
  "check-circle": 59500,
  "chevron-left": 58827,
  "chevron-right": 58828,
  "child-care": 60225,
  "child-friendly": 60226,
  "chrome-reader-mode": 59501,
  "class": 59502,
  "clear": 57676,
  "clear-all": 57528,
  "close": 58829,
  "closed-caption": 57372,
  "cloud": 58045,
  "cloud-circle": 58046,
  "cloud-done": 58047,
  "cloud-download": 58048,
  "cloud-off": 58049,
  "cloud-queue": 58050,
  "cloud-upload": 58051,
  "code": 59503,
  "collections": 58294,
  "collections-bookmark": 58417,
  "color-lens": 58295,
  "colorize": 58296,
  "comment": 57529,
  "compare": 58297,
  "compare-arrows": 59669,
  "computer": 58122,
  "confirmation-number": 58936,
  "contact-mail": 57552,
  "contact-phone": 57551,
  "contacts": 57530,
  "content-copy": 57677,
  "content-cut": 57678,
  "content-paste": 57679,
  "control-point": 58298,
  "control-point-duplicate": 58299,
  "copyright": 59660,
  "create": 57680,
  "create-new-folder": 58060,
  "credit-card": 59504,
  "crop": 58302,
  "crop-16-9": 58300,
  "crop-3-2": 58301,
  "crop-5-4": 58303,
  "crop-7-5": 58304,
  "crop-din": 58305,
  "crop-free": 58306,
  "crop-landscape": 58307,
  "crop-original": 58308,
  "crop-portrait": 58309,
  "crop-rotate": 58423,
  "crop-square": 58310,
  "dashboard": 59505,
  "data-usage": 57775,
  "date-range": 59670,
  "dehaze": 58311,
  "delete": 59506,
  "delete-forever": 59691,
  "delete-sweep": 57708,
  "description": 59507,
  "desktop-mac": 58123,
  "desktop-windows": 58124,
  "details": 58312,
  "developer-board": 58125,
  "developer-mode": 57776,
  "device-hub": 58165,
  "devices": 57777,
  "devices-other": 58167,
  "dialer-sip": 57531,
  "dialpad": 57532,
  "directions": 58670,
  "directions-bike": 58671,
  "directions-boat": 58674,
  "directions-bus": 58672,
  "directions-car": 58673,
  "directions-railway": 58676,
  "directions-run": 58726,
  "directions-subway": 58675,
  "directions-transit": 58677,
  "directions-walk": 58678,
  "disc-full": 58896,
  "dns": 59509,
  "do-not-disturb": 58898,
  "do-not-disturb-alt": 58897,
  "do-not-disturb-off": 58947,
  "do-not-disturb-on": 58948,
  "dock": 58126,
  "domain": 59374,
  "done": 59510,
  "done-all": 59511,
  "donut-large": 59671,
  "donut-small": 59672,
  "drafts": 57681,
  "drag-handle": 57949,
  "drive-eta": 58899,
  "dvr": 57778,
  "edit": 58313,
  "edit-location": 58728,
  "eject": 59643,
  "email": 57534,
  "enhanced-encryption": 58943,
  "equalizer": 57373,
  "error": 57344,
  "error-outline": 57345,
  "euro-symbol": 59686,
  "ev-station": 58733,
  "event": 59512,
  "event-available": 58900,
  "event-busy": 58901,
  "event-note": 58902,
  "event-seat": 59651,
  "exit-to-app": 59513,
  "expand-less": 58830,
  "expand-more": 58831,
  "explicit": 57374,
  "explore": 59514,
  "exposure": 58314,
  "exposure-neg-1": 58315,
  "exposure-neg-2": 58316,
  "exposure-plus-1": 58317,
  "exposure-plus-2": 58318,
  "exposure-zero": 58319,
  "extension": 59515,
  "face": 59516,
  "fast-forward": 57375,
  "fast-rewind": 57376,
  "favorite": 59517,
  "favorite-border": 59518,
  "featured-play-list": 57453,
  "featured-video": 57454,
  "feedback": 59519,
  "fiber-dvr": 57437,
  "fiber-manual-record": 57441,
  "fiber-new": 57438,
  "fiber-pin": 57450,
  "fiber-smart-record": 57442,
  "file-download": 58052,
  "file-upload": 58054,
  "filter": 58323,
  "filter-1": 58320,
  "filter-2": 58321,
  "filter-3": 58322,
  "filter-4": 58324,
  "filter-5": 58325,
  "filter-6": 58326,
  "filter-7": 58327,
  "filter-8": 58328,
  "filter-9": 58329,
  "filter-9-plus": 58330,
  "filter-b-and-w": 58331,
  "filter-center-focus": 58332,
  "filter-drama": 58333,
  "filter-frames": 58334,
  "filter-hdr": 58335,
  "filter-list": 57682,
  "filter-none": 58336,
  "filter-tilt-shift": 58338,
  "filter-vintage": 58339,
  "find-in-page": 59520,
  "find-replace": 59521,
  "fingerprint": 59661,
  "first-page": 58844,
  "fitness-center": 60227,
  "flag": 57683,
  "flare": 58340,
  "flash-auto": 58341,
  "flash-off": 58342,
  "flash-on": 58343,
  "flight": 58681,
  "flight-land": 59652,
  "flight-takeoff": 59653,
  "flip": 58344,
  "flip-to-back": 59522,
  "flip-to-front": 59523,
  "folder": 58055,
  "folder-open": 58056,
  "folder-shared": 58057,
  "folder-special": 58903,
  "font-download": 57703,
  "format-align-center": 57908,
  "format-align-justify": 57909,
  "format-align-left": 57910,
  "format-align-right": 57911,
  "format-bold": 57912,
  "format-clear": 57913,
  "format-color-fill": 57914,
  "format-color-reset": 57915,
  "format-color-text": 57916,
  "format-indent-decrease": 57917,
  "format-indent-increase": 57918,
  "format-italic": 57919,
  "format-line-spacing": 57920,
  "format-list-bulleted": 57921,
  "format-list-numbered": 57922,
  "format-paint": 57923,
  "format-quote": 57924,
  "format-shapes": 57950,
  "format-size": 57925,
  "format-strikethrough": 57926,
  "format-textdirection-l-to-r": 57927,
  "format-textdirection-r-to-l": 57928,
  "format-underlined": 57929,
  "forum": 57535,
  "forward": 57684,
  "forward-10": 57430,
  "forward-30": 57431,
  "forward-5": 57432,
  "free-breakfast": 60228,
  "fullscreen": 58832,
  "fullscreen-exit": 58833,
  "functions": 57930,
  "g-translate": 59687,
  "gamepad": 58127,
  "games": 57377,
  "gavel": 59662,
  "gesture": 57685,
  "get-app": 59524,
  "gif": 59656,
  "golf-course": 60229,
  "gps-fixed": 57779,
  "gps-not-fixed": 57780,
  "gps-off": 57781,
  "grade": 59525,
  "gradient": 58345,
  "grain": 58346,
  "graphic-eq": 57784,
  "grid-off": 58347,
  "grid-on": 58348,
  "group": 59375,
  "group-add": 59376,
  "group-work": 59526,
  "hd": 57426,
  "hdr-off": 58349,
  "hdr-on": 58350,
  "hdr-strong": 58353,
  "hdr-weak": 58354,
  "headset": 58128,
  "headset-mic": 58129,
  "healing": 58355,
  "hearing": 57379,
  "help": 59527,
  "help-outline": 59645,
  "high-quality": 57380,
  "highlight": 57951,
  "highlight-off": 59528,
  "history": 59529,
  "home": 59530,
  "hot-tub": 60230,
  "hotel": 58682,
  "hourglass-empty": 59531,
  "hourglass-full": 59532,
  "http": 59650,
  "https": 59533,
  "image": 58356,
  "image-aspect-ratio": 58357,
  "import-contacts": 57568,
  "import-export": 57539,
  "important-devices": 59666,
  "inbox": 57686,
  "indeterminate-check-box": 59657,
  "info": 59534,
  "info-outline": 59535,
  "input": 59536,
  "insert-chart": 57931,
  "insert-comment": 57932,
  "insert-drive-file": 57933,
  "insert-emoticon": 57934,
  "insert-invitation": 57935,
  "insert-link": 57936,
  "insert-photo": 57937,
  "invert-colors": 59537,
  "invert-colors-off": 57540,
  "iso": 58358,
  "keyboard": 58130,
  "keyboard-arrow-down": 58131,
  "keyboard-arrow-left": 58132,
  "keyboard-arrow-right": 58133,
  "keyboard-arrow-up": 58134,
  "keyboard-backspace": 58135,
  "keyboard-capslock": 58136,
  "keyboard-hide": 58138,
  "keyboard-return": 58139,
  "keyboard-tab": 58140,
  "keyboard-voice": 58141,
  "kitchen": 60231,
  "label": 59538,
  "label-outline": 59539,
  "landscape": 58359,
  "language": 59540,
  "laptop": 58142,
  "laptop-chromebook": 58143,
  "laptop-mac": 58144,
  "laptop-windows": 58145,
  "last-page": 58845,
  "launch": 59541,
  "layers": 58683,
  "layers-clear": 58684,
  "leak-add": 58360,
  "leak-remove": 58361,
  "lens": 58362,
  "library-add": 57390,
  "library-books": 57391,
  "library-music": 57392,
  "lightbulb-outline": 59663,
  "line-style": 59673,
  "line-weight": 59674,
  "linear-scale": 57952,
  "link": 57687,
  "linked-camera": 58424,
  "list": 59542,
  "live-help": 57542,
  "live-tv": 58937,
  "local-activity": 58687,
  "local-airport": 58685,
  "local-atm": 58686,
  "local-bar": 58688,
  "local-cafe": 58689,
  "local-car-wash": 58690,
  "local-convenience-store": 58691,
  "local-dining": 58710,
  "local-drink": 58692,
  "local-florist": 58693,
  "local-gas-station": 58694,
  "local-grocery-store": 58695,
  "local-hospital": 58696,
  "local-hotel": 58697,
  "local-laundry-service": 58698,
  "local-library": 58699,
  "local-mall": 58700,
  "local-movies": 58701,
  "local-offer": 58702,
  "local-parking": 58703,
  "local-pharmacy": 58704,
  "local-phone": 58705,
  "local-pizza": 58706,
  "local-play": 58707,
  "local-post-office": 58708,
  "local-printshop": 58709,
  "local-see": 58711,
  "local-shipping": 58712,
  "local-taxi": 58713,
  "location-city": 59377,
  "location-disabled": 57782,
  "location-off": 57543,
  "location-on": 57544,
  "location-searching": 57783,
  "lock": 59543,
  "lock-open": 59544,
  "lock-outline": 59545,
  "looks": 58364,
  "looks-3": 58363,
  "looks-4": 58365,
  "looks-5": 58366,
  "looks-6": 58367,
  "looks-one": 58368,
  "looks-two": 58369,
  "loop": 57384,
  "loupe": 58370,
  "low-priority": 57709,
  "loyalty": 59546,
  "mail": 57688,
  "mail-outline": 57569,
  "map": 58715,
  "markunread": 57689,
  "markunread-mailbox": 59547,
  "memory": 58146,
  "menu": 58834,
  "merge-type": 57938,
  "message": 57545,
  "mic": 57385,
  "mic-none": 57386,
  "mic-off": 57387,
  "mms": 58904,
  "mode-comment": 57939,
  "mode-edit": 57940,
  "monetization-on": 57955,
  "money-off": 57948,
  "monochrome-photos": 58371,
  "mood": 59378,
  "mood-bad": 59379,
  "more": 58905,
  "more-horiz": 58835,
  "more-vert": 58836,
  "motorcycle": 59675,
  "mouse": 58147,
  "move-to-inbox": 57704,
  "movie": 57388,
  "movie-creation": 58372,
  "movie-filter": 58426,
  "multiline-chart": 59103,
  "music-note": 58373,
  "music-video": 57443,
  "my-location": 58716,
  "nature": 58374,
  "nature-people": 58375,
  "navigate-before": 58376,
  "navigate-next": 58377,
  "navigation": 58717,
  "near-me": 58729,
  "network-cell": 57785,
  "network-check": 58944,
  "network-locked": 58906,
  "network-wifi": 57786,
  "new-releases": 57393,
  "next-week": 57706,
  "nfc": 57787,
  "no-encryption": 58945,
  "no-sim": 57548,
  "not-interested": 57395,
  "note": 57455,
  "note-add": 59548,
  "notifications": 59380,
  "notifications-active": 59383,
  "notifications-none": 59381,
  "notifications-off": 59382,
  "notifications-paused": 59384,
  "offline-pin": 59658,
  "ondemand-video": 58938,
  "opacity": 59676,
  "open-in-browser": 59549,
  "open-in-new": 59550,
  "open-with": 59551,
  "pages": 59385,
  "pageview": 59552,
  "palette": 58378,
  "pan-tool": 59685,
  "panorama": 58379,
  "panorama-fish-eye": 58380,
  "panorama-horizontal": 58381,
  "panorama-vertical": 58382,
  "panorama-wide-angle": 58383,
  "party-mode": 59386,
  "pause": 57396,
  "pause-circle-filled": 57397,
  "pause-circle-outline": 57398,
  "payment": 59553,
  "people": 59387,
  "people-outline": 59388,
  "perm-camera-mic": 59554,
  "perm-contact-calendar": 59555,
  "perm-data-setting": 59556,
  "perm-device-information": 59557,
  "perm-identity": 59558,
  "perm-media": 59559,
  "perm-phone-msg": 59560,
  "perm-scan-wifi": 59561,
  "person": 59389,
  "person-add": 59390,
  "person-outline": 59391,
  "person-pin": 58714,
  "person-pin-circle": 58730,
  "personal-video": 58939,
  "pets": 59677,
  "phone": 57549,
  "phone-android": 58148,
  "phone-bluetooth-speaker": 58907,
  "phone-forwarded": 58908,
  "phone-in-talk": 58909,
  "phone-iphone": 58149,
  "phone-locked": 58910,
  "phone-missed": 58911,
  "phone-paused": 58912,
  "phonelink": 58150,
  "phonelink-erase": 57563,
  "phonelink-lock": 57564,
  "phonelink-off": 58151,
  "phonelink-ring": 57565,
  "phonelink-setup": 57566,
  "photo": 58384,
  "photo-album": 58385,
  "photo-camera": 58386,
  "photo-filter": 58427,
  "photo-library": 58387,
  "photo-size-select-actual": 58418,
  "photo-size-select-large": 58419,
  "photo-size-select-small": 58420,
  "picture-as-pdf": 58389,
  "picture-in-picture": 59562,
  "picture-in-picture-alt": 59665,
  "pie-chart": 59076,
  "pie-chart-outlined": 59077,
  "pin-drop": 58718,
  "place": 58719,
  "play-arrow": 57399,
  "play-circle-filled": 57400,
  "play-circle-outline": 57401,
  "play-for-work": 59654,
  "playlist-add": 57403,
  "playlist-add-check": 57445,
  "playlist-play": 57439,
  "plus-one": 59392,
  "poll": 59393,
  "polymer": 59563,
  "pool": 60232,
  "portable-wifi-off": 57550,
  "portrait": 58390,
  "power": 58940,
  "power-input": 58166,
  "power-settings-new": 59564,
  "pregnant-woman": 59678,
  "present-to-all": 57567,
  "print": 59565,
  "priority-high": 58949,
  "public": 59403,
  "publish": 57941,
  "query-builder": 59566,
  "question-answer": 59567,
  "queue": 57404,
  "queue-music": 57405,
  "queue-play-next": 57446,
  "radio": 57406,
  "radio-button-checked": 59447,
  "radio-button-unchecked": 59446,
  "rate-review": 58720,
  "receipt": 59568,
  "recent-actors": 57407,
  "record-voice-over": 59679,
  "redeem": 59569,
  "redo": 57690,
  "refresh": 58837,
  "remove": 57691,
  "remove-circle": 57692,
  "remove-circle-outline": 57693,
  "remove-from-queue": 57447,
  "remove-red-eye": 58391,
  "remove-shopping-cart": 59688,
  "reorder": 59646,
  "repeat": 57408,
  "repeat-one": 57409,
  "replay": 57410,
  "replay-10": 57433,
  "replay-30": 57434,
  "replay-5": 57435,
  "reply": 57694,
  "reply-all": 57695,
  "report": 57696,
  "report-problem": 59570,
  "restaurant": 58732,
  "restaurant-menu": 58721,
  "restore": 59571,
  "restore-page": 59689,
  "ring-volume": 57553,
  "room": 59572,
  "room-service": 60233,
  "rotate-90-degrees-ccw": 58392,
  "rotate-left": 58393,
  "rotate-right": 58394,
  "rounded-corner": 59680,
  "router": 58152,
  "rowing": 59681,
  "rss-feed": 57573,
  "rv-hookup": 58946,
  "satellite": 58722,
  "save": 57697,
  "scanner": 58153,
  "schedule": 59573,
  "school": 59404,
  "screen-lock-landscape": 57790,
  "screen-lock-portrait": 57791,
  "screen-lock-rotation": 57792,
  "screen-rotation": 57793,
  "screen-share": 57570,
  "sd-card": 58915,
  "sd-storage": 57794,
  "search": 59574,
  "security": 58154,
  "select-all": 57698,
  "send": 57699,
  "sentiment-dissatisfied": 59409,
  "sentiment-neutral": 59410,
  "sentiment-satisfied": 59411,
  "sentiment-very-dissatisfied": 59412,
  "sentiment-very-satisfied": 59413,
  "settings": 59576,
  "settings-applications": 59577,
  "settings-backup-restore": 59578,
  "settings-bluetooth": 59579,
  "settings-brightness": 59581,
  "settings-cell": 59580,
  "settings-ethernet": 59582,
  "settings-input-antenna": 59583,
  "settings-input-component": 59584,
  "settings-input-composite": 59585,
  "settings-input-hdmi": 59586,
  "settings-input-svideo": 59587,
  "settings-overscan": 59588,
  "settings-phone": 59589,
  "settings-power": 59590,
  "settings-remote": 59591,
  "settings-system-daydream": 57795,
  "settings-voice": 59592,
  "share": 59405,
  "shop": 59593,
  "shop-two": 59594,
  "shopping-basket": 59595,
  "shopping-cart": 59596,
  "short-text": 57953,
  "show-chart": 59105,
  "shuffle": 57411,
  "signal-cellular-4-bar": 57800,
  "signal-cellular-connected-no-internet-4-bar": 57805,
  "signal-cellular-no-sim": 57806,
  "signal-cellular-null": 57807,
  "signal-cellular-off": 57808,
  "signal-wifi-4-bar": 57816,
  "signal-wifi-4-bar-lock": 57817,
  "signal-wifi-off": 57818,
  "sim-card": 58155,
  "sim-card-alert": 58916,
  "skip-next": 57412,
  "skip-previous": 57413,
  "slideshow": 58395,
  "slow-motion-video": 57448,
  "smartphone": 58156,
  "smoke-free": 60234,
  "smoking-rooms": 60235,
  "sms": 58917,
  "sms-failed": 58918,
  "snooze": 57414,
  "sort": 57700,
  "sort-by-alpha": 57427,
  "spa": 60236,
  "space-bar": 57942,
  "speaker": 58157,
  "speaker-group": 58158,
  "speaker-notes": 59597,
  "speaker-notes-off": 59690,
  "speaker-phone": 57554,
  "spellcheck": 59598,
  "star": 59448,
  "star-border": 59450,
  "star-half": 59449,
  "stars": 59600,
  "stay-current-landscape": 57555,
  "stay-current-portrait": 57556,
  "stay-primary-landscape": 57557,
  "stay-primary-portrait": 57558,
  "stop": 57415,
  "stop-screen-share": 57571,
  "storage": 57819,
  "store": 59601,
  "store-mall-directory": 58723,
  "straighten": 58396,
  "streetview": 58734,
  "strikethrough-s": 57943,
  "style": 58397,
  "subdirectory-arrow-left": 58841,
  "subdirectory-arrow-right": 58842,
  "subject": 59602,
  "subscriptions": 57444,
  "subtitles": 57416,
  "subway": 58735,
  "supervisor-account": 59603,
  "surround-sound": 57417,
  "swap-calls": 57559,
  "swap-horiz": 59604,
  "swap-vert": 59605,
  "swap-vertical-circle": 59606,
  "switch-camera": 58398,
  "switch-video": 58399,
  "sync": 58919,
  "sync-disabled": 58920,
  "sync-problem": 58921,
  "system-update": 58922,
  "system-update-alt": 59607,
  "tab": 59608,
  "tab-unselected": 59609,
  "tablet": 58159,
  "tablet-android": 58160,
  "tablet-mac": 58161,
  "tag-faces": 58400,
  "tap-and-play": 58923,
  "terrain": 58724,
  "text-fields": 57954,
  "text-format": 57701,
  "textsms": 57560,
  "texture": 58401,
  "theaters": 59610,
  "thumb-down": 59611,
  "thumb-up": 59612,
  "thumbs-up-down": 59613,
  "time-to-leave": 58924,
  "timelapse": 58402,
  "timeline": 59682,
  "timer": 58405,
  "timer-10": 58403,
  "timer-3": 58404,
  "timer-off": 58406,
  "title": 57956,
  "toc": 59614,
  "today": 59615,
  "toll": 59616,
  "tonality": 58407,
  "touch-app": 59667,
  "toys": 58162,
  "track-changes": 59617,
  "traffic": 58725,
  "train": 58736,
  "tram": 58737,
  "transfer-within-a-station": 58738,
  "transform": 58408,
  "translate": 59618,
  "trending-down": 59619,
  "trending-flat": 59620,
  "trending-up": 59621,
  "tune": 58409,
  "turned-in": 59622,
  "turned-in-not": 59623,
  "tv": 58163,
  "unarchive": 57705,
  "undo": 57702,
  "unfold-less": 58838,
  "unfold-more": 58839,
  "update": 59683,
  "usb": 57824,
  "verified-user": 59624,
  "vertical-align-bottom": 57944,
  "vertical-align-center": 57945,
  "vertical-align-top": 57946,
  "vibration": 58925,
  "video-call": 57456,
  "video-label": 57457,
  "video-library": 57418,
  "videocam": 57419,
  "videocam-off": 57420,
  "videogame-asset": 58168,
  "view-agenda": 59625,
  "view-array": 59626,
  "view-carousel": 59627,
  "view-column": 59628,
  "view-comfy": 58410,
  "view-compact": 58411,
  "view-day": 59629,
  "view-headline": 59630,
  "view-list": 59631,
  "view-module": 59632,
  "view-quilt": 59633,
  "view-stream": 59634,
  "view-week": 59635,
  "vignette": 58421,
  "visibility": 59636,
  "visibility-off": 59637,
  "voice-chat": 58926,
  "voicemail": 57561,
  "volume-down": 57421,
  "volume-mute": 57422,
  "volume-off": 57423,
  "volume-up": 57424,
  "vpn-key": 57562,
  "vpn-lock": 58927,
  "wallpaper": 57788,
  "warning": 57346,
  "watch": 58164,
  "watch-later": 59684,
  "wb-auto": 58412,
  "wb-cloudy": 58413,
  "wb-incandescent": 58414,
  "wb-iridescent": 58422,
  "wb-sunny": 58416,
  "wc": 58941,
  "web": 57425,
  "web-asset": 57449,
  "weekend": 57707,
  "whatshot": 59406,
  "widgets": 57789,
  "wifi": 58942,
  "wifi-lock": 57825,
  "wifi-tethering": 57826,
  "work": 59641,
  "wrap-text": 57947,
  "youtube-searched-for": 59642,
  "zoom-in": 59647,
  "zoom-out": 59648,
  "zoom-out-map": 58731
};
},710,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _theming = _$$_REQUIRE(_dependencyMap[9]);

  var AvatarImage = function (_React$Component) {
    (0, _inherits2.default)(AvatarImage, _React$Component);

    function AvatarImage() {
      (0, _classCallCheck2.default)(this, AvatarImage);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AvatarImage).apply(this, arguments));
    }

    (0, _createClass2.default)(AvatarImage, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            size = _this$props.size,
            source = _this$props.source,
            style = _this$props.style,
            theme = _this$props.theme;
        var colors = theme.colors;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? colors.primary : _ref$backgroundColor;

        return React.createElement(_reactNative.View, {
          style: [{
            width: size,
            height: size,
            borderRadius: size / 2,
            backgroundColor: backgroundColor
          }, style]
        }, React.createElement(_reactNative.Image, {
          source: source,
          style: {
            width: size,
            height: size,
            borderRadius: size / 2
          }
        }));
      }
    }]);
    return AvatarImage;
  }(React.Component);

  AvatarImage.displayName = 'Avatar.Image';
  AvatarImage.defaultProps = {
    size: 64
  };

  var _default = (0, _theming.withTheme)(AvatarImage);

  exports.default = _default;
},711,[361,1,19,20,27,30,33,46,2,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var _colors = _$$_REQUIRE(_dependencyMap[13]);

  var AvatarText = function (_React$Component) {
    (0, _inherits2.default)(AvatarText, _React$Component);

    function AvatarText() {
      (0, _classCallCheck2.default)(this, AvatarText);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AvatarText).apply(this, arguments));
    }

    (0, _createClass2.default)(AvatarText, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            label = _this$props.label,
            size = _this$props.size,
            style = _this$props.style,
            theme = _this$props.theme;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? theme.colors.primary : _ref$backgroundColor,
            restStyle = (0, _objectWithoutProperties2.default)(_ref, ["backgroundColor"]);

        var textColor = this.props.color || ((0, _color.default)(backgroundColor).light() ? 'rgba(0, 0, 0, .54)' : _colors.white);
        return React.createElement(_reactNative.View, {
          style: [{
            width: size,
            height: size,
            borderRadius: size / 2,
            backgroundColor: backgroundColor
          }, styles.container, restStyle]
        }, React.createElement(_Text.default, {
          style: [styles.text, {
            color: textColor,
            fontSize: size / 2,
            lineHeight: size
          }],
          numberOfLines: 1
        }, label));
      }
    }]);
    return AvatarText;
  }(React.Component);

  AvatarText.displayName = 'Avatar.Text';
  AvatarText.defaultProps = {
    size: 64
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      justifyContent: 'center',
      alignItems: 'center'
    },
    text: {
      textAlign: 'center',
      textAlignVertical: 'center'
    }
  });

  var _default = (0, _theming.withTheme)(AvatarText);

  exports.default = _default;
},712,[361,1,6,19,20,27,30,33,46,2,486,713,478,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _theming = _$$_REQUIRE(_dependencyMap[11]);

  var Text = function (_React$Component) {
    (0, _inherits2.default)(Text, _React$Component);

    function Text() {
      (0, _classCallCheck2.default)(this, Text);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Text).apply(this, arguments));
    }

    (0, _createClass2.default)(Text, [{
      key: "setNativeProps",
      value: function setNativeProps() {
        var _this$_root;

        return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var _this$props = this.props,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "theme"]);
        var writingDirection = _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr';
        return React.createElement(_reactNative.Text, (0, _extends2.default)({}, rest, {
          ref: function ref(c) {
            _this._root = c;
          },
          style: [{
            fontFamily: theme.fonts.regular,
            color: theme.colors.text,
            textAlign: 'left',
            writingDirection: writingDirection
          }, style]
        }));
      }
    }]);
    return Text;
  }(React.Component);

  var _default = (0, _theming.withTheme)(Text);

  exports.default = _default;
},713,[361,1,8,6,19,20,27,30,33,46,2,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Accordion", {
    enumerable: true,
    get: function get() {
      return _ListAccordion.default;
    }
  });
  Object.defineProperty(exports, "Icon", {
    enumerable: true,
    get: function get() {
      return _ListIcon.default;
    }
  });
  Object.defineProperty(exports, "Item", {
    enumerable: true,
    get: function get() {
      return _ListItem.default;
    }
  });
  Object.defineProperty(exports, "Section", {
    enumerable: true,
    get: function get() {
      return _ListSection.default;
    }
  });
  Object.defineProperty(exports, "Subheader", {
    enumerable: true,
    get: function get() {
      return _ListSubheader.default;
    }
  });

  var _ListAccordion = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ListIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _ListItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ListSection = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _ListSubheader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
},714,[1,715,717,718,719,720]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var ListAccordion = function (_React$Component) {
    (0, _inherits2.default)(ListAccordion, _React$Component);

    function ListAccordion() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ListAccordion);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ListAccordion)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        expanded: _this.props.expanded || false
      };

      _this._handlePress = function () {
        _this.props.onPress && _this.props.onPress();

        if (_this.props.expanded === undefined) {
          _this.setState(function (state) {
            return {
              expanded: !state.expanded
            };
          });
        }
      };

      return _this;
    }

    (0, _createClass2.default)(ListAccordion, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            left = _this$props.left,
            title = _this$props.title,
            description = _this$props.description,
            children = _this$props.children,
            theme = _this$props.theme,
            style = _this$props.style;
        var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
        var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
        var expanded = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;
        return React.createElement(_reactNative.View, null, React.createElement(_TouchableRipple.default, {
          style: [styles.container, style],
          onPress: this._handlePress,
          accessibilityTraits: "button",
          accessibilityComponentType: "button",
          accessibilityRole: "button"
        }, React.createElement(_reactNative.View, {
          style: styles.row,
          pointerEvents: "none"
        }, left ? left({
          color: expanded ? theme.colors.primary : descriptionColor
        }) : null, React.createElement(_reactNative.View, {
          style: [styles.item, styles.content]
        }, React.createElement(_Text.default, {
          numberOfLines: 1,
          style: [styles.title, {
            color: expanded ? theme.colors.primary : titleColor
          }]
        }, title), description && React.createElement(_Text.default, {
          numberOfLines: 2,
          style: [styles.description, {
            color: descriptionColor
          }]
        }, description)), React.createElement(_reactNative.View, {
          style: [styles.item, description && styles.multiline]
        }, React.createElement(_Icon.default, {
          source: expanded ? 'keyboard-arrow-up' : 'keyboard-arrow-down',
          color: titleColor,
          size: 24
        })))), expanded ? React.Children.map(children, function (child) {
          if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {
            return React.cloneElement(child, {
              style: [styles.child, child.props.style]
            });
          }

          return child;
        }) : null);
      }
    }]);
    return ListAccordion;
  }(React.Component);

  ListAccordion.displayName = 'List.Accordion';

  var styles = _reactNative.StyleSheet.create({
    container: {
      padding: 8
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    multiline: {
      height: 40,
      alignItems: 'center',
      justifyContent: 'center'
    },
    title: {
      fontSize: 16
    },
    description: {
      fontSize: 14
    },
    item: {
      margin: 8
    },
    child: {
      paddingLeft: 64
    },
    content: {
      flex: 1,
      justifyContent: 'center'
    }
  });

  var _default = (0, _theming.withTheme)(ListAccordion);

  exports.default = _default;
},715,[361,1,19,20,27,30,33,486,46,2,716,504,713,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var ANDROID_VERSION_LOLLIPOP = 21;
  var ANDROID_VERSION_PIE = 28;

  var TouchableRipple = function (_React$Component) {
    (0, _inherits2.default)(TouchableRipple, _React$Component);

    function TouchableRipple() {
      (0, _classCallCheck2.default)(this, TouchableRipple);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TouchableRipple).apply(this, arguments));
    }

    (0, _createClass2.default)(TouchableRipple, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            background = _this$props.background,
            borderless = _this$props.borderless,
            disabledProp = _this$props.disabled,
            rippleColor = _this$props.rippleColor,
            underlayColor = _this$props.underlayColor,
            children = _this$props.children,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "background", "borderless", "disabled", "rippleColor", "underlayColor", "children", "theme"]);
        var dark = theme.dark,
            colors = theme.colors;
        var disabled = disabledProp || !this.props.onPress;
        var calculatedRippleColor = rippleColor || (0, _color.default)(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();
        var useForeground = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_PIE && borderless;

        if (TouchableRipple.supported) {
          return React.createElement(_reactNative.TouchableNativeFeedback, (0, _extends2.default)({}, rest, {
            disabled: disabled,
            useForeground: useForeground,
            background: background != null ? background : _reactNative.TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)
          }), React.createElement(_reactNative.View, {
            style: [borderless && {
              overflow: 'hidden'
            }, style]
          }, React.Children.only(children)));
        }

        return React.createElement(_reactNative.TouchableHighlight, (0, _extends2.default)({}, rest, {
          disabled: disabled,
          style: [borderless && {
            overflow: 'hidden'
          }, style],
          underlayColor: underlayColor != null ? underlayColor : (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string()
        }), React.Children.only(children));
      }
    }]);
    return TouchableRipple;
  }(React.Component);

  TouchableRipple.defaultProps = {
    borderless: false
  };
  TouchableRipple.supported = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP;

  var _default = (0, _theming.withTheme)(TouchableRipple);

  exports.default = _default;
},716,[361,1,8,6,19,20,27,30,33,46,2,486,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var ListIcon = function (_React$Component) {
    (0, _inherits2.default)(ListIcon, _React$Component);

    function ListIcon() {
      (0, _classCallCheck2.default)(this, ListIcon);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListIcon).apply(this, arguments));
    }

    (0, _createClass2.default)(ListIcon, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            icon = _this$props.icon,
            iconColor = _this$props.color,
            style = _this$props.style;
        return React.createElement(_reactNative.View, {
          style: [styles.item, style],
          pointerEvents: "box-none"
        }, React.createElement(_Icon.default, {
          source: icon,
          size: 24,
          color: iconColor
        }));
      }
    }]);
    return ListIcon;
  }(React.Component);

  exports.default = ListIcon;
  ListIcon.displayName = 'List.Icon';

  var styles = _reactNative.StyleSheet.create({
    item: {
      margin: 8,
      height: 40,
      width: 40,
      alignItems: 'center',
      justifyContent: 'center'
    }
  });
},717,[361,1,19,20,27,30,33,46,2,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var ListItem = function (_React$Component) {
    (0, _inherits2.default)(ListItem, _React$Component);

    function ListItem() {
      (0, _classCallCheck2.default)(this, ListItem);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListItem).apply(this, arguments));
    }

    (0, _createClass2.default)(ListItem, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            left = _this$props.left,
            right = _this$props.right,
            title = _this$props.title,
            description = _this$props.description,
            onPress = _this$props.onPress,
            theme = _this$props.theme,
            style = _this$props.style,
            titleStyle = _this$props.titleStyle,
            descriptionStyle = _this$props.descriptionStyle,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["left", "right", "title", "description", "onPress", "theme", "style", "titleStyle", "descriptionStyle"]);
        var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
        var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
          style: [styles.container, style],
          onPress: onPress
        }), React.createElement(_reactNative.View, {
          style: styles.row
        }, left ? left({
          color: descriptionColor
        }) : null, React.createElement(_reactNative.View, {
          style: [styles.item, styles.content],
          pointerEvents: "none"
        }, React.createElement(_Text.default, {
          numberOfLines: 1,
          style: [styles.title, {
            color: titleColor
          }, titleStyle]
        }, title), description ? React.createElement(_Text.default, {
          numberOfLines: 2,
          style: [styles.description, {
            color: descriptionColor
          }, descriptionStyle]
        }, description) : null), right ? right({
          color: descriptionColor
        }) : null));
      }
    }]);
    return ListItem;
  }(React.Component);

  ListItem.displayName = 'List.Item';

  var styles = _reactNative.StyleSheet.create({
    container: {
      padding: 8
    },
    row: {
      flexDirection: 'row'
    },
    title: {
      fontSize: 16
    },
    description: {
      fontSize: 14
    },
    item: {
      margin: 8
    },
    content: {
      flex: 1,
      justifyContent: 'center'
    }
  });

  var _default = (0, _theming.withTheme)(ListItem);

  exports.default = _default;
},718,[361,1,8,6,19,20,27,30,33,486,46,2,716,713,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _ListSubheader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var ListSection = function (_React$Component) {
    (0, _inherits2.default)(ListSection, _React$Component);

    function ListSection() {
      (0, _classCallCheck2.default)(this, ListSection);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListSection).apply(this, arguments));
    }

    (0, _createClass2.default)(ListSection, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            title = _this$props.title,
            style = _this$props.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "title", "style"]);
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
          style: [styles.container, style]
        }), title && React.createElement(_ListSubheader.default, null, title), children);
      }
    }]);
    return ListSection;
  }(React.Component);

  ListSection.displayName = 'List.Section';

  var styles = _reactNative.StyleSheet.create({
    container: {
      marginVertical: 8
    }
  });

  var _default = (0, _theming.withTheme)(ListSection);

  exports.default = _default;
},719,[361,1,8,6,19,20,27,30,33,46,2,720,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var ListSubheader = function (_React$Component) {
    (0, _inherits2.default)(ListSubheader, _React$Component);

    function ListSubheader() {
      (0, _classCallCheck2.default)(this, ListSubheader);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListSubheader).apply(this, arguments));
    }

    (0, _createClass2.default)(ListSubheader, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "theme"]);
        var colors = theme.colors,
            fonts = theme.fonts;
        var fontFamily = fonts.medium;
        var textColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();
        return React.createElement(_Text.default, (0, _extends2.default)({
          numberOfLines: 1
        }, rest, {
          style: [styles.container, {
            color: textColor,
            fontFamily: fontFamily
          }, style]
        }));
      }
    }]);
    return ListSubheader;
  }(React.Component);

  ListSubheader.displayName = 'List.Subheader';

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingHorizontal: 16,
      paddingVertical: 13
    }
  });

  var _default = (0, _theming.withTheme)(ListSubheader);

  exports.default = _default;
},720,[361,1,8,6,19,20,27,30,33,46,2,486,713,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Item", {
    enumerable: true,
    get: function get() {
      return _DrawerItem.default;
    }
  });
  Object.defineProperty(exports, "Section", {
    enumerable: true,
    get: function get() {
      return _DrawerSection.default;
    }
  });

  var _DrawerItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _DrawerSection = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
},721,[1,722,723]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _theming = _$$_REQUIRE(_dependencyMap[15]);

  var DrawerItem = function (_React$Component) {
    (0, _inherits2.default)(DrawerItem, _React$Component);

    function DrawerItem() {
      (0, _classCallCheck2.default)(this, DrawerItem);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerItem).apply(this, arguments));
    }

    (0, _createClass2.default)(DrawerItem, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            icon = _this$props.icon,
            label = _this$props.label,
            active = _this$props.active,
            theme = _this$props.theme,
            style = _this$props.style,
            onPress = _this$props.onPress,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["icon", "label", "active", "theme", "style", "onPress"]);
        var colors = theme.colors,
            roundness = theme.roundness;
        var backgroundColor = active ? (0, _color.default)(colors.primary).alpha(0.12).rgb().string() : 'transparent';
        var contentColor = active ? colors.primary : (0, _color.default)(colors.text).alpha(0.68).rgb().string();
        var fontFamily = theme.fonts.medium;
        var labelMargin = icon ? 32 : 0;
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
          style: [styles.container, {
            backgroundColor: backgroundColor,
            borderRadius: roundness
          }, style]
        }), React.createElement(_TouchableRipple.default, {
          borderless: true,
          delayPressIn: 0,
          onPress: onPress,
          style: {
            borderRadius: roundness
          },
          accessibilityTraits: active ? ['button', 'selected'] : 'button',
          accessibilityComponentType: "button",
          accessibilityRole: "button",
          accessibilityStates: active ? ['selected'] : undefined
        }, React.createElement(_reactNative.View, {
          style: styles.wrapper
        }, icon ? React.createElement(_Icon.default, {
          source: icon,
          size: 24,
          color: contentColor
        }) : null, React.createElement(_Text.default, {
          numberOfLines: 1,
          style: [styles.label, {
            color: contentColor,
            fontFamily: fontFamily,
            marginLeft: labelMargin
          }]
        }, label))));
      }
    }]);
    return DrawerItem;
  }(React.Component);

  DrawerItem.displayName = 'Drawer.Item';

  var styles = _reactNative.StyleSheet.create({
    container: {
      marginHorizontal: 10,
      marginVertical: 4
    },
    wrapper: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: 8
    },
    label: {
      marginRight: 32
    }
  });

  var _default = (0, _theming.withTheme)(DrawerItem);

  exports.default = _default;
},722,[361,1,8,6,19,20,27,30,33,486,46,2,713,504,716,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Divider = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var DrawerSection = function (_React$Component) {
    (0, _inherits2.default)(DrawerSection, _React$Component);

    function DrawerSection() {
      (0, _classCallCheck2.default)(this, DrawerSection);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerSection).apply(this, arguments));
    }

    (0, _createClass2.default)(DrawerSection, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            title = _this$props.title,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "title", "theme"]);
        var colors = theme.colors,
            fonts = theme.fonts;
        var titleColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();
        var fontFamily = fonts.medium;
        return React.createElement(_reactNative.View, rest, title && React.createElement(_reactNative.View, {
          style: {
            height: 40,
            justifyContent: 'center'
          }
        }, React.createElement(_Text.default, {
          numberOfLines: 1,
          style: {
            color: titleColor,
            fontFamily: fontFamily,
            marginLeft: 16
          }
        }, title)), children, React.createElement(_Divider.default, {
          style: {
            marginVertical: 4
          }
        }));
      }
    }]);
    return DrawerSection;
  }(React.Component);

  DrawerSection.displayName = 'Drawer.Section';

  var _default = (0, _theming.withTheme)(DrawerSection);

  exports.default = _default;
},723,[361,1,6,19,20,27,30,33,486,46,2,713,724,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var _colors = _$$_REQUIRE(_dependencyMap[13]);

  var Divider = function (_React$Component) {
    (0, _inherits2.default)(Divider, _React$Component);

    function Divider() {
      (0, _classCallCheck2.default)(this, Divider);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Divider).apply(this, arguments));
    }

    (0, _createClass2.default)(Divider, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            inset = _this$props.inset,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["inset", "style", "theme"]);
        var isDarkTheme = theme.dark;
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
          style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style]
        }));
      }
    }]);
    return Divider;
  }(React.Component);

  var styles = _reactNative.StyleSheet.create({
    light: {
      backgroundColor: (0, _color.default)(_colors.black).alpha(0.12).rgb().string(),
      height: _reactNative.StyleSheet.hairlineWidth
    },
    dark: {
      backgroundColor: (0, _color.default)(_colors.white).alpha(0.12).rgb().string(),
      height: _reactNative.StyleSheet.hairlineWidth
    },
    inset: {
      marginLeft: 72
    }
  });

  var _default = (0, _theming.withTheme)(Divider);

  exports.default = _default;
},724,[361,1,8,6,19,20,27,30,33,46,486,2,478,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _colors = _$$_REQUIRE(_dependencyMap[11]);

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var Badge = function (_React$Component) {
    (0, _inherits2.default)(Badge, _React$Component);

    function Badge() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Badge);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Badge)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        opacity: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0)
      };
      return _this;
    }

    (0, _createClass2.default)(Badge, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var visible = this.props.visible;

        if (visible !== prevProps.visible) {
          _reactNative.Animated.timing(this.state.opacity, {
            toValue: visible ? 1 : 0,
            duration: 150,
            useNativeDriver: true
          }).start();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            size = _this$props.size,
            style = _this$props.style,
            theme = _this$props.theme;
        var opacity = this.state.opacity;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? theme.colors.notification : _ref$backgroundColor,
            restStyle = (0, _objectWithoutProperties2.default)(_ref, ["backgroundColor"]);

        var textColor = (0, _color.default)(backgroundColor).light() ? _colors.black : _colors.white;
        var borderRadius = size / 2;
        return React.createElement(_reactNative.Animated.Text, {
          numberOfLines: 1,
          style: [{
            opacity: opacity,
            backgroundColor: backgroundColor,
            color: textColor,
            fontSize: size * 0.5,
            fontFamily: theme.fonts.regular,
            lineHeight: size,
            height: size,
            minWidth: size,
            borderRadius: borderRadius
          }, styles.container, restStyle]
        }, children);
      }
    }]);
    return Badge;
  }(React.Component);

  Badge.defaultProps = {
    visible: true,
    size: 20
  };

  var _default = (0, _theming.withTheme)(Badge);

  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignSelf: 'flex-end',
      textAlign: 'center',
      textAlignVertical: 'center',
      paddingHorizontal: 4,
      overflow: 'hidden'
    }
  });
},725,[361,1,6,19,20,27,30,33,46,2,486,477,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var DURATION = 2400;

  var ActivityIndicator = function (_React$Component) {
    (0, _inherits2.default)(ActivityIndicator, _React$Component);

    function ActivityIndicator() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ActivityIndicator);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ActivityIndicator)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        timer: new _reactNative.Animated.Value(0),
        fade: new _reactNative.Animated.Value(!_this.props.animating && _this.props.hidesWhenStopped ? 0 : 1)
      };
      _this.rotation = null;

      _this._startRotation = function () {
        var _this$state = _this.state,
            fade = _this$state.fade,
            timer = _this$state.timer;

        _reactNative.Animated.timing(fade, {
          duration: 200,
          toValue: 1,
          isInteraction: false,
          useNativeDriver: true
        }).start();

        if (_this.rotation) {
          timer.setValue(0);

          _reactNative.Animated.loop(_this.rotation).start();
        }
      };

      _this._stopRotation = function () {
        if (_this.rotation) {
          _this.rotation.stop();
        }
      };

      return _this;
    }

    (0, _createClass2.default)(ActivityIndicator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var animating = this.props.animating;
        var timer = this.state.timer;
        this.rotation = _reactNative.Animated.timing(timer, {
          duration: DURATION,
          easing: _reactNative.Easing.linear,
          useNativeDriver: _reactNative.Platform.OS !== 'web',
          toValue: 1,
          isInteraction: false
        });

        if (animating) {
          this._startRotation();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props = this.props,
            animating = _this$props.animating,
            hidesWhenStopped = _this$props.hidesWhenStopped;
        var fade = this.state.fade;

        if (animating !== prevProps.animating) {
          if (animating) {
            this._startRotation();
          } else if (hidesWhenStopped) {
            _reactNative.Animated.timing(fade, {
              duration: 200,
              toValue: 0,
              useNativeDriver: true,
              isInteraction: false
            }).start(this._stopRotation.bind(this));
          } else {
            this._stopRotation();
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state2 = this.state,
            fade = _this$state2.fade,
            timer = _this$state2.timer;
        var _this$props2 = this.props,
            animating = _this$props2.animating,
            indicatorColor = _this$props2.color,
            hidesWhenStopped = _this$props2.hidesWhenStopped,
            indicatorSize = _this$props2.size,
            style = _this$props2.style,
            theme = _this$props2.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props2, ["animating", "color", "hidesWhenStopped", "size", "style", "theme"]);
        var color = indicatorColor || theme.colors.primary;
        var size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize;
        var frames = 144;

        var easing = _reactNative.Easing.bezier(0.4, 0.0, 0.7, 1.0);

        var containerStyle = {
          width: size,
          height: size / 2,
          overflow: 'hidden'
        };
        return React.createElement(_reactNative.View, (0, _extends2.default)({
          style: [styles.container, style]
        }, rest), React.createElement(_reactNative.Animated.View, {
          style: [{
            width: size,
            height: size,
            opacity: fade
          }]
        }, [0, 1].map(function (index) {
          var inputRange = Array.from(new Array(frames), function (frame, frameIndex) {
            return frameIndex / 143;
          });
          var outputRange = Array.from(new Array(frames), function (frame, frameIndex) {
            var progress = 2 * frameIndex / 143;
            var rotation = index ? 345 : -165;

            if (progress > 1.0) {
              progress = 2.0 - progress;
            }

            var direction = index ? -1 : 1;
            return direction * 150 * easing(progress) + rotation + "deg";
          });
          var layerStyle = {
            width: size,
            height: size,
            transform: [{
              rotate: timer.interpolate({
                inputRange: [0, 1],
                outputRange: ["45deg", "765deg"]
              })
            }]
          };
          var viewportStyle = {
            width: size,
            height: size,
            transform: [{
              translateY: index ? -size / 2 : 0
            }, {
              rotate: timer.interpolate({
                inputRange: inputRange,
                outputRange: outputRange
              })
            }]
          };
          var offsetStyle = index ? {
            top: size / 2
          } : null;
          var lineStyle = {
            width: size,
            height: size,
            borderColor: color,
            borderWidth: size / 10,
            borderRadius: size / 2
          };
          return React.createElement(_reactNative.Animated.View, {
            key: index,
            style: [styles.layer]
          }, React.createElement(_reactNative.Animated.View, {
            style: layerStyle
          }, React.createElement(_reactNative.Animated.View, {
            style: [containerStyle, offsetStyle],
            collapsable: false
          }, React.createElement(_reactNative.Animated.View, {
            style: viewportStyle
          }, React.createElement(_reactNative.Animated.View, {
            style: containerStyle,
            collapsable: false
          }, React.createElement(_reactNative.Animated.View, {
            style: lineStyle
          }))))));
        })));
      }
    }]);
    return ActivityIndicator;
  }(React.Component);

  ActivityIndicator.defaultProps = {
    animating: true,
    size: 'small',
    hidesWhenStopped: true
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      justifyContent: 'center',
      alignItems: 'center'
    },
    layer: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      justifyContent: 'center',
      alignItems: 'center'
    })
  });

  var _default = (0, _theming.withTheme)(ActivityIndicator);

  exports.default = _default;
},726,[361,1,43,8,6,19,20,27,30,33,46,2,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Button = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var Banner = function (_React$Component) {
    (0, _inherits2.default)(Banner, _React$Component);

    function Banner() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Banner);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Banner)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        position: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),
        layout: {
          height: 0,
          measured: false
        }
      };

      _this._handleLayout = function (_ref) {
        var nativeEvent = _ref.nativeEvent;
        var height = nativeEvent.layout.height;

        _this.setState({
          layout: {
            height: height,
            measured: true
          }
        });
      };

      _this._toggle = function () {
        if (_this.props.visible) {
          _this._show();
        } else {
          _this._hide();
        }
      };

      _this._show = function () {
        _reactNative.Animated.timing(_this.state.position, {
          duration: 250,
          toValue: 1
        }).start();
      };

      _this._hide = function () {
        _reactNative.Animated.timing(_this.state.position, {
          duration: 200,
          toValue: 0
        }).start();
      };

      return _this;
    }

    (0, _createClass2.default)(Banner, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.visible !== this.props.visible) {
          this._toggle();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            visible = _this$props.visible,
            image = _this$props.image,
            children = _this$props.children,
            actions = _this$props.actions,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["visible", "image", "children", "actions", "style", "theme"]);
        var _this$state = this.state,
            position = _this$state.position,
            layout = _this$state.layout;

        var height = _reactNative.Animated.multiply(position, layout.height);

        var translateY = _reactNative.Animated.multiply(_reactNative.Animated.add(position, -1), layout.height);

        return React.createElement(_Surface.default, (0, _extends2.default)({}, rest, {
          style: [styles.container, style]
        }), React.createElement(_reactNative.Animated.View, {
          style: {
            height: height
          }
        }), React.createElement(_reactNative.Animated.View, {
          onLayout: this._handleLayout,
          style: [layout.measured || !visible ? [styles.absolute, {
            transform: [{
              translateY: translateY
            }]
          }] : null, !layout.measured && !visible ? {
            opacity: 0
          } : null]
        }, React.createElement(_reactNative.View, {
          style: styles.content
        }, image ? React.createElement(_reactNative.View, {
          style: styles.image
        }, image({
          size: 40
        })) : null, React.createElement(_Text.default, {
          style: styles.message
        }, children)), React.createElement(_reactNative.View, {
          style: styles.actions
        }, actions.map(function (_ref2, i) {
          var label = _ref2.label,
              others = (0, _objectWithoutProperties2.default)(_ref2, ["label"]);
          return React.createElement(_Button.default, (0, _extends2.default)({
            key: i,
            compact: true,
            mode: "text",
            style: styles.button
          }, others), label);
        }))));
      }
    }]);
    return Banner;
  }(React.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      elevation: 1
    },
    absolute: {
      position: 'absolute',
      top: 0,
      width: '100%'
    },
    content: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      marginHorizontal: 8,
      marginTop: 16,
      marginBottom: 0
    },
    image: {
      margin: 8
    },
    message: {
      flex: 1,
      margin: 8
    },
    actions: {
      flexDirection: 'row',
      justifyContent: 'flex-end',
      margin: 4
    },
    button: {
      margin: 4
    }
  });

  var _default = (0, _theming.withTheme)(Banner);

  exports.default = _default;
},727,[361,1,8,6,19,20,27,30,33,46,2,728,713,730,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _shadow = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var Surface = function (_React$Component) {
    (0, _inherits2.default)(Surface, _React$Component);

    function Surface() {
      (0, _classCallCheck2.default)(this, Surface);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Surface).apply(this, arguments));
    }

    (0, _createClass2.default)(Surface, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "theme"]);
        var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};
        var elevation = flattenedStyles.elevation;
        return React.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, rest, {
          style: [{
            backgroundColor: theme.colors.surface
          }, elevation && (0, _shadow.default)(elevation), style]
        }));
      }
    }]);
    return Surface;
  }(React.Component);

  var _default = (0, _theming.withTheme)(Surface);

  exports.default = _default;
},728,[361,1,8,6,19,20,27,30,33,46,2,729,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = shadow;

  var Colors = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  function shadow(elevation) {
    var height, radius;

    if (elevation instanceof _reactNative.Animated.Value) {
      height = elevation.interpolate({
        inputRange: [0, 1, 2, 3, 8, 24],
        outputRange: [0, 0.5, 0.75, 2, 7, 23]
      });
      radius = elevation.interpolate({
        inputRange: [0, 1, 2, 3, 8, 24],
        outputRange: [0, 0.75, 1.5, 3, 8, 24]
      });
    } else {
      switch (elevation) {
        case 1:
          height = 0.5;
          radius = 0.75;
          break;

        case 2:
          height = 0.75;
          radius = 1.5;
          break;

        default:
          height = elevation - 1;
          radius = elevation;
      }
    }

    return {
      shadowColor: Colors.black,
      shadowOffset: {
        width: 0,
        height: height
      },
      shadowOpacity: 0.24,
      shadowRadius: radius
    };
  }
},729,[361,477,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _colors = _$$_REQUIRE(_dependencyMap[16]);

  var _theming = _$$_REQUIRE(_dependencyMap[17]);

  var Button = function (_React$Component) {
    (0, _inherits2.default)(Button, _React$Component);

    function Button() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Button);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        elevation: new _reactNative.Animated.Value(_this.props.mode === 'contained' ? 2 : 0)
      };

      _this._handlePressIn = function () {
        if (_this.props.mode === 'contained') {
          _reactNative.Animated.timing(_this.state.elevation, {
            toValue: 8,
            duration: 200
          }).start();
        }
      };

      _this._handlePressOut = function () {
        if (_this.props.mode === 'contained') {
          _reactNative.Animated.timing(_this.state.elevation, {
            toValue: 2,
            duration: 150
          }).start();
        }
      };

      return _this;
    }

    (0, _createClass2.default)(Button, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            disabled = _this$props.disabled,
            compact = _this$props.compact,
            mode = _this$props.mode,
            dark = _this$props.dark,
            loading = _this$props.loading,
            icon = _this$props.icon,
            buttonColor = _this$props.color,
            children = _this$props.children,
            uppercase = _this$props.uppercase,
            accessibilityLabel = _this$props.accessibilityLabel,
            onPress = _this$props.onPress,
            style = _this$props.style,
            theme = _this$props.theme,
            contentStyle = _this$props.contentStyle,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["disabled", "compact", "mode", "dark", "loading", "icon", "color", "children", "uppercase", "accessibilityLabel", "onPress", "style", "theme", "contentStyle"]);
        var colors = theme.colors,
            roundness = theme.roundness;
        var fontFamily = theme.fonts.medium;
        var backgroundColor, borderColor, textColor, borderWidth;

        if (mode === 'contained') {
          if (disabled) {
            backgroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
          } else if (buttonColor) {
            backgroundColor = buttonColor;
          } else {
            backgroundColor = colors.primary;
          }
        } else {
          backgroundColor = 'transparent';
        }

        if (mode === 'outlined') {
          borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
          borderWidth = _reactNative.StyleSheet.hairlineWidth;
        } else {
          borderColor = 'transparent';
          borderWidth = 0;
        }

        if (disabled) {
          textColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
        } else if (mode === 'contained') {
          var isDark;

          if (typeof dark === 'boolean') {
            isDark = dark;
          } else {
            isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).light();
          }

          textColor = isDark ? _colors.white : _colors.black;
        } else if (buttonColor) {
          textColor = buttonColor;
        } else {
          textColor = colors.primary;
        }

        var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
        var buttonStyle = {
          backgroundColor: backgroundColor,
          borderColor: borderColor,
          borderWidth: borderWidth,
          borderRadius: roundness
        };
        var touchableStyle = {
          borderRadius: roundness
        };
        var textStyle = {
          color: textColor,
          fontFamily: fontFamily
        };
        var elevation = disabled ? 0 : this.state.elevation;
        return React.createElement(_Surface.default, (0, _extends2.default)({}, rest, {
          style: [styles.button, compact && styles.compact, {
            elevation: elevation
          }, buttonStyle, style]
        }), React.createElement(_TouchableRipple.default, {
          borderless: true,
          delayPressIn: 0,
          onPress: onPress,
          onPressIn: this._handlePressIn,
          onPressOut: this._handlePressOut,
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
          accessibilityComponentType: "button",
          accessibilityRole: "button",
          accessibilityStates: disabled ? ['disabled'] : undefined,
          disabled: disabled,
          rippleColor: rippleColor,
          style: touchableStyle
        }, React.createElement(_reactNative.View, {
          style: [styles.content, contentStyle]
        }, icon && loading !== true ? React.createElement(_reactNative.View, {
          style: styles.icon
        }, React.createElement(_Icon.default, {
          source: icon,
          size: 16,
          color: textColor
        })) : null, loading ? React.createElement(_reactNative.ActivityIndicator, {
          size: "small",
          color: textColor,
          style: styles.icon
        }) : null, React.createElement(_Text.default, {
          numberOfLines: 1,
          style: [styles.label, compact && styles.compactLabel, textStyle, {
            fontFamily: fontFamily
          }]
        }, React.Children.map(children, function (child) {
          return typeof child === 'string' && uppercase ? child.toUpperCase() : child;
        })))));
      }
    }]);
    return Button;
  }(React.Component);

  Button.defaultProps = {
    mode: 'text',
    uppercase: true
  };

  var styles = _reactNative.StyleSheet.create({
    button: {
      minWidth: 64,
      borderStyle: 'solid'
    },
    compact: {
      minWidth: 'auto'
    },
    content: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center'
    },
    icon: {
      width: 16,
      marginLeft: 12,
      marginRight: -4
    },
    label: {
      textAlign: 'center',
      letterSpacing: 1,
      marginVertical: 9,
      marginHorizontal: 16
    },
    compactLabel: {
      marginHorizontal: 8
    }
  });

  var _default = (0, _theming.withTheme)(Button);

  exports.default = _default;
},730,[361,1,8,6,19,20,27,30,33,46,2,486,504,728,713,716,477,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[13]);

  var _reactNativeSafeAreaView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _Badge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _colors = _$$_REQUIRE(_dependencyMap[21]);

  var _theming = _$$_REQUIRE(_dependencyMap[22]);

  var AnimatedText = _reactNative.Animated.createAnimatedComponent(_Text.default);

  var MIN_RIPPLE_SCALE = 0.001;
  var MIN_TAB_WIDTH = 96;
  var MAX_TAB_WIDTH = 168;
  var BAR_HEIGHT = 56;
  var FAR_FAR_AWAY = 9999;
  var Touchable = _TouchableRipple.default.supported ? _TouchableRipple.default : function (_ref) {
    var style = _ref.style,
        children = _ref.children,
        borderless = _ref.borderless,
        centered = _ref.centered,
        rippleColor = _ref.rippleColor,
        rest = (0, _objectWithoutProperties2.default)(_ref, ["style", "children", "borderless", "centered", "rippleColor"]);
    return React.createElement(_reactNative.TouchableWithoutFeedback, rest, React.createElement(_reactNative.View, {
      style: style
    }, children));
  };

  var SceneComponent = function (_React$PureComponent) {
    (0, _inherits2.default)(SceneComponent, _React$PureComponent);

    function SceneComponent() {
      (0, _classCallCheck2.default)(this, SceneComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SceneComponent).apply(this, arguments));
    }

    (0, _createClass2.default)(SceneComponent, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            component = _this$props.component,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["component"]);
        return React.createElement(component, rest);
      }
    }]);
    return SceneComponent;
  }(React.PureComponent);

  var BottomNavigation = function (_React$Component) {
    (0, _inherits2.default)(BottomNavigation, _React$Component);
    (0, _createClass2.default)(BottomNavigation, null, [{
      key: "SceneMap",
      value: function SceneMap(scenes) {
        return function (_ref2) {
          var route = _ref2.route,
              jumpTo = _ref2.jumpTo;
          return React.createElement(SceneComponent, {
            key: route.key,
            component: scenes[route.key],
            route: route,
            jumpTo: jumpTo
          });
        };
      }
    }, {
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var _nextProps$navigation = nextProps.navigationState,
            index = _nextProps$navigation.index,
            routes = _nextProps$navigation.routes;
        var tabs = routes.map(function (_, i) {
          return prevState.tabs[i] || new _reactNative.Animated.Value(i === index ? 1 : 0);
        });
        var offsets = routes.map(function (_, i) {
          return prevState.offsets[i] || new _reactNative.Animated.Value(i === index ? 0 : 1);
        });
        var nextState = {
          tabs: tabs,
          offsets: offsets
        };

        if (index !== prevState.current) {
          (0, _extends2.default)(nextState, {
            current: index,
            previous: prevState.current,
            loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [index])
          });
        }

        return nextState;
      }
    }]);

    function BottomNavigation(props) {
      var _this;

      (0, _classCallCheck2.default)(this, BottomNavigation);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BottomNavigation).call(this, props));

      _this._handleKeyboardShow = function () {
        return _this.setState({
          keyboard: true
        }, function () {
          return _reactNative.Animated.timing(_this.state.visible, {
            toValue: 0,
            duration: 150,
            useNativeDriver: true
          }).start();
        });
      };

      _this._handleKeyboardHide = function () {
        return _reactNative.Animated.timing(_this.state.visible, {
          toValue: 1,
          duration: 100,
          useNativeDriver: true
        }).start(function () {
          _this.setState({
            keyboard: false
          });
        });
      };

      _this._animateToCurrentIndex = function () {
        var shifting = _this._isShifting();

        var _this$props$navigatio = _this.props.navigationState,
            routes = _this$props$navigatio.routes,
            index = _this$props$navigatio.index;

        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);

        _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.ripple, {
          toValue: 1,
          duration: shifting ? 400 : 0,
          useNativeDriver: true
        })].concat((0, _toConsumableArray2.default)(routes.map(function (_, i) {
          return _reactNative.Animated.timing(_this.state.tabs[i], {
            toValue: i === index ? 1 : 0,
            duration: shifting ? 150 : 75,
            useNativeDriver: true
          });
        })))).start(function (_ref3) {
          var finished = _ref3.finished;

          _this.state.tabs.map(function (tab, i) {
            return tab.setValue(i === index ? 1 : 0);
          });

          _this.state.index.setValue(index);

          _this.state.ripple.setValue(MIN_RIPPLE_SCALE);

          if (finished) {
            _this.state.offsets.forEach(function (offset, i) {
              if (i === index) {
                offset.setValue(0);
              } else {
                offset.setValue(1);
              }
            });
          }
        });
      };

      _this._handleLayout = function (e) {
        var layout = _this.state.layout;
        var _e$nativeEvent$layout = e.nativeEvent.layout,
            height = _e$nativeEvent$layout.height,
            width = _e$nativeEvent$layout.width;

        if (height === layout.height && width === layout.width) {
          return;
        }

        _this.setState({
          layout: {
            height: height,
            width: width,
            measured: true
          }
        });
      };

      _this._handleTabPress = function (index) {
        var _this$props2 = _this.props,
            navigationState = _this$props2.navigationState,
            onTabPress = _this$props2.onTabPress,
            onIndexChange = _this$props2.onIndexChange;

        if (onTabPress) {
          onTabPress({
            route: navigationState.routes[index]
          });
        }

        if (index !== navigationState.index) {
          onIndexChange(index);
        }
      };

      _this._jumpTo = function (key) {
        var index = _this.props.navigationState.routes.findIndex(function (route) {
          return route.key === key;
        });

        _this.props.onIndexChange(index);
      };

      _this._isShifting = function () {
        return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;
      };

      var _index = _this.props.navigationState.index;
      _this.state = {
        visible: new _reactNative.Animated.Value(1),
        tabs: [],
        offsets: [],
        index: new _reactNative.Animated.Value(_index),
        ripple: new _reactNative.Animated.Value(MIN_RIPPLE_SCALE),
        touch: new _reactNative.Animated.Value(MIN_RIPPLE_SCALE),
        layout: {
          height: 0,
          width: 0,
          measured: false
        },
        current: _index,
        previous: 0,
        loaded: [_index],
        keyboard: false
      };
      return _this;
    }

    (0, _createClass2.default)(BottomNavigation, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._animateToCurrentIndex();

        if (_reactNative.Platform.OS === 'ios') {
          _reactNative.Keyboard.addListener('keyboardWillShow', this._handleKeyboardShow);

          _reactNative.Keyboard.addListener('keyboardWillHide', this._handleKeyboardHide);
        } else {
          _reactNative.Keyboard.addListener('keyboardDidShow', this._handleKeyboardShow);

          _reactNative.Keyboard.addListener('keyboardDidHide', this._handleKeyboardHide);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this2 = this;

        if (prevProps.navigationState.index === this.props.navigationState.index) {
          return;
        }

        this.state.offsets.forEach(function (offset, i) {
          if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {
            offset.setValue(0);
          }
        });

        this._animateToCurrentIndex();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (_reactNative.Platform.OS === 'ios') {
          _reactNative.Keyboard.removeListener('keyboardWillShow', this._handleKeyboardShow);

          _reactNative.Keyboard.removeListener('keyboardWillHide', this._handleKeyboardHide);
        } else {
          _reactNative.Keyboard.removeListener('keyboardDidShow', this._handleKeyboardShow);

          _reactNative.Keyboard.removeListener('keyboardDidHide', this._handleKeyboardHide);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props3 = this.props,
            navigationState = _this$props3.navigationState,
            renderScene = _this$props3.renderScene,
            renderIcon = _this$props3.renderIcon,
            renderLabel = _this$props3.renderLabel,
            _this$props3$getLabel = _this$props3.getLabelText,
            getLabelText = _this$props3$getLabel === undefined ? function (_ref4) {
          var route = _ref4.route;
          return route.title;
        } : _this$props3$getLabel,
            _this$props3$getBadge = _this$props3.getBadge,
            getBadge = _this$props3$getBadge === undefined ? function (_ref5) {
          var route = _ref5.route;
          return route.badge;
        } : _this$props3$getBadge,
            _this$props3$getColor = _this$props3.getColor,
            getColor = _this$props3$getColor === undefined ? function (_ref6) {
          var route = _ref6.route;
          return route.color;
        } : _this$props3$getColor,
            _this$props3$getAcces = _this$props3.getAccessibilityLabel,
            getAccessibilityLabel = _this$props3$getAcces === undefined ? function (_ref7) {
          var route = _ref7.route;
          return route.accessibilityLabel;
        } : _this$props3$getAcces,
            _this$props3$getTestI = _this$props3.getTestID,
            getTestID = _this$props3$getTestI === undefined ? function (_ref8) {
          var route = _ref8.route;
          return route.testID;
        } : _this$props3$getTestI,
            activeColor = _this$props3.activeColor,
            inactiveColor = _this$props3.inactiveColor,
            keyboardHidesNavigationBar = _this$props3.keyboardHidesNavigationBar,
            barStyle = _this$props3.barStyle,
            labeled = _this$props3.labeled,
            style = _this$props3.style,
            theme = _this$props3.theme;
        var _this$state = this.state,
            layout = _this$state.layout,
            loaded = _this$state.loaded;
        var routes = navigationState.routes;
        var colors = theme.colors;

        var shifting = this._isShifting();

        var _ref9 = _reactNative.StyleSheet.flatten(barStyle) || {},
            _ref9$backgroundColor = _ref9.backgroundColor,
            approxBackgroundColor = _ref9$backgroundColor === undefined ? colors.primary : _ref9$backgroundColor;

        var backgroundColor = shifting ? this.state.index.interpolate({
          inputRange: routes.map(function (_, i) {
            return i;
          }),
          outputRange: routes.map(function (route) {
            return getColor({
              route: route
            }) || approxBackgroundColor;
          })
        }) : approxBackgroundColor;
        var isDark = !(0, _color.default)(approxBackgroundColor).light();
        var textColor = isDark ? _colors.white : _colors.black;
        var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;
        var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : (0, _color.default)(textColor).alpha(0.5).rgb().string();
        var touchColor = (0, _color.default)(textColor).alpha(0.12).rgb().string();
        var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;
        var tabWidth = Math.min(layout.width * 4 / routes.length, maxTabWidth);
        return React.createElement(_reactNative.View, {
          style: [styles.container, style],
          pointerEvents: layout.measured ? 'auto' : 'none'
        }, React.createElement(_reactNative.View, {
          style: [styles.content, {
            backgroundColor: colors.background
          }]
        }, routes.map(function (route, index) {
          if (!loaded.includes(index)) {
            return null;
          }

          var opacity = _this3.state.tabs[index];

          var top = _this3.state.offsets[index].interpolate({
            inputRange: [0, 1],
            outputRange: [0, FAR_FAR_AWAY]
          });

          var focused = navigationState.index === index;
          return React.createElement(_reactNative.Animated.View, {
            key: route.key,
            pointerEvents: focused ? 'auto' : 'none',
            accessibilityElementsHidden: !focused,
            importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
            style: [_reactNative.StyleSheet.absoluteFill, {
              opacity: opacity
            }],
            collapsable: false,
            removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? navigationState.index !== index : true
          }, React.createElement(_reactNative.Animated.View, {
            style: [styles.content, {
              top: top
            }]
          }, renderScene({
            route: route,
            jumpTo: _this3._jumpTo
          })));
        })), React.createElement(_Surface.default, {
          style: [styles.bar, keyboardHidesNavigationBar ? {
            transform: [{
              translateY: this.state.visible.interpolate({
                inputRange: [0, 1],
                outputRange: [this.state.layout.height, 0]
              })
            }],
            position: this.state.keyboard ? 'absolute' : null
          } : null, barStyle],
          pointerEvents: keyboardHidesNavigationBar && this.state.keyboard ? 'none' : 'auto',
          onLayout: this._handleLayout
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.barContent, {
            backgroundColor: backgroundColor
          }]
        }, React.createElement(_reactNativeSafeAreaView.default, {
          forceInset: {
            top: 'never',
            bottom: 'always'
          },
          style: [styles.items, {
            maxWidth: maxTabWidth * routes.length
          }]
        }, shifting ? React.createElement(_reactNative.Animated.View, {
          pointerEvents: "none",
          style: [styles.ripple, {
            top: 28 - layout.width / 8,
            left: navigationState.index * tabWidth + tabWidth / 2 - layout.width / 8,
            height: layout.width / 4,
            width: layout.width / 4,
            borderRadius: layout.width / 2,
            backgroundColor: getColor({
              route: routes[navigationState.index]
            }),
            transform: [{
              scale: this.state.ripple.interpolate({
                inputRange: [0, 1],
                outputRange: [0, 8]
              })
            }],
            opacity: this.state.ripple.interpolate({
              inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],
              outputRange: [0, 0, 1, 1]
            })
          }]
        }) : null, routes.map(function (route, index) {
          var focused = navigationState.index === index;
          var active = _this3.state.tabs[index];
          var scale = labeled && shifting ? active.interpolate({
            inputRange: [0, 1],
            outputRange: [0.5, 1]
          }) : 1;
          var translateY = labeled ? shifting ? active.interpolate({
            inputRange: [0, 1],
            outputRange: [7, 0]
          }) : 0 : 7;
          var activeOpacity = active;
          var inactiveOpacity = active.interpolate({
            inputRange: [0, 1],
            outputRange: [1, 0]
          });
          var badge = getBadge({
            route: route
          });
          return React.createElement(Touchable, {
            key: route.key,
            borderless: true,
            centered: true,
            rippleColor: touchColor,
            onPress: function onPress() {
              return _this3._handleTabPress(index);
            },
            testID: getTestID({
              route: route
            }),
            accessibilityLabel: getAccessibilityLabel({
              route: route
            }),
            accessibilityTraits: focused ? ['button', 'selected'] : 'button',
            accessibilityComponentType: "button",
            accessibilityRole: "button",
            accessibilityStates: ['selected'],
            style: styles.item
          }, React.createElement(_reactNative.View, {
            pointerEvents: "none"
          }, React.createElement(_reactNative.Animated.View, {
            style: [styles.iconContainer, {
              transform: [{
                translateY: translateY
              }]
            }]
          }, React.createElement(_reactNative.Animated.View, {
            style: [styles.iconWrapper, {
              opacity: activeOpacity
            }]
          }, renderIcon ? renderIcon({
            route: route,
            focused: true,
            color: activeTintColor
          }) : React.createElement(_Icon.default, {
            source: route.icon,
            color: activeTintColor,
            size: 24
          })), React.createElement(_reactNative.Animated.View, {
            style: [styles.iconWrapper, {
              opacity: inactiveOpacity
            }]
          }, renderIcon ? renderIcon({
            route: route,
            focused: false,
            color: inactiveTintColor
          }) : React.createElement(_Icon.default, {
            source: route.icon,
            color: inactiveTintColor,
            size: 24
          })), React.createElement(_reactNative.View, {
            style: [styles.badgeContainer, {
              right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2
            }]
          }, typeof badge === 'boolean' ? React.createElement(_Badge.default, {
            visible: badge,
            size: 8
          }) : React.createElement(_Badge.default, {
            visible: badge != null,
            size: 16
          }, badge))), labeled ? React.createElement(_reactNative.Animated.View, {
            style: [styles.labelContainer, {
              transform: [{
                scale: scale
              }]
            }]
          }, React.createElement(_reactNative.Animated.View, {
            style: [styles.labelWrapper, {
              opacity: activeOpacity
            }]
          }, renderLabel ? renderLabel({
            route: route,
            focused: true,
            color: activeTintColor
          }) : React.createElement(AnimatedText, {
            style: [styles.label, {
              color: activeTintColor
            }]
          }, getLabelText({
            route: route
          }))), shifting ? null : React.createElement(_reactNative.Animated.View, {
            style: [styles.labelWrapper, {
              opacity: inactiveOpacity
            }]
          }, renderLabel ? renderLabel({
            route: route,
            focused: false,
            color: inactiveTintColor
          }) : React.createElement(AnimatedText, {
            style: [styles.label, {
              color: inactiveTintColor
            }]
          }, getLabelText({
            route: route
          })))) : React.createElement(_reactNative.View, {
            style: styles.labelContainer
          })));
        })))));
      }
    }]);
    return BottomNavigation;
  }(React.Component);

  BottomNavigation.defaultProps = {
    labeled: true,
    keyboardHidesNavigationBar: true
  };
  (0, _reactLifecyclesCompat.polyfill)(BottomNavigation);

  var _default = (0, _theming.withTheme)(BottomNavigation);

  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    content: {
      flex: 1
    },
    bar: {
      left: 0,
      right: 0,
      bottom: 0,
      elevation: 8
    },
    barContent: {
      alignItems: 'center',
      overflow: 'hidden'
    },
    items: {
      flexDirection: 'row',
      width: '100%'
    },
    item: {
      flex: 1,
      paddingVertical: 6
    },
    ripple: {
      position: 'absolute'
    },
    iconContainer: {
      height: 24,
      width: 24,
      marginTop: 2,
      marginHorizontal: 12,
      alignSelf: 'center'
    },
    iconWrapper: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      alignItems: 'center'
    }),
    labelContainer: {
      height: 16,
      paddingBottom: 2
    },
    labelWrapper: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject),
    label: (0, _objectSpread2.default)({
      fontSize: 12,
      textAlign: 'center',
      backgroundColor: 'transparent'
    }, _reactNative.Platform.OS === 'web' ? {
      whiteSpace: 'nowrap'
    } : null),
    badgeContainer: {
      position: 'absolute',
      left: 0,
      top: -2
    }
  });
},731,[361,1,43,15,8,19,20,27,30,33,6,46,2,333,732,486,504,728,725,716,713,477,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.withSafeArea = exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _withOrientation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var X_WIDTH = 375;
  var X_HEIGHT = 812;
  var XSMAX_WIDTH = 414;
  var XSMAX_HEIGHT = 896;
  var PAD_WIDTH = 768;
  var PAD_HEIGHT = 1024;
  var IPADPRO11_WIDTH = 834;
  var IPADPRO11_HEIGHT = 1194;
  var IPADPRO129_HEIGHT = 1024;
  var IPADPRO129_WIDTH = 1366;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      D_HEIGHT = _Dimensions$get.height,
      D_WIDTH = _Dimensions$get.width;

  var _NativeModules$Platfo = _reactNative.NativeModules.PlatformConstants,
      PlatformConstants = _NativeModules$Platfo === undefined ? {} : _NativeModules$Platfo;

  var _ref = PlatformConstants.reactNativeVersion || {},
      _ref$minor = _ref.minor,
      minor = _ref$minor === undefined ? 0 : _ref$minor;

  var isIPhoneX = function () {
    if (_reactNative.Platform.OS === 'web') return false;
    return _reactNative.Platform.OS === 'ios' && (D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH || D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT) || D_HEIGHT === XSMAX_HEIGHT && D_WIDTH === XSMAX_WIDTH || D_HEIGHT === XSMAX_WIDTH && D_WIDTH === XSMAX_HEIGHT;
  }();

  var isNewIPadPro = function () {
    if (_reactNative.Platform.OS !== 'ios') return false;
    return D_HEIGHT === IPADPRO11_HEIGHT && D_WIDTH === IPADPRO11_WIDTH || D_HEIGHT === IPADPRO11_WIDTH && D_WIDTH === IPADPRO11_HEIGHT || D_HEIGHT === IPADPRO129_HEIGHT && D_WIDTH === IPADPRO129_WIDTH || D_HEIGHT === IPADPRO129_WIDTH && D_WIDTH === IPADPRO129_HEIGHT;
  }();

  var isIPad = function () {
    if (_reactNative.Platform.OS !== 'ios' || isIPhoneX) return false;

    if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
      return false;
    }

    if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
      return false;
    }

    return true;
  }();

  var _customStatusBarHeight = null;

  var statusBarHeight = function statusBarHeight(isLandscape) {
    if (_customStatusBarHeight !== null) {
      return _customStatusBarHeight;
    }

    if (_reactNative.Platform.OS === 'android') {
      if (global.Expo) {
        return global.Expo.Constants.statusBarHeight;
      } else {
        return 0;
      }
    }

    if (isIPhoneX) {
      return isLandscape ? 0 : 44;
    }

    if (isNewIPadPro) {
      return 24;
    }

    if (isIPad) {
      return 20;
    }

    return isLandscape ? 0 : 20;
  };

  var doubleFromPercentString = function doubleFromPercentString(percent) {
    if (!percent.includes('%')) {
      return 0;
    }

    var dbl = parseFloat(percent) / 100;
    if (isNaN(dbl)) return 0;
    return dbl;
  };

  var SafeView = function (_Component) {
    (0, _inherits2.default)(SafeView, _Component);

    function SafeView() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, SafeView);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SafeView)).call.apply(_getPrototypeOf2, [this].concat(_args)));
      _this.state = {
        touchesTop: true,
        touchesBottom: true,
        touchesLeft: true,
        touchesRight: true,
        orientation: null,
        viewWidth: 0,
        viewHeight: 0
      };

      _this._onLayout = function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (!_this._isMounted) return;
        if (!_this.view) return;
        var isLandscape = _this.props.isLandscape;
        var orientation = _this.state.orientation;
        var newOrientation = isLandscape ? 'landscape' : 'portrait';

        if (orientation && orientation === newOrientation) {
          return;
        }

        var WIDTH = isLandscape ? X_HEIGHT : X_WIDTH;
        var HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT;

        _this.view._component.measureInWindow(function (winX, winY, winWidth, winHeight) {
          var _this$props;

          if (!_this.view) {
            return;
          }

          var realY = winY;
          var realX = winX;

          if (realY >= HEIGHT) {
            realY = realY % HEIGHT;
          } else if (realY < 0) {
            realY = realY % HEIGHT + HEIGHT;
          }

          if (realX >= WIDTH) {
            realX = realX % WIDTH;
          } else if (realX < 0) {
            realX = realX % WIDTH + WIDTH;
          }

          var touchesTop = realY === 0;
          var touchesBottom = realY + winHeight >= HEIGHT;
          var touchesLeft = realX === 0;
          var touchesRight = realX + winWidth >= WIDTH;

          _this.setState({
            touchesTop: touchesTop,
            touchesBottom: touchesBottom,
            touchesLeft: touchesLeft,
            touchesRight: touchesRight,
            orientation: newOrientation,
            viewWidth: winWidth,
            viewHeight: winHeight
          });

          if (_this.props.onLayout) (_this$props = _this.props).onLayout.apply(_this$props, args);
        });
      };

      _this._getSafeAreaStyle = function () {
        var _this$state = _this.state,
            touchesTop = _this$state.touchesTop,
            touchesBottom = _this$state.touchesBottom,
            touchesLeft = _this$state.touchesLeft,
            touchesRight = _this$state.touchesRight;
        var _this$props2 = _this.props,
            forceInset = _this$props2.forceInset,
            isLandscape = _this$props2.isLandscape;

        var _this$_getViewStyles = _this._getViewStyles(),
            paddingTop = _this$_getViewStyles.paddingTop,
            paddingBottom = _this$_getViewStyles.paddingBottom,
            paddingLeft = _this$_getViewStyles.paddingLeft,
            paddingRight = _this$_getViewStyles.paddingRight,
            viewStyle = _this$_getViewStyles.viewStyle;

        var style = (0, _objectSpread2.default)({}, viewStyle, {
          paddingTop: touchesTop ? _this._getInset('top') : 0,
          paddingBottom: touchesBottom ? _this._getInset('bottom') : 0,
          paddingLeft: touchesLeft ? _this._getInset('left') : 0,
          paddingRight: touchesRight ? _this._getInset('right') : 0
        });

        if (forceInset) {
          Object.keys(forceInset).forEach(function (key) {
            var inset = forceInset[key];

            if (inset === 'always') {
              inset = _this._getInset(key);
            }

            if (inset === 'never') {
              inset = 0;
            }

            switch (key) {
              case 'horizontal':
                {
                  style.paddingLeft = inset;
                  style.paddingRight = inset;
                  break;
                }

              case 'vertical':
                {
                  style.paddingTop = inset;
                  style.paddingBottom = inset;
                  break;
                }

              case 'left':
              case 'right':
              case 'top':
              case 'bottom':
                {
                  var padding = "padding" + key[0].toUpperCase() + key.slice(1);
                  style[padding] = inset;
                  break;
                }
            }
          });
        }

        if (style.height && typeof style.height === 'number') {
          style.height += style.paddingTop + style.paddingBottom;
        }

        if (style.width && typeof style.width === 'number') {
          style.width += style.paddingLeft + style.paddingRight;
        }

        style.paddingTop = Math.max(style.paddingTop, paddingTop);
        style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);
        style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);
        style.paddingRight = Math.max(style.paddingRight, paddingRight);
        return style;
      };

      _this._getViewStyles = function () {
        var viewWidth = _this.state.viewWidth;

        var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(_this.props.style || {}),
            _StyleSheet$flatten$p = _StyleSheet$flatten.padding,
            padding = _StyleSheet$flatten$p === undefined ? 0 : _StyleSheet$flatten$p,
            _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,
            paddingVertical = _StyleSheet$flatten$p2 === undefined ? padding : _StyleSheet$flatten$p2,
            _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,
            paddingHorizontal = _StyleSheet$flatten$p3 === undefined ? padding : _StyleSheet$flatten$p3,
            _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,
            paddingTop = _StyleSheet$flatten$p4 === undefined ? paddingVertical : _StyleSheet$flatten$p4,
            _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,
            paddingBottom = _StyleSheet$flatten$p5 === undefined ? paddingVertical : _StyleSheet$flatten$p5,
            _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,
            paddingLeft = _StyleSheet$flatten$p6 === undefined ? paddingHorizontal : _StyleSheet$flatten$p6,
            _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,
            paddingRight = _StyleSheet$flatten$p7 === undefined ? paddingHorizontal : _StyleSheet$flatten$p7,
            viewStyle = (0, _objectWithoutProperties2.default)(_StyleSheet$flatten, ["padding", "paddingVertical", "paddingHorizontal", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"]);

        if (typeof paddingTop !== 'number') {
          paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
        }

        if (typeof paddingBottom !== 'number') {
          paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
        }

        if (typeof paddingLeft !== 'number') {
          paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
        }

        if (typeof paddingRight !== 'number') {
          paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
        }

        return {
          paddingTop: paddingTop,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          paddingRight: paddingRight,
          viewStyle: viewStyle
        };
      };

      _this._getInset = function (key) {
        var isLandscape = _this.props.isLandscape;

        switch (key) {
          case 'horizontal':
          case 'right':
          case 'left':
            {
              return isLandscape ? isIPhoneX ? 44 : 0 : 0;
            }

          case 'vertical':
          case 'top':
            {
              return statusBarHeight(isLandscape);
            }

          case 'bottom':
            {
              if (isIPhoneX) {
                return isLandscape ? 24 : 34;
              }

              if (isNewIPadPro) {
                return 20;
              }

              return 0;
            }
        }
      };

      return _this;
    }

    (0, _createClass2.default)(SafeView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this._isMounted = true;

        _reactNative.InteractionManager.runAfterInteractions(function () {
          _this2._onLayout();
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        this._onLayout();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props3 = this.props,
            _this$props3$forceIns = _this$props3.forceInset,
            forceInset = _this$props3$forceIns === undefined ? false : _this$props3$forceIns,
            isLandscape = _this$props3.isLandscape,
            style = _this$props3.style,
            props = (0, _objectWithoutProperties2.default)(_this$props3, ["forceInset", "isLandscape", "style"]);

        var safeAreaStyle = this._getSafeAreaStyle();

        return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
          ref: function ref(c) {
            return _this3.view = c;
          },
          pointerEvents: "box-none"
        }, props, {
          onLayout: this._onLayout,
          style: safeAreaStyle
        }));
      }
    }]);
    return SafeView;
  }(_react.Component);

  SafeView.setStatusBarHeight = function (height) {
    _customStatusBarHeight = height;
  };

  var SafeAreaView = (0, _withOrientation.default)(SafeView);
  var _default = SafeAreaView;
  exports.default = _default;

  var withSafeArea = function withSafeArea() {
    var forceInset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return function (WrappedComponent) {
      var withSafeArea = function (_Component2) {
        (0, _inherits2.default)(withSafeArea, _Component2);

        function withSafeArea() {
          (0, _classCallCheck2.default)(this, withSafeArea);
          return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(withSafeArea).apply(this, arguments));
        }

        (0, _createClass2.default)(withSafeArea, [{
          key: "render",
          value: function render() {
            return _react.default.createElement(SafeAreaView, {
              style: {
                flex: 1
              },
              forceInset: forceInset
            }, _react.default.createElement(WrappedComponent, this.props));
          }
        }]);
        return withSafeArea;
      }(_react.Component);

      return (0, _hoistNonReactStatics.default)(withSafeArea, WrappedComponent);
    };
  };

  exports.withSafeArea = withSafeArea;
},732,[361,1,8,6,43,19,20,27,30,33,46,2,399,733]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.isOrientationLandscape = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };

  exports.isOrientationLandscape = isOrientationLandscape;

  function _default(WrappedComponent) {
    var withOrientation = function (_React$Component) {
      (0, _inherits2.default)(withOrientation, _React$Component);

      function withOrientation() {
        var _this;

        (0, _classCallCheck2.default)(this, withOrientation);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(withOrientation).call(this));

        _this.handleOrientationChange = function (_ref2) {
          var window = _ref2.window;
          var isLandscape = isOrientationLandscape(window);

          _this.setState({
            isLandscape: isLandscape
          });
        };

        var _isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));

        _this.state = {
          isLandscape: _isLandscape
        };
        return _this;
      }

      (0, _createClass2.default)(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (typeof _reactNative.Dimensions.addEventListener === 'function') {
            _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (typeof _reactNative.Dimensions.removeEventListener === 'function') {
            _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
          }
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(WrappedComponent, (0, _extends2.default)({}, this.props, this.state));
        }
      }]);
      return withOrientation;
    }(React.Component);

    return (0, _hoistNonReactStatics.default)(withOrientation, WrappedComponent);
  }
},733,[361,1,8,19,20,27,30,33,46,2,399]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _CardContent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _CardActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _CardCover = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _CardTitle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _theming = _$$_REQUIRE(_dependencyMap[16]);

  var Card = function (_React$Component) {
    (0, _inherits2.default)(Card, _React$Component);

    function Card() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Card);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        elevation: new _reactNative.Animated.Value(_this.props.elevation)
      };

      _this._handlePressIn = function () {
        _reactNative.Animated.timing(_this.state.elevation, {
          toValue: 8,
          duration: 150
        }).start();
      };

      _this._handlePressOut = function () {
        _reactNative.Animated.timing(_this.state.elevation, {
          toValue: _this.props.elevation,
          duration: 150
        }).start();
      };

      return _this;
    }

    (0, _createClass2.default)(Card, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            cardElevation = _this$props.elevation,
            onLongPress = _this$props.onLongPress,
            onPress = _this$props.onPress,
            style = _this$props.style,
            theme = _this$props.theme,
            testID = _this$props.testID,
            accessible = _this$props.accessible,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "elevation", "onLongPress", "onPress", "style", "theme", "testID", "accessible"]);
        var elevation = this.state.elevation;
        var roundness = theme.roundness;
        var total = React.Children.count(children);
        var siblings = React.Children.map(children, function (child) {
          return React.isValidElement(child) && child.type ? child.type.displayName : null;
        });
        return React.createElement(_Surface.default, (0, _extends2.default)({
          style: [{
            borderRadius: roundness,
            elevation: elevation
          }, style]
        }, rest), React.createElement(_reactNative.TouchableWithoutFeedback, {
          delayPressIn: 0,
          disabled: !(onPress || onLongPress),
          onLongPress: onLongPress,
          onPress: onPress,
          onPressIn: onPress ? this._handlePressIn : undefined,
          onPressOut: onPress ? this._handlePressOut : undefined,
          testID: testID,
          accessible: accessible
        }, React.createElement(_reactNative.View, {
          style: styles.innerContainer
        }, React.Children.map(children, function (child, index) {
          return React.isValidElement(child) ? React.cloneElement(child, {
            index: index,
            total: total,
            siblings: siblings
          }) : child;
        }))));
      }
    }]);
    return Card;
  }(React.Component);

  Card.Content = _CardContent.default;
  Card.Actions = _CardActions.default;
  Card.Cover = _CardCover.default;
  Card.Title = _CardTitle.default;
  Card.defaultProps = {
    elevation: 1
  };

  var styles = _reactNative.StyleSheet.create({
    innerContainer: {
      flexGrow: 1
    }
  });

  var _default = (0, _theming.withTheme)(Card);

  exports.default = _default;
},734,[361,1,8,6,19,20,27,30,33,46,2,735,736,737,738,728,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var CardContent = function (_React$Component) {
    (0, _inherits2.default)(CardContent, _React$Component);

    function CardContent() {
      (0, _classCallCheck2.default)(this, CardContent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CardContent).apply(this, arguments));
    }

    (0, _createClass2.default)(CardContent, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            index = _this$props.index,
            total = _this$props.total,
            siblings = _this$props.siblings,
            style = _this$props.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["index", "total", "siblings", "style"]);
        var cover = 'withTheme(CardCover)';
        var title = 'withTheme(CardTitle)';
        var contentStyle, prev, next;

        if (typeof index === 'number' && siblings) {
          prev = siblings[index - 1];
          next = siblings[index + 1];
        }

        if (prev === cover && next === cover || prev === title && next === title || total === 1) {
          contentStyle = styles.only;
        } else if (index === 0) {
          if (next === cover || next === title) {
            contentStyle = styles.only;
          } else {
            contentStyle = styles.first;
          }
        } else if (typeof total === 'number' && index === total - 1) {
          if (prev === cover || prev === title) {
            contentStyle = styles.only;
          } else {
            contentStyle = styles.last;
          }
        } else if (prev === cover || prev === title) {
          contentStyle = styles.first;
        } else if (next === cover || next === title) {
          contentStyle = styles.last;
        }

        return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
          style: [styles.container, contentStyle, style]
        }));
      }
    }]);
    return CardContent;
  }(React.Component);

  CardContent.displayName = 'Card.Content';

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingHorizontal: 16
    },
    first: {
      paddingTop: 16
    },
    last: {
      paddingBottom: 16
    },
    only: {
      paddingVertical: 16
    }
  });

  var _default = CardContent;
  exports.default = _default;
},735,[361,1,8,6,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var CardActions = function (_React$Component) {
    (0, _inherits2.default)(CardActions, _React$Component);

    function CardActions() {
      (0, _classCallCheck2.default)(this, CardActions);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CardActions).apply(this, arguments));
    }

    (0, _createClass2.default)(CardActions, [{
      key: "render",
      value: function render() {
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, this.props, {
          style: [styles.container, this.props.style]
        }), React.Children.map(this.props.children, function (child) {
          return React.isValidElement(child) ? React.cloneElement(child, {
            compact: child.props.compact !== false
          }) : child;
        }));
      }
    }]);
    return CardActions;
  }(React.Component);

  CardActions.displayName = 'Card.Actions';

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'flex-start',
      padding: 8
    }
  });

  var _default = CardActions;
  exports.default = _default;
},736,[361,1,8,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _theming = _$$_REQUIRE(_dependencyMap[11]);

  var _colors = _$$_REQUIRE(_dependencyMap[12]);

  var CardCover = function (_React$Component) {
    (0, _inherits2.default)(CardCover, _React$Component);

    function CardCover() {
      (0, _classCallCheck2.default)(this, CardCover);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CardCover).apply(this, arguments));
    }

    (0, _createClass2.default)(CardCover, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            index = _this$props.index,
            total = _this$props.total,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["index", "total", "style", "theme"]);
        var roundness = theme.roundness;
        var coverStyle;

        if (index === 0) {
          if (total === 1) {
            coverStyle = {
              borderRadius: roundness
            };
          } else {
            coverStyle = {
              borderTopLeftRadius: roundness,
              borderTopRightRadius: roundness
            };
          }
        } else if (typeof total === 'number' && index === total - 1) {
          coverStyle = {
            borderBottomLeftRadius: roundness
          };
        }

        return React.createElement(_reactNative.View, {
          style: [styles.container, coverStyle, style]
        }, React.createElement(_reactNative.Image, (0, _extends2.default)({}, rest, {
          style: [styles.image, coverStyle]
        })));
      }
    }]);
    return CardCover;
  }(React.Component);

  CardCover.displayName = 'Card.Cover';

  var styles = _reactNative.StyleSheet.create({
    container: {
      height: 195,
      backgroundColor: _colors.grey200,
      overflow: 'hidden'
    },
    image: {
      flex: 1,
      height: null,
      width: null,
      padding: 16,
      justifyContent: 'flex-end',
      resizeMode: 'cover'
    }
  });

  var _default = (0, _theming.withTheme)(CardCover);

  exports.default = _default;
},737,[361,1,8,6,19,20,27,30,33,46,2,478,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _theming = _$$_REQUIRE(_dependencyMap[9]);

  var _Caption = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Title = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var LEFT_SIZE = 40;

  var CardTitle = function (_React$Component) {
    (0, _inherits2.default)(CardTitle, _React$Component);

    function CardTitle() {
      (0, _classCallCheck2.default)(this, CardTitle);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CardTitle).apply(this, arguments));
    }

    (0, _createClass2.default)(CardTitle, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            left = _this$props.left,
            right = _this$props.right,
            subtitle = _this$props.subtitle,
            subtitleStyle = _this$props.subtitleStyle,
            style = _this$props.style,
            title = _this$props.title,
            titleStyle = _this$props.titleStyle;
        return React.createElement(_reactNative.View, {
          style: [styles.container, {
            height: subtitle || left || right ? 72 : 50
          }, style]
        }, left ? React.createElement(_reactNative.View, {
          style: [styles.left]
        }, left({
          size: LEFT_SIZE
        })) : null, React.createElement(_reactNative.View, {
          style: [styles.titles]
        }, title ? React.createElement(_Title.default, {
          style: [styles.title, {
            marginBottom: subtitle ? 0 : 2
          }, titleStyle],
          numberOfLines: 1
        }, title) : null, subtitle ? React.createElement(_Caption.default, {
          style: [styles.subtitle, subtitleStyle],
          numberOfLines: 1
        }, subtitle) : null), React.createElement(_reactNative.View, null, right ? right({
          size: 24
        }) : null));
      }
    }]);
    return CardTitle;
  }(React.Component);

  CardTitle.displayName = 'Card.Title';

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingLeft: 16
    },
    left: {
      justifyContent: 'center',
      marginRight: 16,
      height: LEFT_SIZE,
      width: LEFT_SIZE
    },
    titles: {
      flex: 1,
      flexDirection: 'column',
      justifyContent: 'center',
      height: 50
    },
    title: {
      minHeight: 30
    },
    subtitle: {
      minHeight: 20,
      marginVertical: 0
    }
  });

  var _default = (0, _theming.withTheme)(CardTitle);

  exports.default = _default;
},738,[361,1,19,20,27,30,33,46,2,478,739,741]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _StyledText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var Caption = function Caption(props) {
    return React.createElement(_StyledText.default, (0, _extends2.default)({}, props, {
      alpha: 0.54,
      family: "regular",
      style: [styles.text, props.style]
    }));
  };

  var _default = Caption;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 12,
      lineHeight: 20,
      marginVertical: 2
    }
  });
},739,[361,1,8,46,2,740]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var StyledText = function (_React$Component) {
    (0, _inherits2.default)(StyledText, _React$Component);

    function StyledText() {
      (0, _classCallCheck2.default)(this, StyledText);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StyledText).apply(this, arguments));
    }

    (0, _createClass2.default)(StyledText, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            theme = _this$props.theme,
            alpha = _this$props.alpha,
            family = _this$props.family,
            style = _this$props.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["theme", "alpha", "family", "style"]);
        var textColor = (0, _color.default)(theme.colors.text).alpha(alpha).rgb().string();
        var fontFamily = theme.fonts[family];
        var writingDirection = _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr';
        return React.createElement(_Text.default, (0, _extends2.default)({}, rest, {
          style: [{
            color: textColor,
            fontFamily: fontFamily,
            textAlign: 'left',
            writingDirection: writingDirection
          }, style, this.props.style]
        }));
      }
    }]);
    return StyledText;
  }(React.Component);

  var _default = (0, _theming.withTheme)(StyledText);

  exports.default = _default;
},740,[361,1,8,6,19,20,27,30,33,486,46,2,713,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _StyledText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var Title = function Title(props) {
    return React.createElement(_StyledText.default, (0, _extends2.default)({}, props, {
      alpha: 0.87,
      family: "medium",
      style: [styles.text, props.style]
    }));
  };

  var _default = Title;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 20,
      lineHeight: 30,
      marginVertical: 2
    }
  });
},741,[361,1,8,46,2,740]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _CheckboxAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _CheckboxIOS = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _theming = _$$_REQUIRE(_dependencyMap[11]);

  var Checkbox = function (_React$Component) {
    (0, _inherits2.default)(Checkbox, _React$Component);

    function Checkbox() {
      (0, _classCallCheck2.default)(this, Checkbox);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Checkbox).apply(this, arguments));
    }

    (0, _createClass2.default)(Checkbox, [{
      key: "render",
      value: function render() {
        return _reactNative.Platform.OS === 'ios' ? React.createElement(_CheckboxIOS.default, this.props) : React.createElement(_CheckboxAndroid.default, this.props);
      }
    }]);
    return Checkbox;
  }(React.Component);

  Checkbox.Android = _CheckboxAndroid.default;
  Checkbox.IOS = _CheckboxIOS.default;

  var _default = (0, _theming.withTheme)(Checkbox);

  exports.default = _default;
},742,[361,1,19,20,27,30,33,46,2,743,744,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var CheckboxAndroid = function (_React$Component) {
    (0, _inherits2.default)(CheckboxAndroid, _React$Component);

    function CheckboxAndroid() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, CheckboxAndroid);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CheckboxAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        scaleAnim: new _reactNative.Animated.Value(1)
      };
      return _this;
    }

    (0, _createClass2.default)(CheckboxAndroid, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.status === this.props.status) {
          return;
        }

        var checked = this.props.status === 'checked';

        _reactNative.Animated.sequence([_reactNative.Animated.timing(this.state.scaleAnim, {
          toValue: 0.85,
          duration: checked ? 200 : 0
        }), _reactNative.Animated.timing(this.state.scaleAnim, {
          toValue: 1,
          duration: checked ? 200 : 350
        })]).start();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            status = _this$props.status,
            disabled = _this$props.disabled,
            onPress = _this$props.onPress,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["status", "disabled", "onPress", "theme"]);
        var checked = status === 'checked';
        var indeterminate = status === 'indeterminate';
        var checkedColor = this.props.color || theme.colors.accent;
        var uncheckedColor = this.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
        var rippleColor, checkboxColor;

        if (disabled) {
          rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
          checkboxColor = theme.colors.disabled;
        } else {
          rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
          checkboxColor = checked ? checkedColor : uncheckedColor;
        }

        var borderWidth = this.state.scaleAnim.interpolate({
          inputRange: [0.8, 1],
          outputRange: [7, 0]
        });
        var icon = indeterminate ? 'indeterminate-check-box' : checked ? 'check-box' : 'check-box-outline-blank';
        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
          borderless: true,
          rippleColor: rippleColor,
          onPress: onPress,
          disabled: disabled,
          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
          accessibilityComponentType: "button",
          accessibilityRole: "button",
          accessibilityStates: disabled ? ['disabled'] : undefined,
          accessibilityLiveRegion: "polite",
          style: styles.container
        }), React.createElement(_reactNative.Animated.View, {
          style: {
            transform: [{
              scale: this.state.scaleAnim
            }]
          }
        }, React.createElement(_Icon.default, {
          allowFontScaling: false,
          source: icon,
          size: 24,
          color: checkboxColor
        }), React.createElement(_reactNative.View, {
          style: [_reactNative.StyleSheet.absoluteFill, styles.fillContainer]
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.fill, {
            borderColor: checkboxColor
          }, {
            borderWidth: borderWidth
          }]
        }))));
      }
    }]);
    return CheckboxAndroid;
  }(React.Component);

  CheckboxAndroid.displayName = 'Checkbox.Android';

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 18,
      width: 36,
      height: 36,
      padding: 6
    },
    fillContainer: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    fill: {
      height: 14,
      width: 14
    }
  });

  var _default = (0, _theming.withTheme)(CheckboxAndroid);

  exports.default = _default;
},743,[361,1,8,6,19,20,27,30,33,46,2,486,504,716,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var CheckboxIOS = function (_React$Component) {
    (0, _inherits2.default)(CheckboxIOS, _React$Component);

    function CheckboxIOS() {
      (0, _classCallCheck2.default)(this, CheckboxIOS);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CheckboxIOS).apply(this, arguments));
    }

    (0, _createClass2.default)(CheckboxIOS, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            status = _this$props.status,
            disabled = _this$props.disabled,
            onPress = _this$props.onPress,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["status", "disabled", "onPress", "theme"]);
        var checked = status === 'checked';
        var indeterminate = status === 'indeterminate';
        var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;
        var rippleColor;

        if (disabled) {
          rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
        } else {
          rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
        }

        var icon = indeterminate ? 'remove' : 'done';
        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
          borderless: true,
          rippleColor: rippleColor,
          onPress: onPress,
          disabled: disabled,
          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
          accessibilityComponentType: "button",
          accessibilityRole: "button",
          accessibilityStates: disabled ? ['disabled'] : undefined,
          accessibilityLiveRegion: "polite",
          style: styles.container
        }), React.createElement(_reactNative.View, {
          style: {
            opacity: indeterminate || checked ? 1 : 0
          }
        }, React.createElement(_Icon.default, {
          allowFontScaling: false,
          source: icon,
          size: 24,
          color: checkedColor
        })));
      }
    }]);
    return CheckboxIOS;
  }(React.Component);

  CheckboxIOS.displayName = 'Checkbox.IOS';

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 18,
      padding: 6
    }
  });

  var _default = (0, _theming.withTheme)(CheckboxIOS);

  exports.default = _default;
},744,[361,1,8,6,19,20,27,30,33,46,2,486,504,716,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _theming = _$$_REQUIRE(_dependencyMap[16]);

  var _colors = _$$_REQUIRE(_dependencyMap[17]);

  var Chip = function (_React$Component) {
    (0, _inherits2.default)(Chip, _React$Component);

    function Chip() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Chip);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Chip)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        elevation: new _reactNative.Animated.Value(0)
      };

      _this._handlePressIn = function () {
        _reactNative.Animated.timing(_this.state.elevation, {
          toValue: 4,
          duration: 200
        }).start();
      };

      _this._handlePressOut = function () {
        _reactNative.Animated.timing(_this.state.elevation, {
          toValue: 0,
          duration: 150
        }).start();
      };

      return _this;
    }

    (0, _createClass2.default)(Chip, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            mode = _this$props.mode,
            children = _this$props.children,
            icon = _this$props.icon,
            avatar = _this$props.avatar,
            selected = _this$props.selected,
            disabled = _this$props.disabled,
            accessibilityLabel = _this$props.accessibilityLabel,
            onPress = _this$props.onPress,
            onClose = _this$props.onClose,
            style = _this$props.style,
            theme = _this$props.theme,
            testID = _this$props.testID,
            selectedColor = _this$props.selectedColor,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["mode", "children", "icon", "avatar", "selected", "disabled", "accessibilityLabel", "onPress", "onClose", "style", "theme", "testID", "selectedColor"]);
        var dark = theme.dark,
            colors = theme.colors;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb' : _ref$backgroundColor;

        var borderColor = mode === 'outlined' ? (0, _color.default)(selectedColor !== undefined ? selectedColor : (0, _color.default)(dark ? _colors.white : _colors.black)).alpha(0.29).rgb().string() : backgroundColor;
        var textColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();
        var iconColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();
        var selectedBackgroundColor = (dark ? (0, _color.default)(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4) : (0, _color.default)(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();
        var underlayColor = selectedColor ? (0, _color.default)(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;
        var accessibilityTraits = ['button'];
        var accessibilityStates = [];

        if (selected) {
          accessibilityTraits.push('selected');
          accessibilityStates.push('selected');
        }

        if (disabled) {
          accessibilityTraits.push('disabled');
          accessibilityStates.push('disabled');
        }

        return React.createElement(_Surface.default, (0, _extends2.default)({
          style: [styles.container, {
            elevation: _reactNative.Platform.OS === 'android' ? this.state.elevation : 0,
            backgroundColor: selected ? selectedBackgroundColor : backgroundColor,
            borderColor: borderColor
          }, style]
        }, rest), React.createElement(_TouchableRipple.default, {
          borderless: true,
          delayPressIn: 0,
          style: styles.touchable,
          onPress: onPress,
          onPressIn: this._handlePressIn,
          onPressOut: this._handlePressOut,
          underlayColor: underlayColor,
          disabled: disabled,
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: accessibilityTraits,
          accessibilityComponentType: "button",
          accessibilityRole: "button",
          accessibilityStates: accessibilityStates,
          testID: testID
        }, React.createElement(_reactNative.View, {
          style: styles.content
        }, avatar && !icon ? React.createElement(_reactNative.View, {
          style: [styles.avatarWrapper, disabled && {
            opacity: 0.26
          }]
        }, React.isValidElement(avatar) ? React.cloneElement(avatar, {
          style: [styles.avatar, avatar.props.style]
        }) : avatar) : null, icon || selected ? React.createElement(_reactNative.View, {
          style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null]
        }, React.createElement(_Icon.default, {
          source: icon || 'done',
          color: avatar ? _colors.white : iconColor,
          size: 18
        })) : null, React.createElement(_Text.default, {
          numberOfLines: 1,
          style: [styles.text, {
            color: textColor,
            marginRight: onClose ? 4 : 8,
            marginLeft: avatar || icon || selected ? 4 : 8
          }]
        }, children), onClose ? React.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: onClose,
          accessibilityTraits: "button",
          accessibilityComponentType: "button"
        }, React.createElement(_reactNative.View, {
          style: styles.icon
        }, React.createElement(_Icon.default, {
          source: "cancel",
          size: 16,
          color: iconColor
        }))) : null)));
      }
    }]);
    return Chip;
  }(React.Component);

  Chip.defaultProps = {
    mode: 'flat',
    disabled: false,
    selected: false
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 16,
      borderWidth: _reactNative.StyleSheet.hairlineWidth,
      borderStyle: 'solid'
    },
    touchable: {
      borderRadius: 16
    },
    content: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: 4
    },
    icon: {
      padding: 4
    },
    text: {
      minHeight: 24,
      lineHeight: 24,
      textAlignVertical: 'center',
      marginVertical: 4
    },
    avatar: {
      width: 24,
      height: 24,
      borderRadius: 12
    },
    avatarWrapper: {
      marginRight: 4
    },
    avatarSelected: {
      position: 'absolute',
      top: 4,
      left: 4,
      backgroundColor: 'rgba(0, 0, 0, .29)'
    }
  });

  var _default = (0, _theming.withTheme)(Chip);

  exports.default = _default;
},745,[361,1,8,6,19,20,27,30,33,46,2,486,504,728,713,716,478,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _DataTableCell = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _DataTableHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _DataTableTitle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _DataTablePagination = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _DataTableRow = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var DataTable = function (_React$Component) {
    (0, _inherits2.default)(DataTable, _React$Component);

    function DataTable() {
      (0, _classCallCheck2.default)(this, DataTable);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DataTable).apply(this, arguments));
    }

    (0, _createClass2.default)(DataTable, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            style = _this$props.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "style"]);
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
          style: [styles.container, style]
        }), children);
      }
    }]);
    return DataTable;
  }(React.Component);

  DataTable.Header = _DataTableHeader.default;
  DataTable.Title = _DataTableTitle.default;
  DataTable.Row = _DataTableRow.default;
  DataTable.Cell = _DataTableCell.default;
  DataTable.Pagination = _DataTablePagination.default;

  var styles = _reactNative.StyleSheet.create({
    container: {
      width: '100%'
    }
  });

  var _default = DataTable;
  exports.default = _default;
},746,[361,1,8,6,19,20,27,30,33,46,2,747,748,749,750,753]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var DataTableCell = function (_React$Component) {
    (0, _inherits2.default)(DataTableCell, _React$Component);

    function DataTableCell() {
      (0, _classCallCheck2.default)(this, DataTableCell);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DataTableCell).apply(this, arguments));
    }

    (0, _createClass2.default)(DataTableCell, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            style = _this$props.style,
            numeric = _this$props.numeric,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "style", "numeric"]);
        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
          style: [styles.container, numeric && styles.right, style]
        }), React.createElement(_Text.default, {
          numberOfLines: 1
        }, children));
      }
    }]);
    return DataTableCell;
  }(React.Component);

  DataTableCell.displayName = 'DataTable.Cell';

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center'
    },
    right: {
      justifyContent: 'flex-end'
    }
  });

  var _default = DataTableCell;
  exports.default = _default;
},747,[361,1,8,6,19,20,27,30,33,46,2,713,716]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _colors = _$$_REQUIRE(_dependencyMap[12]);

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var DataTableHeader = function (_React$Component) {
    (0, _inherits2.default)(DataTableHeader, _React$Component);

    function DataTableHeader() {
      (0, _classCallCheck2.default)(this, DataTableHeader);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DataTableHeader).apply(this, arguments));
    }

    (0, _createClass2.default)(DataTableHeader, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "style", "theme"]);
        var borderBottomColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
          style: [styles.header, {
            borderBottomColor: borderBottomColor
          }, style]
        }), children);
      }
    }]);
    return DataTableHeader;
  }(React.Component);

  DataTableHeader.displayName = 'DataTable.Header';

  var styles = _reactNative.StyleSheet.create({
    header: {
      flexDirection: 'row',
      height: 48,
      paddingHorizontal: 16,
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth * 2
    }
  });

  var _default = (0, _theming.withTheme)(DataTableHeader);

  exports.default = _default;
},748,[361,1,8,6,19,20,27,30,33,46,486,2,477,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var DataTableTitle = function (_React$Component) {
    (0, _inherits2.default)(DataTableTitle, _React$Component);

    function DataTableTitle() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, DataTableTitle);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DataTableTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        spinAnim: new _reactNative.Animated.Value(_this.props.sortDirection === 'ascending' ? 0 : 1)
      };
      return _this;
    }

    (0, _createClass2.default)(DataTableTitle, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.sortDirection === this.props.sortDirection) {
          return;
        }

        _reactNative.Animated.timing(this.state.spinAnim, {
          toValue: this.props.sortDirection === 'ascending' ? 0 : 1,
          duration: 150,
          useNativeDriver: true
        }).start();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            numeric = _this$props.numeric,
            children = _this$props.children,
            onPress = _this$props.onPress,
            sortDirection = _this$props.sortDirection,
            theme = _this$props.theme,
            style = _this$props.style,
            numberOfLines = _this$props.numberOfLines,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["numeric", "children", "onPress", "sortDirection", "theme", "style", "numberOfLines"]);
        var textColor = (0, _color.default)(theme.colors.text).alpha(0.6).rgb().string();
        var spin = this.state.spinAnim.interpolate({
          inputRange: [0, 1],
          outputRange: ['0deg', '180deg']
        });
        var icon = sortDirection ? React.createElement(_reactNative.Animated.View, {
          style: [styles.icon, {
            transform: [{
              rotate: spin
            }]
          }]
        }, React.createElement(_Icon.default, {
          source: "arrow-downward",
          size: 16,
          color: theme.colors.text
        })) : null;
        return React.createElement(_reactNative.TouchableWithoutFeedback, (0, _extends2.default)({
          disabled: !onPress,
          onPress: onPress
        }, rest), React.createElement(_reactNative.View, {
          style: [styles.container, numeric && styles.right, style]
        }, icon, React.createElement(_Text.default, {
          style: [styles.cell, sortDirection ? styles.sorted : {
            color: textColor
          }],
          numberOfLines: numberOfLines
        }, children)));
      }
    }]);
    return DataTableTitle;
  }(React.Component);

  DataTableTitle.displayName = 'DataTable.Title';
  DataTableTitle.defaultProps = {
    numberOfLines: 1
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'row',
      alignContent: 'center',
      paddingVertical: 12
    },
    right: {
      justifyContent: 'flex-end'
    },
    cell: {
      height: 24,
      lineHeight: 24,
      fontSize: 12,
      fontWeight: '500',
      alignItems: 'center'
    },
    sorted: {
      marginLeft: 8
    },
    icon: {
      height: 24,
      justifyContent: 'center'
    }
  });

  var _default = (0, _theming.withTheme)(DataTableTitle);

  exports.default = _default;
},749,[361,1,8,6,19,20,27,30,33,46,2,486,504,713,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _IconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var DataTablePagination = function (_React$Component) {
    (0, _inherits2.default)(DataTablePagination, _React$Component);

    function DataTablePagination() {
      (0, _classCallCheck2.default)(this, DataTablePagination);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DataTablePagination).apply(this, arguments));
    }

    (0, _createClass2.default)(DataTablePagination, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            label = _this$props.label,
            page = _this$props.page,
            numberOfPages = _this$props.numberOfPages,
            onPageChange = _this$props.onPageChange,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["label", "page", "numberOfPages", "onPageChange", "style", "theme"]);
        var labelColor = (0, _color.default)(theme.colors.text).alpha(0.6).rgb().string();
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
          style: [styles.container, style]
        }), React.createElement(_Text.default, {
          style: [styles.label, {
            color: labelColor
          }],
          numberOfLines: 1
        }, label), React.createElement(_IconButton.default, {
          icon: "chevron-left",
          color: theme.colors.text,
          disabled: page === 0,
          onPress: function onPress() {
            return onPageChange(page - 1);
          }
        }), React.createElement(_IconButton.default, {
          icon: "chevron-right",
          color: theme.colors.text,
          disabled: page === numberOfPages - 1,
          onPress: function onPress() {
            return onPageChange(page + 1);
          }
        }));
      }
    }]);
    return DataTablePagination;
  }(React.Component);

  DataTablePagination.displayName = 'DataTable.Pagination';

  var styles = _reactNative.StyleSheet.create({
    container: {
      justifyContent: 'flex-end',
      flexDirection: 'row',
      alignItems: 'center',
      paddingLeft: 16
    },
    label: {
      fontSize: 12,
      marginRight: 44
    }
  });

  var _default = (0, _theming.withTheme)(DataTablePagination);

  exports.default = _default;
},750,[361,1,8,6,19,20,27,30,33,46,2,486,751,713,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _CrossFadeIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _theming = _$$_REQUIRE(_dependencyMap[10]);

  var IconButton = function IconButton(_ref) {
    var icon = _ref.icon,
        customColor = _ref.color,
        _ref$size = _ref.size,
        size = _ref$size === undefined ? 24 : _ref$size,
        accessibilityLabel = _ref.accessibilityLabel,
        disabled = _ref.disabled,
        onPress = _ref.onPress,
        _ref$animated = _ref.animated,
        animated = _ref$animated === undefined ? false : _ref$animated,
        theme = _ref.theme,
        style = _ref.style,
        rest = (0, _objectWithoutProperties2.default)(_ref, ["icon", "color", "size", "accessibilityLabel", "disabled", "onPress", "animated", "theme", "style"]);
    var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;
    var rippleColor = (0, _color.default)(iconColor).alpha(0.32).rgb().string();
    var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
    return React.createElement(_TouchableRipple.default, (0, _extends2.default)({
      borderless: true,
      centered: true,
      onPress: onPress,
      rippleColor: rippleColor,
      style: [styles.container, disabled && styles.disabled, style],
      accessibilityLabel: accessibilityLabel,
      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
      accessibilityComponentType: "button",
      accessibilityRole: "button",
      accessibilityStates: disabled ? ['disabled'] : undefined,
      disabled: disabled,
      hitSlop: _TouchableRipple.default.supported ? {
        top: 10,
        left: 10,
        bottom: 10,
        right: 10
      } : {
        top: 6,
        left: 6,
        bottom: 6,
        right: 6
      }
    }, rest), React.createElement(_reactNative.View, null, React.createElement(IconComponent, {
      color: iconColor,
      source: icon,
      size: size
    })));
  };

  var styles = _reactNative.StyleSheet.create({
    container: _TouchableRipple.default.supported ? {
      height: 28,
      width: 28,
      margin: 10,
      alignItems: 'center',
      justifyContent: 'center',
      overflow: 'visible'
    } : {
      borderRadius: 18,
      height: 36,
      width: 36,
      margin: 6,
      alignItems: 'center',
      justifyContent: 'center',
      overflow: 'visible'
    },
    disabled: {
      opacity: 0.32
    }
  });

  var _default = (0, _theming.withTheme)(IconButton);

  exports.default = _default;
},751,[361,1,8,6,46,2,486,716,504,752,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[9]);

  var _Icon = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var CrossFadeIcon = function (_React$Component) {
    (0, _inherits2.default)(CrossFadeIcon, _React$Component);

    function CrossFadeIcon() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, CrossFadeIcon);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CrossFadeIcon)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        currentIcon: _this.props.source,
        previousIcon: null,
        fade: new _reactNative.Animated.Value(1)
      };
      return _this;
    }

    (0, _createClass2.default)(CrossFadeIcon, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        var previousIcon = this.state.previousIcon;

        if (!(0, _Icon.isValidIcon)(previousIcon) || (0, _Icon.isEqualIcon)(previousIcon, prevState.previousIcon)) {
          return;
        }

        this.state.fade.setValue(1);

        _reactNative.Animated.timing(this.state.fade, {
          duration: 200,
          toValue: 0
        }).start();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            color = _this$props.color,
            size = _this$props.size;
        var opacityPrev = this.state.fade;
        var opacityNext = this.state.previousIcon ? this.state.fade.interpolate({
          inputRange: [0, 1],
          outputRange: [1, 0]
        }) : 1;
        var rotatePrev = this.state.fade.interpolate({
          inputRange: [0, 1],
          outputRange: ['-90deg', '0deg']
        });
        var rotateNext = this.state.previousIcon ? this.state.fade.interpolate({
          inputRange: [0, 1],
          outputRange: ['0deg', '-180deg']
        }) : '0deg';
        return React.createElement(_reactNative.View, {
          style: [styles.content, {
            height: size,
            width: size
          }]
        }, this.state.previousIcon ? React.createElement(_reactNative.Animated.View, {
          style: [styles.icon, {
            opacity: opacityPrev,
            transform: [{
              rotate: rotatePrev
            }]
          }]
        }, React.createElement(_Icon.default, {
          source: this.state.previousIcon,
          size: size,
          color: color
        })) : null, React.createElement(_reactNative.Animated.View, {
          style: [styles.icon, {
            opacity: opacityNext,
            transform: [{
              rotate: rotateNext
            }]
          }]
        }, React.createElement(_Icon.default, {
          source: this.state.currentIcon,
          size: size,
          color: color
        })));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, nextState) {
        if (nextState.currentIcon === nextProps.source) {
          return null;
        }

        return {
          currentIcon: nextProps.source,
          previousIcon: nextState.currentIcon
        };
      }
    }]);
    return CrossFadeIcon;
  }(React.Component);

  (0, _reactLifecyclesCompat.polyfill)(CrossFadeIcon);
  var _default = CrossFadeIcon;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    content: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    icon: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }
  });
},752,[361,1,19,20,27,30,33,46,2,333,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _colors = _$$_REQUIRE(_dependencyMap[13]);

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var DataTableRow = function (_React$Component) {
    (0, _inherits2.default)(DataTableRow, _React$Component);

    function DataTableRow() {
      (0, _classCallCheck2.default)(this, DataTableRow);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DataTableRow).apply(this, arguments));
    }

    (0, _createClass2.default)(DataTableRow, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            onPress = _this$props.onPress,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["onPress", "style", "theme"]);
        var borderBottomColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
          onPress: onPress,
          style: [styles.container, {
            borderBottomColor: borderBottomColor
          }, style]
        }), React.createElement(_reactNative.View, {
          style: styles.content
        }, this.props.children));
      }
    }]);
    return DataTableRow;
  }(React.Component);

  DataTableRow.displayName = 'DataTable.Row';

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderStyle: 'solid',
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      minHeight: 48
    },
    content: {
      flex: 1,
      flexDirection: 'row',
      paddingHorizontal: 16
    }
  });

  var _default = (0, _theming.withTheme)(DataTableRow);

  exports.default = _default;
},753,[361,1,8,6,19,20,27,30,33,46,486,2,716,477,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Modal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _DialogContent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _DialogActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _DialogTitle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _DialogScrollArea = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var Dialog = function (_React$Component) {
    (0, _inherits2.default)(Dialog, _React$Component);

    function Dialog() {
      (0, _classCallCheck2.default)(this, Dialog);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Dialog).apply(this, arguments));
    }

    (0, _createClass2.default)(Dialog, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            dismissable = _this$props.dismissable,
            onDismiss = _this$props.onDismiss,
            visible = _this$props.visible,
            style = _this$props.style,
            theme = _this$props.theme;
        return React.createElement(_Modal.default, {
          dismissable: dismissable,
          onDismiss: onDismiss,
          visible: visible,
          contentContainerStyle: [{
            borderRadius: theme.roundness,
            backgroundColor: theme.colors.surface
          }, styles.container, style]
        }, React.Children.toArray(children).filter(function (child) {
          return child != null && typeof child !== 'boolean';
        }).map(function (child, i) {
          if (i === 0 && React.isValidElement(child) && child.type === _DialogContent.default) {
            return React.cloneElement(child, {
              style: [{
                paddingTop: 24
              }, child.props.style]
            });
          }

          return child;
        }));
      }
    }]);
    return Dialog;
  }(React.Component);

  Dialog.Content = _DialogContent.default;
  Dialog.Actions = _DialogActions.default;
  Dialog.Title = _DialogTitle.default;
  Dialog.ScrollArea = _DialogScrollArea.default;
  Dialog.defaultProps = {
    dismissable: true,
    visible: false
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      marginVertical: _reactNative.Platform.OS === 'android' ? 44 : 0,
      marginHorizontal: 26,
      elevation: 24,
      justifyContent: 'flex-start'
    }
  });

  var _default = (0, _theming.withTheme)(Dialog);

  exports.default = _default;
},754,[361,1,19,20,27,30,33,46,2,755,756,757,758,759,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[10]);

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var Modal = function (_React$Component) {
    (0, _inherits2.default)(Modal, _React$Component);

    function Modal() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Modal);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        opacity: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),
        rendered: _this.props.visible
      };

      _this._handleBack = function () {
        if (_this.props.dismissable) {
          _this._hideModal();
        }

        return true;
      };

      _this._showModal = function () {
        _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);

        _reactNative.BackHandler.addEventListener('hardwareBackPress', _this._handleBack);

        _reactNative.Animated.timing(_this.state.opacity, {
          toValue: 1,
          duration: 280,
          easing: _reactNative.Easing.ease
        }).start();
      };

      _this._hideModal = function () {
        _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);

        _reactNative.Animated.timing(_this.state.opacity, {
          toValue: 0,
          duration: 280,
          easing: _reactNative.Easing.ease
        }).start(function (_ref) {
          var finished = _ref.finished;

          if (!finished) {
            return;
          }

          if (_this.props.visible && _this.props.onDismiss) {
            _this.props.onDismiss();
          }

          if (_this.props.visible) {
            _this._showModal();
          } else {
            _this.setState({
              rendered: false
            });
          }
        });
      };

      return _this;
    }

    (0, _createClass2.default)(Modal, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.visible !== this.props.visible) {
          if (this.props.visible) {
            this._showModal();
          } else {
            this._hideModal();
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.BackHandler.removeEventListener('hardwareBackPress', this._handleBack);
      }
    }, {
      key: "render",
      value: function render() {
        if (!this.state.rendered) return null;
        var _this$props = this.props,
            children = _this$props.children,
            dismissable = _this$props.dismissable,
            theme = _this$props.theme,
            contentContainerStyle = _this$props.contentContainerStyle;
        var colors = theme.colors;
        return React.createElement(_reactNative.Animated.View, {
          accessibilityViewIsModal: true,
          accessibilityLiveRegion: "polite",
          style: _reactNative.StyleSheet.absoluteFill
        }, React.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: dismissable ? this._hideModal : undefined
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.backdrop, {
            backgroundColor: colors.backdrop,
            opacity: this.state.opacity
          }]
        })), React.createElement(_reactNative.View, {
          pointerEvents: "box-none",
          style: styles.wrapper
        }, React.createElement(_Surface.default, {
          style: [{
            opacity: this.state.opacity
          }, styles.content, contentContainerStyle]
        }, children)));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.visible && !prevState.rendered) {
          return {
            rendered: true
          };
        }

        return null;
      }
    }]);
    return Modal;
  }(React.Component);

  Modal.defaultProps = {
    dismissable: true,
    visible: false
  };
  (0, _reactLifecyclesCompat.polyfill)(Modal);

  var _default = (0, _theming.withTheme)(Modal);

  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    backdrop: {
      flex: 1
    },
    wrapper: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      justifyContent: 'center'
    }),
    content: {
      backgroundColor: 'transparent',
      justifyContent: 'center'
    }
  });
},755,[361,1,43,19,20,27,30,33,46,2,333,728,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var DialogContent = function (_React$Component) {
    (0, _inherits2.default)(DialogContent, _React$Component);

    function DialogContent() {
      (0, _classCallCheck2.default)(this, DialogContent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogContent).apply(this, arguments));
    }

    (0, _createClass2.default)(DialogContent, [{
      key: "render",
      value: function render() {
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, this.props, {
          style: [styles.container, this.props.style]
        }), this.props.children);
      }
    }]);
    return DialogContent;
  }(React.Component);

  DialogContent.displayName = 'Dialog.Content';

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingBottom: 24,
      paddingHorizontal: 24
    }
  });

  var _default = DialogContent;
  exports.default = _default;
},756,[361,1,8,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var DialogActions = function (_React$Component) {
    (0, _inherits2.default)(DialogActions, _React$Component);

    function DialogActions() {
      (0, _classCallCheck2.default)(this, DialogActions);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogActions).apply(this, arguments));
    }

    (0, _createClass2.default)(DialogActions, [{
      key: "render",
      value: function render() {
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, this.props, {
          style: [styles.container, this.props.style]
        }), React.Children.map(this.props.children, function (child) {
          return React.isValidElement(child) ? React.cloneElement(child, {
            compact: true
          }) : child;
        }));
      }
    }]);
    return DialogActions;
  }(React.Component);

  DialogActions.displayName = 'Dialog.Actions';

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'flex-end',
      padding: 8
    }
  });

  var _default = DialogActions;
  exports.default = _default;
},757,[361,1,8,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _Title = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var DialogTitle = function (_React$Component) {
    (0, _inherits2.default)(DialogTitle, _React$Component);

    function DialogTitle() {
      (0, _classCallCheck2.default)(this, DialogTitle);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogTitle).apply(this, arguments));
    }

    (0, _createClass2.default)(DialogTitle, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            theme = _this$props.theme,
            style = _this$props.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "theme", "style"]);
        return React.createElement(_Title.default, (0, _extends2.default)({
          accessibilityTraits: "header",
          accessibilityRole: "header",
          style: [styles.text, {
            color: theme.colors.text
          }, style]
        }, rest), children);
      }
    }]);
    return DialogTitle;
  }(React.Component);

  DialogTitle.displayName = 'Dialog.Title';

  var styles = _reactNative.StyleSheet.create({
    text: {
      marginTop: 22,
      marginBottom: 18,
      marginHorizontal: 24
    }
  });

  var _default = (0, _theming.withTheme)(DialogTitle);

  exports.default = _default;
},758,[361,1,8,6,19,20,27,30,33,46,2,741,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var DialogScrollArea = function (_React$Component) {
    (0, _inherits2.default)(DialogScrollArea, _React$Component);

    function DialogScrollArea() {
      (0, _classCallCheck2.default)(this, DialogScrollArea);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogScrollArea).apply(this, arguments));
    }

    (0, _createClass2.default)(DialogScrollArea, [{
      key: "render",
      value: function render() {
        return React.createElement(_reactNative.View, (0, _extends2.default)({}, this.props, {
          style: [styles.container, this.props.style]
        }), this.props.children);
      }
    }]);
    return DialogScrollArea;
  }(React.Component);

  DialogScrollArea.displayName = 'Dialog.ScrollArea';

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderColor: 'rgba(0, 0, 0, .12)',
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      paddingHorizontal: 24,
      flexGrow: 1,
      flexShrink: 1
    }
  });

  var _default = DialogScrollArea;
  exports.default = _default;
},759,[361,1,8,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _FABGroup = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _CrossFadeIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _colors = _$$_REQUIRE(_dependencyMap[17]);

  var _theming = _$$_REQUIRE(_dependencyMap[18]);

  var FAB = function (_React$Component) {
    (0, _inherits2.default)(FAB, _React$Component);

    function FAB() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, FAB);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(FAB)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        visibility: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0)
      };
      return _this;
    }

    (0, _createClass2.default)(FAB, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.visible === prevProps.visible) {
          return;
        }

        if (this.props.visible) {
          _reactNative.Animated.timing(this.state.visibility, {
            toValue: 1,
            duration: 200,
            useNativeDriver: true
          }).start();
        } else {
          _reactNative.Animated.timing(this.state.visibility, {
            toValue: 0,
            duration: 150,
            useNativeDriver: true
          }).start();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            small = _this$props.small,
            icon = _this$props.icon,
            label = _this$props.label,
            _this$props$accessibi = _this$props.accessibilityLabel,
            accessibilityLabel = _this$props$accessibi === undefined ? label : _this$props$accessibi,
            customColor = _this$props.color,
            disabled = _this$props.disabled,
            onPress = _this$props.onPress,
            theme = _this$props.theme,
            style = _this$props.style,
            visible = _this$props.visible,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["small", "icon", "label", "accessibilityLabel", "color", "disabled", "onPress", "theme", "style", "visible"]);
        var visibility = this.state.visibility;
        var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? disabled ? disabledColor : theme.colors.accent : _ref$backgroundColor;

        var foregroundColor;

        if (typeof customColor !== 'undefined') {
          foregroundColor = customColor;
        } else if (disabled) {
          foregroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
        } else {
          foregroundColor = !(0, _color.default)(backgroundColor).light() ? _colors.white : 'rgba(0, 0, 0, .54)';
        }

        var rippleColor = (0, _color.default)(foregroundColor).alpha(0.32).rgb().string();
        return React.createElement(_Surface.default, (0, _extends2.default)({}, rest, {
          style: [{
            backgroundColor: backgroundColor,
            opacity: visibility,
            transform: [{
              scale: visibility
            }]
          }, styles.container, disabled && styles.disabled, style],
          pointerEvents: visible ? 'auto' : 'none'
        }), React.createElement(_TouchableRipple.default, {
          borderless: true,
          onPress: onPress,
          rippleColor: rippleColor,
          disabled: disabled,
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
          accessibilityComponentType: "button",
          accessibilityRole: "button",
          accessibilityStates: disabled ? ['disabled'] : undefined,
          style: styles.touchable
        }, React.createElement(_reactNative.View, {
          style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],
          pointerEvents: "none"
        }, React.createElement(_CrossFadeIcon.default, {
          source: icon,
          size: 24,
          color: foregroundColor
        }), label ? React.createElement(_Text.default, {
          style: [styles.label, {
            color: foregroundColor,
            fontFamily: theme.fonts.medium
          }]
        }, label.toUpperCase()) : null)));
      }
    }]);
    return FAB;
  }(React.Component);

  FAB.Group = _FABGroup.default;
  FAB.defaultProps = {
    visible: true
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 28,
      elevation: 6
    },
    touchable: {
      borderRadius: 28
    },
    standard: {
      height: 56,
      width: 56
    },
    small: {
      height: 40,
      width: 40
    },
    extended: {
      height: 48,
      paddingHorizontal: 16
    },
    content: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center'
    },
    label: {
      marginHorizontal: 8
    },
    disabled: {
      elevation: 0
    }
  });

  var _default = (0, _theming.withTheme)(FAB);

  exports.default = _default;
},760,[361,1,8,6,19,20,27,30,33,486,46,2,761,728,752,713,716,477,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[11]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _FAB = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _Card = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _theming = _$$_REQUIRE(_dependencyMap[16]);

  var FABGroup = function (_React$Component) {
    (0, _inherits2.default)(FABGroup, _React$Component);

    function FABGroup() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, FABGroup);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(FABGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        backdrop: new _reactNative.Animated.Value(0),
        animations: []
      };

      _this._close = function () {
        return _this.props.onStateChange({
          open: false
        });
      };

      _this._toggle = function () {
        return _this.props.onStateChange({
          open: !_this.props.open
        });
      };

      return _this;
    }

    (0, _createClass2.default)(FABGroup, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.open === prevProps.open) {
          return;
        }

        if (this.props.open) {
          _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.backdrop, {
            toValue: 1,
            duration: 250,
            useNativeDriver: true
          }), _reactNative.Animated.stagger(50, this.state.animations.map(function (animation) {
            return _reactNative.Animated.timing(animation, {
              toValue: 1,
              duration: 150,
              useNativeDriver: true
            });
          }).reverse())]).start();
        } else {
          _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.backdrop, {
            toValue: 0,
            duration: 200,
            useNativeDriver: true
          })].concat((0, _toConsumableArray2.default)(this.state.animations.map(function (animation) {
            return _reactNative.Animated.timing(animation, {
              toValue: 0,
              duration: 150,
              useNativeDriver: true
            });
          })))).start();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            actions = _this$props.actions,
            icon = _this$props.icon,
            open = _this$props.open,
            _onPress = _this$props.onPress,
            accessibilityLabel = _this$props.accessibilityLabel,
            theme = _this$props.theme,
            style = _this$props.style,
            fabStyle = _this$props.fabStyle,
            visible = _this$props.visible;
        var colors = theme.colors;
        var labelColor = theme.dark ? colors.text : (0, _color.default)(colors.text).fade(0.54).rgb().string();
        var backdropOpacity = open ? this.state.backdrop.interpolate({
          inputRange: [0, 0.5, 1],
          outputRange: [0, 1, 1]
        }) : this.state.backdrop;
        var opacities = this.state.animations;
        var scales = opacities.map(function (opacity) {
          return open ? opacity.interpolate({
            inputRange: [0, 1],
            outputRange: [0.8, 1]
          }) : 1;
        });
        return React.createElement(_reactNative.View, {
          pointerEvents: "box-none",
          style: [styles.container, style]
        }, open ? React.createElement(_reactNative.StatusBar, {
          barStyle: "light-content"
        }) : null, React.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: this._close
        }, React.createElement(_reactNative.Animated.View, {
          pointerEvents: open ? 'auto' : 'none',
          style: [styles.backdrop, {
            opacity: backdropOpacity,
            backgroundColor: colors.backdrop
          }]
        })), React.createElement(_reactNative.SafeAreaView, {
          pointerEvents: "box-none",
          style: styles.safeArea
        }, React.createElement(_reactNative.View, {
          pointerEvents: open ? 'box-none' : 'none'
        }, actions.map(function (it, i) {
          return React.createElement(_reactNative.View, {
            key: i,
            style: styles.item,
            pointerEvents: "box-none"
          }, it.label && React.createElement(_Card.default, {
            style: [styles.label, {
              transform: [{
                scale: scales[i]
              }],
              opacity: opacities[i]
            }],
            onPress: function onPress() {
              it.onPress();

              _this2._close();
            },
            accessibilityLabel: it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label,
            accessibilityTraits: "button",
            accessibilityComponentType: "button",
            accessibilityRole: "button"
          }, React.createElement(_Text.default, {
            style: {
              color: labelColor
            }
          }, it.label)), React.createElement(_FAB.default, {
            small: true,
            icon: it.icon,
            color: it.color,
            style: [{
              transform: [{
                scale: scales[i]
              }],
              opacity: opacities[i],
              backgroundColor: theme.colors.surface
            }, it.style],
            onPress: function onPress() {
              it.onPress();

              _this2._close();
            },
            accessibilityLabel: typeof it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label,
            accessibilityTraits: "button",
            accessibilityComponentType: "button",
            accessibilityRole: "button"
          }));
        })), React.createElement(_FAB.default, {
          onPress: function onPress() {
            _onPress && _onPress();

            _this2._toggle();
          },
          icon: icon,
          color: this.props.color,
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: "button",
          accessibilityComponentType: "button",
          accessibilityRole: "button",
          style: [styles.fab, fabStyle],
          visible: visible
        })));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        return {
          animations: nextProps.actions.map(function (_, i) {
            return prevState.animations[i] || new _reactNative.Animated.Value(nextProps.open ? 1 : 0);
          })
        };
      }
    }]);
    return FABGroup;
  }(React.Component);

  FABGroup.displayName = 'FAB.Group';
  (0, _reactLifecyclesCompat.polyfill)(FABGroup);

  var _default = (0, _theming.withTheme)(FABGroup);

  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    safeArea: {
      alignItems: 'flex-end'
    },
    container: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      justifyContent: 'flex-end'
    }),
    fab: {
      marginHorizontal: 16,
      marginBottom: 16,
      marginTop: 0
    },
    backdrop: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject),
    label: {
      borderRadius: 5,
      paddingHorizontal: 12,
      paddingVertical: 6,
      marginVertical: 8,
      marginHorizontal: 16,
      elevation: 2
    },
    item: {
      marginHorizontal: 24,
      marginBottom: 16,
      flexDirection: 'row',
      justifyContent: 'flex-end',
      alignItems: 'center'
    }
  });
},761,[361,1,43,15,19,20,27,30,33,46,2,333,486,760,713,734,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var AnimatedText = _reactNative.Animated.createAnimatedComponent(_Text.default);

  var HelperText = function (_React$PureComponent) {
    (0, _inherits2.default)(HelperText, _React$PureComponent);

    function HelperText() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, HelperText);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HelperText)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        shown: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),
        textHeight: 0
      };

      _this._showText = function () {
        _reactNative.Animated.timing(_this.state.shown, {
          toValue: 1,
          duration: 150,
          useNativeDriver: true
        }).start();
      };

      _this._hideText = function () {
        _reactNative.Animated.timing(_this.state.shown, {
          toValue: 0,
          duration: 180,
          useNativeDriver: true
        }).start();
      };

      _this._handleTextLayout = function (e) {
        _this.props.onLayout && _this.props.onLayout(e);

        _this.setState({
          textHeight: e.nativeEvent.layout.height
        });
      };

      return _this;
    }

    (0, _createClass2.default)(HelperText, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (prevProps.visible !== this.props.visible || prevState.textHeight !== this.state.textHeight) {
          if (this.props.visible) {
            this._showText();
          } else {
            this._hideText();
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            type = _this$props.type,
            visible = _this$props.visible,
            theme = _this$props.theme,
            onLayout = _this$props.onLayout,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "type", "visible", "theme", "onLayout"]);
        var colors = theme.colors,
            dark = theme.dark;
        var textColor = this.props.type === 'error' ? colors.error : (0, _color.default)(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();
        return React.createElement(AnimatedText, (0, _extends2.default)({
          onLayout: this._handleTextLayout,
          style: [styles.text, {
            color: textColor,
            opacity: this.state.shown,
            transform: visible && type === 'error' ? [{
              translateY: this.state.shown.interpolate({
                inputRange: [0, 1],
                outputRange: [-this.state.textHeight / 2, 0]
              })
            }] : []
          }, style]
        }, rest), this.props.children);
      }
    }]);
    return HelperText;
  }(React.PureComponent);

  HelperText.defaultProps = {
    type: 'info',
    visible: true
  };

  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 12,
      paddingVertical: 4,
      paddingHorizontal: 12
    }
  });

  var _default = (0, _theming.withTheme)(HelperText);

  exports.default = _default;
},762,[361,1,8,6,19,20,27,30,33,46,486,2,713,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _ProgressBarComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _theming = _$$_REQUIRE(_dependencyMap[11]);

  var ProgressBar = function (_React$Component) {
    (0, _inherits2.default)(ProgressBar, _React$Component);

    function ProgressBar() {
      (0, _classCallCheck2.default)(this, ProgressBar);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ProgressBar).apply(this, arguments));
    }

    (0, _createClass2.default)(ProgressBar, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            progress = _this$props.progress,
            color = _this$props.color,
            style = _this$props.style,
            theme = _this$props.theme;
        var tintColor = color || theme.colors.primary;
        var trackTintColor = (0, _color.default)(tintColor).alpha(0.38).rgb().string();
        return React.createElement(_ProgressBarComponent.default, {
          progress: progress,
          progressTintColor: tintColor,
          style: [styles.progressBarHeight, style],
          trackTintColor: trackTintColor
        });
      }
    }]);
    return ProgressBar;
  }(React.Component);

  var styles = _reactNative.StyleSheet.create({
    progressBarHeight: {
      paddingVertical: 10
    }
  });

  var _default = (0, _theming.withTheme)(ProgressBar);

  exports.default = _default;
},763,[361,1,19,20,27,30,33,46,2,486,764,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = BaseProgressBarAndroid;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  function BaseProgressBarAndroid(_ref) {
    var progressTintColor = _ref.progressTintColor,
        rest = (0, _objectWithoutProperties2.default)(_ref, ["progressTintColor"]);
    return React.createElement(_reactNative.ProgressBarAndroid, (0, _extends2.default)({}, rest, {
      styleAttr: "Horizontal",
      indeterminate: false,
      color: progressTintColor
    }));
  }
},764,[361,1,8,6,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _RadioButtonGroup = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _RadioButtonAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _RadioButtonIOS = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var RadioButton = function (_React$Component) {
    (0, _inherits2.default)(RadioButton, _React$Component);

    function RadioButton() {
      (0, _classCallCheck2.default)(this, RadioButton);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RadioButton).apply(this, arguments));
    }

    (0, _createClass2.default)(RadioButton, [{
      key: "render",
      value: function render() {
        return _reactNative.Platform.OS === 'ios' ? React.createElement(_RadioButtonIOS.default, this.props) : React.createElement(_RadioButtonAndroid.default, this.props);
      }
    }]);
    return RadioButton;
  }(React.Component);

  RadioButton.Group = _RadioButtonGroup.default;
  RadioButton.Android = _RadioButtonAndroid.default;
  RadioButton.IOS = _RadioButtonIOS.default;

  var _default = (0, _theming.withTheme)(RadioButton);

  exports.default = _default;
},765,[361,1,19,20,27,30,33,46,2,766,767,768,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.RadioButtonContext = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _createReactContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var RadioButtonContext = (0, _createReactContext.default)(null);
  exports.RadioButtonContext = RadioButtonContext;

  var RadioButtonGroup = function (_React$Component) {
    (0, _inherits2.default)(RadioButtonGroup, _React$Component);

    function RadioButtonGroup() {
      (0, _classCallCheck2.default)(this, RadioButtonGroup);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RadioButtonGroup).apply(this, arguments));
    }

    (0, _createClass2.default)(RadioButtonGroup, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            value = _this$props.value,
            onValueChange = _this$props.onValueChange,
            children = _this$props.children;
        return React.createElement(RadioButtonContext.Provider, {
          value: {
            value: value,
            onValueChange: onValueChange
          }
        }, children);
      }
    }]);
    return RadioButtonGroup;
  }(React.Component);

  RadioButtonGroup.displayName = 'RadioButton.Group';
  var _default = RadioButtonGroup;
  exports.default = _default;
},766,[361,1,19,20,27,30,33,46,346]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _RadioButtonGroup = _$$_REQUIRE(_dependencyMap[12]);

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var BORDER_WIDTH = 2;

  var RadioButtonAndroid = function (_React$Component) {
    (0, _inherits2.default)(RadioButtonAndroid, _React$Component);

    function RadioButtonAndroid() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, RadioButtonAndroid);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(RadioButtonAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        borderAnim: new _reactNative.Animated.Value(BORDER_WIDTH),
        radioAnim: new _reactNative.Animated.Value(1)
      };
      return _this;
    }

    (0, _createClass2.default)(RadioButtonAndroid, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.status === this.props.status) {
          return;
        }

        if (this.props.status === 'checked') {
          this.state.radioAnim.setValue(1.2);

          _reactNative.Animated.timing(this.state.radioAnim, {
            toValue: 1,
            duration: 150
          }).start();
        } else {
          this.state.borderAnim.setValue(10);

          _reactNative.Animated.timing(this.state.borderAnim, {
            toValue: BORDER_WIDTH,
            duration: 150
          }).start();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {
          var _this2$props = _this2.props,
              disabled = _this2$props.disabled,
              onPress = _this2$props.onPress,
              theme = _this2$props.theme,
              rest = (0, _objectWithoutProperties2.default)(_this2$props, ["disabled", "onPress", "theme"]);
          var checkedColor = _this2.props.color || theme.colors.accent;
          var uncheckedColor = _this2.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
          var rippleColor, radioColor;
          var checked = context ? context.value === _this2.props.value : _this2.props.status === 'checked';

          if (disabled) {
            rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
            radioColor = theme.colors.disabled;
          } else {
            rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
            radioColor = checked ? checkedColor : uncheckedColor;
          }

          return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
            borderless: true,
            rippleColor: rippleColor,
            onPress: disabled ? undefined : function () {
              context && context.onValueChange(_this2.props.value);
              onPress && onPress();
            },
            accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
            accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',
            accessibilityRole: "button",
            accessibilityStates: disabled ? ['disabled'] : undefined,
            accessibilityLiveRegion: "polite",
            style: styles.container
          }), React.createElement(_reactNative.Animated.View, {
            style: [styles.radio, {
              borderColor: radioColor,
              borderWidth: _this2.state.borderAnim
            }]
          }, checked ? React.createElement(_reactNative.View, {
            style: [_reactNative.StyleSheet.absoluteFill, styles.radioContainer]
          }, React.createElement(_reactNative.Animated.View, {
            style: [styles.dot, {
              backgroundColor: radioColor,
              transform: [{
                scale: _this2.state.radioAnim
              }]
            }]
          })) : null));
        });
      }
    }]);
    return RadioButtonAndroid;
  }(React.Component);

  RadioButtonAndroid.displayName = 'RadioButton.Android';

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 18
    },
    radioContainer: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    radio: {
      height: 20,
      width: 20,
      borderRadius: 10,
      margin: 8
    },
    dot: {
      height: 10,
      width: 10,
      borderRadius: 5
    }
  });

  var _default = (0, _theming.withTheme)(RadioButtonAndroid);

  exports.default = _default;
},767,[361,1,8,6,19,20,27,30,33,46,2,486,766,716,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _RadioButtonGroup = _$$_REQUIRE(_dependencyMap[12]);

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _TouchableRipple = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _theming = _$$_REQUIRE(_dependencyMap[15]);

  var RadioButtonIOS = function (_React$Component) {
    (0, _inherits2.default)(RadioButtonIOS, _React$Component);

    function RadioButtonIOS() {
      (0, _classCallCheck2.default)(this, RadioButtonIOS);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RadioButtonIOS).apply(this, arguments));
    }

    (0, _createClass2.default)(RadioButtonIOS, [{
      key: "render",
      value: function render() {
        var _this = this;

        return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {
          var _this$props = _this.props,
              disabled = _this$props.disabled,
              onPress = _this$props.onPress,
              theme = _this$props.theme,
              rest = (0, _objectWithoutProperties2.default)(_this$props, ["disabled", "onPress", "theme"]);
          var checkedColor = disabled ? theme.colors.disabled : _this.props.color || theme.colors.accent;
          var rippleColor;
          var checked = context ? context.value === _this.props.value : _this.props.status === 'checked';

          if (disabled) {
            rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
          } else {
            rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
          }

          return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
            borderless: true,
            rippleColor: rippleColor,
            onPress: disabled ? undefined : function () {
              context && context.onValueChange(_this.props.value);
              onPress && onPress();
            },
            accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
            accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',
            accessibilityRole: "button",
            accessibilityStates: disabled ? ['disabled'] : undefined,
            accessibilityLiveRegion: "polite",
            style: styles.container
          }), React.createElement(_reactNative.View, {
            style: {
              opacity: checked ? 1 : 0
            }
          }, React.createElement(_Icon.default, {
            allowFontScaling: false,
            source: "done",
            size: 24,
            color: checkedColor
          })));
        });
      }
    }]);
    return RadioButtonIOS;
  }(React.Component);

  RadioButtonIOS.displayName = 'RadioButton.IOS';

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 18,
      padding: 6
    }
  });

  var _default = (0, _theming.withTheme)(RadioButtonIOS);

  exports.default = _default;
},768,[361,1,8,6,19,20,27,30,33,46,2,486,766,504,716,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _IconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _theming = _$$_REQUIRE(_dependencyMap[14]);

  var Searchbar = function (_React$Component) {
    (0, _inherits2.default)(Searchbar, _React$Component);

    function Searchbar() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Searchbar);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Searchbar)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._handleClearPress = function () {
        _this.clear();

        _this.props.onChangeText && _this.props.onChangeText('');
      };

      return _this;
    }

    (0, _createClass2.default)(Searchbar, [{
      key: "setNativeProps",
      value: function setNativeProps() {
        var _this$_root;

        return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);
      }
    }, {
      key: "isFocused",
      value: function isFocused() {
        return this._root && this._root.isFocused();
      }
    }, {
      key: "clear",
      value: function clear() {
        return this._root && this._root.clear();
      }
    }, {
      key: "focus",
      value: function focus() {
        return this._root && this._root.focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        return this._root && this._root.blur();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            placeholder = _this$props.placeholder,
            onIconPress = _this$props.onIconPress,
            icon = _this$props.icon,
            value = _this$props.value,
            theme = _this$props.theme,
            style = _this$props.style,
            customIconColor = _this$props.iconColor,
            inputStyle = _this$props.inputStyle,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["placeholder", "onIconPress", "icon", "value", "theme", "style", "iconColor", "inputStyle"]);
        var colors = theme.colors,
            roundness = theme.roundness,
            dark = theme.dark,
            fonts = theme.fonts;
        var textColor = colors.text;
        var fontFamily = fonts.regular;
        var iconColor = customIconColor || (dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string());
        var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
        return React.createElement(_Surface.default, {
          style: [{
            borderRadius: roundness,
            elevation: 4
          }, styles.container, style]
        }, React.createElement(_IconButton.default, {
          borderless: true,
          rippleColor: rippleColor,
          onPress: onIconPress,
          color: iconColor,
          icon: icon || 'search'
        }), React.createElement(_reactNative.TextInput, (0, _extends2.default)({
          style: [styles.input, {
            color: textColor,
            fontFamily: fontFamily
          }, inputStyle],
          placeholder: placeholder || '',
          placeholderTextColor: colors.placeholder,
          selectionColor: colors.primary,
          underlineColorAndroid: "transparent",
          returnKeyType: "search",
          keyboardAppearance: dark ? 'dark' : 'light',
          accessibilityTraits: "search",
          accessibilityRole: "search",
          ref: function ref(c) {
            _this2._root = c;
          },
          value: value
        }, rest)), React.createElement(_IconButton.default, {
          borderless: true,
          disabled: !value,
          color: value ? iconColor : 'rgba(255, 255, 255, 0)',
          rippleColor: rippleColor,
          onPress: this._handleClearPress,
          icon: "close",
          accessibilityTraits: "button",
          accessibilityComponentType: "button",
          accessibilityRole: "button"
        }));
      }
    }]);
    return Searchbar;
  }(React.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    input: {
      flex: 1,
      fontSize: 18,
      paddingLeft: 8,
      alignSelf: 'stretch',
      textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
      minWidth: 0
    }
  });

  var _default = (0, _theming.withTheme)(Searchbar);

  exports.default = _default;
},769,[361,1,8,6,19,20,27,30,33,46,2,486,751,728,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Button = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _theming = _$$_REQUIRE(_dependencyMap[12]);

  var _colors = _$$_REQUIRE(_dependencyMap[13]);

  var DURATION_SHORT = 4000;
  var DURATION_MEDIUM = 7000;
  var DURATION_LONG = 10000;

  var Snackbar = function (_React$Component) {
    (0, _inherits2.default)(Snackbar, _React$Component);

    function Snackbar() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Snackbar);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Snackbar)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        opacity: new _reactNative.Animated.Value(0.0),
        hidden: !_this.props.visible
      };

      _this._toggle = function () {
        if (_this.props.visible) {
          _this._show();
        } else {
          _this._hide();
        }
      };

      _this._show = function () {
        clearTimeout(_this._hideTimeout);

        _this.setState({
          hidden: false
        });

        _reactNative.Animated.timing(_this.state.opacity, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true
        }).start(function (_ref) {
          var finished = _ref.finished;

          if (finished) {
            var duration = _this.props.duration;
            var isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;

            if (finished && !isInfinity) {
              _this._hideTimeout = setTimeout(_this.props.onDismiss, duration);
            }
          }
        });
      };

      _this._hide = function () {
        clearTimeout(_this._hideTimeout);

        _reactNative.Animated.timing(_this.state.opacity, {
          toValue: 0,
          duration: 100,
          useNativeDriver: true
        }).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            _this.setState({
              hidden: true
            });
          }
        });
      };

      return _this;
    }

    (0, _createClass2.default)(Snackbar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.visible) {
          this._show();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.visible !== this.props.visible) {
          this._toggle();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearTimeout(this._hideTimeout);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            visible = _this$props.visible,
            action = _this$props.action,
            onDismiss = _this$props.onDismiss,
            theme = _this$props.theme,
            style = _this$props.style;
        var colors = theme.colors,
            roundness = theme.roundness;

        if (this.state.hidden) {
          return null;
        }

        return React.createElement(_reactNative.SafeAreaView, {
          pointerEvents: "box-none",
          style: styles.wrapper
        }, React.createElement(_Surface.default, {
          pointerEvents: "box-none",
          accessibilityLiveRegion: "polite",
          style: [styles.container, {
            borderRadius: roundness,
            opacity: this.state.opacity,
            transform: [{
              scale: visible ? this.state.opacity.interpolate({
                inputRange: [0, 1],
                outputRange: [0.9, 1]
              }) : 1
            }]
          }, style]
        }, React.createElement(_Text.default, {
          style: [styles.content, {
            marginRight: action ? 0 : 16
          }]
        }, children), action ? React.createElement(_Button.default, {
          onPress: function onPress() {
            action.onPress();
            onDismiss();
          },
          style: styles.button,
          color: colors.accent,
          compact: true,
          mode: "text"
        }, action.label.toUpperCase()) : null));
      }
    }]);
    return Snackbar;
  }(React.Component);

  Snackbar.DURATION_SHORT = DURATION_SHORT;
  Snackbar.DURATION_MEDIUM = DURATION_MEDIUM;
  Snackbar.DURATION_LONG = DURATION_LONG;
  Snackbar.defaultProps = {
    duration: DURATION_MEDIUM
  };

  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      position: 'absolute',
      bottom: 0,
      width: '100%'
    },
    container: {
      elevation: 6,
      backgroundColor: '#323232',
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      margin: 8,
      borderRadius: 4
    },
    content: {
      color: _colors.white,
      marginLeft: 16,
      marginVertical: 14,
      flexWrap: 'wrap',
      flex: 1
    },
    button: {
      marginHorizontal: 8,
      marginVertical: 6
    }
  });

  var _default = (0, _theming.withTheme)(Snackbar);

  exports.default = _default;
},770,[361,1,19,20,27,30,33,46,2,730,728,713,478,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _colors = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;

  var Switch = function (_React$Component) {
    (0, _inherits2.default)(Switch, _React$Component);

    function Switch() {
      (0, _classCallCheck2.default)(this, Switch);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Switch).apply(this, arguments));
    }

    (0, _createClass2.default)(Switch, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            value = _this$props.value,
            disabled = _this$props.disabled,
            onValueChange = _this$props.onValueChange,
            color = _this$props.color,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["value", "disabled", "onValueChange", "color", "theme"]);
        var checkedColor = color || theme.colors.accent;
        var onTintColor = _reactNative.Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? (0, _color.default)(_colors.white).alpha(0.1).rgb().string() : (0, _color.default)(_colors.black).alpha(0.12).rgb().string() : (0, _color.default)(checkedColor).alpha(0.5).rgb().string();
        var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? _colors.grey800 : _colors.grey400 : value ? checkedColor : theme.dark ? _colors.grey400 : _colors.grey50;
        var props = version && version.major === 0 && version.minor <= 56 ? {
          onTintColor: onTintColor,
          thumbTintColor: thumbTintColor
        } : {
          thumbColor: thumbTintColor,
          trackColor: {
            true: onTintColor
          }
        };
        return React.createElement(_reactNative.Switch, (0, _extends2.default)({
          value: value,
          disabled: disabled,
          onValueChange: disabled ? undefined : onValueChange
        }, props, rest));
      }
    }]);
    return Switch;
  }(React.Component);

  var _default = (0, _theming.withTheme)(Switch);

  exports.default = _default;
},771,[361,1,8,6,19,20,27,30,33,46,477,2,486,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DEFAULT_APPBAR_HEIGHT = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _AppbarContent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _AppbarAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _AppbarBackAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _AppbarHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Surface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _theming = _$$_REQUIRE(_dependencyMap[17]);

  var _colors = _$$_REQUIRE(_dependencyMap[18]);

  var DEFAULT_APPBAR_HEIGHT = 56;
  exports.DEFAULT_APPBAR_HEIGHT = DEFAULT_APPBAR_HEIGHT;

  var Appbar = function (_React$Component) {
    (0, _inherits2.default)(Appbar, _React$Component);

    function Appbar() {
      (0, _classCallCheck2.default)(this, Appbar);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Appbar).apply(this, arguments));
    }

    (0, _createClass2.default)(Appbar, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            dark = _this$props.dark,
            style = _this$props.style,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "dark", "style", "theme"]);
        var colors = theme.colors;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? colors.primary : _ref$backgroundColor,
            restStyle = (0, _objectWithoutProperties2.default)(_ref, ["backgroundColor"]);

        var isDark;

        if (typeof dark === 'boolean') {
          isDark = dark;
        } else {
          isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).light();
        }

        var shouldCenterContent = false;
        var shouldAddLeftSpacing = false;
        var shouldAddRightSpacing = false;

        if (_reactNative.Platform.OS === 'ios') {
          var hasAppbarContent = false;
          var leftItemsCount = 0;
          var rightItemsCount = 0;
          React.Children.forEach(children, function (child) {
            if (React.isValidElement(child)) {
              if (child.type === _AppbarContent.default) {
                hasAppbarContent = true;
              } else if (hasAppbarContent) {
                rightItemsCount++;
              } else {
                leftItemsCount++;
              }
            }
          });
          shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;
          shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;
          shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;
        }

        return React.createElement(_Surface.default, (0, _extends2.default)({
          style: [{
            backgroundColor: backgroundColor
          }, styles.appbar, restStyle]
        }, rest), shouldAddLeftSpacing ? React.createElement(_reactNative.View, {
          style: styles.spacing
        }) : null, React.Children.toArray(children).filter(function (child) {
          return child != null && typeof child !== 'boolean';
        }).map(function (child, i) {
          if (!React.isValidElement(child)) {
            return child;
          }

          var props = {
            color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? _colors.white : _colors.black
          };

          if (child.type === _AppbarContent.default) {
            props.style = [i !== 0 && {
              marginLeft: 8
            }, shouldCenterContent && {
              alignItems: 'center'
            }, child.props.style];
          }

          return React.cloneElement(child, props);
        }), shouldAddRightSpacing ? React.createElement(_reactNative.View, {
          style: styles.spacing
        }) : null);
      }
    }]);
    return Appbar;
  }(React.Component);

  Appbar.Content = _AppbarContent.default;
  Appbar.Action = _AppbarAction.default;
  Appbar.BackAction = _AppbarBackAction.default;
  Appbar.Header = _AppbarHeader.default;

  var styles = _reactNative.StyleSheet.create({
    appbar: {
      height: DEFAULT_APPBAR_HEIGHT,
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: 4,
      elevation: 4
    },
    spacing: {
      width: 48
    }
  });

  var _default = (0, _theming.withTheme)(Appbar);

  exports.default = _default;
},772,[361,1,8,6,19,20,27,30,33,46,2,486,773,774,775,777,728,478,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var _colors = _$$_REQUIRE(_dependencyMap[14]);

  var AppbarContent = function (_React$Component) {
    (0, _inherits2.default)(AppbarContent, _React$Component);

    function AppbarContent() {
      (0, _classCallCheck2.default)(this, AppbarContent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AppbarContent).apply(this, arguments));
    }

    (0, _createClass2.default)(AppbarContent, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            _this$props$color = _this$props.color,
            titleColor = _this$props$color === undefined ? _colors.black : _this$props$color,
            subtitle = _this$props.subtitle,
            subtitleStyle = _this$props.subtitleStyle,
            onPress = _this$props.onPress,
            style = _this$props.style,
            titleStyle = _this$props.titleStyle,
            theme = _this$props.theme,
            title = _this$props.title,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["color", "subtitle", "subtitleStyle", "onPress", "style", "titleStyle", "theme", "title"]);
        var fonts = theme.fonts;
        var subtitleColor = (0, _color.default)(titleColor).alpha(0.7).rgb().string();
        return React.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: onPress
        }, React.createElement(_reactNative.View, (0, _extends2.default)({
          style: [styles.container, style]
        }, rest), React.createElement(_Text.default, {
          style: [{
            color: titleColor,
            fontFamily: _reactNative.Platform.OS === 'ios' ? fonts.regular : fonts.medium
          }, styles.title, titleStyle],
          numberOfLines: 1,
          accessibilityTraits: "header",
          accessibilityRole: _reactNative.Platform.OS === 'web' ? 'heading' : 'header'
        }, title), subtitle ? React.createElement(_Text.default, {
          style: [styles.subtitle, {
            color: subtitleColor
          }, subtitleStyle],
          numberOfLines: 1
        }, subtitle) : null));
      }
    }]);
    return AppbarContent;
  }(React.Component);

  AppbarContent.displayName = 'Appbar.Content';

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      paddingHorizontal: 12
    },
    title: {
      fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20
    },
    subtitle: {
      fontSize: _reactNative.Platform.OS === 'ios' ? 11 : 14
    }
  });

  var _default = (0, _theming.withTheme)(AppbarContent);

  exports.default = _default;
},773,[361,1,8,6,19,20,27,30,33,46,2,486,713,478,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _colors = _$$_REQUIRE(_dependencyMap[11]);

  var _IconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var AppbarAction = function (_React$Component) {
    (0, _inherits2.default)(AppbarAction, _React$Component);

    function AppbarAction() {
      (0, _classCallCheck2.default)(this, AppbarAction);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AppbarAction).apply(this, arguments));
    }

    (0, _createClass2.default)(AppbarAction, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            _this$props$color = _this$props.color,
            iconColor = _this$props$color === undefined ? (0, _color.default)(_colors.black).alpha(0.54).rgb().string() : _this$props$color,
            icon = _this$props.icon,
            disabled = _this$props.disabled,
            onPress = _this$props.onPress,
            accessibilityLabel = _this$props.accessibilityLabel,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["color", "icon", "disabled", "onPress", "accessibilityLabel"]);
        return React.createElement(_IconButton.default, (0, _extends2.default)({
          onPress: onPress,
          color: iconColor,
          icon: icon,
          disabled: disabled,
          accessibilityLabel: accessibilityLabel,
          animated: true
        }, rest));
      }
    }]);
    return AppbarAction;
  }(React.Component);

  exports.default = AppbarAction;
  AppbarAction.displayName = 'Appbar.Action';
  AppbarAction.defaultProps = {
    size: 24
  };
},774,[361,1,8,6,19,20,27,30,33,46,486,477,751]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _AppbarAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var AppbarBackAction = function (_React$Component) {
    (0, _inherits2.default)(AppbarBackAction, _React$Component);

    function AppbarBackAction() {
      (0, _classCallCheck2.default)(this, AppbarBackAction);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AppbarBackAction).apply(this, arguments));
    }

    (0, _createClass2.default)(AppbarBackAction, [{
      key: "render",
      value: function render() {
        return React.createElement(_AppbarAction.default, (0, _extends2.default)({}, this.props, {
          icon: _reactNative.Platform.OS === 'ios' ? function (_ref) {
            var size = _ref.size,
                color = _ref.color;
            return React.createElement(_reactNative.View, {
              style: [styles.wrapper, {
                width: size,
                height: size,
                transform: [{
                  scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
                }]
              }]
            }, React.createElement(_reactNative.Image, {
              source: _$$_REQUIRE(_dependencyMap[11]),
              style: [styles.icon, {
                tintColor: color
              }]
            }));
          } : {
            source: 'arrow-back',
            direction: 'auto'
          }
        }));
      }
    }]);
    return AppbarBackAction;
  }(React.Component);

  AppbarBackAction.displayName = 'Appbar.BackAction';
  AppbarBackAction.defaultProps = {
    accessibilityLabel: 'Back'
  };

  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    icon: {
      height: 21,
      width: 21,
      resizeMode: 'contain'
    }
  });

  var _default = AppbarBackAction;
  exports.default = _default;
},775,[361,1,8,19,20,27,30,33,46,2,774,776]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-paper/src/assets",
    "width": 63,
    "height": 63,
    "scales": [1],
    "hash": "2379ae894c2c9f63b852a9f3676c2763",
    "name": "back-chevron",
    "type": "png"
  });
},776,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _Appbar = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _shadow = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var DEFAULT_STATUSBAR_HEIGHT_EXPO = global.__expo && global.__expo.Constants ? global.__expo.Constants.statusBarHeight : 0;

  var DEFAULT_STATUSBAR_HEIGHT = _reactNative.Platform.select({
    android: DEFAULT_STATUSBAR_HEIGHT_EXPO,
    ios: _reactNative.Platform.Version < 11 ? DEFAULT_STATUSBAR_HEIGHT_EXPO : 0
  });

  var AppbarHeader = function (_React$Component) {
    (0, _inherits2.default)(AppbarHeader, _React$Component);

    function AppbarHeader() {
      (0, _classCallCheck2.default)(this, AppbarHeader);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AppbarHeader).apply(this, arguments));
    }

    (0, _createClass2.default)(AppbarHeader, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            _this$props$statusBar = _this$props.statusBarHeight,
            statusBarHeight = _this$props$statusBar === undefined ? DEFAULT_STATUSBAR_HEIGHT : _this$props$statusBar,
            style = _this$props.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["statusBarHeight", "style"]);
        var colors = rest.theme.colors;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$height = _ref.height,
            height = _ref$height === undefined ? _Appbar.DEFAULT_APPBAR_HEIGHT : _ref$height,
            _ref$elevation = _ref.elevation,
            elevation = _ref$elevation === undefined ? 4 : _ref$elevation,
            _ref$zIndex = _ref.zIndex,
            zIndex = _ref$zIndex === undefined ? 0 : _ref$zIndex,
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? colors.primary : _ref$backgroundColor,
            restStyle = (0, _objectWithoutProperties2.default)(_ref, ["height", "elevation", "zIndex", "backgroundColor"]);

        var Wrapper = typeof this.props.statusBarHeight === 'number' ? _reactNative.View : _reactNative.SafeAreaView;
        return React.createElement(Wrapper, {
          style: [{
            backgroundColor: backgroundColor,
            zIndex: zIndex
          }, elevation && (0, _shadow.default)(elevation)]
        }, React.createElement(_Appbar.default, (0, _extends2.default)({
          style: [{
            height: height,
            backgroundColor: backgroundColor,
            marginTop: statusBarHeight
          }, styles.appbar, restStyle]
        }, rest)));
      }
    }]);
    return AppbarHeader;
  }(React.Component);

  AppbarHeader.displayName = 'Appbar.Header';

  var styles = _reactNative.StyleSheet.create({
    appbar: {
      elevation: 0
    }
  });

  var _default = (0, _theming.withTheme)(AppbarHeader);

  exports.default = _default;
},777,[361,1,8,6,19,20,27,30,33,46,2,772,729,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[10]);

  var _TextInputOutlined = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _TextInputFlat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _theming = _$$_REQUIRE(_dependencyMap[13]);

  var TextInput = function (_React$Component) {
    (0, _inherits2.default)(TextInput, _React$Component);

    function TextInput() {
      (0, _classCallCheck2.default)(this, TextInput);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TextInput).apply(this, arguments));
    }

    (0, _createClass2.default)(TextInput, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            mode = _this$props.mode,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["mode"]);
        return mode === 'outlined' ? React.createElement(_TextInputOutlined.default, rest) : React.createElement(_TextInputFlat.default, rest);
      }
    }]);
    return TextInput;
  }(React.Component);

  TextInput.defaultProps = {
    mode: 'flat',
    disabled: false,
    error: false,
    multiline: false,
    editable: true,
    render: function render(props) {
      return React.createElement(_reactNative.TextInput, props);
    }
  };
  (0, _reactLifecyclesCompat.polyfill)(TextInput);

  var _default = (0, _theming.withTheme)(TextInput);

  exports.default = _default;
},778,[361,1,6,19,20,27,30,33,46,2,333,779,780,478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[11]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var AnimatedText = _reactNative.Animated.createAnimatedComponent(_Text.default);

  var OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -29;
  var MAXIMIZED_LABEL_FONT_SIZE = 16;
  var MINIMIZED_LABEL_FONT_SIZE = 12;
  var LABEL_WIGGLE_X_OFFSET = 4;
  var FOCUS_ANIMATION_DURATION = 150;
  var BLUR_ANIMATION_DURATION = 180;
  var LABEL_PADDING_HORIZONTAL = 12;
  var RANDOM_VALUE_TO_CENTER_LABEL = 4;

  var TextInputOutlined = function (_React$Component) {
    (0, _inherits2.default)(TextInputOutlined, _React$Component);

    function TextInputOutlined() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TextInputOutlined);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TextInputOutlined)).call.apply(_getPrototypeOf2, [this].concat(_args)));
      _this.state = {
        labeled: new _reactNative.Animated.Value(_this.props.value || _this.props.error ? 0 : 1),
        error: new _reactNative.Animated.Value(_this.props.error ? 1 : 0),
        focused: false,
        placeholder: _this.props.error ? _this.props.placeholder : '',
        value: _this.props.value,
        labelLayout: {
          measured: false,
          width: 0
        }
      };

      _this._showPlaceholder = function () {
        clearTimeout(_this._timer);
        _this._timer = setTimeout(function () {
          return _this.setState({
            placeholder: _this.props.placeholder
          });
        }, 50);
      };

      _this._hidePlaceholder = function () {
        return _this.setState({
          placeholder: ''
        });
      };

      _this._showError = function () {
        _reactNative.Animated.timing(_this.state.error, {
          toValue: 1,
          duration: FOCUS_ANIMATION_DURATION,
          useNativeDriver: true
        }).start(_this._showPlaceholder);
      };

      _this._hideError = function () {
        _reactNative.Animated.timing(_this.state.error, {
          toValue: 0,
          duration: BLUR_ANIMATION_DURATION,
          useNativeDriver: true
        }).start();
      };

      _this._restoreLabel = function () {
        return _reactNative.Animated.timing(_this.state.labeled, {
          toValue: 1,
          duration: FOCUS_ANIMATION_DURATION,
          useNativeDriver: true
        }).start();
      };

      _this._minmizeLabel = function () {
        return _reactNative.Animated.timing(_this.state.labeled, {
          toValue: 0,
          duration: BLUR_ANIMATION_DURATION,
          useNativeDriver: true
        }).start();
      };

      _this._handleFocus = function () {
        if (_this.props.disabled) {
          return;
        }

        _this.setState({
          focused: true
        });

        if (_this.props.onFocus) {
          var _this$props;

          (_this$props = _this.props).onFocus.apply(_this$props, arguments);
        }
      };

      _this._handleBlur = function () {
        if (_this.props.disabled) {
          return;
        }

        _this.setState({
          focused: false
        });

        if (_this.props.onBlur) {
          var _this$props2;

          (_this$props2 = _this.props).onBlur.apply(_this$props2, arguments);
        }
      };

      _this._handleChangeText = function (value) {
        if (!_this.props.editable) {
          return;
        }

        _this.setState({
          value: value
        });

        _this.props.onChangeText && _this.props.onChangeText(value);
      };

      return _this;
    }

    (0, _createClass2.default)(TextInputOutlined, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (prevState.focused !== this.state.focused || prevState.value !== this.state.value || prevProps.error !== this.props.error) {
          if (this.state.value || this.state.focused || this.props.error) {
            this._minmizeLabel();
          } else {
            this._restoreLabel();
          }
        }

        if (prevState.focused !== this.state.focused || prevProps.label !== this.props.label || prevProps.error !== this.props.error) {
          if (this.state.focused || this.props.error || !this.props.label) {
            this._showPlaceholder();
          } else {
            this._hidePlaceholder();
          }
        }

        if (prevProps.error !== this.props.error) {
          if (this.props.error) {
            this._showError();
          } else {
            this._hideError();
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearTimeout(this._timer);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps() {
        var _this$_root;

        return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);
      }
    }, {
      key: "isFocused",
      value: function isFocused() {
        return this._root && this._root.isFocused();
      }
    }, {
      key: "clear",
      value: function clear() {
        return this._root && this._root.clear();
      }
    }, {
      key: "focus",
      value: function focus() {
        return this._root && this._root.focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        return this._root && this._root.blur();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props3 = this.props,
            disabled = _this$props3.disabled,
            label = _this$props3.label,
            error = _this$props3.error,
            selectionColor = _this$props3.selectionColor,
            underlineColor = _this$props3.underlineColor,
            style = _this$props3.style,
            theme = _this$props3.theme,
            render = _this$props3.render,
            multiline = _this$props3.multiline,
            rest = (0, _objectWithoutProperties2.default)(_this$props3, ["disabled", "label", "error", "selectionColor", "underlineColor", "style", "theme", "render", "multiline"]);
        var colors = theme.colors,
            fonts = theme.fonts;
        var fontFamily = fonts.regular;
        var hasActiveOutline = this.state.focused || error;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? colors.background : _ref$backgroundColor;

        var inputTextColor, activeColor, outlineColor, placeholderColor, containerStyle;

        if (disabled) {
          inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();
          placeholderColor = outlineColor = colors.disabled;
        } else {
          inputTextColor = colors.text;
          activeColor = error ? colors.error : colors.primary;
          placeholderColor = outlineColor = colors.placeholder;
        }

        var labelHalfWidth = this.state.labelLayout.width / 2;
        var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * 0.25 * labelHalfWidth;
        var labelStyle = {
          fontFamily: fontFamily,
          fontSize: MAXIMIZED_LABEL_FONT_SIZE,
          transform: [{
            translateX: this.state.error.interpolate({
              inputRange: [0, 0.5, 1],
              outputRange: [0, this.state.value && error ? LABEL_WIGGLE_X_OFFSET : 0, 0]
            })
          }, {
            translateY: this.state.labeled.interpolate({
              inputRange: [0, 1],
              outputRange: [OUTLINE_MINIMIZED_LABEL_Y_OFFSET, 0]
            })
          }, {
            scale: this.state.labeled.interpolate({
              inputRange: [0, 1],
              outputRange: [0.75, 1]
            })
          }, {
            translateX: this.state.labeled.interpolate({
              inputRange: [0, 1],
              outputRange: [baseLabelTranslateX > 0 ? baseLabelTranslateX + labelHalfWidth / LABEL_PADDING_HORIZONTAL - RANDOM_VALUE_TO_CENTER_LABEL : baseLabelTranslateX - labelHalfWidth / LABEL_PADDING_HORIZONTAL + RANDOM_VALUE_TO_CENTER_LABEL, 0]
            })
          }]
        };
        return React.createElement(_reactNative.View, {
          style: [containerStyle, style]
        }, React.createElement(_reactNative.View, {
          pointerEvents: "none",
          style: [styles.outline, {
            borderRadius: theme.roundness,
            borderWidth: hasActiveOutline ? 2 : 1,
            borderColor: hasActiveOutline ? activeColor : outlineColor
          }]
        }), label ? React.createElement(AnimatedText, {
          pointerEvents: "none",
          style: [styles.outlinedLabelBackground, {
            backgroundColor: backgroundColor,
            fontFamily: fontFamily,
            fontSize: MINIMIZED_LABEL_FONT_SIZE,
            opacity: this.state.labeled.interpolate({
              inputRange: [0, 0.9, 1],
              outputRange: [1, 1, 0]
            }),
            transform: [{
              scaleX: this.state.labeled.interpolate({
                inputRange: [0, 1],
                outputRange: [1, 0]
              })
            }]
          }],
          numberOfLines: 1
        }, label) : null, label ? React.createElement(_reactNative.View, {
          pointerEvents: "none",
          style: [_reactNative.StyleSheet.absoluteFill, {
            opacity: this.state.value || this.state.focused ? this.state.labelLayout.measured ? 1 : 0 : 1
          }]
        }, React.createElement(AnimatedText, {
          onLayout: function onLayout(e) {
            return _this2.setState({
              labelLayout: {
                width: e.nativeEvent.layout.width,
                measured: true
              }
            });
          },
          style: [styles.placeholder, styles.placeholderOutlined, labelStyle, {
            color: activeColor,
            opacity: this.state.labeled.interpolate({
              inputRange: [0, 1],
              outputRange: [hasActiveOutline ? 1 : 0, 0]
            })
          }],
          numberOfLines: 1
        }, label), React.createElement(AnimatedText, {
          style: [styles.placeholder, styles.placeholderOutlined, labelStyle, {
            color: placeholderColor,
            opacity: hasActiveOutline ? this.state.labeled : 1
          }],
          numberOfLines: 1
        }, label)) : null, render((0, _objectSpread2.default)({}, rest, {
          ref: function ref(c) {
            _this2._root = c;
          },
          onChangeText: this._handleChangeText,
          placeholder: label ? this.state.placeholder : this.props.placeholder,
          placeholderTextColor: placeholderColor,
          editable: !disabled,
          selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,
          onFocus: this._handleFocus,
          onBlur: this._handleBlur,
          underlineColorAndroid: 'transparent',
          multiline: multiline,
          style: [styles.input, styles.inputOutlined, {
            color: inputTextColor,
            fontFamily: fontFamily,
            textAlignVertical: multiline ? 'top' : 'center'
          }]
        })));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        return {
          value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value
        };
      }
    }]);
    return TextInputOutlined;
  }(React.Component);

  TextInputOutlined.defaultProps = {
    disabled: false,
    error: false,
    multiline: false,
    editable: true,
    render: function render(props) {
      return React.createElement(_reactNative.TextInput, props);
    }
  };
  (0, _reactLifecyclesCompat.polyfill)(TextInputOutlined);
  var _default = TextInputOutlined;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    placeholder: {
      position: 'absolute',
      left: 0,
      fontSize: 16,
      paddingHorizontal: LABEL_PADDING_HORIZONTAL
    },
    placeholderOutlined: {
      top: 25
    },
    outline: {
      position: 'absolute',
      left: 0,
      right: 0,
      top: 6,
      bottom: 0
    },
    outlinedLabelBackground: {
      position: 'absolute',
      top: 0,
      left: 8,
      paddingHorizontal: 4,
      color: 'transparent'
    },
    input: {
      flexGrow: 1,
      paddingHorizontal: 12,
      fontSize: 16,
      margin: 0,
      minHeight: 58,
      textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
      zIndex: 1
    },
    inputOutlined: {
      paddingTop: 20,
      paddingBottom: 16,
      minHeight: 64
    }
  });
},779,[361,1,43,6,19,20,27,30,33,46,2,333,486,713]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactLifecyclesCompat = _$$_REQUIRE(_dependencyMap[11]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var AnimatedText = _reactNative.Animated.createAnimatedComponent(_Text.default);

  var MINIMIZED_LABEL_Y_OFFSET = -12;
  var MAXIMIZED_LABEL_FONT_SIZE = 16;
  var MINIMIZED_LABEL_FONT_SIZE = 12;
  var LABEL_WIGGLE_X_OFFSET = 4;
  var FOCUS_ANIMATION_DURATION = 150;
  var BLUR_ANIMATION_DURATION = 180;
  var LABEL_PADDING_HORIZONTAL = 12;
  var RANDOM_VALUE_TO_CENTER_LABEL = 4;

  var TextInputFlat = function (_React$Component) {
    (0, _inherits2.default)(TextInputFlat, _React$Component);

    function TextInputFlat() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TextInputFlat);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TextInputFlat)).call.apply(_getPrototypeOf2, [this].concat(_args)));
      _this.state = {
        labeled: new _reactNative.Animated.Value(_this.props.value || _this.props.error ? 0 : 1),
        error: new _reactNative.Animated.Value(_this.props.error ? 1 : 0),
        focused: false,
        placeholder: _this.props.error ? _this.props.placeholder : '',
        value: _this.props.value,
        labelLayout: {
          measured: false,
          width: 0
        }
      };

      _this._showPlaceholder = function () {
        clearTimeout(_this._timer);
        _this._timer = setTimeout(function () {
          return _this.setState({
            placeholder: _this.props.placeholder
          });
        }, 50);
      };

      _this._hidePlaceholder = function () {
        return _this.setState({
          placeholder: ''
        });
      };

      _this._showError = function () {
        _reactNative.Animated.timing(_this.state.error, {
          toValue: 1,
          duration: FOCUS_ANIMATION_DURATION,
          useNativeDriver: true
        }).start(_this._showPlaceholder);
      };

      _this._hideError = function () {
        _reactNative.Animated.timing(_this.state.error, {
          toValue: 0,
          duration: BLUR_ANIMATION_DURATION,
          useNativeDriver: true
        }).start();
      };

      _this._restoreLabel = function () {
        return _reactNative.Animated.timing(_this.state.labeled, {
          toValue: 1,
          duration: FOCUS_ANIMATION_DURATION,
          useNativeDriver: true
        }).start();
      };

      _this._minmizeLabel = function () {
        return _reactNative.Animated.timing(_this.state.labeled, {
          toValue: 0,
          duration: BLUR_ANIMATION_DURATION,
          useNativeDriver: true
        }).start();
      };

      _this._handleFocus = function () {
        if (_this.props.disabled) {
          return;
        }

        _this.setState({
          focused: true
        });

        if (_this.props.onFocus) {
          var _this$props;

          (_this$props = _this.props).onFocus.apply(_this$props, arguments);
        }
      };

      _this._handleBlur = function () {
        if (_this.props.disabled) {
          return;
        }

        _this.setState({
          focused: false
        });

        if (_this.props.onBlur) {
          var _this$props2;

          (_this$props2 = _this.props).onBlur.apply(_this$props2, arguments);
        }
      };

      _this._handleChangeText = function (value) {
        if (!_this.props.editable) {
          return;
        }

        _this.setState({
          value: value
        });

        _this.props.onChangeText && _this.props.onChangeText(value);
      };

      return _this;
    }

    (0, _createClass2.default)(TextInputFlat, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (prevState.focused !== this.state.focused || prevState.value !== this.state.value || prevProps.error !== this.props.error) {
          if (this.state.value || this.state.focused || this.props.error) {
            this._minmizeLabel();
          } else {
            this._restoreLabel();
          }
        }

        if (prevState.focused !== this.state.focused || prevProps.label !== this.props.label || prevProps.error !== this.props.error) {
          if (this.state.focused || this.props.error || !this.props.label) {
            this._showPlaceholder();
          } else {
            this._hidePlaceholder();
          }
        }

        if (prevProps.error !== this.props.error) {
          if (this.props.error) {
            this._showError();
          } else {
            this._hideError();
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearTimeout(this._timer);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps() {
        var _this$_root;

        return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);
      }
    }, {
      key: "isFocused",
      value: function isFocused() {
        return this._root && this._root.isFocused();
      }
    }, {
      key: "clear",
      value: function clear() {
        return this._root && this._root.clear();
      }
    }, {
      key: "focus",
      value: function focus() {
        return this._root && this._root.focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        return this._root && this._root.blur();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props3 = this.props,
            disabled = _this$props3.disabled,
            label = _this$props3.label,
            error = _this$props3.error,
            selectionColor = _this$props3.selectionColor,
            underlineColor = _this$props3.underlineColor,
            style = _this$props3.style,
            theme = _this$props3.theme,
            render = _this$props3.render,
            multiline = _this$props3.multiline,
            rest = (0, _objectWithoutProperties2.default)(_this$props3, ["disabled", "label", "error", "selectionColor", "underlineColor", "style", "theme", "render", "multiline"]);
        var colors = theme.colors,
            fonts = theme.fonts;
        var fontFamily = fonts.regular;
        var hasActiveOutline = this.state.focused || error;
        var inputTextColor, activeColor, underlineColorCustom, placeholderColor;

        if (disabled) {
          inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();
          placeholderColor = colors.disabled;
          underlineColorCustom = 'transparent';
        } else {
          inputTextColor = colors.text;
          activeColor = error ? colors.error : colors.primary;
          placeholderColor = colors.placeholder;
          underlineColorCustom = underlineColor || colors.disabled;
        }

        var containerStyle = {
          backgroundColor: theme.dark ? (0, _color.default)(colors.background).lighten(0.24).rgb().string() : (0, _color.default)(colors.background).darken(0.06).rgb().string(),
          borderTopLeftRadius: theme.roundness,
          borderTopRightRadius: theme.roundness
        };
        var labelHalfWidth = this.state.labelLayout.width / 2;
        var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * 0.25 * labelHalfWidth;
        var labelStyle = {
          fontFamily: fontFamily,
          fontSize: MAXIMIZED_LABEL_FONT_SIZE,
          transform: [{
            translateX: this.state.error.interpolate({
              inputRange: [0, 0.5, 1],
              outputRange: [0, this.state.value && error ? LABEL_WIGGLE_X_OFFSET : 0, 0]
            })
          }, {
            translateY: this.state.labeled.interpolate({
              inputRange: [0, 1],
              outputRange: [MINIMIZED_LABEL_Y_OFFSET, 0]
            })
          }, {
            scale: this.state.labeled.interpolate({
              inputRange: [0, 1],
              outputRange: [0.75, 1]
            })
          }, {
            translateX: this.state.labeled.interpolate({
              inputRange: [0, 1],
              outputRange: [baseLabelTranslateX > 0 ? baseLabelTranslateX + labelHalfWidth / LABEL_PADDING_HORIZONTAL - RANDOM_VALUE_TO_CENTER_LABEL : baseLabelTranslateX - labelHalfWidth / LABEL_PADDING_HORIZONTAL + RANDOM_VALUE_TO_CENTER_LABEL, 0]
            })
          }]
        };
        return React.createElement(_reactNative.View, {
          style: [containerStyle, style]
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.underline, {
            backgroundColor: error ? colors.error : this.state.focused ? activeColor : underlineColorCustom,
            transform: [{
              scaleY: this.state.focused ? 1 : 0.5
            }]
          }]
        }), label ? React.createElement(_reactNative.View, {
          pointerEvents: "none",
          style: [_reactNative.StyleSheet.absoluteFill, {
            opacity: this.state.value || this.state.focused ? this.state.labelLayout.measured ? 1 : 0 : 1
          }]
        }, React.createElement(AnimatedText, {
          onLayout: function onLayout(e) {
            return _this2.setState({
              labelLayout: {
                width: e.nativeEvent.layout.width,
                measured: true
              }
            });
          },
          style: [styles.placeholder, styles.placeholderFlat, labelStyle, {
            color: activeColor,
            opacity: this.state.labeled.interpolate({
              inputRange: [0, 1],
              outputRange: [hasActiveOutline ? 1 : 0, 0]
            })
          }],
          numberOfLines: 1
        }, label), React.createElement(AnimatedText, {
          style: [styles.placeholder, styles.placeholderFlat, labelStyle, {
            color: placeholderColor,
            opacity: hasActiveOutline ? this.state.labeled : 1
          }],
          numberOfLines: 1
        }, label)) : null, render((0, _objectSpread2.default)({}, rest, {
          ref: function ref(c) {
            _this2._root = c;
          },
          onChangeText: this._handleChangeText,
          placeholder: label ? this.state.placeholder : this.props.placeholder,
          placeholderTextColor: placeholderColor,
          editable: !disabled,
          selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,
          onFocus: this._handleFocus,
          onBlur: this._handleBlur,
          underlineColorAndroid: 'transparent',
          multiline: multiline,
          style: [styles.input, this.props.label ? styles.inputFlatWithLabel : styles.inputFlatWithoutLabel, {
            color: inputTextColor,
            fontFamily: fontFamily,
            textAlignVertical: multiline ? 'top' : 'center'
          }]
        })));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        return {
          value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value
        };
      }
    }]);
    return TextInputFlat;
  }(React.Component);

  TextInputFlat.defaultProps = {
    disabled: false,
    error: false,
    multiline: false,
    editable: true,
    render: function render(props) {
      return React.createElement(_reactNative.TextInput, props);
    }
  };
  (0, _reactLifecyclesCompat.polyfill)(TextInputFlat);
  var _default = TextInputFlat;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    placeholder: {
      position: 'absolute',
      left: 0,
      fontSize: 16,
      paddingHorizontal: LABEL_PADDING_HORIZONTAL
    },
    placeholderFlat: {
      top: 19
    },
    underline: {
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      height: 2
    },
    input: {
      flexGrow: 1,
      paddingHorizontal: 12,
      fontSize: 16,
      margin: 0,
      minHeight: 58,
      textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
      zIndex: 1
    },
    inputFlatWithLabel: {
      paddingTop: 24,
      paddingBottom: 6
    },
    inputFlatWithoutLabel: {
      paddingVertical: 15
    }
  });
},780,[361,1,43,6,19,20,27,30,33,46,2,333,486,713]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _theming = _$$_REQUIRE(_dependencyMap[11]);

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _IconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _ToggleButtonGroup = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

  var _colors = _$$_REQUIRE(_dependencyMap[15]);

  var ToggleButton = function (_React$Component) {
    (0, _inherits2.default)(ToggleButton, _React$Component);

    function ToggleButton() {
      (0, _classCallCheck2.default)(this, ToggleButton);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ToggleButton).apply(this, arguments));
    }

    (0, _createClass2.default)(ToggleButton, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            icon = _this$props.icon,
            size = _this$props.size,
            theme = _this$props.theme,
            accessibilityLabel = _this$props.accessibilityLabel,
            disabled = _this$props.disabled,
            style = _this$props.style,
            value = _this$props.value,
            status = _this$props.status,
            _onPress = _this$props.onPress,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["icon", "size", "theme", "accessibilityLabel", "disabled", "style", "value", "status", "onPress"]);
        var borderRadius = theme.roundness;
        return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {
          var backgroundColor;
          var checked = context && context.value === value || status === 'checked';

          if (checked) {
            backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';
          } else {
            backgroundColor = 'transparent';
          }

          return React.createElement(_IconButton.default, (0, _extends2.default)({
            borderless: false,
            icon: icon,
            onPress: function onPress(e) {
              if (_onPress) {
                _onPress(e);
              }

              if (context) {
                context.onValueChange(!checked ? value : null);
              }
            },
            size: size,
            accessibilityLabel: accessibilityLabel,
            disabled: disabled,
            style: [styles.content, {
              backgroundColor: backgroundColor,
              borderRadius: borderRadius,
              borderColor: (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string()
            }, style]
          }, rest));
        });
      }
    }]);
    return ToggleButton;
  }(React.Component);

  ToggleButton.Group = _ToggleButtonGroup.default;

  var styles = _reactNative.StyleSheet.create({
    content: {
      width: 42,
      height: 42,
      margin: 0
    }
  });

  var _default = (0, _theming.withTheme)(ToggleButton);

  exports.default = _default;
},781,[361,1,8,6,19,20,27,30,33,46,2,478,486,751,782,477]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ToggleButtonGroupContext = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _createReactContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _ToggleButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var ToggleButtonGroupContext = (0, _createReactContext.default)(null);
  exports.ToggleButtonGroupContext = ToggleButtonGroupContext;

  var ToggleButtonGroup = function (_React$Component) {
    (0, _inherits2.default)(ToggleButtonGroup, _React$Component);

    function ToggleButtonGroup() {
      (0, _classCallCheck2.default)(this, ToggleButtonGroup);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ToggleButtonGroup).apply(this, arguments));
    }

    (0, _createClass2.default)(ToggleButtonGroup, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            value = _this$props.value,
            onValueChange = _this$props.onValueChange,
            children = _this$props.children;
        var count = React.Children.count(children);
        return React.createElement(ToggleButtonGroupContext.Provider, {
          value: {
            value: value,
            onValueChange: onValueChange
          }
        }, React.Children.map(children, function (child, i) {
          if (child && child.type === _ToggleButton.default) {
            return React.cloneElement(child, {
              style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]
            });
          }

          return child;
        }));
      }
    }]);
    return ToggleButtonGroup;
  }(React.Component);

  ToggleButtonGroup.displayName = 'ToggleButton.Group';

  var styles = _reactNative.StyleSheet.create({
    button: {
      borderWidth: _reactNative.StyleSheet.hairlineWidth
    },
    first: {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    },
    middle: {
      borderRadius: 0,
      borderLeftWidth: 0
    },
    last: {
      borderLeftWidth: 0,
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    }
  });

  var _default = ToggleButtonGroup;
  exports.default = _default;
},782,[361,1,19,20,27,30,33,46,2,346,781]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _StyledText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var Headline = function Headline(props) {
    return React.createElement(_StyledText.default, (0, _extends2.default)({}, props, {
      alpha: 0.87,
      family: "regular",
      style: [styles.text, props.style]
    }));
  };

  var _default = Headline;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 24,
      lineHeight: 32,
      marginVertical: 2
    }
  });
},783,[361,1,8,46,2,740]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _StyledText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var Paragraph = function Paragraph(props) {
    return React.createElement(_StyledText.default, (0, _extends2.default)({}, props, {
      alpha: 0.87,
      family: "regular",
      style: [styles.text, props.style]
    }));
  };

  var _default = Paragraph;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 14,
      lineHeight: 20,
      marginVertical: 2
    }
  });
},784,[361,1,8,46,2,740]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _StyledText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var Subheading = function Subheading(props) {
    return React.createElement(_StyledText.default, (0, _extends2.default)({}, props, {
      alpha: 0.87,
      family: "regular",
      style: [styles.text, props.style]
    }));
  };

  var _default = Subheading;
  exports.default = _default;

  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 16,
      lineHeight: 24,
      marginVertical: 2
    }
  });
},785,[361,1,8,46,2,740]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var strings = {
    donations: {
      donationBody: "Your support makes the Free Software Foundation's work possible. Will you power up the free software movement with a donation today?",
      donationHeader: "Support the Free Software Foundation"
    }
  };
  var _default = strings;
  exports.default = _default;
},786,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var colors = {
    oldYellow: '#FFC107',
    primaryYellow: '#3F51B5',
    courseGreen: '#26A69A',
    courseBlue: '#3F51B5',
    coursePurple: '#7E57C2',
    coursePink: '#C2185B',
    courseBrown: '#795548',
    successGreen: '#3BB273',
    lateOrange: '#FF8300',
    errorRed: '#E53935',
    errorPink: '#FFEAE9',
    textDark: '#212121',
    textDark_70: 'rgba(33, 33, 33, .7)',
    textDark_30: 'rgba(33, 33, 33, .3)',
    textLight: '#FFF',
    textLight_70: 'rgba(255, 255, 255, .7)',
    textGrey: '#6E6E6E',
    textHeader: '#64696B',
    logoGrey: '#9B9999',
    buttonGrey: '#B3B3B3',
    backgroundGrey: '#F5F5F6',
    backgroundWhite: '#FFFFFF',
    dividerGrey: '#E0E0E0',
    iconDark: 'rgba(33, 33, 33, .85)',
    iconLight: 'rgba(255, 255, 255, .85)'
  };
  module.exports = colors;
},787,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _reactNativePaper = _$$_REQUIRE(_dependencyMap[8]);

  var _colors = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var BillingComponent = function (_React$Component) {
    (0, _inherits2.default)(BillingComponent, _React$Component);

    function BillingComponent(props) {
      (0, _classCallCheck2.default)(this, BillingComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BillingComponent).call(this, props));
    }

    (0, _createClass2.default)(BillingComponent, [{
      key: "disableButton",
      value: function disableButton() {
        if (this.props.props.address != '' && this.props.props.city != '' && this.props.props.country != '' && this.props.props.stateProv != '' && this.props.props.postalCode != '') {
          return false;
        } else {
          return true;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        return _react.default.createElement(_reactNative.View, {
          style: this.props.styles.container
        }, _react.default.createElement(_reactNativePaper.TextInput, {
          style: styles.textInput,
          label: "Address",
          value: this.props.props.address,
          onChangeText: function onChangeText(text) {
            return _this.props.handleChange('address', text);
          }
        }), _react.default.createElement(_reactNative.View, {
          style: {
            flexDirection: 'row'
          }
        }, _react.default.createElement(_reactNative.View, {
          style: styles.shortText
        }, _react.default.createElement(_reactNativePaper.TextInput, {
          style: styles.textInput,
          label: "City",
          value: this.props.props.city,
          onChangeText: function onChangeText(text) {
            return _this.props.handleChange('city', text);
          }
        })), _react.default.createElement(_reactNative.View, {
          style: styles.shortText
        }, _react.default.createElement(_reactNativePaper.TextInput, {
          style: styles.textInput,
          label: "Country",
          value: this.props.props.country,
          onChangeText: function onChangeText(text) {
            return _this.props.handleChange('country', text);
          }
        }))), _react.default.createElement(_reactNative.View, {
          style: {
            flexDirection: 'row'
          }
        }, _react.default.createElement(_reactNative.View, {
          style: styles.shortText
        }, _react.default.createElement(_reactNativePaper.TextInput, {
          style: styles.textInput,
          label: "State/Provenance",
          value: this.props.props.stateProv,
          onChangeText: function onChangeText(text) {
            return _this.props.handleChange('stateProv', text);
          }
        })), _react.default.createElement(_reactNative.View, {
          style: styles.shortText
        }, _react.default.createElement(_reactNativePaper.TextInput, {
          style: styles.textInput,
          label: "Postal Code",
          value: this.props.props.postalCode,
          type: "numeric",
          onChangeText: function onChangeText(text) {
            return _this.props.handleChange('postalCode', text);
          }
        }))), _react.default.createElement(_reactNativePaper.Button, {
          style: this.disableButton() ? this.props.styles.disabledDonationButton : this.props.styles.donationButton,
          contentStyle: this.props.styles.donationButtonContent,
          onPress: function onPress(_) {
            return _this.props.changePage(2);
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: this.props.styles.donationButtonText
        }, "Continue")));
      }
    }]);
    return BillingComponent;
  }(_react.default.Component);

  var styles = _reactNative.StyleSheet.create({
    textInput: {
      backgroundColor: _colors.default.backgroundWhite,
      marginLeft: 5,
      marginRight: 5
    },
    shortText: {
      flex: .5
    }
  });

  var _default = BillingComponent;
  exports.default = _default;
},788,[1,19,20,27,30,33,46,2,476,787]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _reactNativePaper = _$$_REQUIRE(_dependencyMap[8]);

  var _reactNativeCreditCardInput = _$$_REQUIRE(_dependencyMap[9]);

  var PaymentComponent = function (_React$Component) {
    (0, _inherits2.default)(PaymentComponent, _React$Component);

    function PaymentComponent(props) {
      (0, _classCallCheck2.default)(this, PaymentComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PaymentComponent).call(this, props));
    }

    (0, _createClass2.default)(PaymentComponent, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          style: this.props.styles.container
        }, _react.default.createElement(_reactNativeCreditCardInput.CreditCardInput, {
          onChange: this.props.handleChange,
          requiresName: true
        }), _react.default.createElement(_reactNativePaper.Button, {
          style: this.props.disabledButton ? this.props.styles.donationButton : this.props.styles.disabledDonationButton,
          contentStyle: this.props.styles.donationButtonContent,
          onPress: this.props.donate,
          disabled: !this.props.disabledButton
        }, _react.default.createElement(_reactNative.Text, {
          style: this.props.styles.donationButtonText
        }, "Donate $", this.props.amount)));
      }
    }]);
    return PaymentComponent;
  }(_react.default.Component);

  var _default = PaymentComponent;
  exports.default = _default;
},789,[1,19,20,27,30,33,46,2,476,790]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _src = _$$_REQUIRE(_dependencyMap[0]);

  Object.keys(_src).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _src[key];
      }
    });
  });
},790,[791]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CardView = exports.LiteCreditCardInput = exports.CreditCardInput = undefined;

  var _connectToState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _CreditCardInput = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _LiteCreditCardInput = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _CardView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var CreditCardInput = (0, _connectToState.default)(_CreditCardInput.default);
  exports.CreditCardInput = CreditCardInput;
  var LiteCreditCardInput = (0, _connectToState.default)(_LiteCreditCardInput.default);
  exports.LiteCreditCardInput = LiteCreditCardInput;
  var CardView = _CardView.default;
  exports.CardView = CardView;
},791,[1,792,838,856,839]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = connectToState;
  exports.InjectedProps = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _CCFieldFormatter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _CCFieldValidator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var InjectedProps = {
    focused: _propTypes.default.string,
    values: _propTypes.default.object.isRequired,
    status: _propTypes.default.object.isRequired,
    onFocus: _propTypes.default.func.isRequired,
    onChange: _propTypes.default.func.isRequired,
    onBecomeEmpty: _propTypes.default.func.isRequired,
    onBecomeValid: _propTypes.default.func.isRequired,
    requiresName: _propTypes.default.bool,
    requiresCVC: _propTypes.default.bool,
    requiresPostalCode: _propTypes.default.bool
  };
  exports.InjectedProps = InjectedProps;

  function connectToState(CreditCardInput) {
    var StateConnection = function (_Component) {
      (0, _inherits2.default)(StateConnection, _Component);

      function StateConnection() {
        var _this;

        (0, _classCallCheck2.default)(this, StateConnection);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StateConnection).call(this));

        _this.componentDidMount = function () {
          return setTimeout(function () {
            _this.props.autoFocus && _this.focus("number");
          });
        };

        _this.setValues = function (values) {
          var newValues = (0, _objectSpread2.default)({}, _this.state.values, values);

          var displayedFields = _this._displayedFields();

          var formattedValues = new _CCFieldFormatter.default(displayedFields).formatValues(newValues);
          var validation = new _CCFieldValidator.default(displayedFields, _this.props.validatePostalCode).validateValues(formattedValues);
          var newState = (0, _objectSpread2.default)({
            values: formattedValues
          }, validation);

          _this.setState(newState);

          _this.props.onChange(newState);
        };

        _this.focus = function () {
          var field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "number";

          _this.setState({
            focused: field
          });
        };

        _this._displayedFields = function () {
          var _this$props = _this.props,
              requiresName = _this$props.requiresName,
              requiresCVC = _this$props.requiresCVC,
              requiresPostalCode = _this$props.requiresPostalCode;
          return (0, _lodash.default)(["number", "expiry", requiresCVC ? "cvc" : null, requiresName ? "name" : null, requiresPostalCode ? "postalCode" : null]);
        };

        _this._focusPreviousField = function (field) {
          var displayedFields = _this._displayedFields();

          var fieldIndex = displayedFields.indexOf(field);
          var previousField = displayedFields[fieldIndex - 1];
          if (previousField) _this.focus(previousField);
        };

        _this._focusNextField = function (field) {
          if (field === "name") return;

          var displayedFields = _this._displayedFields();

          var fieldIndex = displayedFields.indexOf(field);
          var nextField = displayedFields[fieldIndex + 1];
          if (nextField) _this.focus(nextField);
        };

        _this._change = function (field, value) {
          _this.setValues((0, _defineProperty2.default)({}, field, value));
        };

        _this._onFocus = function (field) {
          _this.focus(field);

          _this.props.onFocus(field);
        };

        _this.state = {
          focused: "",
          values: {},
          status: {}
        };
        return _this;
      }

      (0, _createClass2.default)(StateConnection, [{
        key: "render",
        value: function render() {
          return _react.default.createElement(CreditCardInput, (0, _extends2.default)({}, this.props, this.state, {
            onFocus: this._onFocus,
            onChange: this._change,
            onBecomeEmpty: this._focusPreviousField,
            onBecomeValid: this._focusNextField
          }));
        }
      }]);
      return StateConnection;
    }(_react.Component);

    StateConnection.propTypes = {
      autoFocus: _propTypes.default.bool,
      onChange: _propTypes.default.func.isRequired,
      onFocus: _propTypes.default.func,
      requiresName: _propTypes.default.bool,
      requiresCVC: _propTypes.default.bool,
      requiresPostalCode: _propTypes.default.bool,
      validatePostalCode: _propTypes.default.func
    };
    StateConnection.defaultProps = {
      autoFocus: false,
      onChange: function onChange() {},
      onFocus: function onFocus() {},
      requiresName: false,
      requiresCVC: true,
      requiresPostalCode: false,
      validatePostalCode: function validatePostalCode() {
        var postalCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        return postalCode.match(/^\d{6}$/) ? "valid" : postalCode.length > 6 ? "invalid" : "incomplete";
      }
    };
    return StateConnection;
  }
},792,[361,1,8,44,43,19,20,27,30,33,46,793,796,834,837]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  {
    module.exports = _$$_REQUIRE(_dependencyMap[0])();
  }
},793,[794]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = _$$_REQUIRE(_dependencyMap[0]);

  function emptyFunction() {}

  function emptyFunctionWithReset() {}

  emptyFunctionWithReset.resetWarningCache = emptyFunction;

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},794,[795]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},795,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _cardValidator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _Utilities = _$$_REQUIRE(_dependencyMap[4]);

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var limitLength = function limitLength() {
    var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var maxLength = arguments.length > 1 ? arguments[1] : undefined;
    return string.substr(0, maxLength);
  };

  var addGaps = function addGaps() {
    var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var gaps = arguments.length > 1 ? arguments[1] : undefined;
    var offsets = [0].concat(gaps).concat([string.length]);
    return offsets.map(function (end, index) {
      if (index === 0) return "";
      var start = offsets[index - 1];
      return string.substr(start, end - start);
    }).filter(function (part) {
      return part !== "";
    }).join(" ");
  };

  var FALLBACK_CARD = {
    gaps: [4, 8, 12],
    lengths: [16],
    code: {
      size: 3
    }
  };

  var CCFieldFormatter = function CCFieldFormatter(displayedFields) {
    var _this = this;

    (0, _classCallCheck2.default)(this, CCFieldFormatter);

    this.formatValues = function (values) {
      var card = _cardValidator.default.number(values.number).card || FALLBACK_CARD;
      return (0, _lodash.default)({
        type: card.type,
        number: _this._formatNumber(values.number, card),
        expiry: _this._formatExpiry(values.expiry),
        cvc: _this._formatCVC(values.cvc, card),
        name: (0, _Utilities.removeLeadingSpaces)(values.name),
        postalCode: (0, _Utilities.removeNonNumber)(values.postalCode)
      }, _this._displayedFields);
    };

    this._formatNumber = function (number, card) {
      var numberSanitized = (0, _Utilities.removeNonNumber)(number);
      var maxLength = card.lengths[card.lengths.length - 1];
      var lengthSanitized = limitLength(numberSanitized, maxLength);
      var formatted = addGaps(lengthSanitized, card.gaps);
      return formatted;
    };

    this._formatExpiry = function (expiry) {
      var sanitized = limitLength((0, _Utilities.removeNonNumber)(expiry), 4);

      if (sanitized.match(/^[2-9]$/)) {
        return "0" + sanitized;
      }

      if (sanitized.length > 2) {
        return sanitized.substr(0, 2) + "/" + sanitized.substr(2, sanitized.length);
      }

      return sanitized;
    };

    this._formatCVC = function (cvc, card) {
      var maxCVCLength = card.code.size;
      return limitLength((0, _Utilities.removeNonNumber)(cvc), maxCVCLength);
    };

    this._displayedFields = [].concat((0, _toConsumableArray2.default)(displayedFields), ["type"]);
  };

  exports.default = CCFieldFormatter;
},796,[1,15,19,797,833,517]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    number: _$$_REQUIRE(_dependencyMap[0]),
    expirationDate: _$$_REQUIRE(_dependencyMap[1]),
    expirationMonth: _$$_REQUIRE(_dependencyMap[2]),
    expirationYear: _$$_REQUIRE(_dependencyMap[3]),
    cvv: _$$_REQUIRE(_dependencyMap[4]),
    postalCode: _$$_REQUIRE(_dependencyMap[5])
  };
},797,[798,827,830,829,831,832]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isString = _$$_REQUIRE(_dependencyMap[0]);

  var extend = _$$_REQUIRE(_dependencyMap[1]);

  var luhn10 = _$$_REQUIRE(_dependencyMap[2]);

  var getCardTypes = _$$_REQUIRE(_dependencyMap[3]);

  var isNumber = _$$_REQUIRE(_dependencyMap[4]);

  function verification(card, isPotentiallyValid, isValid) {
    return extend({}, {
      card: card,
      isPotentiallyValid: isPotentiallyValid,
      isValid: isValid
    });
  }

  function cardNumber(value) {
    var potentialTypes, cardType, isPotentiallyValid, isValid, i, maxLength;

    if (isNumber(value)) {
      value = String(value);
    }

    if (!isString(value)) {
      return verification(null, false, false);
    }

    value = value.replace(/\-|\s/g, '');

    if (!/^\d*$/.test(value)) {
      return verification(null, false, false);
    }

    potentialTypes = getCardTypes(value);

    if (potentialTypes.length === 0) {
      return verification(null, false, false);
    } else if (potentialTypes.length !== 1) {
      return verification(null, true, false);
    }

    cardType = potentialTypes[0];

    if (cardType.type === 'unionpay') {
      isValid = true;
    } else {
      isValid = luhn10(value);
    }

    maxLength = Math.max.apply(null, cardType.lengths);

    for (i = 0; i < cardType.lengths.length; i++) {
      if (cardType.lengths[i] === value.length) {
        isPotentiallyValid = value.length !== maxLength || isValid;
        return verification(cardType, isPotentiallyValid, isValid);
      }
    }

    return verification(cardType, value.length < maxLength, false);
  }

  module.exports = cardNumber;
},798,[799,801,824,825,826]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isObjectLike = _$$_REQUIRE(_dependencyMap[0]);

  var stringTag = '[object String]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;

  function isString(value) {
    return typeof value == 'string' || isObjectLike(value) && objToString.call(value) == stringTag;
  }

  module.exports = isString;
},799,[800]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  module.exports = isObjectLike;
},800,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assignWith = _$$_REQUIRE(_dependencyMap[0]),
      baseAssign = _$$_REQUIRE(_dependencyMap[1]),
      createAssigner = _$$_REQUIRE(_dependencyMap[2]);

  var assign = createAssigner(function (object, source, customizer) {
    return customizer ? assignWith(object, source, customizer) : baseAssign(object, source);
  });
  module.exports = assign;
},801,[802,817,819]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var keys = _$$_REQUIRE(_dependencyMap[0]);

  function assignWith(object, source, customizer) {
    var index = -1,
        props = keys(source),
        length = props.length;

    while (++index < length) {
      var key = props[index],
          value = object[key],
          result = customizer(value, source[key], key, object, source);

      if ((result === result ? result !== value : value === value) || value === undefined && !(key in object)) {
        object[key] = result;
      }
    }

    return object;
  }

  module.exports = assignWith;
},802,[803]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      isArrayLike = _$$_REQUIRE(_dependencyMap[1]),
      isObject = _$$_REQUIRE(_dependencyMap[2]),
      shimKeys = _$$_REQUIRE(_dependencyMap[3]);

  var nativeKeys = getNative(Object, 'keys');
  var keys = !nativeKeys ? shimKeys : function (object) {
    var Ctor = object == null ? undefined : object.constructor;

    if (typeof Ctor == 'function' && Ctor.prototype === object || typeof object != 'function' && isArrayLike(object)) {
      return shimKeys(object);
    }

    return isObject(object) ? nativeKeys(object) : [];
  };
  module.exports = keys;
},803,[804,808,807,812]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isNative = _$$_REQUIRE(_dependencyMap[0]);

  function getNative(object, key) {
    var value = object == null ? undefined : object[key];
    return isNative(value) ? value : undefined;
  }

  module.exports = getNative;
},804,[805]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isFunction = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var objectProto = Object.prototype;
  var fnToString = Function.prototype.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function isNative(value) {
    if (value == null) {
      return false;
    }

    if (isFunction(value)) {
      return reIsNative.test(fnToString.call(value));
    }

    return isObjectLike(value) && reIsHostCtor.test(value);
  }

  module.exports = isNative;
},805,[806,800]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isObject = _$$_REQUIRE(_dependencyMap[0]);

  var funcTag = '[object Function]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;

  function isFunction(value) {
    return isObject(value) && objToString.call(value) == funcTag;
  }

  module.exports = isFunction;
},806,[807]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
},807,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getLength = _$$_REQUIRE(_dependencyMap[0]),
      isLength = _$$_REQUIRE(_dependencyMap[1]);

  function isArrayLike(value) {
    return value != null && isLength(getLength(value));
  }

  module.exports = isArrayLike;
},808,[809,811]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseProperty = _$$_REQUIRE(_dependencyMap[0]);

  var getLength = baseProperty('length');
  module.exports = getLength;
},809,[810]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;
},810,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
},811,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArguments = _$$_REQUIRE(_dependencyMap[0]),
      isArray = _$$_REQUIRE(_dependencyMap[1]),
      isIndex = _$$_REQUIRE(_dependencyMap[2]),
      isLength = _$$_REQUIRE(_dependencyMap[3]),
      keysIn = _$$_REQUIRE(_dependencyMap[4]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function shimKeys(object) {
    var props = keysIn(object),
        propsLength = props.length,
        length = propsLength && object.length;
    var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
    var index = -1,
        result = [];

    while (++index < propsLength) {
      var key = props[index];

      if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = shimKeys;
},812,[813,814,815,811,816]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArrayLike = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  function isArguments(value) {
    return isObjectLike(value) && isArrayLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  }

  module.exports = isArguments;
},813,[808,800]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      isLength = _$$_REQUIRE(_dependencyMap[1]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[2]);

  var arrayTag = '[object Array]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  var nativeIsArray = getNative(Array, 'isArray');

  var isArray = nativeIsArray || function (value) {
    return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
  };

  module.exports = isArray;
},814,[804,811,800]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var reIsUint = /^\d+$/;
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isIndex(value, length) {
    value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
},815,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArguments = _$$_REQUIRE(_dependencyMap[0]),
      isArray = _$$_REQUIRE(_dependencyMap[1]),
      isIndex = _$$_REQUIRE(_dependencyMap[2]),
      isLength = _$$_REQUIRE(_dependencyMap[3]),
      isObject = _$$_REQUIRE(_dependencyMap[4]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function keysIn(object) {
    if (object == null) {
      return [];
    }

    if (!isObject(object)) {
      object = Object(object);
    }

    var length = object.length;
    length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
    var Ctor = object.constructor,
        index = -1,
        isProto = typeof Ctor == 'function' && Ctor.prototype === object,
        result = Array(length),
        skipIndexes = length > 0;

    while (++index < length) {
      result[index] = index + '';
    }

    for (var key in object) {
      if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = keysIn;
},816,[813,814,815,811,807]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseCopy = _$$_REQUIRE(_dependencyMap[0]),
      keys = _$$_REQUIRE(_dependencyMap[1]);

  function baseAssign(object, source) {
    return source == null ? object : baseCopy(source, keys(source), object);
  }

  module.exports = baseAssign;
},817,[818,803]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseCopy(source, props, object) {
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      object[key] = source[key];
    }

    return object;
  }

  module.exports = baseCopy;
},818,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var bindCallback = _$$_REQUIRE(_dependencyMap[0]),
      isIterateeCall = _$$_REQUIRE(_dependencyMap[1]),
      restParam = _$$_REQUIRE(_dependencyMap[2]);

  function createAssigner(assigner) {
    return restParam(function (object, sources) {
      var index = -1,
          length = object == null ? 0 : sources.length,
          customizer = length > 2 ? sources[length - 2] : undefined,
          guard = length > 2 ? sources[2] : undefined,
          thisArg = length > 1 ? sources[length - 1] : undefined;

      if (typeof customizer == 'function') {
        customizer = bindCallback(customizer, thisArg, 5);
        length -= 2;
      } else {
        customizer = typeof thisArg == 'function' ? thisArg : undefined;
        length -= customizer ? 1 : 0;
      }

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];

        if (source) {
          assigner(object, source, customizer);
        }
      }

      return object;
    });
  }

  module.exports = createAssigner;
},819,[820,822,823]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var identity = _$$_REQUIRE(_dependencyMap[0]);

  function bindCallback(func, thisArg, argCount) {
    if (typeof func != 'function') {
      return identity;
    }

    if (thisArg === undefined) {
      return func;
    }

    switch (argCount) {
      case 1:
        return function (value) {
          return func.call(thisArg, value);
        };

      case 3:
        return function (value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };

      case 4:
        return function (accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };

      case 5:
        return function (value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
    }

    return function () {
      return func.apply(thisArg, arguments);
    };
  }

  module.exports = bindCallback;
},820,[821]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function identity(value) {
    return value;
  }

  module.exports = identity;
},821,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArrayLike = _$$_REQUIRE(_dependencyMap[0]),
      isIndex = _$$_REQUIRE(_dependencyMap[1]),
      isObject = _$$_REQUIRE(_dependencyMap[2]);

  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }

    var type = typeof index;

    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      var other = object[index];
      return value === value ? value === other : other !== other;
    }

    return false;
  }

  module.exports = isIterateeCall;
},822,[808,815,807]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var FUNC_ERROR_TEXT = 'Expected a function';
  var nativeMax = Math.max;

  function restParam(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    start = nativeMax(start === undefined ? func.length - 1 : +start || 0, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          rest = Array(length);

      while (++index < length) {
        rest[index] = args[start + index];
      }

      switch (start) {
        case 0:
          return func.call(this, rest);

        case 1:
          return func.call(this, args[0], rest);

        case 2:
          return func.call(this, args[0], args[1], rest);
      }

      var otherArgs = Array(start + 1);
      index = -1;

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = rest;
      return func.apply(this, otherArgs);
    };
  }

  module.exports = restParam;
},823,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function luhn10(identifier) {
    var sum = 0;
    var alt = false;
    var i = identifier.length - 1;
    var num;

    while (i >= 0) {
      num = parseInt(identifier.charAt(i), 10);

      if (alt) {
        num *= 2;

        if (num > 9) {
          num = num % 10 + 1;
        }
      }

      alt = !alt;
      sum += num;
      i--;
    }

    return sum % 10 === 0;
  }

  module.exports = luhn10;
},824,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var types = {};
  var VISA = 'visa';
  var MASTERCARD = 'master-card';
  var AMERICAN_EXPRESS = 'american-express';
  var DINERS_CLUB = 'diners-club';
  var DISCOVER = 'discover';
  var JCB = 'jcb';
  var UNIONPAY = 'unionpay';
  var MAESTRO = 'maestro';
  var CVV = 'CVV';
  var CID = 'CID';
  var CVC = 'CVC';
  var CVN = 'CVN';
  var testOrder = [VISA, MASTERCARD, AMERICAN_EXPRESS, DINERS_CLUB, DISCOVER, JCB, UNIONPAY, MAESTRO];

  function clone(x) {
    var prefixPattern, exactPattern, dupe;

    if (!x) {
      return null;
    }

    prefixPattern = x.prefixPattern.source;
    exactPattern = x.exactPattern.source;
    dupe = JSON.parse(JSON.stringify(x));
    dupe.prefixPattern = prefixPattern;
    dupe.exactPattern = exactPattern;
    return dupe;
  }

  types[VISA] = {
    niceType: 'Visa',
    type: VISA,
    prefixPattern: /^4$/,
    exactPattern: /^4\d*$/,
    gaps: [4, 8, 12],
    lengths: [16, 18, 19],
    code: {
      name: CVV,
      size: 3
    }
  };
  types[MASTERCARD] = {
    niceType: 'MasterCard',
    type: MASTERCARD,
    prefixPattern: /^(5|5[1-5]|2|22|222|222[1-9]|2[3-6]|27|27[0-2]|2720)$/,
    exactPattern: /^(5[1-5]|222[1-9]|2[3-6]|27[0-1]|2720)\d*$/,
    gaps: [4, 8, 12],
    lengths: [16],
    code: {
      name: CVC,
      size: 3
    }
  };
  types[AMERICAN_EXPRESS] = {
    niceType: 'American Express',
    type: AMERICAN_EXPRESS,
    prefixPattern: /^(3|34|37)$/,
    exactPattern: /^3[47]\d*$/,
    isAmex: true,
    gaps: [4, 10],
    lengths: [15],
    code: {
      name: CID,
      size: 4
    }
  };
  types[DINERS_CLUB] = {
    niceType: 'Diners Club',
    type: DINERS_CLUB,
    prefixPattern: /^(3|3[0689]|30[0-5])$/,
    exactPattern: /^3(0[0-5]|[689])\d*$/,
    gaps: [4, 10],
    lengths: [14, 16, 19],
    code: {
      name: CVV,
      size: 3
    }
  };
  types[DISCOVER] = {
    niceType: 'Discover',
    type: DISCOVER,
    prefixPattern: /^(6|60|601|6011|65|64|64[4-9])$/,
    exactPattern: /^(6011|65|64[4-9])\d*$/,
    gaps: [4, 8, 12],
    lengths: [16, 19],
    code: {
      name: CID,
      size: 3
    }
  };
  types[JCB] = {
    niceType: 'JCB',
    type: JCB,
    prefixPattern: /^(2|21|213|2131|1|18|180|1800|3|35)$/,
    exactPattern: /^(2131|1800|35)\d*$/,
    gaps: [4, 8, 12],
    lengths: [16],
    code: {
      name: CVV,
      size: 3
    }
  };
  types[UNIONPAY] = {
    niceType: 'UnionPay',
    type: UNIONPAY,
    prefixPattern: /^((6|62|62\d|(621(?!83|88|98|99))|622(?!06)|627[02,06,07]|628(?!0|1)|629[1,2])|622018)$/,
    exactPattern: /^(((620|(621(?!83|88|98|99))|622(?!06|018)|62[3-6]|627[02,06,07]|628(?!0|1)|629[1,2]))\d*|622018\d{12})$/,
    gaps: [4, 8, 12],
    lengths: [16, 17, 18, 19],
    code: {
      name: CVN,
      size: 3
    }
  };
  types[MAESTRO] = {
    niceType: 'Maestro',
    type: MAESTRO,
    prefixPattern: /^(5|5[06-9]|6\d*)$/,
    exactPattern: /^(5[06-9]|6[37])\d*$/,
    gaps: [4, 8, 12],
    lengths: [12, 13, 14, 15, 16, 17, 18, 19],
    code: {
      name: CVC,
      size: 3
    }
  };

  function creditCardType(cardNumber) {
    var type, value, i;
    var prefixResults = [];
    var exactResults = [];

    if (!(typeof cardNumber === 'string' || cardNumber instanceof String)) {
      return [];
    }

    for (i = 0; i < testOrder.length; i++) {
      type = testOrder[i];
      value = types[type];

      if (cardNumber.length === 0) {
        prefixResults.push(clone(value));
        continue;
      }

      if (value.exactPattern.test(cardNumber)) {
        exactResults.push(clone(value));
      } else if (value.prefixPattern.test(cardNumber)) {
        prefixResults.push(clone(value));
      }
    }

    return exactResults.length ? exactResults : prefixResults;
  }

  creditCardType.getTypeInfo = function (type) {
    return clone(types[type]);
  };

  creditCardType.types = {
    VISA: VISA,
    MASTERCARD: MASTERCARD,
    AMERICAN_EXPRESS: AMERICAN_EXPRESS,
    DINERS_CLUB: DINERS_CLUB,
    DISCOVER: DISCOVER,
    JCB: JCB,
    UNIONPAY: UNIONPAY,
    MAESTRO: MAESTRO
  };
  module.exports = creditCardType;
},825,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isObjectLike = _$$_REQUIRE(_dependencyMap[0]);

  var numberTag = '[object Number]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;

  function isNumber(value) {
    return typeof value == 'number' || isObjectLike(value) && objToString.call(value) == numberTag;
  }

  module.exports = isNumber;
},826,[800]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var parseDate = _$$_REQUIRE(_dependencyMap[0]);

  var expirationMonth = _$$_REQUIRE(_dependencyMap[1]);

  var expirationYear = _$$_REQUIRE(_dependencyMap[2]);

  var isString = _$$_REQUIRE(_dependencyMap[3]);

  function verification(isValid, isPotentiallyValid, month, year) {
    return {
      isValid: isValid,
      isPotentiallyValid: isPotentiallyValid,
      month: month,
      year: year
    };
  }

  function expirationDate(value) {
    var date, monthValid, yearValid, isValidForThisYear;

    if (isString(value)) {
      value = value.replace(/^(\d\d) (\d\d(\d\d)?)$/, '$1/$2');
      date = parseDate(value);
    } else if (value !== null && typeof value === 'object') {
      date = {
        month: String(value.month),
        year: String(value.year)
      };
    } else {
      return verification(false, false, null, null);
    }

    monthValid = expirationMonth(date.month);
    yearValid = expirationYear(date.year);

    if (monthValid.isValid) {
      if (yearValid.isCurrentYear) {
        isValidForThisYear = monthValid.isValidForThisYear;
        return verification(isValidForThisYear, isValidForThisYear, date.month, date.year);
      }

      if (yearValid.isValid) {
        return verification(true, true, date.month, date.year);
      }
    }

    if (monthValid.isPotentiallyValid && yearValid.isPotentiallyValid) {
      return verification(false, true, null, null);
    }

    return verification(false, false, null, null);
  }

  module.exports = expirationDate;
},827,[828,830,829,799]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var expirationYear = _$$_REQUIRE(_dependencyMap[0]);

  var isArray = _$$_REQUIRE(_dependencyMap[1]);

  function parseDate(value) {
    var month, len, year, yearValid;

    if (/\//.test(value)) {
      value = value.split(/\s*\/\s*/g);
    } else if (/\s/.test(value)) {
      value = value.split(/ +/g);
    }

    if (isArray(value)) {
      return {
        month: value[0],
        year: value.slice(1).join()
      };
    }

    len = value[0] === '0' || value.length > 5 ? 2 : 1;

    if (value[0] === '1') {
      year = value.substr(1);
      yearValid = expirationYear(year);

      if (!yearValid.isPotentiallyValid) {
        len = 2;
      }
    }

    month = value.substr(0, len);
    return {
      month: month,
      year: value.substr(month.length)
    };
  }

  module.exports = parseDate;
},828,[829,814]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isString = _$$_REQUIRE(_dependencyMap[0]);

  var maxYear = 19;

  function verification(isValid, isPotentiallyValid, isCurrentYear) {
    return {
      isValid: isValid,
      isPotentiallyValid: isPotentiallyValid,
      isCurrentYear: isCurrentYear || false
    };
  }

  function expirationYear(value) {
    var currentFirstTwo, currentYear, firstTwo, len, twoDigitYear, valid, isCurrentYear;

    if (!isString(value)) {
      return verification(false, false);
    }

    if (value.replace(/\s/g, '') === '') {
      return verification(false, true);
    }

    if (!/^\d*$/.test(value)) {
      return verification(false, false);
    }

    len = value.length;

    if (len < 2) {
      return verification(false, true);
    }

    currentYear = new Date().getFullYear();

    if (len === 3) {
      firstTwo = value.slice(0, 2);
      currentFirstTwo = String(currentYear).slice(0, 2);
      return verification(false, firstTwo === currentFirstTwo);
    }

    if (len > 4) {
      return verification(false, false);
    }

    value = parseInt(value, 10);
    twoDigitYear = Number(String(currentYear).substr(2, 2));

    if (len === 2) {
      isCurrentYear = twoDigitYear === value;
      valid = value >= twoDigitYear && value <= twoDigitYear + maxYear;
    } else if (len === 4) {
      isCurrentYear = currentYear === value;
      valid = value >= currentYear && value <= currentYear + maxYear;
    }

    return verification(valid, valid, isCurrentYear);
  }

  module.exports = expirationYear;
},829,[799]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isString = _$$_REQUIRE(_dependencyMap[0]);

  function verification(isValid, isPotentiallyValid, isValidForThisYear) {
    return {
      isValid: isValid,
      isPotentiallyValid: isPotentiallyValid,
      isValidForThisYear: isValidForThisYear || false
    };
  }

  function expirationMonth(value) {
    var month, result;
    var currentMonth = new Date().getMonth() + 1;

    if (!isString(value)) {
      return verification(false, false);
    }

    if (value.replace(/\s/g, '') === '' || value === '0') {
      return verification(false, true);
    }

    if (!/^\d*$/.test(value)) {
      return verification(false, false);
    }

    month = parseInt(value, 10);

    if (isNaN(value)) {
      return verification(false, false);
    }

    result = month > 0 && month < 13;
    return verification(result, result, result && month >= currentMonth);
  }

  module.exports = expirationMonth;
},830,[799]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isString = _$$_REQUIRE(_dependencyMap[0]);

  var DEFAULT_LENGTH = 3;

  function includes(array, thing) {
    var i = 0;

    for (; i < array.length; i++) {
      if (thing === array[i]) {
        return true;
      }
    }

    return false;
  }

  function max(array) {
    var maximum = DEFAULT_LENGTH;
    var i = 0;

    for (; i < array.length; i++) {
      maximum = array[i] > maximum ? array[i] : maximum;
    }

    return maximum;
  }

  function verification(isValid, isPotentiallyValid) {
    return {
      isValid: isValid,
      isPotentiallyValid: isPotentiallyValid
    };
  }

  function cvv(value, maxLength) {
    maxLength = maxLength || DEFAULT_LENGTH;
    maxLength = maxLength instanceof Array ? maxLength : [maxLength];

    if (!isString(value)) {
      return verification(false, false);
    }

    if (!/^\d*$/.test(value)) {
      return verification(false, false);
    }

    if (includes(maxLength, value.length)) {
      return verification(true, true);
    }

    if (value.length < Math.min.apply(null, maxLength)) {
      return verification(false, true);
    }

    if (value.length > max(maxLength)) {
      return verification(false, false);
    }

    return verification(true, true);
  }

  module.exports = cvv;
},831,[799]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isString = _$$_REQUIRE(_dependencyMap[0]);

  var MIN_POSTAL_CODE_LENGTH = 3;

  function verification(isValid, isPotentiallyValid) {
    return {
      isValid: isValid,
      isPotentiallyValid: isPotentiallyValid
    };
  }

  function postalCode(value) {
    if (!isString(value)) {
      return verification(false, false);
    } else if (value.length < MIN_POSTAL_CODE_LENGTH) {
      return verification(false, true);
    }

    return verification(true, true);
  }

  module.exports = postalCode;
},832,[799]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.removeLeadingSpaces = exports.removeNonNumber = undefined;

  var removeNonNumber = function removeNonNumber() {
    var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return string.replace(/[^\d]/g, "");
  };

  exports.removeNonNumber = removeNonNumber;

  var removeLeadingSpaces = function removeLeadingSpaces() {
    var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return string.replace(/^\s+/g, "");
  };

  exports.removeLeadingSpaces = removeLeadingSpaces;
},833,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _cardValidator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _lodash2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _lodash3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var toStatus = function toStatus(validation) {
    return validation.isValid ? "valid" : validation.isPotentiallyValid ? "incomplete" : "invalid";
  };

  var FALLBACK_CARD = {
    gaps: [4, 8, 12],
    lengths: [16],
    code: {
      size: 3
    }
  };

  var CCFieldValidator = function CCFieldValidator(displayedFields, validatePostalCode) {
    var _this = this;

    (0, _classCallCheck2.default)(this, CCFieldValidator);

    this.validateValues = function (formValues) {
      var numberValidation = _cardValidator.default.number(formValues.number);

      var expiryValidation = _cardValidator.default.expirationDate(formValues.expiry);

      var maxCVCLength = (numberValidation.card || FALLBACK_CARD).code.size;

      var cvcValidation = _cardValidator.default.cvv(formValues.cvc, maxCVCLength);

      var validationStatuses = (0, _lodash.default)({
        number: toStatus(numberValidation),
        expiry: toStatus(expiryValidation),
        cvc: toStatus(cvcValidation),
        name: !!formValues.name ? "valid" : "incomplete",
        postalCode: _this._validatePostalCode(formValues.postalCode)
      }, _this._displayedFields);
      return {
        valid: (0, _lodash3.default)((0, _lodash2.default)(validationStatuses), function (status) {
          return status === "valid";
        }),
        status: validationStatuses
      };
    };

    this._displayedFields = displayedFields;
    this._validatePostalCode = validatePostalCode;
  };

  exports.default = CCFieldValidator;
},834,[1,19,797,517,835,836]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]';
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  function baseValues(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeKeys = overArg(Object.keys, Object);

  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  function values(object) {
    return object ? baseValues(object, keys(object)) : [];
  }

  module.exports = values;
},835,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var LARGE_ARRAY_SIZE = 200;
  var FUNC_ERROR_TEXT = 'Expected a function';
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reEscapeChar = /\\(\\)?/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding('util');
    } catch (e) {}
  }();

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  function arrayEvery(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }

    return true;
  }

  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice;
  var nativeKeys = overArg(Object.keys, Object);
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap'),
      nativeCreate = getNative(Object, 'create');
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function SetCache(values) {
    var index = -1,
        length = values ? values.length : 0;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }

  function stackClear() {
    this.__data__ = new ListCache();
  }

  function stackDelete(key) {
    return this.__data__['delete'](key);
  }

  function stackGet(key) {
    return this.__data__.get(key);
  }

  function stackHas(key) {
    return this.__data__.has(key);
  }

  function stackSet(key, value) {
    var cache = this.__data__;

    if (cache instanceof ListCache) {
      var pairs = cache.__data__;

      if (!Map || pairs.length < 199) {
        pairs.push([key, value]);
        return this;
      }

      cache = this.__data__ = new MapCache(pairs);
    }

    cache.set(key, value);
    return this;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var baseEach = createBaseEach(baseForOwn);

  function baseEvery(collection, predicate) {
    var result = true;
    baseEach(collection, function (value, index, collection) {
      result = !!predicate(value, index, collection);
      return result;
    });
    return result;
  }

  var baseFor = createBaseFor();

  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  function baseGet(object, path) {
    path = isKey(path, object) ? [path] : castPath(path);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  function baseGetTag(value) {
    return objectToString.call(value);
  }

  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  function baseIsEqual(value, other, customizer, bitmask, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
  }

  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = getTag(object);
      objTag = objTag == argsTag ? objectTag : objTag;
    }

    if (!othIsArr) {
      othTag = getTag(other);
      othTag = othTag == argsTag ? objectTag : othTag;
    }

    var objIsObj = objTag == objectTag && !isHostObject(object),
        othIsObj = othTag == objectTag && !isHostObject(other),
        isSameTag = objTag == othTag;

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    }

    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
  }

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, 3, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
  }

  function baseIteratee(value) {
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity;
    }

    if (typeof value == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }

    return property(value);
  }

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  function baseMatches(source) {
    var matchData = getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, 3);
    };
  }

  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
  }

  function createBaseEach(eachFunc, fromRight) {
    return function (collection, iteratee) {
      if (collection == null) {
        return collection;
      }

      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }

      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }

      return collection;
    };
  }

  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!seen.has(othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
            return seen.add(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= UNORDERED_COMPARE_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, isStrictComparable(value)];
    }

    return result;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = objectToString.call(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : undefined;

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  function hasPath(object, path, hasFunc) {
    path = isKey(path, object) ? [path] : castPath(path);
    var result,
        index = -1,
        length = path.length;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result) {
      return result;
    }

    var length = object ? object.length : 0;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }

    var type = typeof index;

    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      return eq(object[index], value);
    }

    return false;
  }

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value;

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  var stringToPath = memoize(function (string) {
    string = toString(string);
    var result = [];

    if (reLeadingDot.test(string)) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function every(collection, predicate, guard) {
    var func = isArray(collection) ? arrayEvery : baseEvery;

    if (guard && isIterateeCall(collection, predicate, guard)) {
      predicate = undefined;
    }

    return func(collection, baseIteratee(predicate, 3));
  }

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  function identity(value) {
    return value;
  }

  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = every;
},836,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function compact(array) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (value) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  module.exports = compact;
},837,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _CardView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _CCInput = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _connectToState = _$$_REQUIRE(_dependencyMap[14]);

  var s = _reactNative.StyleSheet.create({
    container: {
      alignItems: "center"
    },
    form: {
      marginTop: 20
    },
    inputContainer: {
      marginLeft: 20
    },
    inputLabel: {
      fontWeight: "bold"
    },
    input: {
      height: 40
    }
  });

  var CVC_INPUT_WIDTH = 70;
  var EXPIRY_INPUT_WIDTH = CVC_INPUT_WIDTH;
  var CARD_NUMBER_INPUT_WIDTH_OFFSET = 40;
  var CARD_NUMBER_INPUT_WIDTH = _reactNative.Dimensions.get("window").width - EXPIRY_INPUT_WIDTH - CARD_NUMBER_INPUT_WIDTH_OFFSET;
  var NAME_INPUT_WIDTH = CARD_NUMBER_INPUT_WIDTH;
  var PREVIOUS_FIELD_OFFSET = 40;
  var POSTAL_CODE_INPUT_WIDTH = 120;

  var CreditCardInput = function (_Component) {
    (0, _inherits2.default)(CreditCardInput, _Component);

    function CreditCardInput() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, CreditCardInput);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CreditCardInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.componentDidMount = function () {
        return _this._focus(_this.props.focused);
      };

      _this.componentWillReceiveProps = function (newProps) {
        if (_this.props.focused !== newProps.focused) _this._focus(newProps.focused);
      };

      _this._focus = function (field) {
        if (!field) return;

        var scrollResponder = _this.refs.Form.getScrollResponder();

        var nodeHandle = _reactNative.default.findNodeHandle(_this.refs[field]);

        _reactNative.NativeModules.UIManager.measureLayoutRelativeToParent(nodeHandle, function (e) {
          throw e;
        }, function (x) {
          scrollResponder.scrollTo({
            x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0),
            animated: true
          });

          _this.refs[field].focus();
        });
      };

      _this._inputProps = function (field) {
        var _this$props = _this.props,
            inputStyle = _this$props.inputStyle,
            labelStyle = _this$props.labelStyle,
            validColor = _this$props.validColor,
            invalidColor = _this$props.invalidColor,
            placeholderColor = _this$props.placeholderColor,
            placeholders = _this$props.placeholders,
            labels = _this$props.labels,
            values = _this$props.values,
            status = _this$props.status,
            onFocus = _this$props.onFocus,
            onChange = _this$props.onChange,
            onBecomeEmpty = _this$props.onBecomeEmpty,
            onBecomeValid = _this$props.onBecomeValid,
            additionalInputsProps = _this$props.additionalInputsProps;
        return {
          inputStyle: [s.input, inputStyle],
          labelStyle: [s.inputLabel, labelStyle],
          validColor: validColor,
          invalidColor: invalidColor,
          placeholderColor: placeholderColor,
          ref: field,
          field: field,
          label: labels[field],
          placeholder: placeholders[field],
          value: values[field],
          status: status[field],
          onFocus: onFocus,
          onChange: onChange,
          onBecomeEmpty: onBecomeEmpty,
          onBecomeValid: onBecomeValid,
          additionalInputProps: additionalInputsProps[field]
        };
      };

      return _this;
    }

    (0, _createClass2.default)(CreditCardInput, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            cardImageFront = _this$props2.cardImageFront,
            cardImageBack = _this$props2.cardImageBack,
            inputContainerStyle = _this$props2.inputContainerStyle,
            _this$props2$values = _this$props2.values,
            number = _this$props2$values.number,
            expiry = _this$props2$values.expiry,
            cvc = _this$props2$values.cvc,
            name = _this$props2$values.name,
            type = _this$props2$values.type,
            focused = _this$props2.focused,
            allowScroll = _this$props2.allowScroll,
            requiresName = _this$props2.requiresName,
            requiresCVC = _this$props2.requiresCVC,
            requiresPostalCode = _this$props2.requiresPostalCode,
            cardScale = _this$props2.cardScale,
            cardFontFamily = _this$props2.cardFontFamily,
            cardBrandIcons = _this$props2.cardBrandIcons;
        return _react.default.createElement(_reactNative.View, {
          style: s.container
        }, _react.default.createElement(_CardView.default, {
          focused: focused,
          brand: type,
          scale: cardScale,
          fontFamily: cardFontFamily,
          imageFront: cardImageFront,
          imageBack: cardImageBack,
          customIcons: cardBrandIcons,
          name: requiresName ? name : " ",
          number: number,
          expiry: expiry,
          cvc: cvc
        }), _react.default.createElement(_reactNative.ScrollView, {
          ref: "Form",
          horizontal: true,
          keyboardShouldPersistTaps: "always",
          scrollEnabled: allowScroll,
          showsHorizontalScrollIndicator: false,
          style: s.form
        }, _react.default.createElement(_CCInput.default, (0, _extends2.default)({}, this._inputProps("number"), {
          keyboardType: "numeric",
          containerStyle: [s.inputContainer, inputContainerStyle, {
            width: CARD_NUMBER_INPUT_WIDTH
          }]
        })), _react.default.createElement(_CCInput.default, (0, _extends2.default)({}, this._inputProps("expiry"), {
          keyboardType: "numeric",
          containerStyle: [s.inputContainer, inputContainerStyle, {
            width: EXPIRY_INPUT_WIDTH
          }]
        })), requiresCVC && _react.default.createElement(_CCInput.default, (0, _extends2.default)({}, this._inputProps("cvc"), {
          keyboardType: "numeric",
          containerStyle: [s.inputContainer, inputContainerStyle, {
            width: CVC_INPUT_WIDTH
          }]
        })), requiresName && _react.default.createElement(_CCInput.default, (0, _extends2.default)({}, this._inputProps("name"), {
          containerStyle: [s.inputContainer, inputContainerStyle, {
            width: NAME_INPUT_WIDTH
          }]
        })), requiresPostalCode && _react.default.createElement(_CCInput.default, (0, _extends2.default)({}, this._inputProps("postalCode"), {
          keyboardType: "numeric",
          containerStyle: [s.inputContainer, inputContainerStyle, {
            width: POSTAL_CODE_INPUT_WIDTH
          }]
        }))));
      }
    }]);
    return CreditCardInput;
  }(_react.Component);

  exports.default = CreditCardInput;
  CreditCardInput.propTypes = (0, _objectSpread2.default)({}, _connectToState.InjectedProps, {
    labels: _propTypes.default.object,
    placeholders: _propTypes.default.object,
    labelStyle: _reactNative.Text.propTypes.style,
    inputStyle: _reactNative.Text.propTypes.style,
    inputContainerStyle: _reactNative.ViewPropTypes.style,
    validColor: _propTypes.default.string,
    invalidColor: _propTypes.default.string,
    placeholderColor: _propTypes.default.string,
    cardImageFront: _propTypes.default.number,
    cardImageBack: _propTypes.default.number,
    cardScale: _propTypes.default.number,
    cardFontFamily: _propTypes.default.string,
    cardBrandIcons: _propTypes.default.object,
    allowScroll: _propTypes.default.bool,
    additionalInputsProps: _propTypes.default.objectOf(_propTypes.default.shape(_reactNative.TextInput.propTypes))
  });
  CreditCardInput.defaultProps = {
    cardViewSize: {},
    labels: {
      name: "CARDHOLDER'S NAME",
      number: "CARD NUMBER",
      expiry: "EXPIRY",
      cvc: "CVC/CCV",
      postalCode: "POSTAL CODE"
    },
    placeholders: {
      name: "Full Name",
      number: "1234 5678 1234 5678",
      expiry: "MM/YY",
      cvc: "CVC",
      postalCode: "34567"
    },
    inputContainerStyle: {
      borderBottomWidth: 1,
      borderBottomColor: "black"
    },
    validColor: "",
    invalidColor: "red",
    placeholderColor: "gray",
    allowScroll: false,
    additionalInputsProps: {}
  };
},838,[361,1,43,8,19,20,27,30,33,46,793,2,839,855,792]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _Icons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNativeFlipCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var BASE_SIZE = {
    width: 300,
    height: 190
  };

  var s = _reactNative.StyleSheet.create({
    cardContainer: {},
    cardFace: {},
    icon: {
      position: "absolute",
      top: 15,
      right: 15,
      width: 60,
      height: 40,
      resizeMode: "contain"
    },
    baseText: {
      color: "rgba(255, 255, 255, 0.8)",
      backgroundColor: "transparent"
    },
    placeholder: {
      color: "rgba(255, 255, 255, 0.5)"
    },
    focused: {
      fontWeight: "bold",
      color: "rgba(255, 255, 255, 1)"
    },
    number: {
      fontSize: 21,
      position: "absolute",
      top: 95,
      left: 28
    },
    name: {
      fontSize: 16,
      position: "absolute",
      bottom: 20,
      left: 25,
      right: 100
    },
    expiryLabel: {
      fontSize: 9,
      position: "absolute",
      bottom: 40,
      left: 218
    },
    expiry: {
      fontSize: 16,
      position: "absolute",
      bottom: 20,
      left: 220
    },
    amexCVC: {
      fontSize: 16,
      position: "absolute",
      top: 73,
      right: 30
    },
    cvc: {
      fontSize: 16,
      position: "absolute",
      top: 80,
      right: 30
    }
  });

  var CardView = function (_Component) {
    (0, _inherits2.default)(CardView, _Component);

    function CardView() {
      (0, _classCallCheck2.default)(this, CardView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CardView).apply(this, arguments));
    }

    (0, _createClass2.default)(CardView, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            focused = _this$props.focused,
            brand = _this$props.brand,
            name = _this$props.name,
            number = _this$props.number,
            expiry = _this$props.expiry,
            cvc = _this$props.cvc,
            customIcons = _this$props.customIcons,
            placeholder = _this$props.placeholder,
            imageFront = _this$props.imageFront,
            imageBack = _this$props.imageBack,
            scale = _this$props.scale,
            fontFamily = _this$props.fontFamily;
        var Icons = (0, _objectSpread2.default)({}, _Icons.default, customIcons);
        var isAmex = brand === "american-express";
        var shouldFlip = !isAmex && focused === "cvc";
        var containerSize = (0, _objectSpread2.default)({}, BASE_SIZE, {
          height: BASE_SIZE.height * scale
        });
        var transform = {
          transform: [{
            scale: scale
          }, {
            translateY: BASE_SIZE.height * (scale - 1) / 2
          }]
        };
        return _react.default.createElement(_reactNative.View, {
          style: [s.cardContainer, containerSize]
        }, _react.default.createElement(_reactNativeFlipCard.default, {
          style: {
            borderWidth: 0
          },
          flipHorizontal: true,
          flipVertical: false,
          friction: 10,
          perspective: 2000,
          clickable: false,
          flip: shouldFlip
        }, _react.default.createElement(_reactNative.ImageBackground, {
          style: [BASE_SIZE, s.cardFace, transform],
          source: imageFront
        }, _react.default.createElement(_reactNative.Image, {
          style: [s.icon],
          source: Icons[brand]
        }), _react.default.createElement(_reactNative.Text, {
          style: [s.baseText, {
            fontFamily: fontFamily
          }, s.number, !number && s.placeholder, focused === "number" && s.focused]
        }, !number ? placeholder.number : number), _react.default.createElement(_reactNative.Text, {
          style: [s.baseText, {
            fontFamily: fontFamily
          }, s.name, !name && s.placeholder, focused === "name" && s.focused],
          numberOfLines: 1
        }, !name ? placeholder.name : name.toUpperCase()), _react.default.createElement(_reactNative.Text, {
          style: [s.baseText, {
            fontFamily: fontFamily
          }, s.expiryLabel, s.placeholder, focused === "expiry" && s.focused]
        }, "MONTH/YEAR"), _react.default.createElement(_reactNative.Text, {
          style: [s.baseText, {
            fontFamily: fontFamily
          }, s.expiry, !expiry && s.placeholder, focused === "expiry" && s.focused]
        }, !expiry ? placeholder.expiry : expiry), isAmex && _react.default.createElement(_reactNative.Text, {
          style: [s.baseText, {
            fontFamily: fontFamily
          }, s.amexCVC, !cvc && s.placeholder, focused === "cvc" && s.focused]
        }, !cvc ? placeholder.cvc : cvc)), _react.default.createElement(_reactNative.ImageBackground, {
          style: [BASE_SIZE, s.cardFace, transform],
          source: imageBack
        }, _react.default.createElement(_reactNative.Text, {
          style: [s.baseText, s.cvc, !cvc && s.placeholder, focused === "cvc" && s.focused]
        }, !cvc ? placeholder.cvc : cvc))));
      }
    }]);
    return CardView;
  }(_react.Component);

  exports.default = CardView;
  CardView.propTypes = {
    focused: _propTypes.default.string,
    brand: _propTypes.default.string,
    name: _propTypes.default.string,
    number: _propTypes.default.string,
    expiry: _propTypes.default.string,
    cvc: _propTypes.default.string,
    placeholder: _propTypes.default.object,
    scale: _propTypes.default.number,
    fontFamily: _propTypes.default.string,
    imageFront: _propTypes.default.number,
    imageBack: _propTypes.default.number,
    customIcons: _propTypes.default.object
  };
  CardView.defaultProps = {
    name: "",
    placeholder: {
      number: "•••• •••• •••• ••••",
      name: "FULL NAME",
      expiry: "••/••",
      cvc: "•••"
    },
    scale: 1,
    fontFamily: _reactNative.Platform.select({
      ios: "Courier",
      android: "monospace"
    }),
    imageFront: _$$_REQUIRE(_dependencyMap[13]),
    imageBack: _$$_REQUIRE(_dependencyMap[14])
  };
},839,[361,1,43,19,20,27,30,33,46,793,2,840,850,853,854]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var Icons = {
    cvc: _$$_REQUIRE(_dependencyMap[0]),
    cvc_amex: _$$_REQUIRE(_dependencyMap[1]),
    "american-express": _$$_REQUIRE(_dependencyMap[2]),
    "diners-club": _$$_REQUIRE(_dependencyMap[3]),
    "master-card": _$$_REQUIRE(_dependencyMap[4]),
    discover: _$$_REQUIRE(_dependencyMap[5]),
    jcb: _$$_REQUIRE(_dependencyMap[6]),
    placeholder: _$$_REQUIRE(_dependencyMap[7]),
    visa: _$$_REQUIRE(_dependencyMap[8])
  };
  var _default = Icons;
  exports.default = _default;
},840,[841,842,843,844,845,846,847,848,849]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "5a40b06c10c0f499166a29061e5d605a",
    "name": "stp_card_cvc",
    "type": "png"
  });
},841,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "37c69d8117a1bf579a75fd0feea7a1be",
    "name": "stp_card_cvc_amex",
    "type": "png"
  });
},842,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "4548299588f8d5e831ed2ed4fb3d1603",
    "name": "stp_card_amex",
    "type": "png"
  });
},843,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "864276f5fb2c9d391c3faa080270ba4f",
    "name": "stp_card_diners",
    "type": "png"
  });
},844,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "cb38652a02a27ed79fb7f1bc6cbcbc64",
    "name": "stp_card_mastercard",
    "type": "png"
  });
},845,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "81bdb2aa22180b6c8951667a0b5f2d69",
    "name": "stp_card_discover",
    "type": "png"
  });
},846,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "4dca6613e4fbd2b4cb6f9665a9985ee3",
    "name": "stp_card_jcb",
    "type": "png"
  });
},847,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "0c4a32271bdb9ca1d85a2ee7984f001b",
    "name": "stp_card_unknown",
    "type": "png"
  });
},848,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/src/icons",
    "width": 96,
    "height": 63,
    "scales": [1],
    "hash": "782a8692856c4a67f010e577008fec61",
    "name": "stp_card_visa",
    "type": "png"
  });
},849,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Face", {
    enumerable: true,
    get: function get() {
      return _FlipCard.Face;
    }
  });
  Object.defineProperty(exports, "Back", {
    enumerable: true,
    get: function get() {
      return _FlipCard.Back;
    }
  });
  exports.default = undefined;

  var _FlipCard = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _FlipCard.default;
  exports.default = _default;
},850,[361,851]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Back = exports.Face = exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _Style = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var FlipCard = function (_Component) {
    (0, _inherits2.default)(FlipCard, _Component);

    function FlipCard(props) {
      var _this;

      (0, _classCallCheck2.default)(this, FlipCard);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FlipCard).call(this, props));
      var isFlipped = _this.props.alignHeight || _this.props.alignWidth ? !props.flip : props.flip;
      _this.state = {
        isFlipped: isFlipped,
        isFlipping: false,
        rotate: new _reactNative.Animated.Value(Number(props.flip)),
        mesured: false,
        height: 0,
        width: 0,
        face: {
          width: 0,
          height: 0
        },
        back: {
          width: 0,
          height: 0
        }
      };
      return _this;
    }

    (0, _createClass2.default)(FlipCard, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.state.isFlipped !== nextProps.flip) {
          this._toggleCard();
        }
      }
    }, {
      key: "_toggleCard",
      value: function _toggleCard() {
        this.setState({
          isFlipping: true
        });
        this.props.onFlipStart(this.state.isFlipped);

        this._animation(!this.state.isFlipped);
      }
    }, {
      key: "_animation",
      value: function _animation(isFlipped) {
        var _this2 = this;

        if (!this.timer) {
          this.timer = setTimeout(function () {
            _this2.setState({
              isFlipped: !_this2.state.isFlipped
            });

            _this2.timer = null;
          }, 120);
        }

        _reactNative.Animated.spring(this.state.rotate, {
          toValue: Number(isFlipped),
          friction: this.props.friction,
          useNativeDriver: this.props.useNativeDriver
        }).start(function (param) {
          _this2.setState({
            isFlipping: false
          });

          _this2.props.onFlipEnd(_this2.state.isFlipped);
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.alignHeight || this.props.alignWidth) {
          this.measureOtherSideTimeout = setTimeout(this.measureOtherSide.bind(this), 32);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearTimeout(this.measureOtherSideTimeout);
      }
    }, {
      key: "measureOtherSide",
      value: function measureOtherSide() {
        this.setState({
          isFlipped: !this.state.isFlipped,
          mesured: true
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var c = this.props.children;
        var transform = this.props.perspective ? [{
          perspective: this.props.perspective
        }] : [];
        var render_side = false;

        if (this.props.flipHorizontal) {
          transform.push({
            rotateY: this.state.rotate.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '180deg']
            })
          });
        }

        if (this.props.flipVertical) {
          transform.push({
            rotateX: this.state.rotate.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '180deg']
            })
          });
        }

        if (this.state.isFlipped) {
          render_side = _react.default.createElement(Back, {
            style: [this.state.height > 0 && {
              height: this.state.height
            }, this.state.width > 0 && {
              width: this.state.width
            }],
            flipHorizontal: this.props.flipHorizontal,
            flipVertical: this.props.flipVertical,
            perspective: this.props.perspective,
            onLayout: function onLayout(event) {
              var _event$nativeEvent$la = event.nativeEvent.layout,
                  x = _event$nativeEvent$la.x,
                  y = _event$nativeEvent$la.y,
                  width = _event$nativeEvent$la.width,
                  height = _event$nativeEvent$la.height;

              var _update = (0, _extends2.default)(_this3.state.back, {
                width: width,
                height: height
              });

              _this3.setState({
                back: _update
              });

              if (_this3.state.mesured) {
                if (_this3.props.alignHeight) {
                  _this3.setState({
                    height: Math.max(_this3.state.face.height, _this3.state.back.height)
                  });
                }

                if (_this3.props.alignWidth) {
                  _this3.setState({
                    width: Math.max(_this3.state.face.width, _this3.state.back.width)
                  });
                }
              }
            }
          }, c[1]);
        } else {
          render_side = _react.default.createElement(Face, {
            style: [this.state.height > 0 && {
              height: this.state.height
            }, this.state.width > 0 && {
              width: this.state.width
            }],
            onLayout: function onLayout(event) {
              var _event$nativeEvent$la2 = event.nativeEvent.layout,
                  x = _event$nativeEvent$la2.x,
                  y = _event$nativeEvent$la2.y,
                  width = _event$nativeEvent$la2.width,
                  height = _event$nativeEvent$la2.height;

              var _update = (0, _extends2.default)(_this3.state.face, {
                width: width,
                height: height
              });

              _this3.setState({
                face: _update
              });

              if (_this3.state.mesured) {
                if (_this3.props.alignHeight) {
                  _this3.setState({
                    height: Math.max(_this3.state.face.height, _this3.state.back.height)
                  });
                }

                if (_this3.props.alignWidth) {
                  _this3.setState({
                    width: Math.max(_this3.state.face.width, _this3.state.back.width)
                  });
                }
              }
            }
          }, c[0]);
        }

        if (this.props.clickable) {
          var opacity = 0;

          if ((this.props.alignHeight || this.props.alignWidth) && this.state.mesured || !(this.props.alignHeight || this.props.alignWidth)) {
            opacity = 1;
          }

          return _react.default.createElement(_reactNative.TouchableOpacity, {
            style: {
              flex: 1
            },
            testID: this.props.testID,
            activeOpacity: 1,
            onPress: function onPress() {
              _this3._toggleCard();
            }
          }, _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, this.props, {
            style: [_Style.default.flipCard, {
              transform: transform,
              opacity: opacity
            }, this.props.style]
          }), render_side));
        } else {
          return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, this.props, {
            style: [_Style.default.flipCard, {
              transform: transform
            }, this.props.style]
          }), render_side);
        }
      }
    }]);
    return FlipCard;
  }(_react.Component);

  exports.default = FlipCard;
  FlipCard.propTypes = {
    style: _reactNative.ViewPropTypes.style
  };
  FlipCard.propTypes = {
    flip: _propTypes.default.bool,
    friction: _propTypes.default.number,
    perspective: _propTypes.default.number,
    flipHorizontal: _propTypes.default.bool,
    flipVertical: _propTypes.default.bool,
    clickable: _propTypes.default.bool,
    onFlipEnd: _propTypes.default.func,
    onFlipStart: _propTypes.default.func,
    alignHeight: _propTypes.default.bool,
    alignWidth: _propTypes.default.bool,
    useNativeDriver: _propTypes.default.bool,
    children: function children(props, propName, componentName) {
      var prop = props[propName];

      if (_react.default.Children.count(prop) !== 2) {
        return new Error('`' + componentName + '` ' + 'should contain exactly two children. ' + 'The first child represents the front of the card. ' + 'The second child represents the back of the card.');
      }
    }
  };
  FlipCard.defaultProps = {
    flip: false,
    friction: 6,
    perspective: 1000,
    flipHorizontal: false,
    flipVertical: true,
    clickable: true,
    onFlipEnd: function onFlipEnd() {},
    onFlipStart: function onFlipStart() {},
    alignHeight: false,
    alignWidth: false,
    useNativeDriver: true
  };

  var Face = function (_Component2) {
    (0, _inherits2.default)(Face, _Component2);

    function Face() {
      (0, _classCallCheck2.default)(this, Face);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Face).apply(this, arguments));
    }

    (0, _createClass2.default)(Face, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          style: [_Style.default.face, this.props.style],
          onLayout: this.props.onLayout
        }, this.props.children);
      }
    }]);
    return Face;
  }(_react.Component);

  exports.Face = Face;
  Face.propTypes = {
    children: function children(props, propName, componentName) {}
  };

  var Back = function (_Component3) {
    (0, _inherits2.default)(Back, _Component3);

    function Back() {
      (0, _classCallCheck2.default)(this, Back);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Back).apply(this, arguments));
    }

    (0, _createClass2.default)(Back, [{
      key: "render",
      value: function render() {
        var transform = [];

        if (this.props.flipHorizontal) {
          transform.push({
            scaleX: -1
          });

          if (_reactNative.Platform.OS === "android") {
            transform.push({
              perspective: this.props.perspective
            });
          }
        }

        if (this.props.flipVertical) {
          transform.push({
            scaleY: -1
          });

          if (_reactNative.Platform.OS === "android") {
            transform.push({
              perspective: this.props.perspective
            });
          }
        }

        return _react.default.createElement(_reactNative.View, {
          style: [_Style.default.back, this.props.style, {
            transform: transform
          }],
          onLayout: this.props.onLayout
        }, this.props.children);
      }
    }]);
    return Back;
  }(_react.Component);

  exports.Back = Back;
  Back.defaultProps = {
    flipHorizontal: false,
    flipVertical: true,
    perspective: 1000
  };
  Back.propTypes = {
    flipHorizontal: _propTypes.default.bool,
    flipVertical: _propTypes.default.bool,
    perspective: _propTypes.default.number,
    children: function children(props, propName, componentName) {}
  };
},851,[361,1,8,19,20,27,30,33,46,60,2,852]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.StyleSheet.create({
    flipCard: {
      flex: 1
    },
    face: {
      flex: 1
    },
    back: {
      flex: 1
    }
  });

  exports.default = _default;
},852,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/images",
    "width": 456,
    "height": 292,
    "scales": [1],
    "hash": "51f117706ff4cfc614abbc45a67afc4f",
    "name": "card-front",
    "type": "png"
  });
},853,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-credit-card-input/images",
    "width": 456,
    "height": 292,
    "scales": [1],
    "hash": "45c1d3c823f2e173bcd56271ce49848e",
    "name": "card-back",
    "type": "png"
  });
},854,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var s = _reactNative.StyleSheet.create({
    baseInputStyle: {
      color: "black"
    }
  });

  var CCInput = function (_Component) {
    (0, _inherits2.default)(CCInput, _Component);

    function CCInput() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, CCInput);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CCInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.componentWillReceiveProps = function (newProps) {
        var _this$props = _this.props,
            status = _this$props.status,
            value = _this$props.value,
            onBecomeEmpty = _this$props.onBecomeEmpty,
            onBecomeValid = _this$props.onBecomeValid,
            field = _this$props.field;
        var newStatus = newProps.status,
            newValue = newProps.value;
        if (value !== "" && newValue === "") onBecomeEmpty(field);
        if (status !== "valid" && newStatus === "valid") onBecomeValid(field);
      };

      _this.focus = function () {
        return _this.refs.input.focus();
      };

      _this._onFocus = function () {
        return _this.props.onFocus(_this.props.field);
      };

      _this._onChange = function (value) {
        return _this.props.onChange(_this.props.field, value);
      };

      return _this;
    }

    (0, _createClass2.default)(CCInput, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            label = _this$props2.label,
            value = _this$props2.value,
            placeholder = _this$props2.placeholder,
            status = _this$props2.status,
            keyboardType = _this$props2.keyboardType,
            containerStyle = _this$props2.containerStyle,
            inputStyle = _this$props2.inputStyle,
            labelStyle = _this$props2.labelStyle,
            validColor = _this$props2.validColor,
            invalidColor = _this$props2.invalidColor,
            placeholderColor = _this$props2.placeholderColor,
            additionalInputProps = _this$props2.additionalInputProps;
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: this.focus,
          activeOpacity: 0.99
        }, _react.default.createElement(_reactNative.View, {
          style: [containerStyle]
        }, !!label && _react.default.createElement(_reactNative.Text, {
          style: [labelStyle]
        }, label), _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({
          ref: "input"
        }, additionalInputProps, {
          keyboardType: keyboardType,
          autoCapitalise: "words",
          autoCorrect: false,
          style: [s.baseInputStyle, inputStyle, validColor && status === "valid" ? {
            color: validColor
          } : invalidColor && status === "invalid" ? {
            color: invalidColor
          } : {}],
          underlineColorAndroid: "transparent",
          placeholderTextColor: placeholderColor,
          placeholder: placeholder,
          value: value,
          onFocus: this._onFocus,
          onChangeText: this._onChange
        }))));
      }
    }]);
    return CCInput;
  }(_react.Component);

  exports.default = CCInput;
  CCInput.propTypes = {
    field: _propTypes.default.string.isRequired,
    label: _propTypes.default.string,
    value: _propTypes.default.string,
    placeholder: _propTypes.default.string,
    keyboardType: _propTypes.default.string,
    status: _propTypes.default.oneOf(["valid", "invalid", "incomplete"]),
    containerStyle: _reactNative.ViewPropTypes.style,
    inputStyle: _reactNative.Text.propTypes.style,
    labelStyle: _reactNative.Text.propTypes.style,
    validColor: _propTypes.default.string,
    invalidColor: _propTypes.default.string,
    placeholderColor: _propTypes.default.string,
    onFocus: _propTypes.default.func,
    onChange: _propTypes.default.func,
    onBecomeEmpty: _propTypes.default.func,
    onBecomeValid: _propTypes.default.func,
    additionalInputProps: _propTypes.default.shape(_reactNative.TextInput.propTypes)
  };
  CCInput.defaultProps = {
    label: "",
    value: "",
    status: "incomplete",
    containerStyle: {},
    inputStyle: {},
    labelStyle: {},
    onFocus: function onFocus() {},
    onChange: function onChange() {},
    onBecomeEmpty: function onBecomeEmpty() {},
    onBecomeValid: function onBecomeValid() {},
    additionalInputProps: {}
  };
},855,[361,1,8,19,20,27,30,33,46,793,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _Icons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _CCInput = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _connectToState = _$$_REQUIRE(_dependencyMap[14]);

  var INFINITE_WIDTH = 1000;

  var s = _reactNative.StyleSheet.create({
    container: {
      paddingLeft: 10,
      paddingRight: 10,
      flexDirection: "row",
      alignItems: "center",
      overflow: "hidden"
    },
    icon: {
      width: 48,
      height: 40,
      resizeMode: "contain"
    },
    expanded: {
      flex: 1
    },
    hidden: {
      width: 0
    },
    leftPart: {
      overflow: "hidden"
    },
    rightPart: {
      overflow: "hidden",
      flexDirection: "row"
    },
    last4: {
      flex: 1,
      justifyContent: "center"
    },
    numberInput: {
      width: INFINITE_WIDTH
    },
    expiryInput: {
      width: 80
    },
    cvcInput: {
      width: 80
    },
    last4Input: {
      width: 60,
      marginLeft: 20
    },
    input: {
      height: 40,
      color: "black"
    }
  });

  var LiteCreditCardInput = function (_Component) {
    (0, _inherits2.default)(LiteCreditCardInput, _Component);

    function LiteCreditCardInput() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, LiteCreditCardInput);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(LiteCreditCardInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.componentDidMount = function () {
        return _this._focus(_this.props.focused);
      };

      _this.componentWillReceiveProps = function (newProps) {
        if (_this.props.focused !== newProps.focused) _this._focus(newProps.focused);
      };

      _this._focusNumber = function () {
        return _this._focus("number");
      };

      _this._focusExpiry = function () {
        return _this._focus("expiry");
      };

      _this._focus = function (field) {
        if (!field) return;

        _this.refs[field].focus();

        _reactNative.LayoutAnimation.easeInEaseOut();
      };

      _this._inputProps = function (field) {
        var _this$props = _this.props,
            inputStyle = _this$props.inputStyle,
            validColor = _this$props.validColor,
            invalidColor = _this$props.invalidColor,
            placeholderColor = _this$props.placeholderColor,
            placeholders = _this$props.placeholders,
            values = _this$props.values,
            status = _this$props.status,
            onFocus = _this$props.onFocus,
            onChange = _this$props.onChange,
            onBecomeEmpty = _this$props.onBecomeEmpty,
            onBecomeValid = _this$props.onBecomeValid,
            additionalInputsProps = _this$props.additionalInputsProps;
        return {
          inputStyle: [s.input, inputStyle],
          validColor: validColor,
          invalidColor: invalidColor,
          placeholderColor: placeholderColor,
          ref: field,
          field: field,
          placeholder: placeholders[field],
          value: values[field],
          status: status[field],
          onFocus: onFocus,
          onChange: onChange,
          onBecomeEmpty: onBecomeEmpty,
          onBecomeValid: onBecomeValid,
          additionalInputProps: additionalInputsProps[field]
        };
      };

      _this._iconToShow = function () {
        var _this$props2 = _this.props,
            focused = _this$props2.focused,
            type = _this$props2.values.type;
        if (focused === "cvc" && type === "american-express") return "cvc_amex";
        if (focused === "cvc") return "cvc";
        if (type) return type;
        return "placeholder";
      };

      return _this;
    }

    (0, _createClass2.default)(LiteCreditCardInput, [{
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            focused = _this$props3.focused,
            number = _this$props3.values.number,
            inputStyle = _this$props3.inputStyle,
            numberStatus = _this$props3.status.number;
        var showRightPart = focused && focused !== "number";
        return _react.default.createElement(_reactNative.View, {
          style: s.container
        }, _react.default.createElement(_reactNative.View, {
          style: [s.leftPart, showRightPart ? s.hidden : s.expanded]
        }, _react.default.createElement(_CCInput.default, (0, _extends2.default)({}, this._inputProps("number"), {
          keyboardType: "numeric",
          containerStyle: s.numberInput
        }))), _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: showRightPart ? this._focusNumber : this._focusExpiry
        }, _react.default.createElement(_reactNative.Image, {
          style: s.icon,
          source: _Icons.default[this._iconToShow()]
        })), _react.default.createElement(_reactNative.View, {
          style: [s.rightPart, showRightPart ? s.expanded : s.hidden]
        }, _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: this._focusNumber,
          style: s.last4
        }, _react.default.createElement(_reactNative.View, {
          pointerEvents: "none"
        }, _react.default.createElement(_CCInput.default, {
          field: "last4",
          keyboardType: "numeric",
          value: numberStatus === "valid" ? number.substr(number.length - 4, 4) : "",
          inputStyle: [s.input, inputStyle],
          containerStyle: [s.last4Input]
        }))), _react.default.createElement(_CCInput.default, (0, _extends2.default)({}, this._inputProps("expiry"), {
          keyboardType: "numeric",
          containerStyle: s.expiryInput
        })), _react.default.createElement(_CCInput.default, (0, _extends2.default)({}, this._inputProps("cvc"), {
          keyboardType: "numeric",
          containerStyle: s.cvcInput
        }))));
      }
    }]);
    return LiteCreditCardInput;
  }(_react.Component);

  exports.default = LiteCreditCardInput;
  LiteCreditCardInput.propTypes = (0, _objectSpread2.default)({}, _connectToState.InjectedProps, {
    placeholders: _propTypes.default.object,
    inputStyle: _reactNative.Text.propTypes.style,
    validColor: _propTypes.default.string,
    invalidColor: _propTypes.default.string,
    placeholderColor: _propTypes.default.string,
    additionalInputsProps: _propTypes.default.objectOf(_propTypes.default.shape(_reactNative.TextInput.propTypes))
  });
  LiteCreditCardInput.defaultProps = {
    placeholders: {
      number: "1234 5678 1234 5678",
      expiry: "MM/YY",
      cvc: "CVC"
    },
    validColor: "",
    invalidColor: "red",
    placeholderColor: "gray",
    additionalInputsProps: {}
  };
},856,[361,1,43,8,19,20,27,30,33,46,793,2,840,855,792]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.okAlert = okAlert;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  function okAlert(title, message) {
    _reactNative.Alert.alert(title, message, [{
      text: 'OK',
      onPress: function onPress() {}
    }], {
      cancelable: false
    });
  }
},857,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TCGetBillingID = TCGetBillingID;
  exports.TCSinglePayment = TCSinglePayment;
  exports.TCRepeatablePayment = TCRepeatablePayment;
  exports.storeBillingID = storeBillingID;
  exports.storeLastFour = storeLastFour;
  exports.storeCardholder = storeCardholder;
  exports.getSavedBillingID = getSavedBillingID;
  exports.getSavedLastFour = getSavedLastFour;
  exports.getCardholder = getCardholder;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  function TCGetBillingID(paymentInfo) {
    var resp;
    return _regenerator.default.async(function TCGetBillingID$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(fetch("http://fsfmobile0p.fsf.org:8080/payment/register", {
              method: "POST",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify(paymentInfo)
            }));

          case 2:
            resp = _context.sent;

            if (!(resp.status >= 400)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", Promise.reject(new Error('Call to TC to get billing id returned status code >= 400')));

          case 7:
            return _context.abrupt("return", resp.json());

          case 8:
          case "end":
            return _context.stop();
        }
      }
    });
  }

  function TCSinglePayment(paymentInfo) {
    var resp;
    return _regenerator.default.async(function TCSinglePayment$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(fetch("http://fsfmobile0p.fsf.org:8080/payment/pay", {
              method: "POST",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify(paymentInfo)
            }));

          case 2:
            resp = _context2.sent;

            if (!(resp.status >= 400)) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return", Promise.reject(new Error('Call to TC for single payment returned status code >= 400')));

          case 7:
            return _context2.abrupt("return", resp.json());

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    });
  }

  function TCRepeatablePayment(paymentInfo) {
    var resp;
    return _regenerator.default.async(function TCRepeatablePayment$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _regenerator.default.awrap(fetch("http://fsfmobile0p.fsf.org:8080/payment/repeat_pay", {
              method: "POST",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify(paymentInfo)
            }));

          case 2:
            resp = _context3.sent;

            if (!(resp.status >= 400)) {
              _context3.next = 7;
              break;
            }

            return _context3.abrupt("return", Promise.reject(new Error('Call to TC for repeatable payment returned status code >= 400')));

          case 7:
            return _context3.abrupt("return", resp.json());

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    });
  }

  function storeBillingID(billingID) {
    return _regenerator.default.async(function storeBillingID$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            console.log(billingID);
            _context4.prev = 1;
            _context4.next = 4;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('billingID', billingID));

          case 4:
            _context4.next = 9;
            break;

          case 6:
            _context4.prev = 6;
            _context4.t0 = _context4["catch"](1);
            return _context4.abrupt("return", Promise.reject(new Error('Unexpected error: Failure to save Billing ID to AsyncStorage')));

          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, null, null, [[1, 6]]);
  }

  function storeLastFour(digits) {
    return _regenerator.default.async(function storeLastFour$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            _context5.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('lastFour', digits));

          case 3:
            _context5.next = 8;
            break;

          case 5:
            _context5.prev = 5;
            _context5.t0 = _context5["catch"](0);
            return _context5.abrupt("return", Promise.reject(new Error('Unexpected error: Failure to save CC digits to AsyncStorage')));

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, null, null, [[0, 5]]);
  }

  function storeCardholder(name) {
    return _regenerator.default.async(function storeCardholder$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.prev = 0;
            _context6.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('cardholder', name));

          case 3:
            _context6.next = 8;
            break;

          case 5:
            _context6.prev = 5;
            _context6.t0 = _context6["catch"](0);
            return _context6.abrupt("return", Promise.reject(new Error('Unexpected error: Failure to save CC digits to AsyncStorage')));

          case 8:
          case "end":
            return _context6.stop();
        }
      }
    }, null, null, [[0, 5]]);
  }

  function getSavedBillingID() {
    var billingID;
    return _regenerator.default.async(function getSavedBillingID$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.prev = 0;
            _context7.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('billingID'));

          case 3:
            billingID = _context7.sent;
            return _context7.abrupt("return", billingID);

          case 7:
            _context7.prev = 7;
            _context7.t0 = _context7["catch"](0);
            return _context7.abrupt("return", null);

          case 10:
          case "end":
            return _context7.stop();
        }
      }
    }, null, null, [[0, 7]]);
  }

  ;

  function getSavedLastFour() {
    var lastFour;
    return _regenerator.default.async(function getSavedLastFour$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.prev = 0;
            _context8.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('lastFour'));

          case 3:
            lastFour = _context8.sent;
            return _context8.abrupt("return", lastFour);

          case 7:
            _context8.prev = 7;
            _context8.t0 = _context8["catch"](0);
            return _context8.abrupt("return", Promise.reject(new Error("CC digits not found")));

          case 10:
          case "end":
            return _context8.stop();
        }
      }
    }, null, null, [[0, 7]]);
  }

  ;

  function getCardholder() {
    var name;
    return _regenerator.default.async(function getCardholder$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.prev = 0;
            _context9.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('cardholder'));

          case 3:
            name = _context9.sent;
            return _context9.abrupt("return", name);

          case 7:
            _context9.prev = 7;
            _context9.t0 = _context9["catch"](0);
            return _context9.abrupt("return", Promise.reject(new Error("No cardholder name saved")));

          case 10:
          case "end":
            return _context9.stop();
        }
      }
    }, null, null, [[0, 7]]);
  }

  ;
},858,[1,129,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLoginTicket = getLoginTicket;
  exports.casLogin = casLogin;
  exports.getCiviCRMApiKey = getCiviCRMApiKey;
  exports.storeApiKey = storeApiKey;
  exports.storeId = storeId;
  exports.getStoredApiKey = getStoredApiKey;
  exports.getStoredId = getStoredId;
  exports.guestLogin = guestLogin;
  exports.isGuestLoggedIn = isGuestLoggedIn;
  exports.guestLogOut = guestLogOut;
  exports.userLogOut = userLogOut;
  exports.storeEmail = storeEmail;
  exports.getStoredEmail = getStoredEmail;
  exports.login = login;
  exports.getUserInfo = getUserInfo;
  exports.storeUserInfo = storeUserInfo;
  exports.getStoredUserInfo = getStoredUserInfo;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _routes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _network = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var user_info_key = 'user_info';

  function getLoginTicket() {
    var resp, ticketRegex, match;
    return _regenerator.default.async(function getLoginTicket$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(fetch('https://cas.fsf.org/login?service=https%3A%2F%2Fcrmserver3d.fsf.org%2Fassociate%2Faccount'));

          case 2:
            resp = _context.sent;

            if (resp.ok) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", Promise.reject(new Error('Server error when getting login token')));

          case 5:
            ticketRegex = /"LT-[^"]*"/g;
            _context.t0 = ticketRegex;
            _context.next = 9;
            return _regenerator.default.awrap(resp.text());

          case 9:
            _context.t1 = _context.sent;
            match = _context.t0.exec.call(_context.t0, _context.t1);

            if (!(match == null)) {
              _context.next = 18;
              break;
            }

            _context.t2 = console;
            _context.next = 15;
            return _regenerator.default.awrap(resp.text());

          case 15:
            _context.t3 = _context.sent;

            _context.t2.log.call(_context.t2, _context.t3);

            return _context.abrupt("return", Promise.reject(new Error('Did not find a LT- match in CAS login page. Already logged in?')));

          case 18:
            return _context.abrupt("return", match[0].replace(/"/g, ''));

          case 19:
          case "end":
            return _context.stop();
        }
      }
    });
  }

  function casLogin(email, password, loginTicket) {
    var formData, resp, ticketRegex, body, match, headers, url, _ticketRegex, _match;

    return _regenerator.default.async(function casLogin$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            formData = new FormData();
            formData.append('username', email);
            formData.append('password', password);
            formData.append('lt', loginTicket);
            formData.append('service', 'https://crmserver3d.fsf.org/associate/account');
            _context2.next = 7;
            return _regenerator.default.awrap(fetch('https://cas.fsf.org/login', {
              method: 'POST',
              redirect: 'error',
              credentials: 'include',
              body: formData
            }));

          case 7:
            resp = _context2.sent;

            if (!(resp.status >= 400)) {
              _context2.next = 13;
              break;
            }

            console.log(resp.status);
            console.log(loginTicket);
            console.log(formData);
            return _context2.abrupt("return", Promise.reject(new Error('Login failed or server error')));

          case 13:
            if (!(resp.status == 200)) {
              _context2.next = 23;
              break;
            }

            ticketRegex = /ST-[^&]*&/g;
            _context2.next = 17;
            return _regenerator.default.awrap(resp.text());

          case 17:
            body = _context2.sent.replace(/&amp;/g, '&');
            match = ticketRegex.exec(body);

            if (!(match != null)) {
              _context2.next = 21;
              break;
            }

            return _context2.abrupt("return", match[0].substring(0, match[0].length - 1));

          case 21:
            _context2.next = 31;
            break;

          case 23:
            if (!(resp.status > 300)) {
              _context2.next = 31;
              break;
            }

            headers = resp.headers.headers;

            if (!headers.has('Location')) {
              _context2.next = 31;
              break;
            }

            url = headers.get('Location');
            _ticketRegex = /ST-[^&]*/g;
            _match = _ticketRegex.exec(url);

            if (!(_match != null)) {
              _context2.next = 31;
              break;
            }

            return _context2.abrupt("return", _match[0]);

          case 31:
            return _context2.abrupt("return", Promise.reject(new Error('Did not find Service Token in response')));

          case 32:
          case "end":
            return _context2.stop();
        }
      }
    });
  }

  function getCiviCRMApiKey(serviceTicket) {
    var resp;
    return _regenerator.default.async(function getCiviCRMApiKey$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _regenerator.default.awrap(fetch(_network.default.LOGIN_URL + _routes.default.login, {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                st: serviceTicket
              })
            }));

          case 2:
            resp = _context3.sent;

            if (!(resp.status >= 400)) {
              _context3.next = 5;
              break;
            }

            return _context3.abrupt("return", Promise.reject(new Error('Failed to get CiviCRM api key')));

          case 5:
            return _context3.abrupt("return", resp.json());

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    });
  }

  function getUserInfo(key) {
    var resp;
    return _regenerator.default.async(function getUserInfo$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _regenerator.default.awrap(fetch(_network.default.LOGIN_URL + _routes.default.user_info, {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(key)
            }));

          case 2:
            resp = _context4.sent;

            if (!(resp.status >= 400)) {
              _context4.next = 5;
              break;
            }

            return _context4.abrupt("return", Promise.reject(new Error('Failed to get user info')));

          case 5:
            return _context4.abrupt("return", resp.json());

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    });
  }

  function getStoredApiKey() {
    var key;
    return _regenerator.default.async(function getStoredApiKey$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            _context5.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('apikey'));

          case 3:
            key = _context5.sent;

            if (!(key != null)) {
              _context5.next = 8;
              break;
            }

            return _context5.abrupt("return", key);

          case 8:
            return _context5.abrupt("return", Promise.reject(new Error('API Key not found')));

          case 9:
            _context5.next = 14;
            break;

          case 11:
            _context5.prev = 11;
            _context5.t0 = _context5["catch"](0);
            return _context5.abrupt("return", Promise.reject(new Error('API Key not found')));

          case 14:
          case "end":
            return _context5.stop();
        }
      }
    }, null, null, [[0, 11]]);
  }

  function getStoredId() {
    var id;
    return _regenerator.default.async(function getStoredId$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.prev = 0;
            _context6.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('id'));

          case 3:
            id = _context6.sent;

            if (!(id != null)) {
              _context6.next = 8;
              break;
            }

            return _context6.abrupt("return", id);

          case 8:
            return _context6.abrupt("return", Promise.reject(new Error('User Id not found')));

          case 9:
            _context6.next = 14;
            break;

          case 11:
            _context6.prev = 11;
            _context6.t0 = _context6["catch"](0);
            return _context6.abrupt("return", Promise.reject(new Error('User Id not found')));

          case 14:
          case "end":
            return _context6.stop();
        }
      }
    }, null, null, [[0, 11]]);
  }

  function getStoredEmail() {
    var email;
    return _regenerator.default.async(function getStoredEmail$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.prev = 0;
            _context7.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('email'));

          case 3:
            email = _context7.sent;

            if (!(email != null)) {
              _context7.next = 8;
              break;
            }

            return _context7.abrupt("return", email);

          case 8:
            return _context7.abrupt("return", Promise.reject(new Error('Email not found')));

          case 9:
            _context7.next = 14;
            break;

          case 11:
            _context7.prev = 11;
            _context7.t0 = _context7["catch"](0);
            return _context7.abrupt("return", Promise.reject(new Error('Email not found')));

          case 14:
          case "end":
            return _context7.stop();
        }
      }
    }, null, null, [[0, 11]]);
  }

  function getStoredUserInfo() {
    var userInfoString, userInfo;
    return _regenerator.default.async(function getStoredUserInfo$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.prev = 0;
            _context8.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem(user_info_key));

          case 3:
            userInfoString = _context8.sent;
            userInfo = JSON.parse(userInfoString);

            if (!(userInfo != null)) {
              _context8.next = 9;
              break;
            }

            return _context8.abrupt("return", userInfo);

          case 9:
            return _context8.abrupt("return", Promise.reject(new Error('User info not found')));

          case 10:
            _context8.next = 15;
            break;

          case 12:
            _context8.prev = 12;
            _context8.t0 = _context8["catch"](0);
            return _context8.abrupt("return", Promise.reject(new Error('User info not found')));

          case 15:
          case "end":
            return _context8.stop();
        }
      }
    }, null, null, [[0, 12]]);
  }

  function storeApiKey(key) {
    return _regenerator.default.async(function storeApiKey$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.prev = 0;
            _context9.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('apikey', key));

          case 3:
            _context9.next = 9;
            break;

          case 5:
            _context9.prev = 5;
            _context9.t0 = _context9["catch"](0);
            console.log('Unexpected: fail to save APIKey to async storage');
            console.log(_context9.t0);

          case 9:
          case "end":
            return _context9.stop();
        }
      }
    }, null, null, [[0, 5]]);
  }

  function storeId(id) {
    return _regenerator.default.async(function storeId$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.prev = 0;
            _context10.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('id', id));

          case 3:
            _context10.next = 9;
            break;

          case 5:
            _context10.prev = 5;
            _context10.t0 = _context10["catch"](0);
            console.log('Unexpected: fail to save Id to async storage');
            console.log(_context10.t0);

          case 9:
          case "end":
            return _context10.stop();
        }
      }
    }, null, null, [[0, 5]]);
  }

  function storeEmail(email) {
    return _regenerator.default.async(function storeEmail$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.prev = 0;
            _context11.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('email', email));

          case 3:
            _context11.next = 9;
            break;

          case 5:
            _context11.prev = 5;
            _context11.t0 = _context11["catch"](0);
            console.log('Unexpected: fail to save Email to async storage');
            console.log(_context11.t0);

          case 9:
          case "end":
            return _context11.stop();
        }
      }
    }, null, null, [[0, 5]]);
  }

  function guestLogin() {
    return _regenerator.default.async(function guestLogin$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.prev = 0;
            _context12.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('guestLogin', 'True'));

          case 3:
            _context12.next = 8;
            break;

          case 5:
            _context12.prev = 5;
            _context12.t0 = _context12["catch"](0);
            console.log(_context12.t0);

          case 8:
          case "end":
            return _context12.stop();
        }
      }
    }, null, null, [[0, 5]]);
  }

  function isGuestLoggedIn() {
    var id;
    return _regenerator.default.async(function isGuestLoggedIn$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.prev = 0;
            _context13.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('guestLogin'));

          case 3:
            id = _context13.sent;

            if (!(id != null)) {
              _context13.next = 8;
              break;
            }

            return _context13.abrupt("return", id);

          case 8:
            return _context13.abrupt("return", Promise.reject(new Error('Guest not logged in')));

          case 9:
            _context13.next = 14;
            break;

          case 11:
            _context13.prev = 11;
            _context13.t0 = _context13["catch"](0);
            return _context13.abrupt("return", Promise.reject(new Error('Some other error')));

          case 14:
          case "end":
            return _context13.stop();
        }
      }
    }, null, null, [[0, 11]]);
  }

  function guestLogOut() {
    return _regenerator.default.async(function guestLogOut$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.prev = 0;
            _context14.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.removeItem('guestLogin'));

          case 3:
            return _context14.abrupt("return", true);

          case 6:
            _context14.prev = 6;
            _context14.t0 = _context14["catch"](0);
            return _context14.abrupt("return", Promise.reject(new Error("Guest failed to log out")));

          case 9:
          case "end":
            return _context14.stop();
        }
      }
    }, null, null, [[0, 6]]);
  }

  function userLogOut() {
    return _regenerator.default.async(function userLogOut$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.prev = 0;
            _context15.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.removeItem('id'));

          case 3:
            return _context15.abrupt("return", true);

          case 6:
            _context15.prev = 6;
            _context15.t0 = _context15["catch"](0);
            return _context15.abrupt("return", Promise.reject(new Error('Fail')));

          case 9:
          case "end":
            return _context15.stop();
        }
      }
    }, null, null, [[0, 6]]);
  }

  function login(email, password) {
    var loginTicket, serviceTicket, apiKey;
    return _regenerator.default.async(function login$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.prev = 0;
            _context16.next = 3;
            return _regenerator.default.awrap(getLoginTicket());

          case 3:
            loginTicket = _context16.sent;
            _context16.next = 6;
            return _regenerator.default.awrap(casLogin(email, password, loginTicket));

          case 6:
            serviceTicket = _context16.sent;
            _context16.next = 9;
            return _regenerator.default.awrap(getCiviCRMApiKey(serviceTicket));

          case 9:
            apiKey = _context16.sent;
            _context16.next = 12;
            return _regenerator.default.awrap(storeApiKey(apiKey.key));

          case 12:
            _context16.next = 14;
            return _regenerator.default.awrap(storeId(apiKey.id));

          case 14:
            _context16.next = 16;
            return _regenerator.default.awrap(storeEmail(apiKey.email));

          case 16:
            return _context16.abrupt("return", apiKey);

          case 19:
            _context16.prev = 19;
            _context16.t0 = _context16["catch"](0);
            return _context16.abrupt("return", Promise.reject(new Error("Login failed")));

          case 22:
          case "end":
            return _context16.stop();
        }
      }
    }, null, null, [[0, 19]]);
  }

  function storeUserInfo(key) {
    return _regenerator.default.async(function storeUserInfo$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.prev = 0;
            _context17.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem(user_info_key, JSON.stringify(key)));

          case 3:
            _context17.next = 9;
            break;

          case 5:
            _context17.prev = 5;
            _context17.t0 = _context17["catch"](0);
            console.log('Unexpected: fail to save to async storage');
            console.log(_context17.t0);

          case 9:
          case "end":
            return _context17.stop();
        }
      }
    }, null, null, [[0, 5]]);
  }
},859,[1,129,2,860,861]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.APIRoutes = undefined;
  var APIRoutes = {
    messages: "/messages",
    message: "/message/0",
    user_info: "/user/info",
    login: "/login"
  };
  exports.APIRoutes = APIRoutes;
  var _default = APIRoutes;
  exports.default = _default;
},860,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.networkSettings = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  {
    console.log("In Production Environment");
    URL = "http://fsfmobile0p.fsf.org:3000";
    LOGIN_URL = "http://fsfmobile0p.fsf.org:8080";
  }
  var networkSettings = {
    env: "production",
    URL: URL,
    LOGIN_URL: LOGIN_URL
  };
  exports.networkSettings = networkSettings;
  var _default = networkSettings;
  exports.default = _default;
},861,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[8]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var DonateSuccessScreen = function (_BaseScreen) {
    (0, _inherits2.default)(DonateSuccessScreen, _BaseScreen);

    function DonateSuccessScreen(props) {
      var _this;

      (0, _classCallCheck2.default)(this, DonateSuccessScreen);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DonateSuccessScreen).call(this, props));

      _this._toHome = function () {
        var resetAction = _reactNavigation.StackActions.reset({
          index: 0,
          actions: [_reactNavigation.NavigationActions.navigate({
            routeName: 'DonateHome'
          })]
        });

        _this.props.navigation.dispatch(resetAction);

        _this.props.navigation.navigate("NewsHome");
      };

      return _this;
    }

    (0, _createClass2.default)(DonateSuccessScreen, [{
      key: "render",
      value: function render() {
        var navigation = this.props.navigation;
        var amount = navigation.getParam("amount", "no-amount");
        var name = navigation.getParam("cardholder", "no-name");
        return _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            alignItems: "center"
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: {
            fontWeight: "bold",
            fontSize: 20,
            color: "#64696B"
          }
        }, "Thank you ", name, " for your generous donation of $", amount, "!"), _react.default.createElement(_reactNative.Button, {
          onPress: this._toHome,
          title: "close"
        }));
      }
    }]);
    return DonateSuccessScreen;
  }(_BaseScreen2.default);

  var _default = DonateSuccessScreen;
  exports.default = _default;
},862,[1,19,20,27,30,33,46,2,330,469]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _reactNativePaper = _$$_REQUIRE(_dependencyMap[9]);

  var _login = _$$_REQUIRE(_dependencyMap[10]);

  var _alerts = _$$_REQUIRE(_dependencyMap[11]);

  var _colors = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var LoginScreen = function (_BaseScreen) {
    (0, _inherits2.default)(LoginScreen, _BaseScreen);

    function LoginScreen(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LoginScreen);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LoginScreen).call(this, props));

      _this._attemptLogin = function _callee() {
        var apiKey;
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return _regenerator.default.awrap((0, _login.login)(_this.state.email, _this.state.password));

              case 3:
                apiKey = _context.sent;
                (0, _alerts.okAlert)('Login succeeded', apiKey.id + " " + apiKey.key);

                _this.props.navigation.navigate('App');

                _context.next = 12;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                console.log(_context.t0);
                (0, _alerts.okAlert)('Login failed', 'Try again');

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, null, null, [[0, 8]]);
      };

      _this._guestLogin = function _callee2() {
        return _regenerator.default.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _regenerator.default.awrap((0, _login.guestLogin)());

              case 2:
                _this.props.navigation.navigate('App');

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        });
      };

      _this._handleRegister = function _callee3() {
        return _regenerator.default.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _this.props.navigation.navigate('Register');

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        });
      };

      _this.state = {
        email: '',
        password: '',
        result: null,
        componentDidMount: false
      };
      return _this;
    }

    (0, _createClass2.default)(LoginScreen, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (this.state.componentDidMount) {
          return _react.default.createElement(_reactNative.KeyboardAvoidingView, {
            style: styles.container,
            behavior: _reactNative.Platform.OS == 'ios' ? 'padding' : null
          }, _react.default.createElement(_reactNative.View, {
            style: styles.logoContainer
          }, _react.default.createElement(_reactNative.Image, {
            style: {
              marginTop: 80
            },
            source: _$$_REQUIRE(_dependencyMap[14])
          })), _react.default.createElement(_reactNative.View, {
            style: styles.loginContainer
          }, _react.default.createElement(_reactNativePaper.TextInput, {
            style: styles.textInput,
            label: "username",
            autoCapitalize: "none",
            blurOnSubmit: true,
            onChangeText: function onChangeText(text) {
              return _this2.setState({
                email: text
              });
            },
            value: this.state.email
          }), _react.default.createElement(_reactNativePaper.TextInput, {
            style: styles.textInput,
            label: "password",
            onChangeText: function onChangeText(text) {
              return _this2.setState({
                password: text
              });
            },
            value: this.state.password,
            secureTextEntry: true
          }), _react.default.createElement(_reactNativePaper.Button, {
            style: {
              marginTop: 30,
              backgroundColor: _colors.default.buttonGrey
            },
            contentStyle: styles.loginContent,
            mode: "outlined",
            onPress: this._attemptLogin
          }, _react.default.createElement(_reactNative.Text, {
            style: {
              color: _colors.default.textLight,
              fontSize: 18
            }
          }, "Log In")), _react.default.createElement(_reactNativePaper.Button, {
            style: {
              marginTop: 10
            },
            onPress: this._handleRegister
          }, _react.default.createElement(_reactNative.Text, {
            style: {
              color: _colors.default.textGrey,
              fontSize: 14
            }
          }, "Don't have an FSF account?")), _react.default.createElement(_reactNativePaper.Button, {
            onPress: this._guestLogin
          }, _react.default.createElement(_reactNative.Text, {
            style: {
              color: _colors.default.textGrey,
              fontSize: 14
            }
          }, "Continue as guest"))), _react.default.createElement(_reactNative.View, {
            style: {
              flex: 1
            }
          }));
        } else {
          return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, null, "Loading..."));
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        (0, _login.isGuestLoggedIn)().then(function (_) {
          _this3.props.navigation.navigate('App');
        }).catch(function (_) {
          _this3.setState({
            componentDidMount: true
          });
        });
      }
    }]);
    return LoginScreen;
  }(_BaseScreen2.default);

  var styles = _reactNative.StyleSheet.create({
    textInput: {
      backgroundColor: _colors.default.backgroundWhite
    },
    container: {
      flex: 1,
      justifyContent: 'flex-end'
    },
    logoContainer: {
      height: 277,
      backgroundColor: _colors.default.logoGrey,
      alignItems: 'center'
    },
    loginContainer: {
      marginTop: 40,
      marginRight: 40,
      marginLeft: 40
    },
    loginButton: {
      marginTop: 30,
      backgroundColor: _colors.default.buttonGrey
    },
    loginContent: {
      height: 50
    }
  });

  var _default = LoginScreen;
  exports.default = _default;
},863,[1,129,19,20,27,30,33,46,2,476,859,857,787,469,864]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/assets",
    "width": 251,
    "height": 158,
    "scales": [1],
    "hash": "76c4918a20374da617406a8fce0a46c5",
    "name": "fsf_transparent",
    "type": "png"
  });
},864,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var RegisterWebScreen = function (_BaseScreen) {
    (0, _inherits2.default)(RegisterWebScreen, _BaseScreen);

    function RegisterWebScreen() {
      (0, _classCallCheck2.default)(this, RegisterWebScreen);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RegisterWebScreen).apply(this, arguments));
    }

    (0, _createClass2.default)(RegisterWebScreen, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.WebView, {
          source: {
            uri: 'https://my.fsf.org/join'
          },
          injectedJavaScript: "const meta = document.createElement('meta'); meta.setAttribute('content', 'initial-scale=0.5, maximum-scale=0.5, user-scalable=0'); meta.setAttribute('name', 'viewport'); document.getElementsByTagName('head')[0].appendChild(meta); "
        });
      }
    }]);
    return RegisterWebScreen;
  }(_BaseScreen2.default);

  ;
  var _default = RegisterWebScreen;
  exports.default = _default;
},865,[361,1,19,20,27,30,33,46,2,469]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNativeRenderHtml = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var NewsDetailScreen = function (_BaseScreen) {
    (0, _inherits2.default)(NewsDetailScreen, _BaseScreen);

    function NewsDetailScreen(props) {
      var _this;

      (0, _classCallCheck2.default)(this, NewsDetailScreen);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NewsDetailScreen).call(this, props));
      _this.state = {};
      return _this;
    }

    (0, _createClass2.default)(NewsDetailScreen, [{
      key: "render",
      value: function render() {
        var params = this.props.navigation.state.params;
        var articleParams = params ? params.articleParams : null;
        var articleParamsOb = JSON.parse(articleParams);
        var additionalProps = {
          onLinkPress: function onLinkPress(evt, href) {
            _reactNative.Linking.openURL(href);
          },
          baseFontStyle: {
            fontSize: 18
          },
          imagesInitialDimensions: {
            width: _reactNative.Dimensions.get('window').width - 50,
            height: 200
          }
        };
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.View, {
          style: styles.article
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.title
        }, articleParamsOb.title), _react.default.createElement(_reactNative.Text, {
          style: styles.date
        }, articleParamsOb.pub_date.substring(0, 10)), _react.default.createElement(_reactNativeRenderHtml.default, (0, _extends2.default)({
          html: articleParamsOb.content
        }, additionalProps)))));
      }
    }]);
    return NewsDetailScreen;
  }(_BaseScreen2.default);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      width: '100%'
    },
    article: {
      width: '100%',
      paddingLeft: 20,
      paddingRight: 20
    },
    title: {
      marginTop: 10,
      textAlign: 'left',
      fontSize: 24,
      fontWeight: 'bold'
    },
    lead: {
      textAlign: 'left',
      fontSize: 16,
      fontWeight: 'normal',
      marginTop: 10,
      marginBottom: 25
    },
    date: {
      fontSize: 16,
      fontWeight: 'normal',
      marginTop: 10,
      marginBottom: 10
    }
  });

  var _default = NewsDetailScreen;
  exports.default = _default;
},866,[1,8,19,20,27,30,33,46,2,469,867]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _HTML = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _HTML.default;
  exports.default = _default;
},867,[1,868]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _HTMLStyles = _$$_REQUIRE(_dependencyMap[13]);

  var _HTMLUtils = _$$_REQUIRE(_dependencyMap[14]);

  var _HTMLDefaultStyles = _$$_REQUIRE(_dependencyMap[15]);

  var _htmlparser = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var HTMLRenderers = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[17]));

  var HTML = function (_PureComponent) {
    (0, _inherits2.default)(HTML, _PureComponent);

    function HTML(props) {
      var _this;

      (0, _classCallCheck2.default)(this, HTML);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HTML).call(this, props));
      _this.state = {};
      _this.renderers = (0, _objectSpread2.default)({}, HTMLRenderers, _this.props.renderers || {});
      return _this;
    }

    (0, _createClass2.default)(HTML, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.generateDefaultStyles();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.registerDOM();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this$props = this.props,
            html = _this$props.html,
            uri = _this$props.uri,
            renderers = _this$props.renderers;
        this.generateDefaultStyles(nextProps.baseFontStyle);

        if (renderers !== nextProps.renderers) {
          this.renderers = (0, _objectSpread2.default)({}, HTMLRenderers, nextProps.renderers || {});
        }

        if (html !== nextProps.html || uri !== nextProps.uri) {
          this.registerDOM(nextProps);
        } else {
          this.parseDOM(this.state.dom, nextProps);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.state.dom !== prevState.dom) {
          this.parseDOM(this.state.dom);
        }
      }
    }, {
      key: "registerDOM",
      value: function registerDOM() {
        var props,
            cb,
            html,
            uri,
            response,
            _args = arguments;
        return _regenerator.default.async(function registerDOM$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                props = _args.length > 0 && _args[0] !== undefined ? _args[0] : this.props;
                cb = _args.length > 1 ? _args[1] : undefined;
                html = props.html, uri = props.uri;

                if (!html) {
                  _context.next = 7;
                  break;
                }

                this.setState({
                  dom: html,
                  loadingRemoteURL: false,
                  errorLoadingRemoteURL: false
                });
                _context.next = 30;
                break;

              case 7:
                if (!props.uri) {
                  _context.next = 29;
                  break;
                }

                _context.prev = 8;
                _context.prev = 9;
                this.setState({
                  loadingRemoteURL: true,
                  errorLoadingRemoteURL: false
                });
                _context.next = 13;
                return _regenerator.default.awrap(fetch(uri));

              case 13:
                response = _context.sent;
                this.setState({
                  dom: response._bodyText,
                  loadingRemoteURL: false
                });
                _context.next = 21;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](9);
                console.warn(_context.t0);
                this.setState({
                  errorLoadingRemoteURL: true,
                  loadingRemoteURL: false
                });

              case 21:
                _context.next = 27;
                break;

              case 23:
                _context.prev = 23;
                _context.t1 = _context["catch"](8);
                console.warn('react-native-render-html', "Couldn't fetch remote HTML from uri : " + uri);
                return _context.abrupt("return", false);

              case 27:
                _context.next = 30;
                break;

              case 29:
                console.warn('react-native-render-html', 'Please provide the html or uri prop.');

              case 30:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[8, 23], [9, 17]]);
      }
    }, {
      key: "parseDOM",
      value: function parseDOM(dom) {
        var _this2 = this;

        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;
        var _this$props2 = this.props,
            decodeEntities = _this$props2.decodeEntities,
            debug = _this$props2.debug,
            onParsed = _this$props2.onParsed;
        var parser = new _htmlparser.default.Parser(new _htmlparser.default.DomHandler(function (_err, dom) {
          var RNElements = _this2.mapDOMNodesTORNElements(dom, false, props);

          if (onParsed) {
            var alteredRNElements = onParsed(dom, RNElements);

            if (alteredRNElements) {
              RNElements = alteredRNElements;
            }
          }

          _this2.setState({
            RNNodes: _this2.renderRNElements(RNElements, 'root', 0, props)
          });

          if (debug) {
            console.log('DOMNodes from htmlparser2', dom);
            console.log('RNElements from render-html', RNElements);
          }
        }), {
          decodeEntities: decodeEntities
        });
        parser.write(dom);
        parser.done();
      }
    }, {
      key: "generateDefaultStyles",
      value: function generateDefaultStyles() {
        var baseFontStyle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.baseFontStyle;
        this.defaultBlockStyles = (0, _HTMLDefaultStyles.generateDefaultBlockStyles)(baseFontStyle.fontSize || 14);
        this.defaultTextStyles = (0, _HTMLDefaultStyles.generateDefaultTextStyles)(baseFontStyle.fontSize || 14);
      }
    }, {
      key: "childrenNeedAView",
      value: function childrenNeedAView(children) {
        for (var i = 0; i < children.length; i++) {
          if (children[i].wrapper === 'View') {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "wrapperHasTextChild",
      value: function wrapperHasTextChild(children) {
        for (var i = 0; i < children.length; i++) {
          if (children[i].wrapper === 'Text') {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "associateRawTexts",
      value: function associateRawTexts(children) {
        for (var i = 0; i < children.length; i++) {
          var child = children[i];

          if (child.wrapper === 'Text' && _HTMLUtils.TEXT_TAGS_IGNORING_ASSOCIATION.indexOf(child.tagName) === -1 && children.length > 1 && (!child.parent || _HTMLUtils.TEXT_TAGS_IGNORING_ASSOCIATION.indexOf(child.parent.name) === -1)) {
            var wrappedTexts = [];

            for (var j = i; j < children.length; j++) {
              var nextSibling = children[j];

              if (nextSibling.wrapper !== 'Text' || _HTMLUtils.TEXT_TAGS_IGNORING_ASSOCIATION.indexOf(nextSibling.tagName) !== -1) {
                break;
              }

              wrappedTexts.push(nextSibling);
              children[j] = false;
            }

            if (wrappedTexts.length) {
              children[i] = {
                attribs: {},
                children: wrappedTexts,
                nodeIndex: i,
                parent: child.parent,
                parentTag: child.parentTag,
                tagName: 'textwrapper',
                wrapper: 'Text'
              };
            }
          }
        }

        return children.filter(function (parsedNode) {
          return parsedNode !== false && parsedNode !== undefined;
        });
      }
    }, {
      key: "mapDOMNodesTORNElements",
      value: function mapDOMNodesTORNElements(DOMNodes) {
        var _this3 = this;

        var parentTag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props;
        var ignoreNodesFunction = props.ignoreNodesFunction,
            ignoredTags = props.ignoredTags,
            alterNode = props.alterNode,
            alterData = props.alterData,
            alterChildren = props.alterChildren,
            tagsStyles = props.tagsStyles,
            classesStyles = props.classesStyles;
        var RNElements = DOMNodes.map(function (node, nodeIndex) {
          var _node = node,
              children = _node.children,
              data = _node.data;

          if (ignoreNodesFunction && ignoreNodesFunction(node, parentTag) === true) {
            return false;
          }

          if (ignoredTags.map(function (tag) {
            return tag.toLowerCase();
          }).indexOf(node.name && node.name.toLowerCase()) !== -1) {
            return false;
          }

          if (alterNode) {
            var alteredNode = alterNode(node);
            node = alteredNode || node;
          }

          var _node2 = node,
              type = _node2.type,
              attribs = _node2.attribs,
              name = _node2.name,
              parent = _node2.parent;

          if (alterData && data) {
            var alteredData = alterData(node);
            data = alteredData || data;
          }

          if (alterChildren && children) {
            var alteredChildren = alterChildren(node);
            children = alteredChildren || children;
          }

          var strippedData = data && data.replace(/\s/g, '');

          if (type === 'text') {
            if (!strippedData || !strippedData.length) {
              return false;
            }

            return {
              wrapper: 'Text',
              data: data.replace(/(\r\n|\n|\r)/gm, ''),
              attribs: attribs || {},
              parent: parent,
              parentTag: parent && parent.name,
              tagName: name || 'rawtext'
            };
          }

          if (type === 'tag') {
            if (children) {
              children = _this3.associateRawTexts(_this3.mapDOMNodesTORNElements(children, name));
            }

            if (_this3.childrenNeedAView(children) || _HTMLUtils.BLOCK_TAGS.indexOf(name.toLowerCase()) !== -1) {
              return {
                wrapper: 'View',
                children: children,
                attribs: attribs,
                parent: parent,
                tagName: name,
                parentTag: parentTag
              };
            } else if (_HTMLUtils.TEXT_TAGS.indexOf(name.toLowerCase()) !== -1 || _HTMLUtils.MIXED_TAGS.indexOf(name.toLowerCase()) !== -1) {
              return {
                wrapper: 'Text',
                children: children,
                attribs: attribs,
                parent: parent,
                tagName: name,
                parentTag: parentTag
              };
            } else if (_this3.renderers[name] && _this3.renderers[name].wrapper) {
              return {
                wrapper: _this3.renderers[name].wrapper,
                children: children,
                attribs: attribs,
                parent: parent,
                tagName: name,
                parentTag: parentTag
              };
            }

            return {
              wrapper: 'View',
              children: children,
              attribs: attribs,
              parent: parent,
              tagName: name,
              parentTag: parentTag
            };
          }
        }).filter(function (parsedNode) {
          return parsedNode !== false && parsedNode !== undefined;
        }).map(function (parsedNode, nodeIndex) {
          var wrapper = parsedNode.wrapper,
              children = parsedNode.children,
              attribs = parsedNode.attribs,
              tagName = parsedNode.tagName;
          var firstChild = children && children[0];

          if (firstChild && children.length === 1) {
            if ((attribs === firstChild.attribs || !firstChild.attribs) && firstChild.wrapper === wrapper && (tagName === firstChild.tagName || firstChild.tagName === 'rawtext')) {
              return (0, _objectSpread2.default)({}, parsedNode, {
                attribs: (0, _objectSpread2.default)({}, attribs, firstChild.attribs),
                data: firstChild.data,
                children: [],
                tagName: tagName,
                nodeIndex: nodeIndex
              });
            }
          }

          return (0, _objectSpread2.default)({}, parsedNode, {
            nodeIndex: nodeIndex
          });
        }).map(function (parsedNode, nodeIndex) {
          var wrapper = parsedNode.wrapper,
              attribs = parsedNode.attribs,
              tagName = parsedNode.tagName,
              children = parsedNode.children;

          if (wrapper === 'View' && attribs && _this3.wrapperHasTextChild(children)) {
            var wrapperStyles = (0, _objectSpread2.default)({}, tagsStyles[tagName] || {}, (0, _HTMLStyles._getElementClassStyles)(attribs, classesStyles), (0, _HTMLStyles.cssStringToObject)(attribs.style || ''));
            var textChildrenInheritedStyles = {};
            Object.keys(wrapperStyles).forEach(function (styleKey) {
              if (_HTMLUtils.TextOnlyPropTypes[styleKey]) {
                textChildrenInheritedStyles[styleKey] = wrapperStyles[styleKey];
                delete wrapperStyles[styleKey];
              }
            });

            if (Object.keys(textChildrenInheritedStyles).length === 0) {
              return parsedNode;
            }

            parsedNode.attribs.style = (0, _HTMLStyles.cssObjectToString)(wrapperStyles);

            for (var i = 0; i < children.length; i++) {
              var child = children[i];
              var _wrapper = child.wrapper,
                  _attribs = child.attribs;

              if (_wrapper === 'Text') {
                if (!_attribs.style) {
                  child.attribs.style = (0, _HTMLStyles.cssObjectToString)(textChildrenInheritedStyles);
                } else {
                  child.attribs.style = (0, _HTMLStyles.cssObjectToString)((0, _objectSpread2.default)({}, textChildrenInheritedStyles, (0, _HTMLStyles.cssStringToObject)(child.attribs.style)));
                }
              }
            }
          }

          return parsedNode;
        });
        return this.associateRawTexts(RNElements);
      }
    }, {
      key: "renderRNElements",
      value: function renderRNElements(RNElements) {
        var _this4 = this;

        var parentWrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'root';
        var parentIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.props;
        var tagsStyles = props.tagsStyles,
            classesStyles = props.classesStyles,
            emSize = props.emSize,
            ptSize = props.ptSize,
            ignoredStyles = props.ignoredStyles,
            allowedStyles = props.allowedStyles,
            baseFontStyle = props.baseFontStyle;
        return RNElements && RNElements.length ? RNElements.map(function (element, index) {
          var attribs = element.attribs,
              data = element.data,
              tagName = element.tagName,
              parentTag = element.parentTag,
              children = element.children,
              nodeIndex = element.nodeIndex,
              wrapper = element.wrapper;
          var Wrapper = wrapper === 'Text' ? _reactNative.Text : _reactNative.View;
          var key = wrapper + "-" + parentIndex + "-" + nodeIndex + "-" + tagName + "-" + index + "-" + parentTag;
          var convertedCSSStyles = attribs && attribs.style ? (0, _HTMLStyles.cssStringToRNStyle)(attribs.style, Wrapper === _reactNative.Text ? _HTMLUtils.STYLESETS.TEXT : _HTMLUtils.STYLESETS.VIEW, {
            parentTag: tagName,
            emSize: emSize,
            ptSize: ptSize,
            ignoredStyles: ignoredStyles,
            allowedStyles: allowedStyles
          }) : {};
          var childElements = children && children.length ? children.map(function (child, childIndex) {
            return _this4.renderRNElements([child], wrapper, index, props);
          }) : false;

          if (_this4.renderers[tagName]) {
            var customRenderer = typeof _this4.renderers[tagName] === 'function' ? _this4.renderers[tagName] : _this4.renderers[tagName].renderer;

            if (!customRenderer || typeof customRenderer !== 'function') {
              console.warn("Custom renderer for " + tagName + " supplied incorrectly. Please check out the docs.");
              return undefined;
            }

            return customRenderer(attribs, childElements, convertedCSSStyles, (0, _objectSpread2.default)({}, props, {
              parentWrapper: wrapper,
              parentTag: parentTag,
              nodeIndex: nodeIndex,
              parentIndex: parentIndex,
              key: key,
              data: data,
              rawChildren: children
            }));
          }

          var classStyles = (0, _HTMLStyles._getElementClassStyles)(attribs, classesStyles);
          var textElement = data ? _react.default.createElement(_reactNative.Text, {
            style: (0, _HTMLStyles.computeTextStyles)(element, {
              defaultTextStyles: _this4.defaultTextStyles,
              tagsStyles: tagsStyles,
              classesStyles: classesStyles,
              baseFontStyle: baseFontStyle,
              emSize: emSize,
              ptSize: ptSize,
              ignoredStyles: ignoredStyles,
              allowedStyles: allowedStyles
            })
          }, data) : false;
          var style = [!tagsStyles || !tagsStyles[tagName] ? (Wrapper === _reactNative.Text ? _this4.defaultTextStyles : _this4.defaultBlockStyles)[tagName] : undefined, tagsStyles ? tagsStyles[tagName] : undefined, classStyles, convertedCSSStyles].filter(function (s) {
            return s !== undefined;
          });
          var renderersProps = {};

          if (Wrapper === _reactNative.Text) {
            renderersProps.selectable = _this4.props.textSelectable;
          }

          return _react.default.createElement(Wrapper, (0, _extends2.default)({
            key: key,
            style: style
          }, renderersProps), textElement, childElements);
        }) : false;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            customWrapper = _this$props3.customWrapper,
            remoteLoadingView = _this$props3.remoteLoadingView,
            remoteErrorView = _this$props3.remoteErrorView;
        var _this$state = this.state,
            RNNodes = _this$state.RNNodes,
            loadingRemoteURL = _this$state.loadingRemoteURL,
            errorLoadingRemoteURL = _this$state.errorLoadingRemoteURL;

        if (!RNNodes && !loadingRemoteURL) {
          return false;
        } else if (loadingRemoteURL) {
          return remoteLoadingView ? remoteLoadingView(this.props, this.state) : _react.default.createElement(_reactNative.View, {
            style: {
              flex: 1,
              alignItems: 'center'
            }
          }, _react.default.createElement(_reactNative.ActivityIndicator, null));
        } else if (errorLoadingRemoteURL) {
          return remoteErrorView ? remoteErrorView(this.props, this.state) : _react.default.createElement(_reactNative.View, {
            style: {
              flex: 1,
              alignItems: 'center'
            }
          }, _react.default.createElement(_reactNative.Text, {
            style: {
              fontStyle: 'italic',
              fontSize: 16
            }
          }, "Could not load ", this.props.uri));
        }

        return customWrapper ? customWrapper(RNNodes) : _react.default.createElement(_reactNative.View, {
          style: this.props.containerStyle || {}
        }, RNNodes);
      }
    }]);
    return HTML;
  }(_react.PureComponent);

  exports.default = HTML;
  HTML.propTypes = {
    renderers: _propTypes.default.object.isRequired,
    ignoredTags: _propTypes.default.array.isRequired,
    ignoredStyles: _propTypes.default.array.isRequired,
    allowedStyles: _propTypes.default.array,
    decodeEntities: _propTypes.default.bool.isRequired,
    debug: _propTypes.default.bool.isRequired,
    listsPrefixesRenderers: _propTypes.default.object,
    ignoreNodesFunction: _propTypes.default.func,
    alterData: _propTypes.default.func,
    alterChildren: _propTypes.default.func,
    alterNode: _propTypes.default.func,
    html: _propTypes.default.string,
    uri: _propTypes.default.string,
    tagsStyles: _propTypes.default.object,
    classesStyles: _propTypes.default.object,
    containerStyle: _reactNative.ViewPropTypes ? _reactNative.ViewPropTypes.style : _reactNative.View.propTypes.style,
    customWrapper: _propTypes.default.func,
    onLinkPress: _propTypes.default.func,
    onParsed: _propTypes.default.func,
    imagesMaxWidth: _propTypes.default.number,
    staticContentMaxWidth: _propTypes.default.number,
    imagesInitialDimensions: _propTypes.default.shape({
      width: _propTypes.default.number,
      height: _propTypes.default.number
    }),
    emSize: _propTypes.default.number.isRequired,
    ptSize: _propTypes.default.number.isRequired,
    baseFontStyle: _propTypes.default.object.isRequired,
    textSelectable: _propTypes.default.bool,
    renderersProps: _propTypes.default.object
  };
  HTML.defaultProps = {
    renderers: HTMLRenderers,
    debug: false,
    decodeEntities: true,
    emSize: 14,
    ptSize: 1.3,
    staticContentMaxWidth: _reactNative.Dimensions.get('window').width,
    imagesMaxWidth: _reactNative.Dimensions.get('window').width,
    ignoredTags: _HTMLUtils.IGNORED_TAGS,
    ignoredStyles: [],
    baseFontStyle: {
      fontSize: 14
    },
    tagsStyles: {},
    classesStyles: {},
    textSelectable: false
  };
},868,[361,1,8,129,43,19,20,27,30,33,46,60,2,869,870,871,873,909]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cssStringToObject = cssStringToObject;
  exports.cssObjectToString = cssObjectToString;
  exports._constructStyles = _constructStyles;
  exports.computeTextStyles = computeTextStyles;
  exports._getElementClassStyles = _getElementClassStyles;
  exports._getElementCSSClasses = _getElementCSSClasses;
  exports.cssStringToRNStyle = cssStringToRNStyle;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _HTMLUtils = _$$_REQUIRE(_dependencyMap[3]);

  var _HTMLDefaultStyles = _$$_REQUIRE(_dependencyMap[4]);

  var _checkPropTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  function cssStringToObject(str) {
    return str.split(';').map(function (prop) {
      return prop.split(':');
    }).reduce(function (acc, prop) {
      if (prop.length === 2) {
        acc[prop[0].trim()] = prop[1].trim();
      }

      return acc;
    }, {});
  }

  function cssObjectToString(obj) {
    var string = '';
    Object.keys(obj).forEach(function (style) {
      string += style + ":" + obj[style] + ";";
    });
    return string;
  }

  function _constructStyles(_ref) {
    var tagName = _ref.tagName,
        htmlAttribs = _ref.htmlAttribs,
        passProps = _ref.passProps,
        additionalStyles = _ref.additionalStyles,
        _ref$styleSet = _ref.styleSet,
        styleSet = _ref$styleSet === undefined ? 'VIEW' : _ref$styleSet,
        baseFontSize = _ref.baseFontSize;
    var defaultTextStyles = (0, _HTMLDefaultStyles.generateDefaultTextStyles)(baseFontSize);
    var defaultBlockStyles = (0, _HTMLDefaultStyles.generateDefaultBlockStyles)(baseFontSize);
    passProps.ignoredStyles.forEach(function (ignoredStyle) {
      htmlAttribs[ignoredStyle] && delete htmlAttribs[ignoredStyle];
    });
    var style = [(styleSet === 'VIEW' ? defaultBlockStyles : defaultTextStyles)[tagName], passProps.tagsStyles ? passProps.tagsStyles[tagName] : undefined, _getElementClassStyles(htmlAttribs, passProps.classesStyles), htmlAttribs.style ? cssStringToRNStyle(htmlAttribs.style, _HTMLUtils.STYLESETS[styleSet], (0, _objectSpread2.default)({}, passProps, {
      parentTag: tagName
    })) : undefined];

    if (additionalStyles) {
      style = style.concat(!additionalStyles.length ? [additionalStyles] : additionalStyles);
    }

    return style.filter(function (style) {
      return style !== undefined;
    });
  }

  function computeTextStyles(element, passProps) {
    var finalStyle = {};

    var parentStyles = _recursivelyComputeParentTextStyles(element, passProps);

    parentStyles.forEach(function (styles) {
      Object.keys(styles).forEach(function (styleKey) {
        var styleValue = styles[styleKey];

        if (!finalStyle[styleKey]) {
          finalStyle[styleKey] = styleValue;
        }
      });
    });
    return (0, _objectSpread2.default)({}, passProps.baseFontStyle, finalStyle);
  }

  function _recursivelyComputeParentTextStyles(element, passProps) {
    var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var attribs = element.attribs,
        name = element.name;
    var classesStyles = passProps.classesStyles,
        tagsStyles = passProps.tagsStyles,
        defaultTextStyles = passProps.defaultTextStyles;
    var HTMLAttribsStyles = attribs && attribs.style ? cssStringToRNStyle(attribs.style, _HTMLUtils.STYLESETS.TEXT, passProps) : {};

    var classStyles = _getElementClassStyles(attribs, classesStyles);

    var userTagStyles = tagsStyles[name];
    var defaultTagStyles = defaultTextStyles[name];
    var mergedStyles = (0, _objectSpread2.default)({}, defaultTagStyles, userTagStyles, classStyles, HTMLAttribsStyles);
    styles.push(mergedStyles);

    if (element.parent) {
      return _recursivelyComputeParentTextStyles(element.parent, passProps, styles);
    } else {
      return styles;
    }
  }

  function _getElementClassStyles(htmlAttribs) {
    var classesStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var elementClasses = _getElementCSSClasses(htmlAttribs);

    var styles = {};
    elementClasses.forEach(function (className) {
      if (classesStyles[className]) {
        styles = (0, _objectSpread2.default)({}, styles, classesStyles[className]);
      }
    });
    return styles;
  }

  function _getElementCSSClasses(htmlAttribs) {
    if (!htmlAttribs || !htmlAttribs.class) {
      return [];
    }

    return htmlAttribs.class.split(' ');
  }

  function cssToRNStyle(css, styleset, _ref2) {
    var emSize = _ref2.emSize,
        ptSize = _ref2.ptSize,
        ignoredStyles = _ref2.ignoredStyles,
        allowedStyles = _ref2.allowedStyles;
    var styleProps = _HTMLUtils.stylePropTypes[styleset];
    return Object.keys(css).filter(function (key) {
      return allowedStyles ? allowedStyles.indexOf(key) !== -1 : true;
    }).filter(function (key) {
      return (ignoredStyles || []).indexOf(key) === -1;
    }).map(function (key) {
      return [key, css[key]];
    }).map(function (_ref3) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          key = _ref4[0],
          value = _ref4[1];

      return [key.split('-').map(function (item, index) {
        return index === 0 ? item : item[0].toUpperCase() + item.substr(1);
      }).join(''), value];
    }).map(function (_ref5) {
      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
          key = _ref6[0],
          value = _ref6[1];

      if (!styleProps[key]) {
        return undefined;
      }

      var testStyle = {};
      testStyle[key] = value;
      var styleProp = {};
      styleProp[key] = styleProps[key];

      if ((0, _checkPropTypes.default)(styleProp, testStyle, key, 'react-native-render-html') == null) {
        if (typeof value === 'string') {
          if (value.search('inherit') !== -1) {
            return undefined;
          }

          value = value.replace('!important', '');

          if (value.search('%') !== -1 && _HTMLUtils.PERC_SUPPORTED_STYLES.indexOf(key) !== -1) {
            return [key, value];
          }

          if (value.search('em') !== -1) {
            var pxSize = parseFloat(value.replace('em', '')) * emSize;
            return [key, pxSize];
          }

          if (value.search('pt') !== -1) {
            var _pxSize = parseFloat(value.replace('pt', '')) * ptSize;

            return [key, _pxSize];
          }

          var numericValue = parseFloat(value.replace('px', ''));

          if (key !== 'fontWeight' && !isNaN(numericValue)) {
            testStyle[key] = numericValue;

            if ((0, _checkPropTypes.default)(styleProp, testStyle, key, 'react-native-render-html') == null) {
              return [key, numericValue];
            }
          }

          if (key === 'fontSize') {
            return mapAbsoluteFontSize(key, value);
          }
        }

        return [key, value];
      }

      return [key, value];
    }).filter(function (prop) {
      return prop !== undefined;
    }).reduce(function (acc, _ref7) {
      var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
          key = _ref8[0],
          value = _ref8[1];

      acc[key] = value;
      return acc;
    }, {});
  }

  function mapAbsoluteFontSize(key, value) {
    var fontSize = value;

    if (_HTMLUtils.ABSOLUTE_FONT_SIZE.hasOwnProperty(value)) {
      fontSize = _HTMLUtils.ABSOLUTE_FONT_SIZE[value];
    }

    return [key, fontSize];
  }

  function cssStringToRNStyle(str) {
    var styleset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _HTMLUtils.STYLESETS.TEXT;
    var options = arguments.length > 2 ? arguments[2] : undefined;
    return cssToRNStyle(cssStringToObject(str), styleset, options);
  }
},869,[1,9,43,870,871,872]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getParentsTagsRecursively = getParentsTagsRecursively;
  exports.getClosestNodeParentByTag = getClosestNodeParentByTag;
  exports.stylePropTypes = exports.STYLESETS = exports.PERC_SUPPORTED_STYLES = exports.IGNORED_TAGS = exports.ABSOLUTE_FONT_SIZE = exports.TEXT_TAGS_IGNORING_ASSOCIATION = exports.MIXED_TAGS = exports.TEXT_TAGS = exports.BLOCK_TAGS = exports.TextOnlyPropTypes = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _TextStylePropTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _ViewStylePropTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ImageStylePropTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var TextOnlyPropTypes = {};
  exports.TextOnlyPropTypes = TextOnlyPropTypes;
  Object.keys(_TextStylePropTypes.default).forEach(function (prop) {
    if (!_ViewStylePropTypes.default[prop]) {
      TextOnlyPropTypes[prop] = _TextStylePropTypes.default[prop];
    }
  });
  var BLOCK_TAGS = ['address', 'article', 'aside', 'footer', 'hgroup', 'nav', 'section', 'blockquote', 'dd', 'dl', 'dt', 'figure', 'hr', 'li', 'main', 'ol', 'ul', 'cite', 'data', 'rp', 'rtc', 'ruby', 'area', 'img', 'map', 'center'];
  exports.BLOCK_TAGS = BLOCK_TAGS;
  var TEXT_TAGS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'figcaption', 'p', 'pre', 'abbr', 'b', 'bdi', 'bdo', 'code', 'dfn', 'i', 'kbd', 'mark', 'q', 'rt', 's', 'samp', 'small', 'big', 'span', 'strong', 'sub', 'sup', 'time', 'u', 'var', 'wbr', 'del', 'ins', 'blink', 'font', 'em', 'bold', 'br'];
  exports.TEXT_TAGS = TEXT_TAGS;
  var MIXED_TAGS = ['a'];
  exports.MIXED_TAGS = MIXED_TAGS;
  var TEXT_TAGS_IGNORING_ASSOCIATION = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
  exports.TEXT_TAGS_IGNORING_ASSOCIATION = TEXT_TAGS_IGNORING_ASSOCIATION;
  var ABSOLUTE_FONT_SIZE = {
    'medium': 14,
    'xx-small': 8.5,
    'x-small': 10,
    'small': 12,
    'large': 17,
    'x-large': 20,
    'xx-large': 24,
    'smaller': 13.3,
    'larger': 16,
    'length': null,
    'initial': null,
    'inherit': null
  };
  exports.ABSOLUTE_FONT_SIZE = ABSOLUTE_FONT_SIZE;
  var IGNORED_TAGS = ['head', 'scripts', 'audio', 'video', 'track', 'embed', 'object', 'param', 'source', 'canvas', 'noscript', 'caption', 'col', 'colgroup', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'button', 'datalist', 'fieldset', 'form', 'input', 'label', 'legend', 'meter', 'optgroup', 'option', 'output', 'progress', 'select', 'textarea', 'details', 'diaglog', 'menu', 'menuitem', 'summary'];
  exports.IGNORED_TAGS = IGNORED_TAGS;
  var PERC_SUPPORTED_STYLES = ['width', 'height', 'top', 'bottom', 'left', 'right', 'margin', 'marginBottom', 'marginTop', 'marginLeft', 'marginRight', 'marginHorizontal', 'marginVertical', 'padding', 'paddingBottom', 'paddingTop', 'paddingLeft', 'paddingRight', 'paddingHorizontal', 'paddingVertical'];
  exports.PERC_SUPPORTED_STYLES = PERC_SUPPORTED_STYLES;
  var RNTextStylePropTypes = Object.keys(_TextStylePropTypes.default).reduce(function (acc, k) {
    acc[k] = _TextStylePropTypes.default[k];
    return acc;
  }, {});
  var RNViewStylePropTypes = Object.keys(_ViewStylePropTypes.default).reduce(function (acc, k) {
    acc[k] = _ViewStylePropTypes.default[k];
    return acc;
  }, {});
  var RNImageStylePropTypes = Object.keys(_ImageStylePropTypes.default).reduce(function (acc, k) {
    acc[k] = _ImageStylePropTypes.default[k];
    return acc;
  }, {});
  var STYLESETS = Object.freeze({
    VIEW: 'view',
    TEXT: 'text',
    IMAGE: 'image'
  });
  exports.STYLESETS = STYLESETS;
  var stylePropTypes = {};
  exports.stylePropTypes = stylePropTypes;
  stylePropTypes[STYLESETS.VIEW] = (0, _extends2.default)({}, RNViewStylePropTypes);
  stylePropTypes[STYLESETS.TEXT] = (0, _extends2.default)({}, RNViewStylePropTypes, RNTextStylePropTypes);
  stylePropTypes[STYLESETS.IMAGE] = (0, _extends2.default)({}, RNViewStylePropTypes, RNImageStylePropTypes);

  function getParentsTagsRecursively(parent) {
    var tags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (!parent) {
      return tags;
    }

    parent.name && tags.push(parent.name);

    if (parent.parent) {
      return getParentsTagsRecursively(parent.parent, tags);
    } else {
      return tags;
    }
  }

  function getClosestNodeParentByTag(node, tag) {
    if (!node || !node.parent) {
      return undefined;
    }

    if (node.parent.name === tag) {
      return node.parent;
    }

    return getClosestNodeParentByTag(node.parent, tag);
  }
},870,[1,8,66,67,54]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.generateDefaultBlockStyles = generateDefaultBlockStyles;
  exports.generateDefaultTextStyles = generateDefaultTextStyles;
  var BASE_FONT_SIZE = 14;

  function generateDefaultBlockStyles() {
    var baseFontSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BASE_FONT_SIZE;
    return {
      div: {},
      ul: {
        paddingLeft: 20,
        marginBottom: baseFontSize
      },
      ol: {
        paddingLeft: 20,
        marginBottom: baseFontSize
      },
      iframe: {
        height: 200
      },
      hr: {
        marginTop: baseFontSize / 2,
        marginBottom: baseFontSize / 2,
        height: 1,
        backgroundColor: '#CCC'
      }
    };
  }

  function generateDefaultTextStyles() {
    var baseFontSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BASE_FONT_SIZE;
    return {
      u: {
        textDecorationLine: 'underline'
      },
      em: {
        fontStyle: 'italic'
      },
      i: {
        fontStyle: 'italic'
      },
      b: {
        fontWeight: 'bold'
      },
      s: {
        textDecorationLine: 'line-through'
      },
      strong: {
        fontWeight: 'bold'
      },
      big: {
        fontSize: baseFontSize * 1.2
      },
      small: {
        fontSize: baseFontSize * 0.8
      },
      a: {
        textDecorationLine: 'underline',
        color: '#245dc1'
      },
      h1: _generateHeadingStyle(baseFontSize, 2, 0.67),
      h2: _generateHeadingStyle(baseFontSize, 1.5, 0.83),
      h3: _generateHeadingStyle(baseFontSize, 1.17, 1),
      h4: _generateHeadingStyle(baseFontSize, 1, 1.33),
      h5: _generateHeadingStyle(baseFontSize, 0.83, 1.67),
      h6: _generateHeadingStyle(baseFontSize, 0.67, 2.33),
      sub: {
        textAlignVertical: 'top',
        fontSize: baseFontSize * 0.8,
        marginTop: baseFontSize / 2
      },
      sup: {
        textAlignVertical: 'top',
        fontSize: baseFontSize * 0.8,
        marginBottom: baseFontSize / 2
      },
      p: {
        marginTop: baseFontSize,
        marginBottom: baseFontSize
      }
    };
  }

  function _generateHeadingStyle(baseFontSize, fontMultiplier, marginMultiplier) {
    return {
      fontSize: baseFontSize * fontMultiplier,
      marginTop: baseFontSize * fontMultiplier * marginMultiplier,
      marginBottom: baseFontSize * fontMultiplier * marginMultiplier,
      fontWeight: 'bold'
    };
  }
},871,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {}

  module.exports = checkPropTypes;
},872,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Parser = _$$_REQUIRE(_dependencyMap[0]);

  var DomHandler = _$$_REQUIRE(_dependencyMap[1]);

  function defineProp(name, value) {
    delete module.exports[name];
    module.exports[name] = value;
    return value;
  }

  module.exports = {
    Parser: Parser,
    Tokenizer: _$$_REQUIRE(_dependencyMap[2]),
    ElementType: _$$_REQUIRE(_dependencyMap[3]),
    DomHandler: DomHandler,

    get FeedHandler() {
      return defineProp("FeedHandler", _$$_REQUIRE(_dependencyMap[4]));
    },

    get Stream() {
      return defineProp("Stream", _$$_REQUIRE(_dependencyMap[5]));
    },

    get WritableStream() {
      return defineProp("WritableStream", _$$_REQUIRE(_dependencyMap[6]));
    },

    get ProxyHandler() {
      return defineProp("ProxyHandler", _$$_REQUIRE(_dependencyMap[7]));
    },

    get DomUtils() {
      return defineProp("DomUtils", _$$_REQUIRE(_dependencyMap[8]));
    },

    get CollectingHandler() {
      return defineProp("CollectingHandler", _$$_REQUIRE(_dependencyMap[9]));
    },

    DefaultHandler: DomHandler,

    get RssHandler() {
      return defineProp("RssHandler", this.FeedHandler);
    },

    parseDOM: function parseDOM(data, options) {
      var handler = new DomHandler(options);
      new Parser(handler, options).end(data);
      return handler.dom;
    },
    parseFeed: function parseFeed(feed, options) {
      var handler = new module.exports.FeedHandler(options);
      new Parser(handler, options).end(feed);
      return handler.dom;
    },
    createDomStream: function createDomStream(cb, options, elementCb) {
      var handler = new DomHandler(cb, options, elementCb);
      return new Parser(handler, options);
    },
    EVENTS: {
      attribute: 2,
      cdatastart: 0,
      cdataend: 0,
      text: 1,
      processinginstruction: 2,
      comment: 1,
      commentend: 0,
      closetag: 1,
      opentag: 2,
      opentagname: 1,
      error: 1,
      end: 0
    }
  };
},873,[874,883,875,884,887,899,900,907,888,908]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Tokenizer = _$$_REQUIRE(_dependencyMap[0]);

  var formTags = {
    input: true,
    option: true,
    optgroup: true,
    select: true,
    button: true,
    datalist: true,
    textarea: true
  };
  var openImpliesClose = {
    tr: {
      tr: true,
      th: true,
      td: true
    },
    th: {
      th: true
    },
    td: {
      thead: true,
      th: true,
      td: true
    },
    body: {
      head: true,
      link: true,
      script: true
    },
    li: {
      li: true
    },
    p: {
      p: true
    },
    h1: {
      p: true
    },
    h2: {
      p: true
    },
    h3: {
      p: true
    },
    h4: {
      p: true
    },
    h5: {
      p: true
    },
    h6: {
      p: true
    },
    select: formTags,
    input: formTags,
    output: formTags,
    button: formTags,
    datalist: formTags,
    textarea: formTags,
    option: {
      option: true
    },
    optgroup: {
      optgroup: true
    }
  };
  var voidElements = {
    __proto__: null,
    area: true,
    base: true,
    basefont: true,
    br: true,
    col: true,
    command: true,
    embed: true,
    frame: true,
    hr: true,
    img: true,
    input: true,
    isindex: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true
  };
  var foreignContextElements = {
    __proto__: null,
    math: true,
    svg: true
  };
  var htmlIntegrationElements = {
    __proto__: null,
    mi: true,
    mo: true,
    mn: true,
    ms: true,
    mtext: true,
    "annotation-xml": true,
    foreignObject: true,
    desc: true,
    title: true
  };
  var re_nameEnd = /\s|\//;

  function Parser(cbs, options) {
    this._options = options || {};
    this._cbs = cbs || {};
    this._tagname = "";
    this._attribname = "";
    this._attribvalue = "";
    this._attribs = null;
    this._stack = [];
    this._foreignContext = [];
    this.startIndex = 0;
    this.endIndex = null;
    this._lowerCaseTagNames = "lowerCaseTags" in this._options ? !!this._options.lowerCaseTags : !this._options.xmlMode;
    this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ? !!this._options.lowerCaseAttributeNames : !this._options.xmlMode;

    if (this._options.Tokenizer) {
      Tokenizer = this._options.Tokenizer;
    }

    this._tokenizer = new Tokenizer(this._options, this);
    if (this._cbs.onparserinit) this._cbs.onparserinit(this);
  }

  _$$_REQUIRE(_dependencyMap[1])(Parser, _$$_REQUIRE(_dependencyMap[2]).EventEmitter);

  Parser.prototype._updatePosition = function (initialOffset) {
    if (this.endIndex === null) {
      if (this._tokenizer._sectionStart <= initialOffset) {
        this.startIndex = 0;
      } else {
        this.startIndex = this._tokenizer._sectionStart - initialOffset;
      }
    } else this.startIndex = this.endIndex + 1;

    this.endIndex = this._tokenizer.getAbsoluteIndex();
  };

  Parser.prototype.ontext = function (data) {
    this._updatePosition(1);

    this.endIndex--;
    if (this._cbs.ontext) this._cbs.ontext(data);
  };

  Parser.prototype.onopentagname = function (name) {
    if (this._lowerCaseTagNames) {
      name = name.toLowerCase();
    }

    this._tagname = name;

    if (!this._options.xmlMode && name in openImpliesClose) {
      for (var el; (el = this._stack[this._stack.length - 1]) in openImpliesClose[name]; this.onclosetag(el)) {
        ;
      }
    }

    if (this._options.xmlMode || !(name in voidElements)) {
      this._stack.push(name);

      if (name in foreignContextElements) this._foreignContext.push(true);else if (name in htmlIntegrationElements) this._foreignContext.push(false);
    }

    if (this._cbs.onopentagname) this._cbs.onopentagname(name);
    if (this._cbs.onopentag) this._attribs = {};
  };

  Parser.prototype.onopentagend = function () {
    this._updatePosition(1);

    if (this._attribs) {
      if (this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
      this._attribs = null;
    }

    if (!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements) {
      this._cbs.onclosetag(this._tagname);
    }

    this._tagname = "";
  };

  Parser.prototype.onclosetag = function (name) {
    this._updatePosition(1);

    if (this._lowerCaseTagNames) {
      name = name.toLowerCase();
    }

    if (name in foreignContextElements || name in htmlIntegrationElements) {
      this._foreignContext.pop();
    }

    if (this._stack.length && (!(name in voidElements) || this._options.xmlMode)) {
      var pos = this._stack.lastIndexOf(name);

      if (pos !== -1) {
        if (this._cbs.onclosetag) {
          pos = this._stack.length - pos;

          while (pos--) {
            this._cbs.onclosetag(this._stack.pop());
          }
        } else this._stack.length = pos;
      } else if (name === "p" && !this._options.xmlMode) {
        this.onopentagname(name);

        this._closeCurrentTag();
      }
    } else if (!this._options.xmlMode && (name === "br" || name === "p")) {
      this.onopentagname(name);

      this._closeCurrentTag();
    }
  };

  Parser.prototype.onselfclosingtag = function () {
    if (this._options.xmlMode || this._options.recognizeSelfClosing || this._foreignContext[this._foreignContext.length - 1]) {
      this._closeCurrentTag();
    } else {
      this.onopentagend();
    }
  };

  Parser.prototype._closeCurrentTag = function () {
    var name = this._tagname;
    this.onopentagend();

    if (this._stack[this._stack.length - 1] === name) {
      if (this._cbs.onclosetag) {
        this._cbs.onclosetag(name);
      }

      this._stack.pop();
    }
  };

  Parser.prototype.onattribname = function (name) {
    if (this._lowerCaseAttributeNames) {
      name = name.toLowerCase();
    }

    this._attribname = name;
  };

  Parser.prototype.onattribdata = function (value) {
    this._attribvalue += value;
  };

  Parser.prototype.onattribend = function () {
    if (this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);

    if (this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {
      this._attribs[this._attribname] = this._attribvalue;
    }

    this._attribname = "";
    this._attribvalue = "";
  };

  Parser.prototype._getInstructionName = function (value) {
    var idx = value.search(re_nameEnd),
        name = idx < 0 ? value : value.substr(0, idx);

    if (this._lowerCaseTagNames) {
      name = name.toLowerCase();
    }

    return name;
  };

  Parser.prototype.ondeclaration = function (value) {
    if (this._cbs.onprocessinginstruction) {
      var name = this._getInstructionName(value);

      this._cbs.onprocessinginstruction("!" + name, "!" + value);
    }
  };

  Parser.prototype.onprocessinginstruction = function (value) {
    if (this._cbs.onprocessinginstruction) {
      var name = this._getInstructionName(value);

      this._cbs.onprocessinginstruction("?" + name, "?" + value);
    }
  };

  Parser.prototype.oncomment = function (value) {
    this._updatePosition(4);

    if (this._cbs.oncomment) this._cbs.oncomment(value);
    if (this._cbs.oncommentend) this._cbs.oncommentend();
  };

  Parser.prototype.oncdata = function (value) {
    this._updatePosition(1);

    if (this._options.xmlMode || this._options.recognizeCDATA) {
      if (this._cbs.oncdatastart) this._cbs.oncdatastart();
      if (this._cbs.ontext) this._cbs.ontext(value);
      if (this._cbs.oncdataend) this._cbs.oncdataend();
    } else {
      this.oncomment("[CDATA[" + value + "]]");
    }
  };

  Parser.prototype.onerror = function (err) {
    if (this._cbs.onerror) this._cbs.onerror(err);
  };

  Parser.prototype.onend = function () {
    if (this._cbs.onclosetag) {
      for (var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i])) {
        ;
      }
    }

    if (this._cbs.onend) this._cbs.onend();
  };

  Parser.prototype.reset = function () {
    if (this._cbs.onreset) this._cbs.onreset();

    this._tokenizer.reset();

    this._tagname = "";
    this._attribname = "";
    this._attribs = null;
    this._stack = [];
    if (this._cbs.onparserinit) this._cbs.onparserinit(this);
  };

  Parser.prototype.parseComplete = function (data) {
    this.reset();
    this.end(data);
  };

  Parser.prototype.write = function (chunk) {
    this._tokenizer.write(chunk);
  };

  Parser.prototype.end = function (chunk) {
    this._tokenizer.end(chunk);
  };

  Parser.prototype.pause = function () {
    this._tokenizer.pause();
  };

  Parser.prototype.resume = function () {
    this._tokenizer.resume();
  };

  Parser.prototype.parseChunk = Parser.prototype.write;
  Parser.prototype.done = Parser.prototype.end;
  module.exports = Parser;
},874,[875,881,882]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = Tokenizer;

  var decodeCodePoint = _$$_REQUIRE(_dependencyMap[0]);

  var entityMap = _$$_REQUIRE(_dependencyMap[1]);

  var legacyMap = _$$_REQUIRE(_dependencyMap[2]);

  var xmlMap = _$$_REQUIRE(_dependencyMap[3]);

  var i = 0;
  var TEXT = i++;
  var BEFORE_TAG_NAME = i++;
  var IN_TAG_NAME = i++;
  var IN_SELF_CLOSING_TAG = i++;
  var BEFORE_CLOSING_TAG_NAME = i++;
  var IN_CLOSING_TAG_NAME = i++;
  var AFTER_CLOSING_TAG_NAME = i++;
  var BEFORE_ATTRIBUTE_NAME = i++;
  var IN_ATTRIBUTE_NAME = i++;
  var AFTER_ATTRIBUTE_NAME = i++;
  var BEFORE_ATTRIBUTE_VALUE = i++;
  var IN_ATTRIBUTE_VALUE_DQ = i++;
  var IN_ATTRIBUTE_VALUE_SQ = i++;
  var IN_ATTRIBUTE_VALUE_NQ = i++;
  var BEFORE_DECLARATION = i++;
  var IN_DECLARATION = i++;
  var IN_PROCESSING_INSTRUCTION = i++;
  var BEFORE_COMMENT = i++;
  var IN_COMMENT = i++;
  var AFTER_COMMENT_1 = i++;
  var AFTER_COMMENT_2 = i++;
  var BEFORE_CDATA_1 = i++;
  var BEFORE_CDATA_2 = i++;
  var BEFORE_CDATA_3 = i++;
  var BEFORE_CDATA_4 = i++;
  var BEFORE_CDATA_5 = i++;
  var BEFORE_CDATA_6 = i++;
  var IN_CDATA = i++;
  var AFTER_CDATA_1 = i++;
  var AFTER_CDATA_2 = i++;
  var BEFORE_SPECIAL = i++;
  var BEFORE_SPECIAL_END = i++;
  var BEFORE_SCRIPT_1 = i++;
  var BEFORE_SCRIPT_2 = i++;
  var BEFORE_SCRIPT_3 = i++;
  var BEFORE_SCRIPT_4 = i++;
  var BEFORE_SCRIPT_5 = i++;
  var AFTER_SCRIPT_1 = i++;
  var AFTER_SCRIPT_2 = i++;
  var AFTER_SCRIPT_3 = i++;
  var AFTER_SCRIPT_4 = i++;
  var AFTER_SCRIPT_5 = i++;
  var BEFORE_STYLE_1 = i++;
  var BEFORE_STYLE_2 = i++;
  var BEFORE_STYLE_3 = i++;
  var BEFORE_STYLE_4 = i++;
  var AFTER_STYLE_1 = i++;
  var AFTER_STYLE_2 = i++;
  var AFTER_STYLE_3 = i++;
  var AFTER_STYLE_4 = i++;
  var BEFORE_ENTITY = i++;
  var BEFORE_NUMERIC_ENTITY = i++;
  var IN_NAMED_ENTITY = i++;
  var IN_NUMERIC_ENTITY = i++;
  var IN_HEX_ENTITY = i++;
  var j = 0;
  var SPECIAL_NONE = j++;
  var SPECIAL_SCRIPT = j++;
  var SPECIAL_STYLE = j++;

  function whitespace(c) {
    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
  }

  function ifElseState(upper, SUCCESS, FAILURE) {
    var lower = upper.toLowerCase();

    if (upper === lower) {
      return function (c) {
        if (c === lower) {
          this._state = SUCCESS;
        } else {
          this._state = FAILURE;
          this._index--;
        }
      };
    } else {
      return function (c) {
        if (c === lower || c === upper) {
          this._state = SUCCESS;
        } else {
          this._state = FAILURE;
          this._index--;
        }
      };
    }
  }

  function consumeSpecialNameChar(upper, NEXT_STATE) {
    var lower = upper.toLowerCase();
    return function (c) {
      if (c === lower || c === upper) {
        this._state = NEXT_STATE;
      } else {
        this._state = IN_TAG_NAME;
        this._index--;
      }
    };
  }

  function Tokenizer(options, cbs) {
    this._state = TEXT;
    this._buffer = "";
    this._sectionStart = 0;
    this._index = 0;
    this._bufferOffset = 0;
    this._baseState = TEXT;
    this._special = SPECIAL_NONE;
    this._cbs = cbs;
    this._running = true;
    this._ended = false;
    this._xmlMode = !!(options && options.xmlMode);
    this._decodeEntities = !!(options && options.decodeEntities);
  }

  Tokenizer.prototype._stateText = function (c) {
    if (c === "<") {
      if (this._index > this._sectionStart) {
        this._cbs.ontext(this._getSection());
      }

      this._state = BEFORE_TAG_NAME;
      this._sectionStart = this._index;
    } else if (this._decodeEntities && this._special === SPECIAL_NONE && c === "&") {
      if (this._index > this._sectionStart) {
        this._cbs.ontext(this._getSection());
      }

      this._baseState = TEXT;
      this._state = BEFORE_ENTITY;
      this._sectionStart = this._index;
    }
  };

  Tokenizer.prototype._stateBeforeTagName = function (c) {
    if (c === "/") {
      this._state = BEFORE_CLOSING_TAG_NAME;
    } else if (c === "<") {
      this._cbs.ontext(this._getSection());

      this._sectionStart = this._index;
    } else if (c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
      this._state = TEXT;
    } else if (c === "!") {
      this._state = BEFORE_DECLARATION;
      this._sectionStart = this._index + 1;
    } else if (c === "?") {
      this._state = IN_PROCESSING_INSTRUCTION;
      this._sectionStart = this._index + 1;
    } else {
      this._state = !this._xmlMode && (c === "s" || c === "S") ? BEFORE_SPECIAL : IN_TAG_NAME;
      this._sectionStart = this._index;
    }
  };

  Tokenizer.prototype._stateInTagName = function (c) {
    if (c === "/" || c === ">" || whitespace(c)) {
      this._emitToken("onopentagname");

      this._state = BEFORE_ATTRIBUTE_NAME;
      this._index--;
    }
  };

  Tokenizer.prototype._stateBeforeCloseingTagName = function (c) {
    if (whitespace(c)) ;else if (c === ">") {
      this._state = TEXT;
    } else if (this._special !== SPECIAL_NONE) {
      if (c === "s" || c === "S") {
        this._state = BEFORE_SPECIAL_END;
      } else {
        this._state = TEXT;
        this._index--;
      }
    } else {
      this._state = IN_CLOSING_TAG_NAME;
      this._sectionStart = this._index;
    }
  };

  Tokenizer.prototype._stateInCloseingTagName = function (c) {
    if (c === ">" || whitespace(c)) {
      this._emitToken("onclosetag");

      this._state = AFTER_CLOSING_TAG_NAME;
      this._index--;
    }
  };

  Tokenizer.prototype._stateAfterCloseingTagName = function (c) {
    if (c === ">") {
      this._state = TEXT;
      this._sectionStart = this._index + 1;
    }
  };

  Tokenizer.prototype._stateBeforeAttributeName = function (c) {
    if (c === ">") {
      this._cbs.onopentagend();

      this._state = TEXT;
      this._sectionStart = this._index + 1;
    } else if (c === "/") {
      this._state = IN_SELF_CLOSING_TAG;
    } else if (!whitespace(c)) {
      this._state = IN_ATTRIBUTE_NAME;
      this._sectionStart = this._index;
    }
  };

  Tokenizer.prototype._stateInSelfClosingTag = function (c) {
    if (c === ">") {
      this._cbs.onselfclosingtag();

      this._state = TEXT;
      this._sectionStart = this._index + 1;
    } else if (!whitespace(c)) {
      this._state = BEFORE_ATTRIBUTE_NAME;
      this._index--;
    }
  };

  Tokenizer.prototype._stateInAttributeName = function (c) {
    if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
      this._cbs.onattribname(this._getSection());

      this._sectionStart = -1;
      this._state = AFTER_ATTRIBUTE_NAME;
      this._index--;
    }
  };

  Tokenizer.prototype._stateAfterAttributeName = function (c) {
    if (c === "=") {
      this._state = BEFORE_ATTRIBUTE_VALUE;
    } else if (c === "/" || c === ">") {
      this._cbs.onattribend();

      this._state = BEFORE_ATTRIBUTE_NAME;
      this._index--;
    } else if (!whitespace(c)) {
      this._cbs.onattribend();

      this._state = IN_ATTRIBUTE_NAME;
      this._sectionStart = this._index;
    }
  };

  Tokenizer.prototype._stateBeforeAttributeValue = function (c) {
    if (c === '"') {
      this._state = IN_ATTRIBUTE_VALUE_DQ;
      this._sectionStart = this._index + 1;
    } else if (c === "'") {
      this._state = IN_ATTRIBUTE_VALUE_SQ;
      this._sectionStart = this._index + 1;
    } else if (!whitespace(c)) {
      this._state = IN_ATTRIBUTE_VALUE_NQ;
      this._sectionStart = this._index;
      this._index--;
    }
  };

  Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function (c) {
    if (c === '"') {
      this._emitToken("onattribdata");

      this._cbs.onattribend();

      this._state = BEFORE_ATTRIBUTE_NAME;
    } else if (this._decodeEntities && c === "&") {
      this._emitToken("onattribdata");

      this._baseState = this._state;
      this._state = BEFORE_ENTITY;
      this._sectionStart = this._index;
    }
  };

  Tokenizer.prototype._stateInAttributeValueSingleQuotes = function (c) {
    if (c === "'") {
      this._emitToken("onattribdata");

      this._cbs.onattribend();

      this._state = BEFORE_ATTRIBUTE_NAME;
    } else if (this._decodeEntities && c === "&") {
      this._emitToken("onattribdata");

      this._baseState = this._state;
      this._state = BEFORE_ENTITY;
      this._sectionStart = this._index;
    }
  };

  Tokenizer.prototype._stateInAttributeValueNoQuotes = function (c) {
    if (whitespace(c) || c === ">") {
      this._emitToken("onattribdata");

      this._cbs.onattribend();

      this._state = BEFORE_ATTRIBUTE_NAME;
      this._index--;
    } else if (this._decodeEntities && c === "&") {
      this._emitToken("onattribdata");

      this._baseState = this._state;
      this._state = BEFORE_ENTITY;
      this._sectionStart = this._index;
    }
  };

  Tokenizer.prototype._stateBeforeDeclaration = function (c) {
    this._state = c === "[" ? BEFORE_CDATA_1 : c === "-" ? BEFORE_COMMENT : IN_DECLARATION;
  };

  Tokenizer.prototype._stateInDeclaration = function (c) {
    if (c === ">") {
      this._cbs.ondeclaration(this._getSection());

      this._state = TEXT;
      this._sectionStart = this._index + 1;
    }
  };

  Tokenizer.prototype._stateInProcessingInstruction = function (c) {
    if (c === ">") {
      this._cbs.onprocessinginstruction(this._getSection());

      this._state = TEXT;
      this._sectionStart = this._index + 1;
    }
  };

  Tokenizer.prototype._stateBeforeComment = function (c) {
    if (c === "-") {
      this._state = IN_COMMENT;
      this._sectionStart = this._index + 1;
    } else {
      this._state = IN_DECLARATION;
    }
  };

  Tokenizer.prototype._stateInComment = function (c) {
    if (c === "-") this._state = AFTER_COMMENT_1;
  };

  Tokenizer.prototype._stateAfterComment1 = function (c) {
    if (c === "-") {
      this._state = AFTER_COMMENT_2;
    } else {
      this._state = IN_COMMENT;
    }
  };

  Tokenizer.prototype._stateAfterComment2 = function (c) {
    if (c === ">") {
      this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));

      this._state = TEXT;
      this._sectionStart = this._index + 1;
    } else if (c !== "-") {
      this._state = IN_COMMENT;
    }
  };

  Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
  Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
  Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
  Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
  Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

  Tokenizer.prototype._stateBeforeCdata6 = function (c) {
    if (c === "[") {
      this._state = IN_CDATA;
      this._sectionStart = this._index + 1;
    } else {
      this._state = IN_DECLARATION;
      this._index--;
    }
  };

  Tokenizer.prototype._stateInCdata = function (c) {
    if (c === "]") this._state = AFTER_CDATA_1;
  };

  Tokenizer.prototype._stateAfterCdata1 = function (c) {
    if (c === "]") this._state = AFTER_CDATA_2;else this._state = IN_CDATA;
  };

  Tokenizer.prototype._stateAfterCdata2 = function (c) {
    if (c === ">") {
      this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));

      this._state = TEXT;
      this._sectionStart = this._index + 1;
    } else if (c !== "]") {
      this._state = IN_CDATA;
    }
  };

  Tokenizer.prototype._stateBeforeSpecial = function (c) {
    if (c === "c" || c === "C") {
      this._state = BEFORE_SCRIPT_1;
    } else if (c === "t" || c === "T") {
      this._state = BEFORE_STYLE_1;
    } else {
      this._state = IN_TAG_NAME;
      this._index--;
    }
  };

  Tokenizer.prototype._stateBeforeSpecialEnd = function (c) {
    if (this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")) {
      this._state = AFTER_SCRIPT_1;
    } else if (this._special === SPECIAL_STYLE && (c === "t" || c === "T")) {
      this._state = AFTER_STYLE_1;
    } else this._state = TEXT;
  };

  Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
  Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
  Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
  Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

  Tokenizer.prototype._stateBeforeScript5 = function (c) {
    if (c === "/" || c === ">" || whitespace(c)) {
      this._special = SPECIAL_SCRIPT;
    }

    this._state = IN_TAG_NAME;
    this._index--;
  };

  Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
  Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
  Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
  Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

  Tokenizer.prototype._stateAfterScript5 = function (c) {
    if (c === ">" || whitespace(c)) {
      this._special = SPECIAL_NONE;
      this._state = IN_CLOSING_TAG_NAME;
      this._sectionStart = this._index - 6;
      this._index--;
    } else this._state = TEXT;
  };

  Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
  Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
  Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

  Tokenizer.prototype._stateBeforeStyle4 = function (c) {
    if (c === "/" || c === ">" || whitespace(c)) {
      this._special = SPECIAL_STYLE;
    }

    this._state = IN_TAG_NAME;
    this._index--;
  };

  Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
  Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
  Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

  Tokenizer.prototype._stateAfterStyle4 = function (c) {
    if (c === ">" || whitespace(c)) {
      this._special = SPECIAL_NONE;
      this._state = IN_CLOSING_TAG_NAME;
      this._sectionStart = this._index - 5;
      this._index--;
    } else this._state = TEXT;
  };

  Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
  Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

  Tokenizer.prototype._parseNamedEntityStrict = function () {
    if (this._sectionStart + 1 < this._index) {
      var entity = this._buffer.substring(this._sectionStart + 1, this._index),
          map = this._xmlMode ? xmlMap : entityMap;

      if (map.hasOwnProperty(entity)) {
        this._emitPartial(map[entity]);

        this._sectionStart = this._index + 1;
      }
    }
  };

  Tokenizer.prototype._parseLegacyEntity = function () {
    var start = this._sectionStart + 1,
        limit = this._index - start;
    if (limit > 6) limit = 6;

    while (limit >= 2) {
      var entity = this._buffer.substr(start, limit);

      if (legacyMap.hasOwnProperty(entity)) {
        this._emitPartial(legacyMap[entity]);

        this._sectionStart += limit + 1;
        return;
      } else {
        limit--;
      }
    }
  };

  Tokenizer.prototype._stateInNamedEntity = function (c) {
    if (c === ";") {
      this._parseNamedEntityStrict();

      if (this._sectionStart + 1 < this._index && !this._xmlMode) {
        this._parseLegacyEntity();
      }

      this._state = this._baseState;
    } else if ((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")) {
      if (this._xmlMode) ;else if (this._sectionStart + 1 === this._index) ;else if (this._baseState !== TEXT) {
        if (c !== "=") {
          this._parseNamedEntityStrict();
        }
      } else {
        this._parseLegacyEntity();
      }
      this._state = this._baseState;
      this._index--;
    }
  };

  Tokenizer.prototype._decodeNumericEntity = function (offset, base) {
    var sectionStart = this._sectionStart + offset;

    if (sectionStart !== this._index) {
      var entity = this._buffer.substring(sectionStart, this._index);

      var parsed = parseInt(entity, base);

      this._emitPartial(decodeCodePoint(parsed));

      this._sectionStart = this._index;
    } else {
      this._sectionStart--;
    }

    this._state = this._baseState;
  };

  Tokenizer.prototype._stateInNumericEntity = function (c) {
    if (c === ";") {
      this._decodeNumericEntity(2, 10);

      this._sectionStart++;
    } else if (c < "0" || c > "9") {
      if (!this._xmlMode) {
        this._decodeNumericEntity(2, 10);
      } else {
        this._state = this._baseState;
      }

      this._index--;
    }
  };

  Tokenizer.prototype._stateInHexEntity = function (c) {
    if (c === ";") {
      this._decodeNumericEntity(3, 16);

      this._sectionStart++;
    } else if ((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")) {
      if (!this._xmlMode) {
        this._decodeNumericEntity(3, 16);
      } else {
        this._state = this._baseState;
      }

      this._index--;
    }
  };

  Tokenizer.prototype._cleanup = function () {
    if (this._sectionStart < 0) {
      this._buffer = "";
      this._bufferOffset += this._index;
      this._index = 0;
    } else if (this._running) {
      if (this._state === TEXT) {
        if (this._sectionStart !== this._index) {
          this._cbs.ontext(this._buffer.substr(this._sectionStart));
        }

        this._buffer = "";
        this._bufferOffset += this._index;
        this._index = 0;
      } else if (this._sectionStart === this._index) {
        this._buffer = "";
        this._bufferOffset += this._index;
        this._index = 0;
      } else {
        this._buffer = this._buffer.substr(this._sectionStart);
        this._index -= this._sectionStart;
        this._bufferOffset += this._sectionStart;
      }

      this._sectionStart = 0;
    }
  };

  Tokenizer.prototype.write = function (chunk) {
    if (this._ended) this._cbs.onerror(Error(".write() after done!"));
    this._buffer += chunk;

    this._parse();
  };

  Tokenizer.prototype._parse = function () {
    while (this._index < this._buffer.length && this._running) {
      var c = this._buffer.charAt(this._index);

      if (this._state === TEXT) {
        this._stateText(c);
      } else if (this._state === BEFORE_TAG_NAME) {
        this._stateBeforeTagName(c);
      } else if (this._state === IN_TAG_NAME) {
        this._stateInTagName(c);
      } else if (this._state === BEFORE_CLOSING_TAG_NAME) {
        this._stateBeforeCloseingTagName(c);
      } else if (this._state === IN_CLOSING_TAG_NAME) {
        this._stateInCloseingTagName(c);
      } else if (this._state === AFTER_CLOSING_TAG_NAME) {
        this._stateAfterCloseingTagName(c);
      } else if (this._state === IN_SELF_CLOSING_TAG) {
        this._stateInSelfClosingTag(c);
      } else if (this._state === BEFORE_ATTRIBUTE_NAME) {
        this._stateBeforeAttributeName(c);
      } else if (this._state === IN_ATTRIBUTE_NAME) {
        this._stateInAttributeName(c);
      } else if (this._state === AFTER_ATTRIBUTE_NAME) {
        this._stateAfterAttributeName(c);
      } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {
        this._stateBeforeAttributeValue(c);
      } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {
        this._stateInAttributeValueDoubleQuotes(c);
      } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {
        this._stateInAttributeValueSingleQuotes(c);
      } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {
        this._stateInAttributeValueNoQuotes(c);
      } else if (this._state === BEFORE_DECLARATION) {
        this._stateBeforeDeclaration(c);
      } else if (this._state === IN_DECLARATION) {
        this._stateInDeclaration(c);
      } else if (this._state === IN_PROCESSING_INSTRUCTION) {
        this._stateInProcessingInstruction(c);
      } else if (this._state === BEFORE_COMMENT) {
        this._stateBeforeComment(c);
      } else if (this._state === IN_COMMENT) {
        this._stateInComment(c);
      } else if (this._state === AFTER_COMMENT_1) {
        this._stateAfterComment1(c);
      } else if (this._state === AFTER_COMMENT_2) {
        this._stateAfterComment2(c);
      } else if (this._state === BEFORE_CDATA_1) {
        this._stateBeforeCdata1(c);
      } else if (this._state === BEFORE_CDATA_2) {
        this._stateBeforeCdata2(c);
      } else if (this._state === BEFORE_CDATA_3) {
        this._stateBeforeCdata3(c);
      } else if (this._state === BEFORE_CDATA_4) {
        this._stateBeforeCdata4(c);
      } else if (this._state === BEFORE_CDATA_5) {
        this._stateBeforeCdata5(c);
      } else if (this._state === BEFORE_CDATA_6) {
        this._stateBeforeCdata6(c);
      } else if (this._state === IN_CDATA) {
        this._stateInCdata(c);
      } else if (this._state === AFTER_CDATA_1) {
        this._stateAfterCdata1(c);
      } else if (this._state === AFTER_CDATA_2) {
        this._stateAfterCdata2(c);
      } else if (this._state === BEFORE_SPECIAL) {
        this._stateBeforeSpecial(c);
      } else if (this._state === BEFORE_SPECIAL_END) {
        this._stateBeforeSpecialEnd(c);
      } else if (this._state === BEFORE_SCRIPT_1) {
        this._stateBeforeScript1(c);
      } else if (this._state === BEFORE_SCRIPT_2) {
        this._stateBeforeScript2(c);
      } else if (this._state === BEFORE_SCRIPT_3) {
        this._stateBeforeScript3(c);
      } else if (this._state === BEFORE_SCRIPT_4) {
        this._stateBeforeScript4(c);
      } else if (this._state === BEFORE_SCRIPT_5) {
        this._stateBeforeScript5(c);
      } else if (this._state === AFTER_SCRIPT_1) {
        this._stateAfterScript1(c);
      } else if (this._state === AFTER_SCRIPT_2) {
        this._stateAfterScript2(c);
      } else if (this._state === AFTER_SCRIPT_3) {
        this._stateAfterScript3(c);
      } else if (this._state === AFTER_SCRIPT_4) {
        this._stateAfterScript4(c);
      } else if (this._state === AFTER_SCRIPT_5) {
        this._stateAfterScript5(c);
      } else if (this._state === BEFORE_STYLE_1) {
        this._stateBeforeStyle1(c);
      } else if (this._state === BEFORE_STYLE_2) {
        this._stateBeforeStyle2(c);
      } else if (this._state === BEFORE_STYLE_3) {
        this._stateBeforeStyle3(c);
      } else if (this._state === BEFORE_STYLE_4) {
        this._stateBeforeStyle4(c);
      } else if (this._state === AFTER_STYLE_1) {
        this._stateAfterStyle1(c);
      } else if (this._state === AFTER_STYLE_2) {
        this._stateAfterStyle2(c);
      } else if (this._state === AFTER_STYLE_3) {
        this._stateAfterStyle3(c);
      } else if (this._state === AFTER_STYLE_4) {
        this._stateAfterStyle4(c);
      } else if (this._state === BEFORE_ENTITY) {
        this._stateBeforeEntity(c);
      } else if (this._state === BEFORE_NUMERIC_ENTITY) {
        this._stateBeforeNumericEntity(c);
      } else if (this._state === IN_NAMED_ENTITY) {
        this._stateInNamedEntity(c);
      } else if (this._state === IN_NUMERIC_ENTITY) {
        this._stateInNumericEntity(c);
      } else if (this._state === IN_HEX_ENTITY) {
        this._stateInHexEntity(c);
      } else {
        this._cbs.onerror(Error("unknown _state"), this._state);
      }

      this._index++;
    }

    this._cleanup();
  };

  Tokenizer.prototype.pause = function () {
    this._running = false;
  };

  Tokenizer.prototype.resume = function () {
    this._running = true;

    if (this._index < this._buffer.length) {
      this._parse();
    }

    if (this._ended) {
      this._finish();
    }
  };

  Tokenizer.prototype.end = function (chunk) {
    if (this._ended) this._cbs.onerror(Error(".end() after done!"));
    if (chunk) this.write(chunk);
    this._ended = true;
    if (this._running) this._finish();
  };

  Tokenizer.prototype._finish = function () {
    if (this._sectionStart < this._index) {
      this._handleTrailingData();
    }

    this._cbs.onend();
  };

  Tokenizer.prototype._handleTrailingData = function () {
    var data = this._buffer.substr(this._sectionStart);

    if (this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2) {
      this._cbs.oncdata(data);
    } else if (this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2) {
      this._cbs.oncomment(data);
    } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {
      this._parseLegacyEntity();

      if (this._sectionStart < this._index) {
        this._state = this._baseState;

        this._handleTrailingData();
      }
    } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {
      this._decodeNumericEntity(2, 10);

      if (this._sectionStart < this._index) {
        this._state = this._baseState;

        this._handleTrailingData();
      }
    } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {
      this._decodeNumericEntity(3, 16);

      if (this._sectionStart < this._index) {
        this._state = this._baseState;

        this._handleTrailingData();
      }
    } else if (this._state !== IN_TAG_NAME && this._state !== BEFORE_ATTRIBUTE_NAME && this._state !== BEFORE_ATTRIBUTE_VALUE && this._state !== AFTER_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_VALUE_SQ && this._state !== IN_ATTRIBUTE_VALUE_DQ && this._state !== IN_ATTRIBUTE_VALUE_NQ && this._state !== IN_CLOSING_TAG_NAME) {
      this._cbs.ontext(data);
    }
  };

  Tokenizer.prototype.reset = function () {
    Tokenizer.call(this, {
      xmlMode: this._xmlMode,
      decodeEntities: this._decodeEntities
    }, this._cbs);
  };

  Tokenizer.prototype.getAbsoluteIndex = function () {
    return this._bufferOffset + this._index;
  };

  Tokenizer.prototype._getSection = function () {
    return this._buffer.substring(this._sectionStart, this._index);
  };

  Tokenizer.prototype._emitToken = function (name) {
    this._cbs[name](this._getSection());

    this._sectionStart = -1;
  };

  Tokenizer.prototype._emitPartial = function (value) {
    if (this._baseState !== TEXT) {
      this._cbs.onattribdata(value);
    } else {
      this._cbs.ontext(value);
    }
  };
},875,[876,878,879,880]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var decodeMap = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = decodeCodePoint;

  function decodeCodePoint(codePoint) {
    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {
      return "\uFFFD";
    }

    if (codePoint in decodeMap) {
      codePoint = decodeMap[codePoint];
    }

    var output = "";

    if (codePoint > 0xffff) {
      codePoint -= 0x10000;
      output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
      codePoint = 0xdc00 | codePoint & 0x3ff;
    }

    output += String.fromCharCode(codePoint);
    return output;
  }
},876,[877]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376};
},877,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {"Aacute":"\u00C1","aacute":"\u00E1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","Acy":"\u0410","acy":"\u0430","AElig":"\u00C6","aelig":"\u00E6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\u00C0","agrave":"\u00E0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\u00C5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\u00C5","aring":"\u00E5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\u00A6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\u00C7","ccedil":"\u00E7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\u00B8","Cedilla":"\u00B8","cemptyv":"\u29B2","cent":"\u00A2","centerdot":"\u00B7","CenterDot":"\u00B7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\u00AE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\u00A9","COPY":"\u00A9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\u00A4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\u00B0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\u00B4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\u00A8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\u00F7","divide":"\u00F7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\u00A8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\u00A8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\u00C9","eacute":"\u00E9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\u00CA","ecirc":"\u00EA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\u00C8","egrave":"\u00E8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\u00BD","frac13":"\u2153","frac14":"\u00BC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\u00BE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\u00BD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\u00CD","iacute":"\u00ED","ic":"\u2063","Icirc":"\u00CE","icirc":"\u00EE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\u00A1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\u00CC","igrave":"\u00EC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\u00BF","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\u00CF","iuml":"\u00EF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\u00AB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\u00AF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\u00B5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\u00B7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\u00A0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\u00A0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\u00AC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\u00D1","ntilde":"\u00F1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\u00D3","oacute":"\u00F3","oast":"\u229B","Ocirc":"\u00D4","ocirc":"\u00F4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\u00D2","ograve":"\u00F2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\u00AA","ordm":"\u00BA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\u00D8","oslash":"\u00F8","osol":"\u2298","Otilde":"\u00D5","otilde":"\u00F5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\u00D6","ouml":"\u00F6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\u00B6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\u00B1","plusmn":"\u00B1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\u00B1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\u00A3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\"","QUOT":"\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\u00BB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\u00AE","REG":"\u00AE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\u00A7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\u00AD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\u00AF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\u00DF","Tab":"\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\u00DE","thorn":"\u00FE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\u00D7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\u00DA","uacute":"\u00FA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\u00DB","ucirc":"\u00FB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\u00D9","ugrave":"\u00F9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\u00A8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\u00DC","uuml":"\u00FC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\u00DD","yacute":"\u00FD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\u00A5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\u00FF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"};
},878,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {"Aacute":"\u00C1","aacute":"\u00E1","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","AElig":"\u00C6","aelig":"\u00E6","Agrave":"\u00C0","agrave":"\u00E0","amp":"&","AMP":"&","Aring":"\u00C5","aring":"\u00E5","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","brvbar":"\u00A6","Ccedil":"\u00C7","ccedil":"\u00E7","cedil":"\u00B8","cent":"\u00A2","copy":"\u00A9","COPY":"\u00A9","curren":"\u00A4","deg":"\u00B0","divide":"\u00F7","Eacute":"\u00C9","eacute":"\u00E9","Ecirc":"\u00CA","ecirc":"\u00EA","Egrave":"\u00C8","egrave":"\u00E8","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","frac12":"\u00BD","frac14":"\u00BC","frac34":"\u00BE","gt":">","GT":">","Iacute":"\u00CD","iacute":"\u00ED","Icirc":"\u00CE","icirc":"\u00EE","iexcl":"\u00A1","Igrave":"\u00CC","igrave":"\u00EC","iquest":"\u00BF","Iuml":"\u00CF","iuml":"\u00EF","laquo":"\u00AB","lt":"<","LT":"<","macr":"\u00AF","micro":"\u00B5","middot":"\u00B7","nbsp":"\u00A0","not":"\u00AC","Ntilde":"\u00D1","ntilde":"\u00F1","Oacute":"\u00D3","oacute":"\u00F3","Ocirc":"\u00D4","ocirc":"\u00F4","Ograve":"\u00D2","ograve":"\u00F2","ordf":"\u00AA","ordm":"\u00BA","Oslash":"\u00D8","oslash":"\u00F8","Otilde":"\u00D5","otilde":"\u00F5","Ouml":"\u00D6","ouml":"\u00F6","para":"\u00B6","plusmn":"\u00B1","pound":"\u00A3","quot":"\"","QUOT":"\"","raquo":"\u00BB","reg":"\u00AE","REG":"\u00AE","sect":"\u00A7","shy":"\u00AD","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","szlig":"\u00DF","THORN":"\u00DE","thorn":"\u00FE","times":"\u00D7","Uacute":"\u00DA","uacute":"\u00FA","Ucirc":"\u00DB","ucirc":"\u00FB","Ugrave":"\u00D9","ugrave":"\u00F9","uml":"\u00A8","Uuml":"\u00DC","uuml":"\u00FC","Yacute":"\u00DD","yacute":"\u00FD","yen":"\u00A5","yuml":"\u00FF"};
},879,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}
;
},880,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  if (typeof Object.create === 'function') {
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
},881,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function EventEmitter() {
    this._events = this._events || {};
    this._maxListeners = this._maxListeners || undefined;
  }

  module.exports = EventEmitter;
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.prototype.setMaxListeners = function (n) {
    if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
    this._maxListeners = n;
    return this;
  };

  EventEmitter.prototype.emit = function (type) {
    var er, handler, len, args, i, listeners;
    if (!this._events) this._events = {};

    if (type === 'error') {
      if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
        er = arguments[1];

        if (er instanceof Error) {
          throw er;
        } else {
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
      }
    }

    handler = this._events[type];
    if (isUndefined(handler)) return false;

    if (isFunction(handler)) {
      switch (arguments.length) {
        case 1:
          handler.call(this);
          break;

        case 2:
          handler.call(this, arguments[1]);
          break;

        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;

        default:
          args = Array.prototype.slice.call(arguments, 1);
          handler.apply(this, args);
      }
    } else if (isObject(handler)) {
      args = Array.prototype.slice.call(arguments, 1);
      listeners = handler.slice();
      len = listeners.length;

      for (i = 0; i < len; i++) {
        listeners[i].apply(this, args);
      }
    }

    return true;
  };

  EventEmitter.prototype.addListener = function (type, listener) {
    var m;
    if (!isFunction(listener)) throw TypeError('listener must be a function');
    if (!this._events) this._events = {};
    if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
    if (!this._events[type]) this._events[type] = listener;else if (isObject(this._events[type])) this._events[type].push(listener);else this._events[type] = [this._events[type], listener];

    if (isObject(this._events[type]) && !this._events[type].warned) {
      if (!isUndefined(this._maxListeners)) {
        m = this._maxListeners;
      } else {
        m = EventEmitter.defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length);

        if (typeof console.trace === 'function') {
          console.trace();
        }
      }
    }

    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function (type, listener) {
    if (!isFunction(listener)) throw TypeError('listener must be a function');
    var fired = false;

    function g() {
      this.removeListener(type, g);

      if (!fired) {
        fired = true;
        listener.apply(this, arguments);
      }
    }

    g.listener = listener;
    this.on(type, g);
    return this;
  };

  EventEmitter.prototype.removeListener = function (type, listener) {
    var list, position, length, i;
    if (!isFunction(listener)) throw TypeError('listener must be a function');
    if (!this._events || !this._events[type]) return this;
    list = this._events[type];
    length = list.length;
    position = -1;

    if (list === listener || isFunction(list.listener) && list.listener === listener) {
      delete this._events[type];
      if (this._events.removeListener) this.emit('removeListener', type, listener);
    } else if (isObject(list)) {
      for (i = length; i-- > 0;) {
        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
          position = i;
          break;
        }
      }

      if (position < 0) return this;

      if (list.length === 1) {
        list.length = 0;
        delete this._events[type];
      } else {
        list.splice(position, 1);
      }

      if (this._events.removeListener) this.emit('removeListener', type, listener);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function (type) {
    var key, listeners;
    if (!this._events) return this;

    if (!this._events.removeListener) {
      if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
      return this;
    }

    if (arguments.length === 0) {
      for (key in this._events) {
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }

      this.removeAllListeners('removeListener');
      this._events = {};
      return this;
    }

    listeners = this._events[type];

    if (isFunction(listeners)) {
      this.removeListener(type, listeners);
    } else if (listeners) {
      while (listeners.length) {
        this.removeListener(type, listeners[listeners.length - 1]);
      }
    }

    delete this._events[type];
    return this;
  };

  EventEmitter.prototype.listeners = function (type) {
    var ret;
    if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
    return ret;
  };

  EventEmitter.prototype.listenerCount = function (type) {
    if (this._events) {
      var evlistener = this._events[type];
      if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
    }

    return 0;
  };

  EventEmitter.listenerCount = function (emitter, type) {
    return emitter.listenerCount(type);
  };

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isUndefined(arg) {
    return arg === undefined;
  }
},882,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ElementType = _$$_REQUIRE(_dependencyMap[0]);

  var re_whitespace = /\s+/g;

  var NodePrototype = _$$_REQUIRE(_dependencyMap[1]);

  var ElementPrototype = _$$_REQUIRE(_dependencyMap[2]);

  function DomHandler(callback, options, elementCB) {
    if (typeof callback === "object") {
      elementCB = options;
      options = callback;
      callback = null;
    } else if (typeof options === "function") {
      elementCB = options;
      options = defaultOpts;
    }

    this._callback = callback;
    this._options = options || defaultOpts;
    this._elementCB = elementCB;
    this.dom = [];
    this._done = false;
    this._tagStack = [];
    this._parser = this._parser || null;
  }

  var defaultOpts = {
    normalizeWhitespace: false,
    withStartIndices: false,
    withEndIndices: false
  };

  DomHandler.prototype.onparserinit = function (parser) {
    this._parser = parser;
  };

  DomHandler.prototype.onreset = function () {
    DomHandler.call(this, this._callback, this._options, this._elementCB);
  };

  DomHandler.prototype.onend = function () {
    if (this._done) return;
    this._done = true;
    this._parser = null;

    this._handleCallback(null);
  };

  DomHandler.prototype._handleCallback = DomHandler.prototype.onerror = function (error) {
    if (typeof this._callback === "function") {
      this._callback(error, this.dom);
    } else {
      if (error) throw error;
    }
  };

  DomHandler.prototype.onclosetag = function () {
    var elem = this._tagStack.pop();

    if (this._options.withEndIndices && elem) {
      elem.endIndex = this._parser.endIndex;
    }

    if (this._elementCB) this._elementCB(elem);
  };

  DomHandler.prototype._createDomElement = function (properties) {
    if (!this._options.withDomLvl1) return properties;
    var element;

    if (properties.type === "tag") {
      element = Object.create(ElementPrototype);
    } else {
      element = Object.create(NodePrototype);
    }

    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        element[key] = properties[key];
      }
    }

    return element;
  };

  DomHandler.prototype._addDomElement = function (element) {
    var parent = this._tagStack[this._tagStack.length - 1];
    var siblings = parent ? parent.children : this.dom;
    var previousSibling = siblings[siblings.length - 1];
    element.next = null;

    if (this._options.withStartIndices) {
      element.startIndex = this._parser.startIndex;
    }

    if (this._options.withEndIndices) {
      element.endIndex = this._parser.endIndex;
    }

    if (previousSibling) {
      element.prev = previousSibling;
      previousSibling.next = element;
    } else {
      element.prev = null;
    }

    siblings.push(element);
    element.parent = parent || null;
  };

  DomHandler.prototype.onopentag = function (name, attribs) {
    var properties = {
      type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
      name: name,
      attribs: attribs,
      children: []
    };

    var element = this._createDomElement(properties);

    this._addDomElement(element);

    this._tagStack.push(element);
  };

  DomHandler.prototype.ontext = function (data) {
    var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;
    var lastTag;

    if (!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length - 1]).type === ElementType.Text) {
      if (normalize) {
        lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
      } else {
        lastTag.data += data;
      }
    } else {
      if (this._tagStack.length && (lastTag = this._tagStack[this._tagStack.length - 1]) && (lastTag = lastTag.children[lastTag.children.length - 1]) && lastTag.type === ElementType.Text) {
        if (normalize) {
          lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
        } else {
          lastTag.data += data;
        }
      } else {
        if (normalize) {
          data = data.replace(re_whitespace, " ");
        }

        var element = this._createDomElement({
          data: data,
          type: ElementType.Text
        });

        this._addDomElement(element);
      }
    }
  };

  DomHandler.prototype.oncomment = function (data) {
    var lastTag = this._tagStack[this._tagStack.length - 1];

    if (lastTag && lastTag.type === ElementType.Comment) {
      lastTag.data += data;
      return;
    }

    var properties = {
      data: data,
      type: ElementType.Comment
    };

    var element = this._createDomElement(properties);

    this._addDomElement(element);

    this._tagStack.push(element);
  };

  DomHandler.prototype.oncdatastart = function () {
    var properties = {
      children: [{
        data: "",
        type: ElementType.Text
      }],
      type: ElementType.CDATA
    };

    var element = this._createDomElement(properties);

    this._addDomElement(element);

    this._tagStack.push(element);
  };

  DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function () {
    this._tagStack.pop();
  };

  DomHandler.prototype.onprocessinginstruction = function (name, data) {
    var element = this._createDomElement({
      name: name,
      data: data,
      type: ElementType.Directive
    });

    this._addDomElement(element);
  };

  module.exports = DomHandler;
},883,[884,885,886]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    Text: "text",
    Directive: "directive",
    Comment: "comment",
    Script: "script",
    Style: "style",
    Tag: "tag",
    CDATA: "cdata",
    Doctype: "doctype",
    isTag: function isTag(elem) {
      return elem.type === "tag" || elem.type === "script" || elem.type === "style";
    }
  };
},884,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var NodePrototype = module.exports = {
    get firstChild() {
      var children = this.children;
      return children && children[0] || null;
    },

    get lastChild() {
      var children = this.children;
      return children && children[children.length - 1] || null;
    },

    get nodeType() {
      return nodeTypes[this.type] || nodeTypes.element;
    }

  };
  var domLvl1 = {
    tagName: "name",
    childNodes: "children",
    parentNode: "parent",
    previousSibling: "prev",
    nextSibling: "next",
    nodeValue: "data"
  };
  var nodeTypes = {
    element: 1,
    text: 3,
    cdata: 4,
    comment: 8
  };
  Object.keys(domLvl1).forEach(function (key) {
    var shorthand = domLvl1[key];
    Object.defineProperty(NodePrototype, key, {
      get: function get() {
        return this[shorthand] || null;
      },
      set: function set(val) {
        this[shorthand] = val;
        return val;
      }
    });
  });
},885,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var NodePrototype = _$$_REQUIRE(_dependencyMap[0]);

  var ElementPrototype = module.exports = Object.create(NodePrototype);
  var domLvl1 = {
    tagName: "name"
  };
  Object.keys(domLvl1).forEach(function (key) {
    var shorthand = domLvl1[key];
    Object.defineProperty(ElementPrototype, key, {
      get: function get() {
        return this[shorthand] || null;
      },
      set: function set(val) {
        this[shorthand] = val;
        return val;
      }
    });
  });
},886,[885]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var DomHandler = _$$_REQUIRE(_dependencyMap[0]);

  var DomUtils = _$$_REQUIRE(_dependencyMap[1]);

  function FeedHandler(callback, options) {
    this.init(callback, options);
  }

  _$$_REQUIRE(_dependencyMap[2])(FeedHandler, DomHandler);

  FeedHandler.prototype.init = DomHandler;

  function getElements(what, where) {
    return DomUtils.getElementsByTagName(what, where, true);
  }

  function getOneElement(what, where) {
    return DomUtils.getElementsByTagName(what, where, true, 1)[0];
  }

  function fetch(what, where, recurse) {
    return DomUtils.getText(DomUtils.getElementsByTagName(what, where, recurse, 1)).trim();
  }

  function addConditionally(obj, prop, what, where, recurse) {
    var tmp = fetch(what, where, recurse);
    if (tmp) obj[prop] = tmp;
  }

  var isValidFeed = function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
  };

  FeedHandler.prototype.onend = function () {
    var feed = {},
        feedRoot = getOneElement(isValidFeed, this.dom),
        tmp,
        childs;

    if (feedRoot) {
      if (feedRoot.name === "feed") {
        childs = feedRoot.children;
        feed.type = "atom";
        addConditionally(feed, "id", "id", childs);
        addConditionally(feed, "title", "title", childs);
        if ((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
        addConditionally(feed, "description", "subtitle", childs);
        if (tmp = fetch("updated", childs)) feed.updated = new Date(tmp);
        addConditionally(feed, "author", "email", childs, true);
        feed.items = getElements("entry", childs).map(function (item) {
          var entry = {},
              tmp;
          item = item.children;
          addConditionally(entry, "id", "id", item);
          addConditionally(entry, "title", "title", item);
          if ((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
          if (tmp = fetch("summary", item) || fetch("content", item)) entry.description = tmp;
          if (tmp = fetch("updated", item)) entry.pubDate = new Date(tmp);
          return entry;
        });
      } else {
        childs = getOneElement("channel", feedRoot.children).children;
        feed.type = feedRoot.name.substr(0, 3);
        feed.id = "";
        addConditionally(feed, "title", "title", childs);
        addConditionally(feed, "link", "link", childs);
        addConditionally(feed, "description", "description", childs);
        if (tmp = fetch("lastBuildDate", childs)) feed.updated = new Date(tmp);
        addConditionally(feed, "author", "managingEditor", childs, true);
        feed.items = getElements("item", feedRoot.children).map(function (item) {
          var entry = {},
              tmp;
          item = item.children;
          addConditionally(entry, "id", "guid", item);
          addConditionally(entry, "title", "title", item);
          addConditionally(entry, "link", "link", item);
          addConditionally(entry, "description", "description", item);
          if (tmp = fetch("pubDate", item)) entry.pubDate = new Date(tmp);
          return entry;
        });
      }
    }

    this.dom = feed;

    DomHandler.prototype._handleCallback.call(this, feedRoot ? null : Error("couldn't find root of feed"));
  };

  module.exports = FeedHandler;
},887,[883,888,881]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var DomUtils = module.exports;
  [_$$_REQUIRE(_dependencyMap[0]), _$$_REQUIRE(_dependencyMap[1]), _$$_REQUIRE(_dependencyMap[2]), _$$_REQUIRE(_dependencyMap[3]), _$$_REQUIRE(_dependencyMap[4]), _$$_REQUIRE(_dependencyMap[5])].forEach(function (ext) {
    Object.keys(ext).forEach(function (key) {
      DomUtils[key] = ext[key].bind(DomUtils);
    });
  });
},888,[889,894,895,896,897,898]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ElementType = _$$_REQUIRE(_dependencyMap[0]),
      getOuterHTML = _$$_REQUIRE(_dependencyMap[1]),
      isTag = ElementType.isTag;

  module.exports = {
    getInnerHTML: getInnerHTML,
    getOuterHTML: getOuterHTML,
    getText: getText
  };

  function getInnerHTML(elem, opts) {
    return elem.children ? elem.children.map(function (elem) {
      return getOuterHTML(elem, opts);
    }).join("") : "";
  }

  function getText(elem) {
    if (Array.isArray(elem)) return elem.map(getText).join("");
    if (isTag(elem)) return elem.name === "br" ? "\n" : getText(elem.children);
    if (elem.type === ElementType.CDATA) return getText(elem.children);
    if (elem.type === ElementType.Text) return elem.data;
    return "";
  }
},889,[884,890]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ElementType = _$$_REQUIRE(_dependencyMap[0]);

  var entities = _$$_REQUIRE(_dependencyMap[1]);

  var unencodedElements = {
    __proto__: null,
    style: true,
    script: true,
    xmp: true,
    iframe: true,
    noembed: true,
    noframes: true,
    plaintext: true,
    noscript: true
  };

  function formatAttrs(attributes, opts) {
    if (!attributes) return;
    var output = '',
        value;

    for (var key in attributes) {
      value = attributes[key];

      if (output) {
        output += ' ';
      }

      output += key;

      if (value !== null && value !== '' || opts.xmlMode) {
        output += '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
      }
    }

    return output;
  }

  var singleTag = {
    __proto__: null,
    area: true,
    base: true,
    basefont: true,
    br: true,
    col: true,
    command: true,
    embed: true,
    frame: true,
    hr: true,
    img: true,
    input: true,
    isindex: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true
  };

  var render = module.exports = function (dom, opts) {
    if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
    opts = opts || {};
    var output = '';

    for (var i = 0; i < dom.length; i++) {
      var elem = dom[i];
      if (elem.type === 'root') output += render(elem.children, opts);else if (ElementType.isTag(elem)) output += renderTag(elem, opts);else if (elem.type === ElementType.Directive) output += renderDirective(elem);else if (elem.type === ElementType.Comment) output += renderComment(elem);else if (elem.type === ElementType.CDATA) output += renderCdata(elem);else output += renderText(elem, opts);
    }

    return output;
  };

  function renderTag(elem, opts) {
    if (elem.name === "svg") opts = {
      decodeEntities: opts.decodeEntities,
      xmlMode: true
    };
    var tag = '<' + elem.name,
        attribs = formatAttrs(elem.attribs, opts);

    if (attribs) {
      tag += ' ' + attribs;
    }

    if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {
      tag += '/>';
    } else {
      tag += '>';

      if (elem.children) {
        tag += render(elem.children, opts);
      }

      if (!singleTag[elem.name] || opts.xmlMode) {
        tag += '</' + elem.name + '>';
      }
    }

    return tag;
  }

  function renderDirective(elem) {
    return '<' + elem.data + '>';
  }

  function renderText(elem, opts) {
    var data = elem.data || '';

    if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
      data = entities.encodeXML(data);
    }

    return data;
  }

  function renderCdata(elem) {
    return '<![CDATA[' + elem.children[0].data + ']]>';
  }

  function renderComment(elem) {
    return '<!--' + elem.data + '-->';
  }
},890,[884,891]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var encode = _$$_REQUIRE(_dependencyMap[0]),
      decode = _$$_REQUIRE(_dependencyMap[1]);

  exports.decode = function (data, level) {
    return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
  };

  exports.decodeStrict = function (data, level) {
    return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
  };

  exports.encode = function (data, level) {
    return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
  };

  exports.encodeXML = encode.XML;
  exports.encodeHTML4 = exports.encodeHTML5 = exports.encodeHTML = encode.HTML;
  exports.decodeXML = exports.decodeXMLStrict = decode.XML;
  exports.decodeHTML4 = exports.decodeHTML5 = exports.decodeHTML = decode.HTML;
  exports.decodeHTML4Strict = exports.decodeHTML5Strict = exports.decodeHTMLStrict = decode.HTMLStrict;
  exports.escape = encode.escape;
},891,[892,893]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var inverseXML = getInverseObj(_$$_REQUIRE(_dependencyMap[0])),
      xmlReplacer = getInverseReplacer(inverseXML);
  exports.XML = getInverse(inverseXML, xmlReplacer);
  var inverseHTML = getInverseObj(_$$_REQUIRE(_dependencyMap[1])),
      htmlReplacer = getInverseReplacer(inverseHTML);
  exports.HTML = getInverse(inverseHTML, htmlReplacer);

  function getInverseObj(obj) {
    return Object.keys(obj).sort().reduce(function (inverse, name) {
      inverse[obj[name]] = "&" + name + ";";
      return inverse;
    }, {});
  }

  function getInverseReplacer(inverse) {
    var single = [],
        multiple = [];
    Object.keys(inverse).forEach(function (k) {
      if (k.length === 1) {
        single.push("\\" + k);
      } else {
        multiple.push(k);
      }
    });
    multiple.unshift("[" + single.join("") + "]");
    return new RegExp(multiple.join("|"), "g");
  }

  var re_nonASCII = /[^\0-\x7F]/g,
      re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

  function singleCharReplacer(c) {
    return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
  }

  function astralReplacer(c) {
    var high = c.charCodeAt(0);
    var low = c.charCodeAt(1);
    var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
    return "&#x" + codePoint.toString(16).toUpperCase() + ";";
  }

  function getInverse(inverse, re) {
    function func(name) {
      return inverse[name];
    }

    return function (data) {
      return data.replace(re, func).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
    };
  }

  var re_xmlChars = getInverseReplacer(inverseXML);

  function escapeXML(data) {
    return data.replace(re_xmlChars, singleCharReplacer).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
  }

  exports.escape = escapeXML;
},892,[880,878]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var entityMap = _$$_REQUIRE(_dependencyMap[0]),
      legacyMap = _$$_REQUIRE(_dependencyMap[1]),
      xmlMap = _$$_REQUIRE(_dependencyMap[2]),
      decodeCodePoint = _$$_REQUIRE(_dependencyMap[3]);

  var decodeXMLStrict = getStrictDecoder(xmlMap),
      decodeHTMLStrict = getStrictDecoder(entityMap);

  function getStrictDecoder(map) {
    var keys = Object.keys(map).join("|"),
        replace = getReplacer(map);
    keys += "|#[xX][\\da-fA-F]+|#\\d+";
    var re = new RegExp("&(?:" + keys + ");", "g");
    return function (str) {
      return String(str).replace(re, replace);
    };
  }

  var decodeHTML = function () {
    var legacy = Object.keys(legacyMap).sort(sorter);
    var keys = Object.keys(entityMap).sort(sorter);

    for (var i = 0, j = 0; i < keys.length; i++) {
      if (legacy[j] === keys[i]) {
        keys[i] += ";?";
        j++;
      } else {
        keys[i] += ";";
      }
    }

    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
        replace = getReplacer(entityMap);

    function replacer(str) {
      if (str.substr(-1) !== ";") str += ";";
      return replace(str);
    }

    return function (str) {
      return String(str).replace(re, replacer);
    };
  }();

  function sorter(a, b) {
    return a < b ? 1 : -1;
  }

  function getReplacer(map) {
    return function replace(str) {
      if (str.charAt(1) === "#") {
        if (str.charAt(2) === "X" || str.charAt(2) === "x") {
          return decodeCodePoint(parseInt(str.substr(3), 16));
        }

        return decodeCodePoint(parseInt(str.substr(2), 10));
      }

      return map[str.slice(1, -1)];
    };
  }

  module.exports = {
    XML: decodeXMLStrict,
    HTML: decodeHTML,
    HTMLStrict: decodeHTMLStrict
  };
},893,[878,879,880,876]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getChildren = exports.getChildren = function (elem) {
    return elem.children;
  };

  var getParent = exports.getParent = function (elem) {
    return elem.parent;
  };

  exports.getSiblings = function (elem) {
    var parent = getParent(elem);
    return parent ? getChildren(parent) : [elem];
  };

  exports.getAttributeValue = function (elem, name) {
    return elem.attribs && elem.attribs[name];
  };

  exports.hasAttrib = function (elem, name) {
    return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
  };

  exports.getName = function (elem) {
    return elem.name;
  };
},894,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  exports.removeElement = function (elem) {
    if (elem.prev) elem.prev.next = elem.next;
    if (elem.next) elem.next.prev = elem.prev;

    if (elem.parent) {
      var childs = elem.parent.children;
      childs.splice(childs.lastIndexOf(elem), 1);
    }
  };

  exports.replaceElement = function (elem, replacement) {
    var prev = replacement.prev = elem.prev;

    if (prev) {
      prev.next = replacement;
    }

    var next = replacement.next = elem.next;

    if (next) {
      next.prev = replacement;
    }

    var parent = replacement.parent = elem.parent;

    if (parent) {
      var childs = parent.children;
      childs[childs.lastIndexOf(elem)] = replacement;
    }
  };

  exports.appendChild = function (elem, child) {
    child.parent = elem;

    if (elem.children.push(child) !== 1) {
      var sibling = elem.children[elem.children.length - 2];
      sibling.next = child;
      child.prev = sibling;
      child.next = null;
    }
  };

  exports.append = function (elem, next) {
    var parent = elem.parent,
        currNext = elem.next;
    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;

    if (currNext) {
      currNext.prev = next;

      if (parent) {
        var childs = parent.children;
        childs.splice(childs.lastIndexOf(currNext), 0, next);
      }
    } else if (parent) {
      parent.children.push(next);
    }
  };

  exports.prepend = function (elem, prev) {
    var parent = elem.parent;

    if (parent) {
      var childs = parent.children;
      childs.splice(childs.lastIndexOf(elem), 0, prev);
    }

    if (elem.prev) {
      elem.prev.next = prev;
    }

    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
  };
},895,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isTag = _$$_REQUIRE(_dependencyMap[0]).isTag;

  module.exports = {
    filter: filter,
    find: find,
    findOneChild: findOneChild,
    findOne: findOne,
    existsOne: existsOne,
    findAll: findAll
  };

  function filter(test, element, recurse, limit) {
    if (!Array.isArray(element)) element = [element];

    if (typeof limit !== "number" || !isFinite(limit)) {
      limit = Infinity;
    }

    return find(test, element, recurse !== false, limit);
  }

  function find(test, elems, recurse, limit) {
    var result = [],
        childs;

    for (var i = 0, j = elems.length; i < j; i++) {
      if (test(elems[i])) {
        result.push(elems[i]);
        if (--limit <= 0) break;
      }

      childs = elems[i].children;

      if (recurse && childs && childs.length > 0) {
        childs = find(test, childs, recurse, limit);
        result = result.concat(childs);
        limit -= childs.length;
        if (limit <= 0) break;
      }
    }

    return result;
  }

  function findOneChild(test, elems) {
    for (var i = 0, l = elems.length; i < l; i++) {
      if (test(elems[i])) return elems[i];
    }

    return null;
  }

  function findOne(test, elems) {
    var elem = null;

    for (var i = 0, l = elems.length; i < l && !elem; i++) {
      if (!isTag(elems[i])) {
        continue;
      } else if (test(elems[i])) {
        elem = elems[i];
      } else if (elems[i].children.length > 0) {
        elem = findOne(test, elems[i].children);
      }
    }

    return elem;
  }

  function existsOne(test, elems) {
    for (var i = 0, l = elems.length; i < l; i++) {
      if (isTag(elems[i]) && (test(elems[i]) || elems[i].children.length > 0 && existsOne(test, elems[i].children))) {
        return true;
      }
    }

    return false;
  }

  function findAll(test, rootElems) {
    var result = [];
    var stack = rootElems.slice();

    while (stack.length) {
      var elem = stack.shift();
      if (!isTag(elem)) continue;

      if (elem.children && elem.children.length > 0) {
        stack.unshift.apply(stack, elem.children);
      }

      if (test(elem)) result.push(elem);
    }

    return result;
  }
},896,[884]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ElementType = _$$_REQUIRE(_dependencyMap[0]);

  var isTag = exports.isTag = ElementType.isTag;

  exports.testElement = function (options, element) {
    for (var key in options) {
      if (!options.hasOwnProperty(key)) ;else if (key === "tag_name") {
        if (!isTag(element) || !options.tag_name(element.name)) {
          return false;
        }
      } else if (key === "tag_type") {
        if (!options.tag_type(element.type)) return false;
      } else if (key === "tag_contains") {
        if (isTag(element) || !options.tag_contains(element.data)) {
          return false;
        }
      } else if (!element.attribs || !options[key](element.attribs[key])) {
        return false;
      }
    }

    return true;
  };

  var Checks = {
    tag_name: function tag_name(name) {
      if (typeof name === "function") {
        return function (elem) {
          return isTag(elem) && name(elem.name);
        };
      } else if (name === "*") {
        return isTag;
      } else {
        return function (elem) {
          return isTag(elem) && elem.name === name;
        };
      }
    },
    tag_type: function tag_type(type) {
      if (typeof type === "function") {
        return function (elem) {
          return type(elem.type);
        };
      } else {
        return function (elem) {
          return elem.type === type;
        };
      }
    },
    tag_contains: function tag_contains(data) {
      if (typeof data === "function") {
        return function (elem) {
          return !isTag(elem) && data(elem.data);
        };
      } else {
        return function (elem) {
          return !isTag(elem) && elem.data === data;
        };
      }
    }
  };

  function getAttribCheck(attrib, value) {
    if (typeof value === "function") {
      return function (elem) {
        return elem.attribs && value(elem.attribs[attrib]);
      };
    } else {
      return function (elem) {
        return elem.attribs && elem.attribs[attrib] === value;
      };
    }
  }

  function combineFuncs(a, b) {
    return function (elem) {
      return a(elem) || b(elem);
    };
  }

  exports.getElements = function (options, element, recurse, limit) {
    var funcs = Object.keys(options).map(function (key) {
      var value = options[key];
      return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? [] : this.filter(funcs.reduce(combineFuncs), element, recurse, limit);
  };

  exports.getElementById = function (id, element, recurse) {
    if (!Array.isArray(element)) element = [element];
    return this.findOne(getAttribCheck("id", id), element, recurse !== false);
  };

  exports.getElementsByTagName = function (name, element, recurse, limit) {
    return this.filter(Checks.tag_name(name), element, recurse, limit);
  };

  exports.getElementsByTagType = function (type, element, recurse, limit) {
    return this.filter(Checks.tag_type(type), element, recurse, limit);
  };
},897,[884]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  exports.removeSubsets = function (nodes) {
    var idx = nodes.length,
        node,
        ancestor,
        replace;

    while (--idx > -1) {
      node = ancestor = nodes[idx];
      nodes[idx] = null;
      replace = true;

      while (ancestor) {
        if (nodes.indexOf(ancestor) > -1) {
          replace = false;
          nodes.splice(idx, 1);
          break;
        }

        ancestor = ancestor.parent;
      }

      if (replace) {
        nodes[idx] = node;
      }
    }

    return nodes;
  };

  var POSITION = {
    DISCONNECTED: 1,
    PRECEDING: 2,
    FOLLOWING: 4,
    CONTAINS: 8,
    CONTAINED_BY: 16
  };

  var comparePos = exports.compareDocumentPosition = function (nodeA, nodeB) {
    var aParents = [];
    var bParents = [];
    var current, sharedParent, siblings, aSibling, bSibling, idx;

    if (nodeA === nodeB) {
      return 0;
    }

    current = nodeA;

    while (current) {
      aParents.unshift(current);
      current = current.parent;
    }

    current = nodeB;

    while (current) {
      bParents.unshift(current);
      current = current.parent;
    }

    idx = 0;

    while (aParents[idx] === bParents[idx]) {
      idx++;
    }

    if (idx === 0) {
      return POSITION.DISCONNECTED;
    }

    sharedParent = aParents[idx - 1];
    siblings = sharedParent.children;
    aSibling = aParents[idx];
    bSibling = bParents[idx];

    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
      if (sharedParent === nodeB) {
        return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
      }

      return POSITION.FOLLOWING;
    } else {
      if (sharedParent === nodeA) {
        return POSITION.PRECEDING | POSITION.CONTAINS;
      }

      return POSITION.PRECEDING;
    }
  };

  exports.uniqueSort = function (nodes) {
    var idx = nodes.length,
        node,
        position;
    nodes = nodes.slice();

    while (--idx > -1) {
      node = nodes[idx];
      position = nodes.indexOf(node);

      if (position > -1 && position < idx) {
        nodes.splice(idx, 1);
      }
    }

    nodes.sort(function (a, b) {
      var relative = comparePos(a, b);

      if (relative & POSITION.PRECEDING) {
        return -1;
      } else if (relative & POSITION.FOLLOWING) {
        return 1;
      }

      return 0;
    });
    return nodes;
  };
},898,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = Stream;

  var Parser = _$$_REQUIRE(_dependencyMap[0]);

  function Stream(options) {
    Parser.call(this, new Cbs(this), options);
  }

  _$$_REQUIRE(_dependencyMap[1])(Stream, Parser);

  Stream.prototype.readable = true;

  function Cbs(scope) {
    this.scope = scope;
  }

  var EVENTS = _$$_REQUIRE(_dependencyMap[2]).EVENTS;

  Object.keys(EVENTS).forEach(function (name) {
    if (EVENTS[name] === 0) {
      Cbs.prototype["on" + name] = function () {
        this.scope.emit(name);
      };
    } else if (EVENTS[name] === 1) {
      Cbs.prototype["on" + name] = function (a) {
        this.scope.emit(name, a);
      };
    } else if (EVENTS[name] === 2) {
      Cbs.prototype["on" + name] = function (a, b) {
        this.scope.emit(name, a, b);
      };
    } else {
      throw Error("wrong number of arguments!");
    }
  });
},899,[900,881,873]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = Stream;

  var Parser = _$$_REQUIRE(_dependencyMap[0]);

  var WritableStream = _$$_REQUIRE(_dependencyMap[1]).Writable;

  var StringDecoder = _$$_REQUIRE(_dependencyMap[2]).StringDecoder;

  var Buffer = _$$_REQUIRE(_dependencyMap[3]).Buffer;

  function Stream(cbs, options) {
    var parser = this._parser = new Parser(cbs, options);
    var decoder = this._decoder = new StringDecoder();
    WritableStream.call(this, {
      decodeStrings: false
    });
    this.once("finish", function () {
      parser.end(decoder.end());
    });
  }

  _$$_REQUIRE(_dependencyMap[4])(Stream, WritableStream);

  Stream.prototype._write = function (chunk, encoding, cb) {
    if (chunk instanceof Buffer) chunk = this._decoder.write(chunk);

    this._parser.write(chunk);

    cb();
  };
},900,[874,901,902,904,881]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";
},901,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Buffer = _$$_REQUIRE(_dependencyMap[0]).Buffer;

  var isEncoding = Buffer.isEncoding || function (encoding) {
    encoding = '' + encoding;

    switch (encoding && encoding.toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
      case 'raw':
        return true;

      default:
        return false;
    }
  };

  function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;

    while (true) {
      switch (enc) {
        case 'utf8':
        case 'utf-8':
          return 'utf8';

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return 'utf16le';

        case 'latin1':
        case 'binary':
          return 'latin1';

        case 'base64':
        case 'ascii':
        case 'hex':
          return enc;

        default:
          if (retried) return;
          enc = ('' + enc).toLowerCase();
          retried = true;
      }
    }
  }

  ;

  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);

    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
  }

  exports.StringDecoder = StringDecoder;

  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;

    switch (this.encoding) {
      case 'utf16le':
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;

      case 'utf8':
        this.fillLast = utf8FillLast;
        nb = 4;
        break;

      case 'base64':
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;

      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }

    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
  }

  StringDecoder.prototype.write = function (buf) {
    if (buf.length === 0) return '';
    var r;
    var i;

    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === undefined) return '';
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }

    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
  };

  StringDecoder.prototype.end = utf8End;
  StringDecoder.prototype.text = utf8Text;

  StringDecoder.prototype.fillLast = function (buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }

    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };

  function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
  }

  function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);

    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 1;
      return nb;
    }

    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);

    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 2;
      return nb;
    }

    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);

    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
      }

      return nb;
    }

    return 0;
  }

  function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
      self.lastNeed = 0;
      return "\uFFFD";
    }

    if (self.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 0xC0) !== 0x80) {
        self.lastNeed = 1;
        return "\uFFFD";
      }

      if (self.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 0xC0) !== 0x80) {
          self.lastNeed = 2;
          return "\uFFFD";
        }
      }
    }
  }

  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;

    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }

    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }

  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
  }

  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + "\uFFFD";
    return r;
  }

  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString('utf16le', i);

      if (r) {
        var c = r.charCodeAt(r.length - 1);

        if (c >= 0xD800 && c <= 0xDBFF) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }

      return r;
    }

    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
  }

  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';

    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString('utf16le', 0, end);
    }

    return r;
  }

  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;

    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }

    return buf.toString('base64', i, buf.length - n);
  }

  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
  }

  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }

  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
  }
},902,[903]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var buffer = _$$_REQUIRE(_dependencyMap[0]);

  var Buffer = buffer.Buffer;

  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }

  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
  }

  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number');
    }

    return Buffer(arg, encodingOrOffset, length);
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    var buf = Buffer(size);

    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }

    return buf;
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    return Buffer(size);
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    return buffer.SlowBuffer(size);
  };
},903,[904]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  'use strict';

  var base64 = _$$_REQUIRE(_dependencyMap[0]);

  var ieee754 = _$$_REQUIRE(_dependencyMap[1]);

  var isArray = _$$_REQUIRE(_dependencyMap[2]);

  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
  exports.kMaxLength = kMaxLength();

  function typedArraySupport() {
    try {
      var arr = new Uint8Array(1);
      arr.__proto__ = {
        __proto__: Uint8Array.prototype,
        foo: function foo() {
          return 42;
        }
      };
      return arr.foo() === 42 && typeof arr.subarray === 'function' && arr.subarray(1, 1).byteLength === 0;
    } catch (e) {
      return false;
    }
  }

  function kMaxLength() {
    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
  }

  function createBuffer(that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length');
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      if (that === null) {
        that = new Buffer(length);
      }

      that.length = length;
    }

    return that;
  }

  function Buffer(arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length);
    }

    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error('If encoding is specified then the first argument must be a string');
      }

      return allocUnsafe(this, arg);
    }

    return from(this, arg, encodingOrOffset, length);
  }

  Buffer.poolSize = 8192;

  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr;
  };

  function from(that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number');
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length);
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset);
    }

    return fromObject(that, value);
  }

  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;

    if (typeof Symbol !== 'undefined' && (typeof Symbol === "function" ? Symbol.species : "@@species") && Buffer[typeof Symbol === "function" ? Symbol.species : "@@species"] === Buffer) {
      Object.defineProperty(Buffer, typeof Symbol === "function" ? Symbol.species : "@@species", {
        value: null,
        configurable: true
      });
    }
  }

  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number');
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative');
    }
  }

  function alloc(that, size, fill, encoding) {
    assertSize(size);

    if (size <= 0) {
      return createBuffer(that, size);
    }

    if (fill !== undefined) {
      return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
    }

    return createBuffer(that, size);
  }

  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding);
  };

  function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }

    return that;
  }

  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size);
  };

  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size);
  };

  function fromString(that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding');
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);

    if (actual !== length) {
      that = that.slice(0, actual);
    }

    return that;
  }

  function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);

    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }

    return that;
  }

  function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength;

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds');
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds');
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      that = fromArrayLike(that, array);
    }

    return that;
  }

  function fromObject(that, obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that;
      }

      obj.copy(that, 0, 0, len);
      return that;
    }

    if (obj) {
      if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0);
        }

        return fromArrayLike(that, obj);
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data);
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
  }

  function checked(length) {
    if (length >= kMaxLength()) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + ' bytes');
    }

    return length | 0;
  }

  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }

    return Buffer.alloc(+length);
  }

  Buffer.isBuffer = function isBuffer(b) {
    return !!(b != null && b._isBuffer);
  };

  Buffer.compare = function compare(a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('Arguments must be Buffers');
    }

    if (a === b) return 0;
    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;

      default:
        return false;
    }
  };

  Buffer.concat = function concat(list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    if (list.length === 0) {
      return Buffer.alloc(0);
    }

    var i;

    if (length === undefined) {
      length = 0;

      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;

    for (i = 0; i < list.length; ++i) {
      var buf = list[i];

      if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }

      buf.copy(buffer, pos);
      pos += buf.length;
    }

    return buffer;
  };

  function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length;
    }

    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength;
    }

    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0;
    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;

        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length;

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;

        case 'hex':
          return len >>> 1;

        case 'base64':
          return base64ToBytes(string).length;

        default:
          if (loweredCase) return utf8ToBytes(string).length;
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer.byteLength = byteLength;

  function slowToString(encoding, start, end) {
    var loweredCase = false;

    if (start === undefined || start < 0) {
      start = 0;
    }

    if (start > this.length) {
      return '';
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return '';
    }

    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return '';
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);

        case 'ascii':
          return asciiSlice(this, start, end);

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);

        case 'base64':
          return base64Slice(this, start, end);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer.prototype._isBuffer = true;

  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16() {
    var len = this.length;

    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }

    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }

    return this;
  };

  Buffer.prototype.swap32 = function swap32() {
    var len = this.length;

    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }

    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }

    return this;
  };

  Buffer.prototype.swap64 = function swap64() {
    var len = this.length;

    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }

    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }

    return this;
  };

  Buffer.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };

  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };

  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;

    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }

    return '<Buffer ' + str + '>';
  };

  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (!Buffer.isBuffer(target)) {
      throw new TypeError('Argument must be a Buffer');
    }

    if (start === undefined) {
      start = 0;
    }

    if (end === undefined) {
      end = target ? target.length : 0;
    }

    if (thisStart === undefined) {
      thisStart = 0;
    }

    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }

    if (thisStart >= thisEnd) {
      return -1;
    }

    if (start >= end) {
      return 1;
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    if (buffer.length === 0) return -1;

    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }

    byteOffset = +byteOffset;

    if (isNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer.length - 1;
    }

    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    }

    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    if (Buffer.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }

      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF;

      if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }

      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }

    throw new TypeError('val must be string, number or Buffer');
  }

  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();

      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }

        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }

    var i;

    if (dir) {
      var foundIndex = -1;

      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

      for (i = byteOffset; i >= 0; i--) {
        var found = true;

        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }

        if (found) return i;
      }
    }

    return -1;
  }

  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };

  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };

  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;

    if (!length) {
      length = remaining;
    } else {
      length = Number(length);

      if (length > remaining) {
        length = remaining;
      }
    }

    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

    if (length > strLen / 2) {
      length = strLen / 2;
    }

    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }

    return i;
  }

  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }

  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }

  function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }

  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }

  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }

  Buffer.prototype.write = function write(string, offset, length, encoding) {
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset | 0;

      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }

    if (!encoding) encoding = 'utf8';
    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);

        case 'ascii':
          return asciiWrite(this, string, offset, length);

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length);

        case 'base64':
          return base64Write(this, string, offset, length);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };

  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }

  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;

    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }

            break;

          case 2:
            secondByte = buf[i + 1];

            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }

        }
      }

      if (codePoint === null) {
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res);
  }

  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;

    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }

    var res = '';
    var i = 0;

    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }

    return res;
  }

  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }

    return ret;
  }

  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }

    return ret;
  }

  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';

    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }

    return out;
  }

  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';

    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }

    return res;
  }

  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;
    var newBuf;

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);

      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf;
  };

  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }

  Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val;
  };

  Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;

    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val;
  };

  Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };

  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];

    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };

  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };

  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };

  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };

  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };

  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 0xff;
    return offset + 1;
  };

  function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;

    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }

    return offset + 2;
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }

    return offset + 2;
  };

  function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;

    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }

    return offset + 4;
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }

    return offset + 4;
  };

  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }

    return offset + 2;
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }

    return offset + 2;
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }

    return offset + 4;
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }

    return offset + 4;
  };

  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }

  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }

    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };

  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157e+308);
    }

    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };

  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;

    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }

    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    if (end > this.length) end = this.length;

    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
    }

    return len;
  };

  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }

      if (val.length === 1) {
        var code = val.charCodeAt(0);

        if (code < 256) {
          val = code;
        }
      }

      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }

      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }

    if (end <= start) {
      return this;
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;

    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;

      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this;
  };

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean(str) {
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    if (str.length < 2) return '';

    while (str.length % 4 !== 0) {
      str = str + '=';
    }

    return str;
  }

  function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, '');
  }

  function toHex(n) {
    if (n < 16) return '0' + n.toString(16);
    return n.toString(16);
  }

  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        if (!leadSurrogate) {
          if (codePoint > 0xDBFF) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          }

          leadSurrogate = codePoint;
          continue;
        }

        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        }

        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }

    return bytes;
  }

  function asciiToBytes(str) {
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }

    return byteArray;
  }

  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray;
  }

  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }

  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }

    return i;
  }

  function isnan(val) {
    return val !== val;
  }
},904,[114,905,906]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;

    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;

    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }

    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };

  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);

      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }

      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }

      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = e << mLen | m;
    eLen += mLen;

    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };
},905,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var toString = {}.toString;

  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };
},906,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = ProxyHandler;

  function ProxyHandler(cbs) {
    this._cbs = cbs || {};
  }

  var EVENTS = _$$_REQUIRE(_dependencyMap[0]).EVENTS;

  Object.keys(EVENTS).forEach(function (name) {
    if (EVENTS[name] === 0) {
      name = "on" + name;

      ProxyHandler.prototype[name] = function () {
        if (this._cbs[name]) this._cbs[name]();
      };
    } else if (EVENTS[name] === 1) {
      name = "on" + name;

      ProxyHandler.prototype[name] = function (a) {
        if (this._cbs[name]) this._cbs[name](a);
      };
    } else if (EVENTS[name] === 2) {
      name = "on" + name;

      ProxyHandler.prototype[name] = function (a, b) {
        if (this._cbs[name]) this._cbs[name](a, b);
      };
    } else {
      throw Error("wrong number of arguments");
    }
  });
},907,[873]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = CollectingHandler;

  function CollectingHandler(cbs) {
    this._cbs = cbs || {};
    this.events = [];
  }

  var EVENTS = _$$_REQUIRE(_dependencyMap[0]).EVENTS;

  Object.keys(EVENTS).forEach(function (name) {
    if (EVENTS[name] === 0) {
      name = "on" + name;

      CollectingHandler.prototype[name] = function () {
        this.events.push([name]);
        if (this._cbs[name]) this._cbs[name]();
      };
    } else if (EVENTS[name] === 1) {
      name = "on" + name;

      CollectingHandler.prototype[name] = function (a) {
        this.events.push([name, a]);
        if (this._cbs[name]) this._cbs[name](a);
      };
    } else if (EVENTS[name] === 2) {
      name = "on" + name;

      CollectingHandler.prototype[name] = function (a, b) {
        this.events.push([name, a, b]);
        if (this._cbs[name]) this._cbs[name](a, b);
      };
    } else {
      throw Error("wrong number of arguments");
    }
  });

  CollectingHandler.prototype.onreset = function () {
    this.events = [];
    if (this._cbs.onreset) this._cbs.onreset();
  };

  CollectingHandler.prototype.restart = function () {
    if (this._cbs.onreset) this._cbs.onreset();

    for (var i = 0, len = this.events.length; i < len; i++) {
      if (this._cbs[this.events[i][0]]) {
        var num = this.events[i].length;

        if (num === 1) {
          this._cbs[this.events[i][0]]();
        } else if (num === 2) {
          this._cbs[this.events[i][0]](this.events[i][1]);
        } else {
          this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
        }
      }
    }
  };
},908,[873]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.a = a;
  exports.img = img;
  exports.ul = ul;
  exports.iframe = iframe;
  exports.br = br;
  exports.textwrapper = textwrapper;
  exports.ol = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _HTMLStyles = _$$_REQUIRE(_dependencyMap[5]);

  var _HTMLImage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  function a(htmlAttribs, children, convertedCSSStyles, passProps) {
    var style = (0, _HTMLStyles._constructStyles)({
      tagName: 'a',
      htmlAttribs: htmlAttribs,
      passProps: passProps,
      styleSet: passProps.parentWrapper === 'Text' ? 'TEXT' : 'VIEW'
    });
    var parentWrapper = passProps.parentWrapper,
        onLinkPress = passProps.onLinkPress,
        key = passProps.key,
        data = passProps.data;

    var onPress = function onPress(evt) {
      return onLinkPress && htmlAttribs && htmlAttribs.href ? onLinkPress(evt, htmlAttribs.href, htmlAttribs) : undefined;
    };

    if (parentWrapper === 'Text') {
      return _react.default.createElement(_reactNative.Text, (0, _extends2.default)({}, passProps, {
        style: style,
        onPress: onPress,
        key: key
      }), children || data);
    } else {
      return _react.default.createElement(_reactNative.TouchableOpacity, {
        onPress: onPress,
        key: key
      }, children || data);
    }
  }

  function img(htmlAttribs, children, convertedCSSStyles) {
    var passProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    if (!htmlAttribs.src) {
      return false;
    }

    var style = (0, _HTMLStyles._constructStyles)({
      tagName: 'img',
      htmlAttribs: htmlAttribs,
      passProps: passProps,
      styleSet: 'IMAGE'
    });
    var src = htmlAttribs.src,
        alt = htmlAttribs.alt,
        width = htmlAttribs.width,
        height = htmlAttribs.height;
    return _react.default.createElement(_HTMLImage.default, (0, _extends2.default)({
      source: {
        uri: src
      },
      alt: alt,
      width: width,
      height: height,
      style: style
    }, passProps));
  }

  function ul(htmlAttribs, children, convertedCSSStyles) {
    var passProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var style = (0, _HTMLStyles._constructStyles)({
      tagName: 'ul',
      htmlAttribs: htmlAttribs,
      passProps: passProps,
      styleSet: 'VIEW'
    });
    var rawChildren = passProps.rawChildren,
        nodeIndex = passProps.nodeIndex,
        key = passProps.key,
        baseFontStyle = passProps.baseFontStyle,
        listsPrefixesRenderers = passProps.listsPrefixesRenderers;
    var baseFontSize = baseFontStyle.fontSize || 14;
    children = children && children.map(function (child, index) {
      var rawChild = rawChildren[index];
      var prefix = false;
      var rendererArgs = [htmlAttribs, children, convertedCSSStyles, (0, _objectSpread2.default)({}, passProps, {
        index: index
      })];

      if (rawChild) {
        if (rawChild.parentTag === 'ul') {
          prefix = listsPrefixesRenderers && listsPrefixesRenderers.ul ? listsPrefixesRenderers.ul.apply(listsPrefixesRenderers, rendererArgs) : _react.default.createElement(_reactNative.View, {
            style: {
              marginRight: 10,
              width: baseFontSize / 2.8,
              height: baseFontSize / 2.8,
              marginTop: baseFontSize / 2,
              borderRadius: baseFontSize / 2.8,
              backgroundColor: 'black'
            }
          });
        } else if (rawChild.parentTag === 'ol') {
          prefix = listsPrefixesRenderers && listsPrefixesRenderers.ol ? listsPrefixesRenderers.ol.apply(listsPrefixesRenderers, rendererArgs) : _react.default.createElement(_reactNative.Text, {
            style: {
              marginRight: 5,
              fontSize: baseFontSize
            }
          }, index + 1, ")");
        }
      }

      return _react.default.createElement(_reactNative.View, {
        key: "list-" + nodeIndex + "-" + index + "-" + key,
        style: {
          flexDirection: 'row',
          marginBottom: 10
        }
      }, prefix, _react.default.createElement(_reactNative.View, {
        style: {
          flex: 1
        }
      }, child));
    });
    return _react.default.createElement(_reactNative.View, {
      style: style,
      key: key
    }, children);
  }

  var ol = ul;
  exports.ol = ol;

  function iframe(htmlAttribs, children, convertedCSSStyles, passProps) {
    if (!htmlAttribs.src) {
      return false;
    }

    var staticContentMaxWidth = passProps.staticContentMaxWidth,
        tagsStyles = passProps.tagsStyles,
        classesStyles = passProps.classesStyles;
    var tagStyleHeight = tagsStyles.iframe && tagsStyles.iframe.height;
    var tagStyleWidth = tagsStyles.iframe && tagsStyles.iframe.width;
    var classStyles = (0, _HTMLStyles._getElementClassStyles)(htmlAttribs, classesStyles);
    var classStyleWidth = classStyles.width;
    var classStyleHeight = classStyles.height;
    var attrHeight = htmlAttribs.height ? parseInt(htmlAttribs.height) : false;
    var attrWidth = htmlAttribs.width ? parseInt(htmlAttribs.width) : false;
    var height = attrHeight || classStyleHeight || tagStyleHeight || 200;
    var width = attrWidth || classStyleWidth || tagStyleWidth || staticContentMaxWidth;
    var style = (0, _HTMLStyles._constructStyles)({
      tagName: 'iframe',
      htmlAttribs: htmlAttribs,
      passProps: passProps,
      styleSet: 'VIEW',
      additionalStyles: [{
        height: height,
        width: width
      }]
    });
    return _react.default.createElement(_reactNative.WebView, {
      key: passProps.key,
      source: {
        uri: htmlAttribs.src
      },
      style: style
    });
  }

  function br(htlmAttribs, children, convertedCSSStyles, passProps) {
    return _react.default.createElement(_reactNative.Text, {
      style: {
        height: 1.2 * passProps.emSize,
        flex: 1
      },
      key: passProps.key
    }, "\n");
  }

  function textwrapper(htmlAttribs, children, convertedCSSStyles, _ref) {
    var key = _ref.key;
    return _react.default.createElement(_reactNative.Text, {
      key: key,
      style: convertedCSSStyles
    }, children);
  }
},909,[1,43,8,46,2,869,910]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var HTMLImage = function (_PureComponent) {
    (0, _inherits2.default)(HTMLImage, _PureComponent);

    function HTMLImage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, HTMLImage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HTMLImage).call(this, props));
      _this.state = {
        width: props.imagesInitialDimensions.width,
        height: props.imagesInitialDimensions.height
      };
      return _this;
    }

    (0, _createClass2.default)(HTMLImage, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.getImageSize();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this.getImageSize(nextProps);
      }
    }, {
      key: "getDimensionsFromStyle",
      value: function getDimensionsFromStyle(style, height, width) {
        var styleWidth;
        var styleHeight;

        if (height) {
          styleHeight = height;
        }

        if (width) {
          styleWidth = width;
        }

        if (Array.isArray(style)) {
          style.forEach(function (styles) {
            if (!width && styles['width']) {
              styleWidth = styles['width'];
            }

            if (!height && styles['height']) {
              styleHeight = styles['height'];
            }
          });
        } else {
          if (!width && style['width']) {
            styleWidth = style['width'];
          }

          if (!height && style['height']) {
            styleHeight = style['height'];
          }
        }

        return {
          styleWidth: styleWidth,
          styleHeight: styleHeight
        };
      }
    }, {
      key: "getImageSize",
      value: function getImageSize() {
        var _this2 = this;

        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
        var source = props.source,
            imagesMaxWidth = props.imagesMaxWidth,
            style = props.style,
            height = props.height,
            width = props.width;

        var _this$getDimensionsFr = this.getDimensionsFromStyle(style, height, width),
            styleWidth = _this$getDimensionsFr.styleWidth,
            styleHeight = _this$getDimensionsFr.styleHeight;

        if (styleWidth && styleHeight) {
          return this.setState({
            width: typeof styleWidth === 'string' && styleWidth.search('%') !== -1 ? styleWidth : parseInt(styleWidth, 10),
            height: typeof styleHeight === 'string' && styleHeight.search('%') !== -1 ? styleHeight : parseInt(styleHeight, 10)
          });
        }

        _reactNative.Image.getSize(source.uri, function (originalWidth, originalHeight) {
          if (!imagesMaxWidth) {
            return _this2.setState({
              width: originalWidth,
              height: originalHeight
            });
          }

          var optimalWidth = imagesMaxWidth <= originalWidth ? imagesMaxWidth : originalWidth;
          var optimalHeight = optimalWidth * originalHeight / originalWidth;

          _this2.setState({
            width: optimalWidth,
            height: optimalHeight,
            error: false
          });
        }, function () {
          _this2.setState({
            error: true
          });
        });
      }
    }, {
      key: "validImage",
      value: function validImage(source, style) {
        var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return _react.default.createElement(_reactNative.Image, (0, _extends2.default)({
          source: source,
          style: [style, {
            width: this.state.width,
            height: this.state.height,
            resizeMode: 'cover'
          }]
        }, props));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            source = _this$props.source,
            style = _this$props.style,
            passProps = _this$props.passProps;
        return !this.state.error ? this.validImage(source, style, passProps) : this.errorImage;
      }
    }, {
      key: "errorImage",
      get: function get() {
        return _react.default.createElement(_reactNative.View, {
          style: {
            width: 50,
            height: 50,
            borderWidth: 1,
            borderColor: 'lightgray',
            overflow: 'hidden',
            justifyContent: 'center'
          }
        }, this.props.alt ? _react.default.createElement(_reactNative.Text, {
          style: {
            textAlign: 'center',
            fontStyle: 'italic'
          }
        }, this.props.alt) : false);
      }
    }]);
    return HTMLImage;
  }(_react.PureComponent);

  exports.default = HTMLImage;
  HTMLImage.propTypes = {
    source: _propTypes.default.object.isRequired,
    alt: _propTypes.default.string,
    height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    style: _reactNative.Image.propTypes.style,
    imagesMaxWidth: _propTypes.default.number,
    imagesInitialDimensions: _propTypes.default.shape({
      width: _propTypes.default.number,
      height: _propTypes.default.number
    })
  };
  HTMLImage.defaultProps = {
    imagesInitialDimensions: {
      width: 100,
      height: 100
    }
  };
},910,[361,1,8,19,20,27,30,33,46,2,60]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _requests = _$$_REQUIRE(_dependencyMap[10]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _NewsCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var NewsScreen = function (_BaseScreen) {
    (0, _inherits2.default)(NewsScreen, _BaseScreen);

    function NewsScreen(props) {
      var _this;

      (0, _classCallCheck2.default)(this, NewsScreen);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NewsScreen).call(this, props));
      _this.state = {
        articles: [],
        refreshing: true
      };
      _this._fetchArticles = _this._fetchArticles.bind((0, _assertThisInitialized2.default)(_this));
      return _this;
    }

    (0, _createClass2.default)(NewsScreen, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._fetchArticles(true);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var refreshControl = _react.default.createElement(_reactNative.RefreshControl, {
          refreshing: this.state.refreshing,
          onRefresh: function onRefresh() {
            return _this2._fetchArticles(true);
          }
        });

        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.SectionList, {
          refreshControl: refreshControl,
          style: styles.listContainer,
          extraData: this.state,
          renderItem: function renderItem(info) {
            return _react.default.createElement(_NewsCard.default, {
              onPressNav: function onPressNav() {
                return _this2.props.navigation.navigate('NewsDetail', {
                  articleParams: JSON.stringify(info.item.value)
                });
              },
              articleParams: info.item.value
            });
          },
          renderSectionHeader: function renderSectionHeader(_ref) {
            var title = _ref.section.title;
            return _react.default.createElement(_reactNative.Text, {
              style: styles.category
            }, title);
          },
          sections: [{
            title: 'Recent News',
            data: this.state.articles
          }],
          keyExtractor: function keyExtractor(item) {
            return item.key;
          }
        }));
      }
    }, {
      key: "_fetchArticles",
      value: function _fetchArticles() {
        var _this3 = this;

        var refresh,
            _args = arguments;
        return _regenerator.default.async(function _fetchArticles$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                refresh = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;
                this.setState({
                  refreshing: true
                });
                _context.next = 4;
                return _regenerator.default.awrap((0, _requests.getRequest)('/api/v1/articles', function (res) {
                  var articleList = res.data.map(function (article) {
                    return {
                      key: article.id.toString(),
                      value: article
                    };
                  });

                  _this3.setState({
                    articles: articleList,
                    refreshing: false
                  });
                }, function (error) {
                  return console.log(error);
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }]);
    return NewsScreen;
  }(_BaseScreen2.default);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      alignItems: 'center'
    },
    listContainer: {
      width: '100%'
    },
    category: {
      fontSize: 48,
      alignSelf: 'center'
    }
  });

  var _default = NewsScreen;
  exports.default = _default;
},911,[1,129,19,20,27,30,29,33,46,2,912,469,913]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getRequest = getRequest;
  exports.postRequest = postRequest;
  exports.putRequest = putRequest;
  exports.deleteRequest = deleteRequest;
  exports.postRequestNoCatch = postRequestNoCatch;
  exports.putRequestNoCatch = putRequestNoCatch;

  var _network = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function requestNoCatch(type, route, successFunc, errorFunc) {
    var params = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var host = _network.default.URL;
    console.log("Sending " + type + " request to host: " + host + " at route: " + route);
    var requestData = {
      method: type,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      }
    };

    if (type != "GET") {
      requestData.body = JSON.stringify(params);
    }

    return fetch("" + host + route, requestData).then(function (response) {
      if (response.ok) {
        return response.json().then(function (object) {
          return successFunc(object);
        });
      } else {
        return response.json().then(function (error) {
          return errorFunc(error);
        });
      }
    });
  }

  function request(type, route, successFunc, errorFunc) {
    var params = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    return requestNoCatch(type, route, successFunc, errorFunc, params).catch(function (error) {
      errorFunc(error);
      console.log(error);
    });
  }

  function getRequest(route, successFunc, errorFunc) {
    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    return request("GET", route, successFunc, errorFunc, params);
  }

  function postRequest(route, successFunc, errorFunc) {
    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "{}";
    return request("POST", route, successFunc, errorFunc, params);
  }

  function postRequestNoCatch(route, successFunc, errorFunc) {
    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "{}";
    return requestNoCatch("POST", route, successFunc, errorFunc, params);
  }

  function putRequest(route, successFunc, errorFunc) {
    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "{}";
    return request("PUT", route, successFunc, errorFunc, params);
  }

  function putRequestNoCatch(route, successFunc, errorFunc) {
    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "{}";
    return requestNoCatch("PUT", route, successFunc, errorFunc, params);
  }

  function deleteRequest(route, successFunc, errorFunc) {
    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "{}";
    return request("DELETE", route, successFunc, errorFunc, params);
  }
},912,[1,861]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var NewsCard = function NewsCard(props) {
    return _react.default.createElement(_reactNative.TouchableNativeFeedback, {
      onPress: function onPress() {
        return props.onPressNav();
      },
      background: _reactNative.TouchableNativeFeedback.Ripple()
    }, _react.default.createElement(_reactNative.View, {
      style: styles.container
    }, _react.default.createElement(_reactNative.View, {
      style: styles.contentContainer
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.title
    }, props.articleParams.title), _react.default.createElement(_reactNative.Text, {
      style: styles.lead
    }, props.articleParams.summary.substring(0, 100)), _react.default.createElement(_reactNative.Text, {
      style: styles.date
    }, Date(props.articleParams.pub_date).substring(4, 10))), _react.default.createElement(_reactNative.TouchableNativeFeedback, {
      onPress: function onPress() {
        return props.onPressNav();
      },
      background: _reactNative.TouchableNativeFeedback.SelectableBackgroundBorderless()
    }, _react.default.createElement(_reactNative.View, {
      style: styles.buttonContainer
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.buttonText
    }, "READ MORE")))));
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      marginBottom: 10,
      marginTop: 10,
      marginRight: 20,
      marginLeft: 20,
      paddingBottom: 10,
      paddingTop: 10,
      paddingLeft: 5,
      paddingRight: 5,
      backgroundColor: '#FFFFFF',
      elevation: 5,
      borderRadius: 10,
      flex: 1,
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    contentContainer: {
      width: '100%',
      flex: 1,
      backgroundColor: 'transparent',
      marginTop: 12,
      paddingLeft: 28,
      paddingRight: 28,
      marginBottom: 39
    },
    buttonContainer: {
      alignSelf: 'flex-start',
      justifyContent: 'flex-end'
    },
    buttonText: {
      fontSize: 14,
      fontWeight: 'bold',
      marginLeft: 26,
      marginBottom: 12,
      color: '#E2583E'
    },
    title: {
      textAlign: 'left',
      fontSize: 24,
      fontWeight: 'bold',
      alignSelf: 'center'
    },
    lead: {
      textAlign: 'left',
      fontSize: 16,
      fontWeight: 'normal',
      marginTop: 10,
      marginBottom: 5
    },
    date: {
      fontSize: 16,
      fontWeight: 'normal',
      marginTop: 5,
      marginBottom: 5
    }
  });

  var _default = NewsCard;
  exports.default = _default;
},913,[1,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var ActionScreen = function (_BaseScreen) {
    (0, _inherits2.default)(ActionScreen, _BaseScreen);

    function ActionScreen() {
      (0, _classCallCheck2.default)(this, ActionScreen);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ActionScreen).apply(this, arguments));
    }

    (0, _createClass2.default)(ActionScreen, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            alignItems: 'center'
          }
        }, _react.default.createElement(_reactNative.View, {
          style: {
            flex: .5,
            justifyContent: 'flex-end'
          }
        }, _react.default.createElement(_reactNative.Text, null, "Coming Soon!")));
      }
    }]);
    return ActionScreen;
  }(_BaseScreen2.default);

  var _default = ActionScreen;
  exports.default = _default;
},914,[1,19,20,27,30,33,46,2,469]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _alerts = _$$_REQUIRE(_dependencyMap[10]);

  var _notifications = _$$_REQUIRE(_dependencyMap[11]);

  var _login = _$$_REQUIRE(_dependencyMap[12]);

  var _UserInfoCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var ProfileScreen = function (_BaseScreen) {
    (0, _inherits2.default)(ProfileScreen, _BaseScreen);

    function ProfileScreen(props) {
      var _this;

      (0, _classCallCheck2.default)(this, ProfileScreen);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ProfileScreen).call(this, props));

      _this._signOutAsync = function _callee() {
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                (0, _alerts.okAlert)('Logged Out', '');
                _context.prev = 1;
                _context.next = 4;
                return _regenerator.default.awrap((0, _login.userLogOut)());

              case 4:
                _context.next = 10;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](1);
                console.log("signOutAsync failed");
                console.log(_context.t0);

              case 10:
                _this.props.navigation.navigate('Auth');

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, null, null, [[1, 6]]);
      };

      _this._handleRegister = function _callee2() {
        return _regenerator.default.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this.props.navigation.navigate('Register');

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        });
      };

      _this._navigateLogin = function _callee3() {
        return _regenerator.default.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return _regenerator.default.awrap((0, _login.guestLogOut)());

              case 3:
                _context3.next = 9;
                break;

              case 5:
                _context3.prev = 5;
                _context3.t0 = _context3["catch"](0);
                console.log("guest logout failed");
                console.log(_context3.t0);

              case 9:
                _this.props.navigation.navigate('Auth');

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, null, null, [[0, 5]]);
      };

      _this._toggleNotifications = function _callee4() {
        var status;
        return _regenerator.default.async(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('notificationsOn'));

              case 2:
                status = _context4.sent;

                if (status == null) {
                  status = true;
                }

                status = !JSON.parse(status);

                if (status) {
                  _reactNative.ToastAndroid.show("Turned Notifications On", _reactNative.ToastAndroid.SHORT);
                } else {
                  _reactNative.ToastAndroid.show("Turned Notifications Off", _reactNative.ToastAndroid.SHORT);
                }

                _context4.next = 8;
                return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('notificationsOn', JSON.stringify(status)));

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        });
      };

      _this._Policy = function _callee5() {
        return _regenerator.default.async(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _this.props.navigation.navigate('Privacy');

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        });
      };

      _this._Version = function _callee6() {
        return _regenerator.default.async(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _this.props.navigation.navigate('Version');

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        });
      };

      _this._fetchUserInfo = function _callee7() {
        var userInfo, _userInfo;

        return _regenerator.default.async(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                console.log("fetching");
                _context7.prev = 1;
                _context7.next = 4;
                return _regenerator.default.awrap((0, _login.getStoredUserInfo)());

              case 4:
                _userInfo = _context7.sent;

                _this.setState({
                  userInfo: _userInfo
                });

                console.log(_userInfo);
                _context7.next = 13;
                break;

              case 9:
                _context7.prev = 9;
                _context7.t0 = _context7["catch"](1);

                _this.setState({
                  userInfo: null
                });

                console.log("error getting user info");

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, null, null, [[1, 9]]);
      };

      _this.state = {
        componentDidMount: false,
        loggedIn: false,
        result: null
      };
      return _this;
    }

    (0, _createClass2.default)(ProfileScreen, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (!this.state.componentDidMount) {
          return _react.default.createElement(_reactNative.View, {
            style: {
              flex: 1,
              alignItems: 'center'
            }
          }, _react.default.createElement(_reactNative.Text, null, "Loading..."));
        } else {
          return _react.default.createElement(_reactNative.View, {
            style: {
              flex: 1,
              alignItems: 'center'
            }
          }, this.state.loggedIn ? _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, null, "Hi FSF! This is a profile"), this.state.userInfo != null ? _react.default.createElement(_UserInfoCard.default, {
            userInfo: this.state.userInfo
          }) : null, _react.default.createElement(_reactNative.Button, {
            onPress: this._signOutAsync,
            title: "Sign Out"
          })) : _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, null, "Sign In or Sign Up to view your profile!"), _react.default.createElement(_reactNative.Button, {
            onPress: this._navigateLogin,
            title: "Sign In"
          }), _react.default.createElement(_reactNative.Button, {
            onPress: this._handleRegister,
            title: "Join FSF"
          })), _react.default.createElement(_reactNative.Button, {
            onPress: this._Policy,
            title: "Privacy Policy"
          }), _react.default.createElement(_reactNative.Button, {
            onPress: this._Version,
            title: "Version"
          }), _react.default.createElement(_reactNative.Button, {
            onPress: function onPress() {
              return _this2._toggleNotifications();
            },
            title: "Toggle Notifications"
          }), _react.default.createElement(_reactNative.Button, {
            onPress: function onPress() {
              return (0, _notifications.testNotify)("Test Notification");
            },
            title: "Test Notification"
          }));
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        this._fetchUserInfo();

        (0, _login.getStoredId)().then(function (_) {
          _this3.setState({
            loggedIn: true,
            componentDidMount: true
          });
        }).catch(function (_) {
          _this3.setState({
            loggedIn: false,
            componentDidMount: true
          });
        });
      }
    }]);
    return ProfileScreen;
  }(_BaseScreen2.default);

  var _default = ProfileScreen;
  exports.default = _default;
},915,[1,129,19,20,27,30,33,46,2,469,857,916,859,918]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initializeNotifications = initializeNotifications;
  exports.notify = notify;
  exports.testNotify = testNotify;

  var _reactNativeFsfLocalNotifications = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function initializeNotifications() {
    _reactNativeFsfLocalNotifications.default.initializeNotifications();
  }

  function notify(title, content, link, id) {
    _reactNativeFsfLocalNotifications.default.publishNotification(title, content, link, id);
  }

  function testNotify(content) {
    _reactNativeFsfLocalNotifications.default.publishNotification('Donate Now!', content, 'fsf://fsf/donate', -1);
  }
},916,[1,917]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var FSFLocalNotifications = _reactNative.NativeModules.FSFLocalNotifications;
  var _default = FSFLocalNotifications;
  exports.default = _default;
},917,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var UserInfoCard = function (_React$Component) {
    (0, _inherits2.default)(UserInfoCard, _React$Component);

    function UserInfoCard(props) {
      (0, _classCallCheck2.default)(this, UserInfoCard);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UserInfoCard).call(this, props));
    }

    (0, _createClass2.default)(UserInfoCard, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.View, {
          style: styles.contentContainer
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.lead
        }, this.props.userInfo.email), _react.default.createElement(_reactNative.Text, {
          style: styles.lead
        }, this.props.userInfo.firstname.substring(0, 100)), _react.default.createElement(_reactNative.Text, {
          style: styles.lead
        }, this.props.userInfo.lastname.substring(0, 100)), _react.default.createElement(_reactNative.Text, {
          style: styles.lead
        }, this.props.userInfo.address.substring(0, 100))));
      }
    }]);
    return UserInfoCard;
  }(_react.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      marginBottom: 10,
      marginTop: 10,
      marginRight: 20,
      marginLeft: 20,
      paddingBottom: 10,
      paddingTop: 10,
      paddingLeft: 5,
      paddingRight: 5,
      backgroundColor: '#FFFFFF',
      elevation: 5,
      borderRadius: 10,
      flex: 1,
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    contentContainer: {
      width: '100%',
      flex: 1,
      backgroundColor: 'transparent',
      marginTop: 12,
      paddingLeft: 28,
      paddingRight: 28,
      marginBottom: 39
    },
    buttonContainer: {
      alignSelf: 'flex-start',
      justifyContent: 'flex-end'
    },
    buttonText: {
      fontSize: 14,
      fontWeight: 'bold',
      marginLeft: 26,
      marginBottom: 12,
      color: '#E2583E'
    },
    title: {
      textAlign: 'left',
      fontSize: 24,
      fontWeight: 'bold',
      alignSelf: 'center'
    },
    lead: {
      textAlign: 'left',
      fontSize: 16,
      fontWeight: 'normal',
      marginTop: 10,
      marginBottom: 5
    },
    date: {
      fontSize: 16,
      fontWeight: 'normal',
      marginTop: 5,
      marginBottom: 5
    }
  });

  var _default = UserInfoCard;
  exports.default = _default;
},918,[1,19,20,27,30,33,46,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var PrivacyPolicyScreen = function (_BaseScreen) {
    (0, _inherits2.default)(PrivacyPolicyScreen, _BaseScreen);

    function PrivacyPolicyScreen() {
      (0, _classCallCheck2.default)(this, PrivacyPolicyScreen);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PrivacyPolicyScreen).apply(this, arguments));
    }

    (0, _createClass2.default)(PrivacyPolicyScreen, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            alignItems: 'center'
          }
        }, _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.Text, null, "Your trust is important to the Free Software Foundation (FSF), and we take privacy and security very seriously. If you have any questions or concerns about our privacy policy or our use of data, please get in touch with us at privacy@fsf.org, +1-617-542-5942, or by our mailing address: Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA. FSF staff, management, and volunteers uphold strict internal policies against unauthorized disclosure or use of personal information. We will never share your information with parties outside the FSF, unless we have explicitly made you aware that we will before you give it to us. We use services for payment processing, which requires sharing the transaction information with them over a secure connection, under legal agreement that appropriately ntrols its use and retention. We may establish similar arrangements with other formally contracted service providers, but always use privacy and security as key criteria when selecting them, and only share the data required for the service to function. As an organization with an ideological commitment to self-hosting nearly everything, the number of such providers is and will be very small. Analytics The FSF uses Piwik, a free software Web analytics system, to monitor traffic on our Web sites. Piwik records the general geographical vicinity of visitors as well as their browser and operating system, and records their navigation within the sites. This helps us gauge the impact of our materials and improve our work. Piwik preserves privacy by anonymizing visitors IP addresses. This means that it will not store any personally identifiable information about you, even though your visit produces a record that our site was visited by someone. Piwik also respects the 'Do Not Track' preference offered by some browsers, so if you have this option set, Piwik will ignore your visit. If you're not using \"Do Not Track\" and/or you would rather that we don't record your visits with Piwik, you can opt out of tracking on www.fsf.org (but not other domains) by unchecking the box below. If you choose to opt out, the system will set a \"piwik_ignore\" cookie for this domain, which indicates to Piwik that it should completely ignore your computer. \xA0 Information You Make Public The FSF maintains services such as wikis, email discussion lists, forums, and software distribution Web sites where users may submit information to be published publicly. You are creating a permanent, public record of information added, removed, and/or altered by you, including information which may identify you. For example, emails to public discussion lists are publicly available in their entirety, including your email address. Please think carefully about your desired level of anonymity before you disclose personal information. Customer Information All information related to financial transactions and member logins is handled through a secure connection. The FSF does not store complete credit card numbers on our servers. We retain only the last 4 digits of the card. Sales Contact information is requested at the time of a sale in order to complete the sale and deliver the products.\xA0 It is also used to verify the credit card transaction when a credit card is used. Customer lists are not sold or distributed to third parties.\xA0 The Free Software Foundation uses these customer lists to send occasional solicitations and its biannual newsletter. Customers can opt out of all contact or specify only print or email contact by emailing\xA0privacy@fsf.org Donations Contact information is requested at the time of a donation. This information is used to verify the initial credit card transaction. Donor lists are not sold or distributed to third parties. The Free Software Foundation uses these donor lists to send occasional solicitations and its biannual newsletter. Donors can opt out of all contact or specify only print or email contact by emailing\xA0privacy@fsf.org. Donor names are posted on our\xA0Thank Gnus\xA0page as a recognition of their support. At the time of the donation, the donor can ask to be anonymous, so that their name will not be publicly recognized. Membership Contact information is requested at the time of a membership sign-up. This information is used to verify the initial credit card transaction and future transactions if the member signs up for monthly deductions. Member lists are not sold or distributed to third parties. The Free Software Foundation uses this member list to send a membership packet, occasional solicitations, and its biannual newsletter. Members can opt out of receiving the newsletter when they sign up. Members can opt out of all contact or specify only print or email contact by emailing\xA0privacy@fsf.org User Registration The Free Software Foundation uses registration lists to send news updates, occasional solicitations and its biannual newsletter. You can be removed by writing to\xA0privacy@fsf.org. General Data Protection Regulation The FSF has the right to process personal data of EU residents (i) due to their provided consent to FSF; or (ii) in order to conclude an agreement with them and to fulfill it. The legal basis for the processing of personal data is Article 6 (1) (a)-(b) of the General Data Protection Regulation. EU residents under the age of 16 should not submit their personal data for subscribing to our email solicitations and we will delete any such data if we become aware of it. The personal data recipients may be data processors who provide ancillary services to the FSF. The FSF will store personal data during the term of the agreement and during the limitation period as defined by applicable law or until the consent for direct marketing is revoked. The FSF undertakes to handle personal data in compliance with the applicable data protection law, to ensure the security of the data processed, and to implement the appropriate technical and organizational measures for the protection of personal data against unlawful destruction, accidental change, disclosure and any unlawful handling. The data subjects are entitled to (i) request that the FSF allows them to access and correct personal data submitted by them to the FSF; (ii) request that the FSF erase or limit the processing of personal data submitted by them and disagree with the processing of data if such requests are compatible with the performance of the agreement and applicable law; (iii) data portability; (iv) submit a complaint regarding the processing of personal data to the competent EU data protection authority. You have the right to contact the FSF for all matters relating to the processing of your personal data by email to\xA0privacy@fsf.org.")));
      }
    }]);
    return PrivacyPolicyScreen;
  }(_BaseScreen2.default);

  var _default = PrivacyPolicyScreen;
  exports.default = _default;
},919,[1,19,20,27,30,33,46,2,469]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _BaseScreen2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _alerts = _$$_REQUIRE(_dependencyMap[9]);

  var VersionScreen = function (_BaseScreen) {
    (0, _inherits2.default)(VersionScreen, _BaseScreen);

    function VersionScreen() {
      (0, _classCallCheck2.default)(this, VersionScreen);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(VersionScreen).apply(this, arguments));
    }

    (0, _createClass2.default)(VersionScreen, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            alignItems: 'center'
          }
        }, _react.default.createElement(_reactNative.Text, null, "  Version 0.4.0  "));
      }
    }]);
    return VersionScreen;
  }(_BaseScreen2.default);

  var _default = VersionScreen;
  exports.default = _default;
},920,[1,19,20,27,30,33,46,2,469,857]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _glyph = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var getGlyph = _reactNative.Platform.select({
    ios: function ios(_android, _ios2, name) {
      return (0, _glyph.default)([_ios2, name], 'ios');
    },
    default: function _default(android, _ios, name) {
      return (0, _glyph.default)([android, name], 'md');
    }
  });

  var Icon = function (_React$PureComponent) {
    (0, _inherits2.default)(Icon, _React$PureComponent);

    function Icon(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Icon);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Icon).call(this, props));

      _this._setRef = function (ref) {
        _this._text = ref;
      };

      return _this;
    }

    (0, _createClass2.default)(Icon, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._text) {
          this._text.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            name = _this$props.name,
            android = _this$props.android,
            ios = _this$props.ios,
            size = _this$props.size,
            color = _this$props.color,
            style = _this$props.style,
            children = _this$props.children,
            textProps = (0, _objectWithoutProperties2.default)(_this$props, ["name", "android", "ios", "size", "color", "style", "children"]);
        var fontStyle = {
          fontSize: size,
          color: color
        };
        return React.createElement(_reactNative.Text, (0, _extends2.default)({}, textProps, {
          style: [styles.default, fontStyle, style],
          ref: this._setRef
        }), getGlyph(android, ios, name), children);
      }
    }]);
    return Icon;
  }(React.PureComponent);

  Icon.defaultProps = {
    allowFontScaling: false,
    size: 30
  };
  var _default2 = Icon;
  exports.default = _default2;

  var styles = _reactNative.StyleSheet.create({
    default: {
      fontFamily: 'Ionicons',
      fontWeight: 'normal',
      fontStyle: 'normal'
    }
  });
},921,[361,1,8,6,19,20,27,30,33,46,2,922]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _map = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _default(iconNames, prefix) {
    var code = iconNames.reduce(function (prev, name) {
      return prev || _map.default[name in _map.default ? name : prefix + "-" + name];
    }, undefined);
    return code ? String.fromCharCode(code) : '';
  }
},922,[1,923]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "ios-add": 61698,
  "ios-add-circle": 61697,
  "ios-add-circle-outline": 61696,
  "ios-airplane": 61751,
  "ios-alarm": 62408,
  "ios-albums": 62410,
  "ios-alert": 61700,
  "ios-american-football": 61702,
  "ios-analytics": 62414,
  "ios-aperture": 61704,
  "ios-apps": 61706,
  "ios-appstore": 61708,
  "ios-archive": 61710,
  "ios-arrow-back": 62415,
  "ios-arrow-down": 62416,
  "ios-arrow-dropdown": 61712,
  "ios-arrow-dropdown-circle": 61733,
  "ios-arrow-dropleft": 61714,
  "ios-arrow-dropleft-circle": 61737,
  "ios-arrow-dropright": 61716,
  "ios-arrow-dropright-circle": 61739,
  "ios-arrow-dropup": 61718,
  "ios-arrow-dropup-circle": 61741,
  "ios-arrow-forward": 62417,
  "ios-arrow-round-back": 61719,
  "ios-arrow-round-down": 61720,
  "ios-arrow-round-forward": 61721,
  "ios-arrow-round-up": 61722,
  "ios-arrow-up": 62424,
  "ios-at": 62426,
  "ios-attach": 61723,
  "ios-backspace": 61725,
  "ios-barcode": 62428,
  "ios-baseball": 62430,
  "ios-basket": 61727,
  "ios-basketball": 62432,
  "ios-battery-charging": 61728,
  "ios-battery-dead": 61729,
  "ios-battery-full": 61730,
  "ios-beaker": 61732,
  "ios-bed": 61753,
  "ios-beer": 61734,
  "ios-bicycle": 61735,
  "ios-bluetooth": 61736,
  "ios-boat": 61738,
  "ios-body": 62436,
  "ios-bonfire": 61740,
  "ios-book": 62440,
  "ios-bookmark": 61742,
  "ios-bookmarks": 62442,
  "ios-bowtie": 61744,
  "ios-briefcase": 62446,
  "ios-browsers": 62448,
  "ios-brush": 61746,
  "ios-bug": 61748,
  "ios-build": 61750,
  "ios-bulb": 61752,
  "ios-bus": 61754,
  "ios-business": 61859,
  "ios-cafe": 61756,
  "ios-calculator": 62450,
  "ios-calendar": 62452,
  "ios-call": 61758,
  "ios-camera": 62454,
  "ios-car": 61760,
  "ios-card": 61762,
  "ios-cart": 62456,
  "ios-cash": 61764,
  "ios-cellular": 61757,
  "ios-chatboxes": 62458,
  "ios-chatbubbles": 61766,
  "ios-checkbox": 61768,
  "ios-checkbox-outline": 61767,
  "ios-checkmark": 62463,
  "ios-checkmark-circle": 61770,
  "ios-checkmark-circle-outline": 61769,
  "ios-clipboard": 61772,
  "ios-clock": 62467,
  "ios-close": 62470,
  "ios-close-circle": 61774,
  "ios-close-circle-outline": 61773,
  "ios-cloud": 62476,
  "ios-cloud-circle": 61778,
  "ios-cloud-done": 61780,
  "ios-cloud-download": 62472,
  "ios-cloud-outline": 62473,
  "ios-cloud-upload": 62475,
  "ios-cloudy": 62480,
  "ios-cloudy-night": 62478,
  "ios-code": 61783,
  "ios-code-download": 61781,
  "ios-code-working": 61782,
  "ios-cog": 62482,
  "ios-color-fill": 61785,
  "ios-color-filter": 62484,
  "ios-color-palette": 61787,
  "ios-color-wand": 62486,
  "ios-compass": 61789,
  "ios-construct": 61791,
  "ios-contact": 62490,
  "ios-contacts": 61793,
  "ios-contract": 61794,
  "ios-contrast": 61795,
  "ios-copy": 62492,
  "ios-create": 61797,
  "ios-crop": 62494,
  "ios-cube": 61800,
  "ios-cut": 61802,
  "ios-desktop": 61804,
  "ios-disc": 61806,
  "ios-document": 61808,
  "ios-done-all": 61809,
  "ios-download": 62496,
  "ios-easel": 61811,
  "ios-egg": 61813,
  "ios-exit": 61815,
  "ios-expand": 61816,
  "ios-eye": 62501,
  "ios-eye-off": 61818,
  "ios-fastforward": 62503,
  "ios-female": 61819,
  "ios-filing": 62505,
  "ios-film": 62507,
  "ios-finger-print": 61820,
  "ios-fitness": 61867,
  "ios-flag": 62509,
  "ios-flame": 62511,
  "ios-flash": 61822,
  "ios-flash-off": 61743,
  "ios-flashlight": 61761,
  "ios-flask": 62513,
  "ios-flower": 62515,
  "ios-folder": 62517,
  "ios-folder-open": 61824,
  "ios-football": 62519,
  "ios-funnel": 61826,
  "ios-gift": 61841,
  "ios-git-branch": 61827,
  "ios-git-commit": 61828,
  "ios-git-compare": 61829,
  "ios-git-merge": 61830,
  "ios-git-network": 61831,
  "ios-git-pull-request": 61832,
  "ios-glasses": 62527,
  "ios-globe": 61834,
  "ios-grid": 61836,
  "ios-hammer": 61838,
  "ios-hand": 61840,
  "ios-happy": 61842,
  "ios-headset": 61844,
  "ios-heart": 62531,
  "ios-heart-dislike": 61759,
  "ios-heart-empty": 61851,
  "ios-heart-half": 61853,
  "ios-help": 62534,
  "ios-help-buoy": 61846,
  "ios-help-circle": 61848,
  "ios-help-circle-outline": 61847,
  "ios-home": 62536,
  "ios-hourglass": 61699,
  "ios-ice-cream": 61850,
  "ios-image": 61852,
  "ios-images": 61854,
  "ios-infinite": 62538,
  "ios-information": 62541,
  "ios-information-circle": 61856,
  "ios-information-circle-outline": 61855,
  "ios-jet": 61861,
  "ios-journal": 61833,
  "ios-key": 61863,
  "ios-keypad": 62544,
  "ios-laptop": 61864,
  "ios-leaf": 61866,
  "ios-link": 61994,
  "ios-list": 62548,
  "ios-list-box": 61763,
  "ios-locate": 61870,
  "ios-lock": 61872,
  "ios-log-in": 61873,
  "ios-log-out": 61874,
  "ios-magnet": 61876,
  "ios-mail": 61880,
  "ios-mail-open": 61878,
  "ios-mail-unread": 61765,
  "ios-male": 61881,
  "ios-man": 61883,
  "ios-map": 61885,
  "ios-medal": 61887,
  "ios-medical": 62556,
  "ios-medkit": 62558,
  "ios-megaphone": 61889,
  "ios-menu": 61891,
  "ios-mic": 62561,
  "ios-mic-off": 62559,
  "ios-microphone": 61894,
  "ios-moon": 62568,
  "ios-more": 61896,
  "ios-move": 61899,
  "ios-musical-note": 62571,
  "ios-musical-notes": 62572,
  "ios-navigate": 62574,
  "ios-notifications": 61907,
  "ios-notifications-off": 61905,
  "ios-notifications-outline": 61747,
  "ios-nuclear": 61909,
  "ios-nutrition": 62576,
  "ios-open": 61911,
  "ios-options": 61913,
  "ios-outlet": 61915,
  "ios-paper": 62578,
  "ios-paper-plane": 61917,
  "ios-partly-sunny": 61919,
  "ios-pause": 62584,
  "ios-paw": 62586,
  "ios-people": 62588,
  "ios-person": 62590,
  "ios-person-add": 61921,
  "ios-phone-landscape": 61922,
  "ios-phone-portrait": 61923,
  "ios-photos": 62594,
  "ios-pie": 62596,
  "ios-pin": 61925,
  "ios-pint": 62598,
  "ios-pizza": 61927,
  "ios-planet": 61931,
  "ios-play": 62600,
  "ios-play-circle": 61715,
  "ios-podium": 61933,
  "ios-power": 61935,
  "ios-pricetag": 62605,
  "ios-pricetags": 62607,
  "ios-print": 61937,
  "ios-pulse": 62611,
  "ios-qr-scanner": 61939,
  "ios-quote": 61941,
  "ios-radio": 61945,
  "ios-radio-button-off": 61942,
  "ios-radio-button-on": 61943,
  "ios-rainy": 62613,
  "ios-recording": 62615,
  "ios-redo": 62617,
  "ios-refresh": 62620,
  "ios-refresh-circle": 61749,
  "ios-remove": 61948,
  "ios-remove-circle": 61947,
  "ios-remove-circle-outline": 61946,
  "ios-reorder": 61949,
  "ios-repeat": 61950,
  "ios-resize": 61951,
  "ios-restaurant": 61953,
  "ios-return-left": 61954,
  "ios-return-right": 61955,
  "ios-reverse-camera": 62623,
  "ios-rewind": 62625,
  "ios-ribbon": 61957,
  "ios-rocket": 61771,
  "ios-rose": 62627,
  "ios-sad": 61959,
  "ios-save": 61862,
  "ios-school": 61961,
  "ios-search": 62629,
  "ios-send": 61964,
  "ios-settings": 62631,
  "ios-share": 61969,
  "ios-share-alt": 61967,
  "ios-shirt": 61971,
  "ios-shuffle": 62633,
  "ios-skip-backward": 61973,
  "ios-skip-forward": 61975,
  "ios-snow": 61976,
  "ios-speedometer": 62640,
  "ios-square": 61978,
  "ios-square-outline": 61788,
  "ios-star": 62643,
  "ios-star-half": 62641,
  "ios-star-outline": 62642,
  "ios-stats": 61980,
  "ios-stopwatch": 62645,
  "ios-subway": 61982,
  "ios-sunny": 62647,
  "ios-swap": 61983,
  "ios-switch": 61985,
  "ios-sync": 61986,
  "ios-tablet-landscape": 61987,
  "ios-tablet-portrait": 62030,
  "ios-tennisball": 62651,
  "ios-text": 62032,
  "ios-thermometer": 62034,
  "ios-thumbs-down": 62036,
  "ios-thumbs-up": 62038,
  "ios-thunderstorm": 62653,
  "ios-time": 62655,
  "ios-timer": 62657,
  "ios-today": 61775,
  "ios-train": 62040,
  "ios-transgender": 62041,
  "ios-trash": 62661,
  "ios-trending-down": 62042,
  "ios-trending-up": 62043,
  "ios-trophy": 62045,
  "ios-tv": 61717,
  "ios-umbrella": 62047,
  "ios-undo": 62663,
  "ios-unlock": 62049,
  "ios-videocam": 62669,
  "ios-volume-high": 61724,
  "ios-volume-low": 61726,
  "ios-volume-mute": 62051,
  "ios-volume-off": 62052,
  "ios-walk": 62054,
  "ios-wallet": 61835,
  "ios-warning": 62056,
  "ios-watch": 62057,
  "ios-water": 62059,
  "ios-wifi": 62061,
  "ios-wine": 62063,
  "ios-woman": 62065,
  "logo-android": 61989,
  "logo-angular": 61991,
  "logo-apple": 61993,
  "logo-bitbucket": 61843,
  "logo-bitcoin": 61995,
  "logo-buffer": 61997,
  "logo-chrome": 61999,
  "logo-closed-captioning": 61701,
  "logo-codepen": 62000,
  "logo-css3": 62001,
  "logo-designernews": 62002,
  "logo-dribbble": 62003,
  "logo-dropbox": 62004,
  "logo-euro": 62005,
  "logo-facebook": 62006,
  "logo-flickr": 61703,
  "logo-foursquare": 62007,
  "logo-freebsd-devil": 62008,
  "logo-game-controller-a": 61755,
  "logo-game-controller-b": 61825,
  "logo-github": 62009,
  "logo-google": 62010,
  "logo-googleplus": 62011,
  "logo-hackernews": 62012,
  "logo-html5": 62013,
  "logo-instagram": 62014,
  "logo-ionic": 61776,
  "logo-ionitron": 61777,
  "logo-javascript": 62015,
  "logo-linkedin": 62016,
  "logo-markdown": 62017,
  "logo-model-s": 61779,
  "logo-no-smoking": 61705,
  "logo-nodejs": 62018,
  "logo-npm": 61845,
  "logo-octocat": 62019,
  "logo-pinterest": 62020,
  "logo-playstation": 62021,
  "logo-polymer": 61790,
  "logo-python": 62022,
  "logo-reddit": 62023,
  "logo-rss": 62024,
  "logo-sass": 62025,
  "logo-skype": 62026,
  "logo-slack": 61707,
  "logo-snapchat": 62027,
  "logo-steam": 62028,
  "logo-tumblr": 62029,
  "logo-tux": 62126,
  "logo-twitch": 62127,
  "logo-twitter": 62128,
  "logo-usd": 62129,
  "logo-vimeo": 62148,
  "logo-vk": 61709,
  "logo-whatsapp": 62149,
  "logo-windows": 62255,
  "logo-wordpress": 62256,
  "logo-xbox": 62284,
  "logo-xing": 61711,
  "logo-yahoo": 62285,
  "logo-yen": 62286,
  "logo-youtube": 62287,
  "md-add": 62067,
  "md-add-circle": 62066,
  "md-add-circle-outline": 61784,
  "md-airplane": 61786,
  "md-alarm": 62068,
  "md-albums": 62069,
  "md-alert": 62070,
  "md-american-football": 62071,
  "md-analytics": 62072,
  "md-aperture": 62073,
  "md-apps": 62074,
  "md-appstore": 62075,
  "md-archive": 62076,
  "md-arrow-back": 62077,
  "md-arrow-down": 62078,
  "md-arrow-dropdown": 62080,
  "md-arrow-dropdown-circle": 62079,
  "md-arrow-dropleft": 62082,
  "md-arrow-dropleft-circle": 62081,
  "md-arrow-dropright": 62084,
  "md-arrow-dropright-circle": 62083,
  "md-arrow-dropup": 62086,
  "md-arrow-dropup-circle": 62085,
  "md-arrow-forward": 62087,
  "md-arrow-round-back": 62088,
  "md-arrow-round-down": 62089,
  "md-arrow-round-forward": 62090,
  "md-arrow-round-up": 62091,
  "md-arrow-up": 62092,
  "md-at": 62093,
  "md-attach": 62094,
  "md-backspace": 62095,
  "md-barcode": 62096,
  "md-baseball": 62097,
  "md-basket": 62098,
  "md-basketball": 62099,
  "md-battery-charging": 62100,
  "md-battery-dead": 62101,
  "md-battery-full": 62102,
  "md-beaker": 62103,
  "md-bed": 61792,
  "md-beer": 62104,
  "md-bicycle": 62105,
  "md-bluetooth": 62106,
  "md-boat": 62107,
  "md-body": 62108,
  "md-bonfire": 62109,
  "md-book": 62110,
  "md-bookmark": 62111,
  "md-bookmarks": 62112,
  "md-bowtie": 62113,
  "md-briefcase": 62114,
  "md-browsers": 62115,
  "md-brush": 62116,
  "md-bug": 62117,
  "md-build": 62118,
  "md-bulb": 62119,
  "md-bus": 62120,
  "md-business": 61860,
  "md-cafe": 62121,
  "md-calculator": 62122,
  "md-calendar": 62123,
  "md-call": 62124,
  "md-camera": 62125,
  "md-car": 62130,
  "md-card": 62131,
  "md-cart": 62132,
  "md-cash": 62133,
  "md-cellular": 61796,
  "md-chatboxes": 62134,
  "md-chatbubbles": 62135,
  "md-checkbox": 62137,
  "md-checkbox-outline": 62136,
  "md-checkmark": 62140,
  "md-checkmark-circle": 62139,
  "md-checkmark-circle-outline": 62138,
  "md-clipboard": 62141,
  "md-clock": 62142,
  "md-close": 62144,
  "md-close-circle": 62143,
  "md-close-circle-outline": 61798,
  "md-cloud": 62153,
  "md-cloud-circle": 62146,
  "md-cloud-done": 62147,
  "md-cloud-download": 62150,
  "md-cloud-outline": 62151,
  "md-cloud-upload": 62152,
  "md-cloudy": 62155,
  "md-cloudy-night": 62154,
  "md-code": 62158,
  "md-code-download": 62156,
  "md-code-working": 62157,
  "md-cog": 62159,
  "md-color-fill": 62160,
  "md-color-filter": 62161,
  "md-color-palette": 62162,
  "md-color-wand": 62163,
  "md-compass": 62164,
  "md-construct": 62165,
  "md-contact": 62166,
  "md-contacts": 62167,
  "md-contract": 62168,
  "md-contrast": 62169,
  "md-copy": 62170,
  "md-create": 62171,
  "md-crop": 62172,
  "md-cube": 62173,
  "md-cut": 62174,
  "md-desktop": 62175,
  "md-disc": 62176,
  "md-document": 62177,
  "md-done-all": 62178,
  "md-download": 62179,
  "md-easel": 62180,
  "md-egg": 62181,
  "md-exit": 62182,
  "md-expand": 62183,
  "md-eye": 62185,
  "md-eye-off": 62184,
  "md-fastforward": 62186,
  "md-female": 62187,
  "md-filing": 62188,
  "md-film": 62189,
  "md-finger-print": 62190,
  "md-fitness": 61868,
  "md-flag": 62191,
  "md-flame": 62192,
  "md-flash": 62193,
  "md-flash-off": 61801,
  "md-flashlight": 61803,
  "md-flask": 62194,
  "md-flower": 62195,
  "md-folder": 62197,
  "md-folder-open": 62196,
  "md-football": 62198,
  "md-funnel": 62199,
  "md-gift": 61849,
  "md-git-branch": 62202,
  "md-git-commit": 62203,
  "md-git-compare": 62204,
  "md-git-merge": 62205,
  "md-git-network": 62206,
  "md-git-pull-request": 62207,
  "md-glasses": 62208,
  "md-globe": 62209,
  "md-grid": 62210,
  "md-hammer": 62211,
  "md-hand": 62212,
  "md-happy": 62213,
  "md-headset": 62214,
  "md-heart": 62216,
  "md-heart-dislike": 61799,
  "md-heart-empty": 61857,
  "md-heart-half": 61858,
  "md-help": 62219,
  "md-help-buoy": 62217,
  "md-help-circle": 62218,
  "md-help-circle-outline": 61805,
  "md-home": 62220,
  "md-hourglass": 61713,
  "md-ice-cream": 62221,
  "md-image": 62222,
  "md-images": 62223,
  "md-infinite": 62224,
  "md-information": 62226,
  "md-information-circle": 62225,
  "md-information-circle-outline": 61807,
  "md-jet": 62229,
  "md-journal": 61837,
  "md-key": 62230,
  "md-keypad": 62231,
  "md-laptop": 62232,
  "md-leaf": 62233,
  "md-link": 61998,
  "md-list": 62235,
  "md-list-box": 62234,
  "md-locate": 62236,
  "md-lock": 62237,
  "md-log-in": 62238,
  "md-log-out": 62239,
  "md-magnet": 62240,
  "md-mail": 62242,
  "md-mail-open": 62241,
  "md-mail-unread": 61810,
  "md-male": 62243,
  "md-man": 62244,
  "md-map": 62245,
  "md-medal": 62246,
  "md-medical": 62247,
  "md-medkit": 62248,
  "md-megaphone": 62249,
  "md-menu": 62250,
  "md-mic": 62252,
  "md-mic-off": 62251,
  "md-microphone": 62253,
  "md-moon": 62254,
  "md-more": 61897,
  "md-move": 62257,
  "md-musical-note": 62258,
  "md-musical-notes": 62259,
  "md-navigate": 62260,
  "md-notifications": 62264,
  "md-notifications-off": 62262,
  "md-notifications-outline": 62263,
  "md-nuclear": 62265,
  "md-nutrition": 62266,
  "md-open": 62267,
  "md-options": 62268,
  "md-outlet": 62269,
  "md-paper": 62271,
  "md-paper-plane": 62270,
  "md-partly-sunny": 62272,
  "md-pause": 62273,
  "md-paw": 62274,
  "md-people": 62275,
  "md-person": 62277,
  "md-person-add": 62276,
  "md-phone-landscape": 62278,
  "md-phone-portrait": 62279,
  "md-photos": 62280,
  "md-pie": 62281,
  "md-pin": 62282,
  "md-pint": 62283,
  "md-pizza": 62292,
  "md-planet": 62294,
  "md-play": 62295,
  "md-play-circle": 61812,
  "md-podium": 62296,
  "md-power": 62297,
  "md-pricetag": 62298,
  "md-pricetags": 62299,
  "md-print": 62300,
  "md-pulse": 62301,
  "md-qr-scanner": 62302,
  "md-quote": 62303,
  "md-radio": 62306,
  "md-radio-button-off": 62304,
  "md-radio-button-on": 62305,
  "md-rainy": 62307,
  "md-recording": 62308,
  "md-redo": 62309,
  "md-refresh": 62310,
  "md-refresh-circle": 61992,
  "md-remove": 62312,
  "md-remove-circle": 62311,
  "md-remove-circle-outline": 61814,
  "md-reorder": 62313,
  "md-repeat": 62314,
  "md-resize": 62315,
  "md-restaurant": 62316,
  "md-return-left": 62317,
  "md-return-right": 62318,
  "md-reverse-camera": 62319,
  "md-rewind": 62320,
  "md-ribbon": 62321,
  "md-rocket": 61817,
  "md-rose": 62322,
  "md-sad": 62323,
  "md-save": 61865,
  "md-school": 62324,
  "md-search": 62325,
  "md-send": 62326,
  "md-settings": 62327,
  "md-share": 62329,
  "md-share-alt": 62328,
  "md-shirt": 62330,
  "md-shuffle": 62331,
  "md-skip-backward": 62332,
  "md-skip-forward": 62333,
  "md-snow": 62334,
  "md-speedometer": 62335,
  "md-square": 62337,
  "md-square-outline": 62336,
  "md-star": 62340,
  "md-star-half": 62338,
  "md-star-outline": 62339,
  "md-stats": 62341,
  "md-stopwatch": 62342,
  "md-subway": 62343,
  "md-sunny": 62344,
  "md-swap": 62345,
  "md-switch": 62346,
  "md-sync": 62347,
  "md-tablet-landscape": 62348,
  "md-tablet-portrait": 62349,
  "md-tennisball": 62350,
  "md-text": 62351,
  "md-thermometer": 62352,
  "md-thumbs-down": 62353,
  "md-thumbs-up": 62354,
  "md-thunderstorm": 62355,
  "md-time": 62356,
  "md-timer": 62357,
  "md-today": 61821,
  "md-train": 62358,
  "md-transgender": 62359,
  "md-trash": 62360,
  "md-trending-down": 62361,
  "md-trending-up": 62362,
  "md-trophy": 62363,
  "md-tv": 61823,
  "md-umbrella": 62364,
  "md-undo": 62365,
  "md-unlock": 62366,
  "md-videocam": 62367,
  "md-volume-high": 61731,
  "md-volume-low": 61745,
  "md-volume-mute": 62369,
  "md-volume-off": 62370,
  "md-walk": 62372,
  "md-wallet": 61839,
  "md-warning": 62373,
  "md-watch": 62374,
  "md-water": 62375,
  "md-wifi": 62376,
  "md-wine": 62377,
  "md-woman": 62378
};
},923,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNativeBackgroundFetch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _notifications = _$$_REQUIRE(_dependencyMap[4]);

  var _requests = _$$_REQUIRE(_dependencyMap[5]);

  function initializeBackgroundFetch() {
    _reactNativeBackgroundFetch.default.configure({
      minimumFetchInterval: 60,
      forceReload: true,
      stopOnTerminate: false,
      startOnBoot: true
    }, function () {
      console.log('[js] Received background-fetch event');
      backgroundTask();
    }, function (error) {
      console.log('[js] RNBackgroundFetch failed to start');
      console.log(error);
    });
  }

  function backgroundTask() {
    (0, _requests.getRequest)('/messages', function (newMessages) {
      processMessages(newMessages);
    }, function (error) {
      console.log('Request for messages failed');
      console.log(error);

      _reactNativeBackgroundFetch.default.finish(_reactNativeBackgroundFetch.default.FETCH_RESULT_FAILED);
    });
  }

  function processMessages(newMessages) {
    var latestID, shouldNotify, newLatestID;
    return _regenerator.default.async(function processMessages$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('latestMessageID'));

          case 3:
            latestID = _context.sent;
            _context.next = 6;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem('notificationsOn'));

          case 6:
            shouldNotify = _context.sent;

            if (!(shouldNotify == null)) {
              _context.next = 11;
              break;
            }

            shouldNotify = true;
            _context.next = 11;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('notificationsOn', 'true'));

          case 11:
            if (latestID == null) {
              shouldNotify = false;
              latestID = '0';
            }

            latestID = JSON.parse(latestID);
            newLatestID = -1;
            newMessages.forEach(function (key) {
              var message = newMessages[key];
              newLatestID = newLatestID > message.id ? newLatestID : message.id;

              if (message.id > latestID) {
                if (shouldNotify) {
                  (0, _notifications.notify)(message.title, message.content, message.link, message.id);
                }
              }
            });
            _context.next = 17;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.setItem('latestMessageID', JSON.stringify(newLatestID)));

          case 17:
            _reactNativeBackgroundFetch.default.finish(_reactNativeBackgroundFetch.default.FETCH_RESULT_NEW_DATA);

            _context.next = 27;
            break;

          case 20:
            _context.prev = 20;
            _context.t0 = _context["catch"](0);
            console.log('Error saving Message Data.\nData:');
            console.log(newMessages);
            console.log('\n\nError:');
            console.log(_context.t0);

            _reactNativeBackgroundFetch.default.finish(_reactNativeBackgroundFetch.default.FETCH_RESULT_FAILED);

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[0, 20]]);
  }

  var _default = initializeBackgroundFetch;
  exports.default = _default;
},924,[1,129,925,2,916,912]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var RNBackgroundFetch = _reactNative.NativeModules.RNBackgroundFetch;
  var EventEmitter = new _reactNative.NativeEventEmitter(RNBackgroundFetch);
  var EVENT_FETCH = "fetch";
  var TAG = "RNBackgroundFetch";
  var EVENTS = ["fetch"];
  var STATUS_RESTRICTED = 0;
  var STATUS_DENIED = 1;
  var STATUS_AVAILABLE = 2;
  var FETCH_RESULT_NEW_DATA = 0;
  var FETCH_RESULT_NO_DATA = 1;
  var FETCH_RESULT_FAILED = 2;

  var BackgroundFetch = function () {
    function BackgroundFetch() {
      (0, _classCallCheck2.default)(this, BackgroundFetch);
    }

    (0, _createClass2.default)(BackgroundFetch, null, [{
      key: "configure",
      value: function configure(config, callback, failure) {
        if (typeof callback !== 'function') {
          throw "RNBackgroundFetch requires a fetch callback at 2nd argument";
        }

        EventEmitter.removeAllListeners('fetch');
        config = config || {};

        failure = failure || function () {};

        RNBackgroundFetch.configure(config, failure);
        return this.addListener(EVENT_FETCH, callback);
      }
    }, {
      key: "registerHeadlessTask",
      value: function registerHeadlessTask(task) {
        _reactNative.AppRegistry.registerHeadlessTask("BackgroundFetch", function () {
          return task;
        });
      }
    }, {
      key: "onFetch",
      value: function onFetch(callback) {
        this.addListener('fetch', callback);
      }
    }, {
      key: "on",
      value: function on(event, callback) {
        return this.addListener(event, callback);
      }
    }, {
      key: "addListener",
      value: function addListener(event, callback) {
        if (EVENTS.indexOf(event) < 0) {
          throw "RNBackgroundFetch: Unknown event '" + event + '"';
        }

        return EventEmitter.addListener(event, callback);
      }
    }, {
      key: "start",
      value: function start(success, failure) {
        success = success || function () {};

        failure = failure || function () {};

        RNBackgroundFetch.start(success, failure);
      }
    }, {
      key: "stop",
      value: function stop() {
        RNBackgroundFetch.stop();
      }
    }, {
      key: "finish",
      value: function finish(result) {
        var fetchResult = result ? result : FETCH_RESULT_NEW_DATA;
        RNBackgroundFetch.finish(fetchResult);
      }
    }, {
      key: "status",
      value: function status(callback) {
        if (typeof callback !== 'function') {
          throw "RNBackgroundFetch#status requires a callback as 1st argument";
        }

        RNBackgroundFetch.status(callback);
      }
    }, {
      key: "STATUS_RESTRICTED",
      get: function get() {
        return STATUS_RESTRICTED;
      }
    }, {
      key: "STATUS_DENIED",
      get: function get() {
        return STATUS_DENIED;
      }
    }, {
      key: "STATUS_AVAILABLE",
      get: function get() {
        return STATUS_AVAILABLE;
      }
    }, {
      key: "FETCH_RESULT_NEW_DATA",
      get: function get() {
        return FETCH_RESULT_NEW_DATA;
      }
    }, {
      key: "FETCH_RESULT_NO_DATA",
      get: function get() {
        return FETCH_RESULT_NO_DATA;
      }
    }, {
      key: "FETCH_RESULT_FAILED",
      get: function get() {
        return FETCH_RESULT_FAILED;
      }
    }]);
    return BackgroundFetch;
  }();

  exports.default = BackgroundFetch;
},925,[1,19,20,2]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "name": "FSF",
  "displayName": "FSF"
}
;
},926,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = widgetTask;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  function widgetTask(taskData) {
    return _regenerator.default.async(function widgetTask$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
          case "end":
            return _context.stop();
        }
      }
    });
  }
},927,[1,129,2]);
__r(79);
__r(0);